"""
An account
"""
scalar Account

"""
A unique identifier for a user or an application.
"""
scalar AccountOwner

"""
A non-negative amount of tokens.
"""
scalar Amount

"""
Description of a user application
"""
scalar ApplicationDescription

"""
A unique identifier for a user application
"""
scalar ApplicationId

type ApplicationOverview {
	id: ApplicationId!
	description: ApplicationDescription!
	link: String!
}

"""
Permissions for applications on a chain.
"""
input ApplicationPermissions {
	"""
	If this is `None`, all system operations and application operations are allowed.
	If it is `Some`, only operations from the specified applications are allowed, and
	no system operations.
	"""
	executeOperations: [ApplicationId!]
	"""
	At least one operation or incoming message from each of these applications must occur in
	every block.
	"""
	mandatoryApplications: [ApplicationId!]! = []
	"""
	These applications are allowed to close the current chain using the system API.
	"""
	closeChain: [ApplicationId!]! = []
	"""
	These applications are allowed to change the application permissions using the system API.
	"""
	changeApplicationPermissions: [ApplicationId!]! = []
	"""
	These applications are allowed to perform calls to services as oracles.
	"""
	callServiceAsOracle: [ApplicationId!] = null
	"""
	These applications are allowed to perform HTTP requests.
	"""
	makeHttpRequests: [ApplicationId!] = null
}

"""
A blob of binary data, with its content-addressed blob ID.
"""
scalar Blob

"""
A content-addressed blob ID i.e. the hash of the `BlobContent`
"""
scalar BlobId

"""
Block defines the atomic unit of growth of the Linera chain.

As part of the block body, contains all the incoming messages
and operations to execute which define a state transition of the chain.
Resulting messages produced by the operations are also included in the block body,
together with oracle responses and events.
"""
type Block {
	"""
	Header of the block containing metadata of the block.
	"""
	header: BlockHeader!
	"""
	Body of the block containing all of the data.
	"""
	body: BlockBody!
}

"""
The body of a block containing all the data included in the block.
"""
type BlockBody {
	"""
	A selection of incoming messages to be executed first. Successive messages of the same
	sender and height are grouped together for conciseness.
	"""
	incomingBundles: [IncomingBundle!]!
	"""
	The operations to execute.
	"""
	operations: [Operation!]!
	"""
	The list of outgoing messages for each transaction.
	"""
	messages: [[OutgoingMessage!]!]!
	"""
	The hashes of previous blocks that sent messages to the same recipients.
	"""
	previousMessageBlocks: JSONObject!
	"""
	The record of oracle responses for each transaction.
	"""
	oracleResponses: [[OracleResponse!]!]!
	"""
	The list of events produced by each transaction.
	"""
	events: [[Event!]!]!
	"""
	The list of blobs produced by each transaction.
	"""
	blobs: [[Blob!]!]!
	"""
	The execution result for each operation.
	"""
	operationResults: [OperationResult!]!
}

"""
Succinct representation of a block.
Contains all the metadata to follow the chain of blocks or verifying
inclusion (event, message, oracle response, etc.) in the block's body.
"""
type BlockHeader {
	"""
	The chain to which this block belongs.
	"""
	chainId: ChainId!
	"""
	The number identifying the current configuration.
	"""
	epoch: Epoch!
	"""
	The block height.
	"""
	height: BlockHeight!
	"""
	The timestamp when this block was created.
	"""
	timestamp: Timestamp!
	"""
	The hash of the chain's execution state after this block.
	"""
	stateHash: CryptoHash!
	"""
	Certified hash of the previous block in the chain, if any.
	"""
	previousBlockHash: CryptoHash
	"""
	The user signing for the operations in the block and paying for their execution
	fees. If set, this must be the `owner` in the block proposal. `None` means that
	the default account of the chain is used. This value is also used as recipient of
	potential refunds for the message grants created by the operations.
	"""
	authenticatedSigner: AccountOwner
	"""
	Cryptographic hash of all the incoming bundles in the block.
	"""
	bundlesHash: CryptoHash!
	"""
	Cryptographic hash of all the operations in the block.
	"""
	operationsHash: CryptoHash!
	"""
	Cryptographic hash of all the messages in the block.
	"""
	messagesHash: CryptoHash!
	"""
	Cryptographic hash of the lookup table for previous sending blocks.
	"""
	previousMessageBlocksHash: CryptoHash!
	"""
	Cryptographic hash of all the oracle responses in the block.
	"""
	oracleResponsesHash: CryptoHash!
	"""
	Cryptographic hash of all the events in the block.
	"""
	eventsHash: CryptoHash!
	"""
	Cryptographic hash of all the created blobs in the block.
	"""
	blobsHash: CryptoHash!
	"""
	A cryptographic hash of the execution results of all operations in a block.
	"""
	operationResultsHash: CryptoHash!
}

"""
A block height to identify blocks in a chain
"""
scalar BlockHeight


type BucketQueueView_BlockHeight_e824a938 {
	entries(count: Int): [BlockHeight!]!
}

type BucketQueueView_TimestampedBundleInInbox_5a630c55 {
	entries(count: Int): [TimestampedBundleInInbox!]!
}

"""
An origin and cursor of a unskippable bundle that is no longer in our inbox.
"""
type BundleInInbox {
	"""
	The origin from which we received the bundle.
	"""
	origin: ChainId!
	"""
	The cursor of the bundle in the inbox.
	"""
	cursor: Cursor!
}

"""
A WebAssembly module's bytecode
"""
scalar Bytecode

"""
A chain ID with a block height.
"""
type ChainAndHeight {
	chainId: ChainId!
	height: BlockHeight!
}

"""
Initial chain configuration and chain origin.
"""
scalar ChainDescription

"""
The unique identifier (UID) of a chain. This is currently computed as the hash value of a ChainDescription.
"""
scalar ChainId

"""
The state of the certification process for a chain's next block.
"""
type ChainManager {
	"""
	The public keys, weights and types of the chain's owners.
	"""
	ownership: ChainOwnership!
	"""
	The seed for the pseudo-random number generator that determines the round leaders.
	"""
	seed: Int!
	"""
	These are blobs published or read by the proposed block.
	"""
	proposedBlobs: MapView_BlobId_Blob_3711e760!
	"""
	These are blobs published or read by the locking block.
	"""
	lockingBlobs: MapView_BlobId_Blob_3711e760!
	"""
	The time after which we are ready to sign a timeout certificate for the current round.
	"""
	roundTimeout: Timestamp
	"""
	The owners that take over in fallback mode.
	"""
	fallbackOwners: JSONObject!
	"""
	Returns the lowest round where we can still vote to validate or confirm a block. This is
	the round to which the timeout applies.
	
	Having a leader timeout certificate in any given round causes the next one to become
	current. Seeing a validated block certificate or a valid proposal in any round causes that
	round to become current, unless a higher one already is.
	"""
	currentRound: Round!
}

"""
Represents the owner(s) of a chain
"""
scalar ChainOwnership

type ChainStateExtendedView {
	chainId: ChainId!
	"""
	Execution state, including system and user applications.
	"""
	executionState: ExecutionStateView!
	"""
	Hash of the execution state.
	"""
	executionStateHash: CryptoHash
	"""
	Block-chaining state.
	"""
	tipState: ChainTipState!
	"""
	Consensus state.
	"""
	manager: ChainManager!
	"""
	Pending validated block that is still missing blobs.
	The incomplete set of blobs for the pending validated block.
	"""
	pendingValidatedBlobs: PendingBlobsView!
	"""
	The incomplete sets of blobs for upcoming proposals.
	"""
	pendingProposedBlobs: ReentrantCollectionView_AccountOwner_PendingBlobsView_1774202114!
	"""
	Hashes of all certified blocks for this sender.
	This ends with `block_hash` and has length `usize::from(next_block_height)`.
	"""
	confirmedLog: LogView_CryptoHash_87fbb60c!
	"""
	Sender chain and height of all certified blocks known as a receiver (local ordering).
	"""
	receivedLog: LogView_ChainAndHeight_7af83576!
	"""
	The number of `received_log` entries we have synchronized, for each validator.
	"""
	receivedCertificateTrackers: JSONObject!
	"""
	Mailboxes used to receive messages indexed by their origin.
	"""
	inboxes: ReentrantCollectionView_ChainId_InboxStateView_1502311823!
	"""
	A queue of unskippable bundles, with the timestamp when we added them to the inbox.
	"""
	unskippableBundles: BucketQueueView_TimestampedBundleInInbox_5a630c55!
	"""
	Unskippable bundles that have been removed but are still in the queue.
	"""
	removedUnskippableBundles: [BundleInInbox!]!
	"""
	The heights of previous blocks that sent messages to the same recipients.
	"""
	previousMessageBlocks: MapView_ChainId_BlockHeight_f2e56e12!
	"""
	Mailboxes used to send messages, indexed by their target.
	"""
	outboxes: ReentrantCollectionView_ChainId_OutboxStateView_1536326071!
	"""
	Number of outgoing messages in flight for each block height.
	We use a `RegisterView` to prioritize speed for small maps.
	"""
	outboxCounters: JSONObject!
}

"""
Block-chaining state.
"""
type ChainTipState {
	"""
	Hash of the latest certified block in this chain, if any.
	"""
	blockHash: CryptoHash
	"""
	Sequence number tracking blocks.
	"""
	nextBlockHeight: BlockHeight!
	"""
	Number of incoming message bundles.
	"""
	numIncomingBundles: Int!
	"""
	Number of operations.
	"""
	numOperations: Int!
	"""
	Number of outgoing messages.
	"""
	numOutgoingMessages: Int!
}

type Chains {
	list: [ChainId!]!
	default: ChainId
}

"""
A set of validators (identified by their public keys) and their voting rights.
"""
input Committee {
	"""
	The validators in the committee.
	"""
	validators: JSONObject!
	"""
	The sum of all voting rights.
	"""
	totalVotes: Int!
	"""
	The threshold to form a quorum.
	"""
	quorumThreshold: Int!
	"""
	The threshold to prove the validity of a statement.
	"""
	validityThreshold: Int!
	"""
	The policy agreed on for this epoch.
	"""
	policy: ResourceControlPolicy!
}

type ConfirmedBlock {
	block: Block!
	status: String!
	hash: CryptoHash!
}

"""
A Keccak256 value
"""
scalar CryptoHash

type Cursor {
	height: BlockHeight!
	index: Int!
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_AccountOwner_Amount_aaf96548 {
	key: AccountOwner!
	value: Amount
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_AccountOwner_PendingBlobsView_2740f04d {
	key: AccountOwner!
	value: PendingBlobsView!
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_BlobId_Blob_50b95aa1 {
	key: BlobId!
	value: Blob
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_BlobId_Blob_9f0b41f3 {
	key: BlobId!
	value: Blob
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_ChainId_BlockHeight_2fe78645 {
	key: ChainId!
	value: BlockHeight
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_ChainId_InboxStateView_685a16a3 {
	key: ChainId!
	value: InboxStateView!
}

"""
A GraphQL-visible map item, complete with key.
"""
type Entry_ChainId_OutboxStateView_258a4684 {
	key: ChainId!
	value: OutboxStateView!
}

"""
A number identifying the configuration of the chain (aka the committee)
"""
scalar Epoch

"""
An event recorded in a block.
"""
type Event {
	"""
	The ID of the stream this event belongs to.
	"""
	streamId: StreamId!
	"""
	The event index, i.e. the number of events in the stream before this one.
	"""
	index: Int!
	"""
	The payload data.
	"""
	value: [Int!]!
}

type ExecutionStateView {
	system: SystemExecutionStateView!
}


"""
A unique identifier for a user application or for the system application
"""
scalar GenericApplicationId


"""
The state of an inbox.
* An inbox is used to track bundles received and executed locally.
* A `MessageBundle` consists of a logical cursor `(height, index)` and some message
content `messages`.
* On the surface, an inbox looks like a FIFO queue: the main APIs are `add_bundle` and
`remove_bundle`.
* However, bundles can also be removed before they are added. When this happens,
the bundles removed by anticipation are tracked in a separate queue. Any bundle added
later will be required to match the first removed bundle and so on.
* The cursors of added bundles (resp. removed bundles) must be increasing over time.
* Reconciliation of added and removed bundles is allowed to skip some added bundles.
However, the opposite is not true: every removed bundle must be eventually added.
"""
type InboxStateView {
	"""
	We have already added all the messages below this height and index.
	"""
	nextCursorToAdd: Cursor!
	"""
	We have already removed all the messages below this height and index.
	"""
	nextCursorToRemove: Cursor!
	"""
	These bundles have been added and are waiting to be removed.
	"""
	addedBundles: QueueView_MessageBundle_f4399f0b!
	"""
	These bundles have been removed by anticipation and are waiting to be added.
	At least one of `added_bundles` and `removed_bundles` should be empty.
	"""
	removedBundles: QueueView_MessageBundle_f4399f0b!
}

"""
A bundle of cross-chain messages.
"""
type IncomingBundle {
	"""
	The origin of the messages.
	"""
	origin: ChainId!
	"""
	The messages to be delivered to the inbox identified by `origin`.
	"""
	bundle: MessageBundle!
	"""
	What to do with the message.
	"""
	action: MessageAction!
}


"""
A scalar that can represent any JSON Object value.
"""
scalar JSONObject

type LogView_ChainAndHeight_7af83576 {
	entries(start: Int, end: Int): [ChainAndHeight!]!
}

type LogView_CryptoHash_87fbb60c {
	entries(start: Int, end: Int): [CryptoHash!]!
}

input MapFilters_AccountOwner_d6668c53 {
	keys: [AccountOwner!]
}

input MapFilters_BlobId_4d2a0555 {
	keys: [BlobId!]
}

input MapFilters_ChainId_37f83aa9 {
	keys: [ChainId!]
}

input MapInput_AccountOwner_d6668c53 {
	filters: MapFilters_AccountOwner_d6668c53
}

input MapInput_BlobId_4d2a0555 {
	filters: MapFilters_BlobId_4d2a0555
}

input MapInput_ChainId_37f83aa9 {
	filters: MapFilters_ChainId_37f83aa9
}

type MapView_AccountOwner_Amount_11ef1379 {
	keys(count: Int): [AccountOwner!]!
	entry(key: AccountOwner!): Entry_AccountOwner_Amount_aaf96548!
	entries(input: MapInput_AccountOwner_d6668c53): [Entry_AccountOwner_Amount_aaf96548!]!
}

type MapView_BlobId_Blob_3711e760 {
	keys(count: Int): [BlobId!]!
	entry(key: BlobId!): Entry_BlobId_Blob_9f0b41f3!
	entries(input: MapInput_BlobId_4d2a0555): [Entry_BlobId_Blob_9f0b41f3!]!
}

type MapView_BlobId_Blob_9f0b41f3 {
	keys(count: Int): [BlobId!]!
	entry(key: BlobId!): Entry_BlobId_Blob_50b95aa1!
	entries(input: MapInput_BlobId_4d2a0555): [Entry_BlobId_Blob_50b95aa1!]!
}

type MapView_ChainId_BlockHeight_f2e56e12 {
	keys(count: Int): [ChainId!]!
	entry(key: ChainId!): Entry_ChainId_BlockHeight_2fe78645!
	entries(input: MapInput_ChainId_37f83aa9): [Entry_ChainId_BlockHeight_2fe78645!]!
}

"""
A message to be sent and possibly executed in the receiver's block.
"""
scalar Message

"""
Whether an incoming message is accepted or rejected.
"""
scalar MessageAction

"""
A set of messages from a single block, for a single destination.
"""
type MessageBundle {
	"""
	The block height.
	"""
	height: BlockHeight!
	"""
	The block's timestamp.
	"""
	timestamp: Timestamp!
	"""
	The confirmed block certificate hash.
	"""
	certificateHash: CryptoHash!
	"""
	The index of the transaction in the block that is sending this bundle.
	"""
	transactionIndex: Int!
	"""
	The relevant messages.
	"""
	messages: [PostedMessage!]!
}

"""
The kind of outgoing message being sent
"""
scalar MessageKind

"""
A unique identifier for an application module
"""
scalar ModuleId

type MutationRoot {
	"""
	Processes the inbox and returns the lists of certificate hashes that were created, if any.
	"""
	processInbox(chainId: ChainId!): [CryptoHash!]!
	"""
	Retries the pending block that was unsuccessfully proposed earlier.
	"""
	retryPendingBlock(chainId: ChainId!): CryptoHash
	"""
	Transfers `amount` units of value from the given owner's account to the recipient.
	If no owner is given, try to take the units out of the chain account.
	"""
	transfer(chainId: ChainId!, owner: AccountOwner!, recipient: Recipient!, amount: Amount!): CryptoHash!
	"""
	Claims `amount` units of value from the given owner's account in the remote
	`target` chain. Depending on its configuration, the `target` chain may refuse to
	process the message.
	"""
	claim(chainId: ChainId!, owner: AccountOwner!, targetId: ChainId!, recipient: Recipient!, amount: Amount!): CryptoHash!
	"""
	Test if a data blob is readable from a transaction in the current chain.
	"""
	readDataBlob(chainId: ChainId!, hash: CryptoHash!): CryptoHash!
	"""
	Creates (or activates) a new chain with the given owner.
	This will automatically subscribe to the future committees created by `admin_id`.
	"""
	openChain(chainId: ChainId!, owner: AccountOwner!, balance: Amount): ChainId!
	"""
	Creates (or activates) a new chain by installing the given authentication keys.
	This will automatically subscribe to the future committees created by `admin_id`.
	"""
	openMultiOwnerChain(		chainId: ChainId!,		applicationPermissions: ApplicationPermissions,		owners: [AccountOwner!]!,		weights: [Int!],		multiLeaderRounds: Int,		balance: Amount,
		"""
		The duration of the fast round, in milliseconds; default: no timeout
		"""
		fastRoundMs: Int,
		"""
		The duration of the first single-leader and all multi-leader rounds
		"""
		baseTimeoutMs: Int! = 10000,
		"""
		The number of milliseconds by which the timeout increases after each single-leader round
		"""
		timeoutIncrementMs: Int! = 1000,
		"""
		The age of an incoming tracked or protected message after which the validators start transitioning the chain to fallback mode, in milliseconds.
		"""
		fallbackDurationMs: Int! = 86400000
	): ChainId!
	"""
	Closes the chain. Returns `None` if it was already closed.
	"""
	closeChain(chainId: ChainId!): CryptoHash
	"""
	Changes the authentication key of the chain.
	"""
	changeOwner(chainId: ChainId!, newOwner: AccountOwner!): CryptoHash!
	"""
	Changes the authentication key of the chain.
	"""
	changeMultipleOwners(		chainId: ChainId!,		newOwners: [AccountOwner!]!,		newWeights: [Int!]!,		multiLeaderRounds: Int!,		openMultiLeaderRounds: Boolean!,
		"""
		The duration of the fast round, in milliseconds; default: no timeout
		"""
		fastRoundMs: Int,
		"""
		The duration of the first single-leader and all multi-leader rounds
		"""
		baseTimeoutMs: Int! = 10000,
		"""
		The number of milliseconds by which the timeout increases after each single-leader round
		"""
		timeoutIncrementMs: Int! = 1000,
		"""
		The age of an incoming tracked or protected message after which the validators start transitioning the chain to fallback mode, in milliseconds.
		"""
		fallbackDurationMs: Int! = 86400000
	): CryptoHash!
	"""
	Changes the application permissions configuration on this chain.
	"""
	changeApplicationPermissions(chainId: ChainId!, closeChain: [ApplicationId!]!, executeOperations: [ApplicationId!], mandatoryApplications: [ApplicationId!]!, changeApplicationPermissions: [ApplicationId!]!, callServiceAsOracle: [ApplicationId!], makeHttpRequests: [ApplicationId!]): CryptoHash!
	"""
	(admin chain only) Registers a new committee. This will notify the subscribers of
	the admin chain so that they can migrate to the new epoch (by accepting the
	notification as an "incoming message" in a next block).
	"""
	createCommittee(chainId: ChainId!, committee: Committee!): CryptoHash!
	"""
	(admin chain only) Removes a committee. Once this message is accepted by a chain,
	blocks from the retired epoch will not be accepted until they are followed (hence
	re-certified) by a block certified by a recent committee.
	"""
	removeCommittee(chainId: ChainId!, epoch: Epoch!): CryptoHash!
	"""
	Publishes a new application module.
	"""
	publishModule(chainId: ChainId!, contract: Bytecode!, service: Bytecode!, vmRuntime: VmRuntime!): ModuleId!
	"""
	Publishes a new data blob.
	"""
	publishDataBlob(chainId: ChainId!, bytes: [Int!]!): CryptoHash!
	"""
	Creates a new application.
	"""
	createApplication(chainId: ChainId!, moduleId: ModuleId!, parameters: String!, instantiationArgument: String!, requiredApplicationIds: [ApplicationId!]!): ApplicationId!
}

"""
Notify that a chain has a new certified block or a new message
"""
scalar Notification

"""
An operation to be executed in a block
"""
scalar Operation

"""
The execution result of a single operation.
"""
scalar OperationResult

"""
A record of a single oracle response.
"""
scalar OracleResponse

"""
The state of an outbox
* An outbox is used to send messages to another chain.
* Internally, this is implemented as a FIFO queue of (increasing) block heights.
Messages are contained in blocks, together with destination information, so currently
we just send the certified blocks over and let the receivers figure out what were the
messages for them.
* When marking block heights as received, messages at lower heights are also marked (i.e. dequeued).
"""
type OutboxStateView {
	"""
	The minimum block height accepted in the future.
	"""
	nextHeightToSchedule: BlockHeight!
	"""
	Keep sending these certified blocks of ours until they are acknowledged by
	receivers.
	"""
	queue: BucketQueueView_BlockHeight_e824a938!
}

"""
A posted message together with routing information.
"""
type OutgoingMessage {
	"""
	The destination of the message.
	"""
	destination: ChainId!
	"""
	The user authentication carried by the message, if any.
	"""
	authenticatedSigner: AccountOwner
	"""
	A grant to pay for the message execution.
	"""
	grant: Amount!
	"""
	Where to send a refund for the unused part of the grant after execution, if any.
	"""
	refundGrantTo: Account
	"""
	The kind of message being sent.
	"""
	kind: MessageKind!
	"""
	The message itself.
	"""
	message: Message!
}

"""
The pending blobs belonging to a block that can't be processed without them.
"""
type PendingBlobsView {
	"""
	The round in which the block is validated.
	"""
	round: Round!
	"""
	Whether these blobs were already validated.
	
	This is only `false` for _new_ block proposals, not when re-proposing blocks from earlier
	rounds or when handling validated block certificates. If it is false, the pending blobs are
	only the ones published by the new block, not the ones that are only read.
	"""
	validated: Boolean!
	"""
	The map of blobs needed to process the block.
	"""
	pendingBlobs: MapView_BlobId_Blob_9f0b41f3!
}

"""
A message together with kind, authentication and grant information.
"""
type PostedMessage {
	"""
	The user authentication carried by the message, if any.
	"""
	authenticatedSigner: AccountOwner
	"""
	A grant to pay for the message execution.
	"""
	grant: Amount!
	"""
	Where to send a refund for the unused part of the grant after execution, if any.
	"""
	refundGrantTo: Account
	"""
	The kind of message being sent.
	"""
	kind: MessageKind!
	"""
	The index of the message in the sending block.
	"""
	index: Int!
	"""
	The message itself.
	"""
	message: Message!
}

type QueryRoot {
	chain(chainId: ChainId!): ChainStateExtendedView!
	applications(chainId: ChainId!): [ApplicationOverview!]!
	chains: Chains!
	block(hash: CryptoHash, chainId: ChainId!): ConfirmedBlock
	blocks(from: CryptoHash, chainId: ChainId!, limit: Int): [ConfirmedBlock!]!
	"""
	Returns the version information on this node service.
	"""
	version: VersionInfo!
}

type QueueView_MessageBundle_f4399f0b {
	entries(count: Int): [MessageBundle!]!
}

"""
The recipient of a transfer
"""
scalar Recipient

type ReentrantCollectionView_AccountOwner_PendingBlobsView_1774202114 {
	keys: [AccountOwner!]!
	entry(key: AccountOwner!): Entry_AccountOwner_PendingBlobsView_2740f04d!
	entries(input: MapInput_AccountOwner_d6668c53): [Entry_AccountOwner_PendingBlobsView_2740f04d!]!
}

type ReentrantCollectionView_ChainId_InboxStateView_1502311823 {
	keys: [ChainId!]!
	entry(key: ChainId!): Entry_ChainId_InboxStateView_685a16a3!
	entries(input: MapInput_ChainId_37f83aa9): [Entry_ChainId_InboxStateView_685a16a3!]!
}

type ReentrantCollectionView_ChainId_OutboxStateView_1536326071 {
	keys: [ChainId!]!
	entry(key: ChainId!): Entry_ChainId_OutboxStateView_258a4684!
	entries(input: MapInput_ChainId_37f83aa9): [Entry_ChainId_OutboxStateView_258a4684!]!
}

"""
A collection of prices and limits associated with block execution.
"""
input ResourceControlPolicy {
	"""
	The base price for creating a new block.
	"""
	block: Amount!
	"""
	The price per unit of fuel (aka gas) for Wasm execution.
	"""
	wasmFuelUnit: Amount!
	"""
	The price per unit of fuel (aka gas) for EVM execution.
	"""
	evmFuelUnit: Amount!
	"""
	The price of one read operation.
	"""
	readOperation: Amount!
	"""
	The price of one write operation.
	"""
	writeOperation: Amount!
	"""
	The price of reading a byte.
	"""
	byteRead: Amount!
	"""
	The price of writing a byte
	"""
	byteWritten: Amount!
	"""
	The base price to read a blob.
	"""
	blobRead: Amount!
	"""
	The base price to publish a blob.
	"""
	blobPublished: Amount!
	"""
	The price to read a blob, per byte.
	"""
	blobByteRead: Amount!
	"""
	The price to publish a blob, per byte.
	"""
	blobBytePublished: Amount!
	"""
	The price of increasing storage by a byte.
	"""
	byteStored: Amount!
	"""
	The base price of adding an operation to a block.
	"""
	operation: Amount!
	"""
	The additional price for each byte in the argument of a user operation.
	"""
	operationByte: Amount!
	"""
	The base price of sending a message from a block.
	"""
	message: Amount!
	"""
	The additional price for each byte in the argument of a user message.
	"""
	messageByte: Amount!
	"""
	The price per query to a service as an oracle.
	"""
	serviceAsOracleQuery: Amount!
	"""
	The price for a performing an HTTP request.
	"""
	httpRequest: Amount!
	"""
	The maximum amount of Wasm fuel a block can consume.
	"""
	maximumWasmFuelPerBlock: Int!
	"""
	The maximum amount of EVM fuel a block can consume.
	"""
	maximumEvmFuelPerBlock: Int!
	"""
	The maximum time in milliseconds that a block can spend executing services as oracles.
	"""
	maximumServiceOracleExecutionMs: Int!
	"""
	The maximum size of a block. This includes the block proposal itself as well as
	the execution outcome.
	"""
	maximumBlockSize: Int!
	"""
	The maximum size of decompressed contract or service bytecode, in bytes.
	"""
	maximumBytecodeSize: Int!
	"""
	The maximum size of a blob.
	"""
	maximumBlobSize: Int!
	"""
	The maximum number of published blobs per block.
	"""
	maximumPublishedBlobs: Int!
	"""
	The maximum size of a block proposal.
	"""
	maximumBlockProposalSize: Int!
	"""
	The maximum data to read per block
	"""
	maximumBytesReadPerBlock: Int!
	"""
	The maximum data to write per block
	"""
	maximumBytesWrittenPerBlock: Int!
	"""
	The maximum size in bytes of an oracle response.
	"""
	maximumOracleResponseBytes: Int!
	"""
	The maximum size in bytes of a received HTTP response.
	"""
	maximumHttpResponseBytes: Int!
	"""
	The maximum amount of time allowed to wait for an HTTP response.
	"""
	httpRequestTimeoutMs: Int!
	"""
	The list of hosts that contracts and services can send HTTP requests to.
	"""
	httpRequestAllowList: [String!]!
}

"""
A number to identify successive attempts to decide a value in a consensus protocol.
"""
scalar Round

"""
An event stream ID.
"""
type StreamId {
	"""
	The application that can add events to this stream.
	"""
	applicationId: GenericApplicationId!
	"""
	The name of this stream: an application can have multiple streams with different names.
	"""
	streamName: StreamName!
}

"""
The name of an event stream
"""
scalar StreamName


type SubscriptionRoot {
	"""
	Subscribes to notifications from the specified chain.
	"""
	notifications(chainId: ChainId!): Notification!
}

type SystemExecutionStateView {
	description: ChainDescription
	epoch: Epoch
	adminId: ChainId
	committees: JSONObject!
	ownership: ChainOwnership!
	balance: Amount!
	balances: MapView_AccountOwner_Amount_11ef1379!
	timestamp: Timestamp!
}

"""
A timestamp, in microseconds since the Unix epoch
"""
scalar Timestamp

"""
An origin, cursor and timestamp of a unskippable bundle in our inbox.
"""
type TimestampedBundleInInbox {
	"""
	The origin and cursor of the bundle.
	"""
	entry: BundleInInbox!
	"""
	The timestamp when the bundle was added to the inbox.
	"""
	seen: Timestamp!
}

scalar VersionInfo

scalar VmRuntime

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: QueryRoot
	mutation: MutationRoot
	subscription: SubscriptionRoot
}
