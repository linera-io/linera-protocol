---
source: linera-views-derive/src/lib.rs
expression: "pretty(generate_view_code(input, true))"
---
#[linera_views::async_trait]
impl<MyParam> linera_views::views::View<custom::path::to::ContextType>
for TestView<MyParam>
where
    MyParam: Send + Sync + 'static,
{
    const NUM_INIT_KEYS: usize = RegisterView::<
        custom::path::to::ContextType,
        usize,
    >::NUM_INIT_KEYS
        + CollectionView::<
            custom::path::to::ContextType,
            usize,
            RegisterView<custom::path::to::ContextType, usize>,
        >::NUM_INIT_KEYS;
    fn context(&self) -> &custom::path::to::ContextType {
        use linera_views::views::View;
        self.register.context()
    }
    fn pre_load(
        context: &custom::path::to::ContextType,
    ) -> Result<Vec<Vec<u8>>, linera_views::views::ViewError> {
        use linera_views::context::Context as _;
        let mut keys = Vec::new();
        let index = 0;
        let base_key = context
            .derive_tag_key(linera_views::views::MIN_VIEW_TAG, &index)?;
        keys.extend(
            RegisterView::<
                custom::path::to::ContextType,
                usize,
            >::pre_load(&context.clone_with_base_key(base_key))?,
        );
        let index = 1;
        let base_key = context
            .derive_tag_key(linera_views::views::MIN_VIEW_TAG, &index)?;
        keys.extend(
            CollectionView::<
                custom::path::to::ContextType,
                usize,
                RegisterView<custom::path::to::ContextType, usize>,
            >::pre_load(&context.clone_with_base_key(base_key))?,
        );
        Ok(keys)
    }
    fn post_load(
        context: custom::path::to::ContextType,
        values: &[Option<Vec<u8>>],
    ) -> Result<Self, linera_views::views::ViewError> {
        use linera_views::context::Context as _;
        let mut pos = 0;
        let index = 0;
        let pos_next = pos
            + RegisterView::<custom::path::to::ContextType, usize>::NUM_INIT_KEYS;
        let base_key = context
            .derive_tag_key(linera_views::views::MIN_VIEW_TAG, &index)?;
        let register = RegisterView::<
            custom::path::to::ContextType,
            usize,
        >::post_load(context.clone_with_base_key(base_key), &values[pos..pos_next])?;
        pos = pos_next;
        let index = 1;
        let pos_next = pos
            + CollectionView::<
                custom::path::to::ContextType,
                usize,
                RegisterView<custom::path::to::ContextType, usize>,
            >::NUM_INIT_KEYS;
        let base_key = context
            .derive_tag_key(linera_views::views::MIN_VIEW_TAG, &index)?;
        let collection = CollectionView::<
            custom::path::to::ContextType,
            usize,
            RegisterView<custom::path::to::ContextType, usize>,
        >::post_load(context.clone_with_base_key(base_key), &values[pos..pos_next])?;
        pos = pos_next;
        Ok(Self { register, collection })
    }
    async fn load(
        context: custom::path::to::ContextType,
    ) -> Result<Self, linera_views::views::ViewError> {
        use linera_views::context::Context as _;
        let keys = Self::pre_load(&context)?;
        let values = context.read_multi_values_bytes(keys).await?;
        Self::post_load(context, &values)
    }
    fn rollback(&mut self) {
        self.register.rollback();
        self.collection.rollback();
    }
    async fn has_pending_changes(&self) -> bool {
        if self.register.has_pending_changes().await {
            return true;
        }
        if self.collection.has_pending_changes().await {
            return true;
        }
        false
    }
    fn flush(
        &mut self,
        batch: &mut linera_views::batch::Batch,
    ) -> Result<bool, linera_views::views::ViewError> {
        use linera_views::views::View;
        let deleted0 = self.register.flush(batch)?;
        let deleted1 = self.collection.flush(batch)?;
        Ok(deleted0 && deleted1)
    }
    fn clear(&mut self) {
        self.register.clear();
        self.collection.clear();
    }
}
