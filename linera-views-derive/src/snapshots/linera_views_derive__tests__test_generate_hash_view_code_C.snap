---
source: linera-views-derive/src/lib.rs
expression: pretty(generate_hash_view_code(input))
---
#[linera_views::async_trait]
impl<C> linera_views::views::HashableView<C> for TestView<C>
where
    C: linera_views::context::Context + Send + Sync + Clone + 'static,
{
    type Hasher = linera_views::sha3::Sha3_256;
    async fn hash_mut(
        &mut self,
    ) -> Result<
        <Self::Hasher as linera_views::views::Hasher>::Output,
        linera_views::views::ViewError,
    > {
        use linera_views::views::{Hasher, HashableView};
        use std::io::Write;
        let mut hasher = Self::Hasher::default();
        hasher.write_all(self.register.hash_mut().await?.as_ref())?;
        hasher.write_all(self.collection.hash_mut().await?.as_ref())?;
        Ok(hasher.finalize())
    }
    async fn hash(
        &self,
    ) -> Result<
        <Self::Hasher as linera_views::views::Hasher>::Output,
        linera_views::views::ViewError,
    > {
        use linera_views::views::{Hasher, HashableView};
        use std::io::Write;
        let mut hasher = Self::Hasher::default();
        hasher.write_all(self.register.hash().await?.as_ref())?;
        hasher.write_all(self.collection.hash().await?.as_ref())?;
        Ok(hasher.finalize())
    }
}
