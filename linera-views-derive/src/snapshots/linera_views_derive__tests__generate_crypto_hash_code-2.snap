---
source: linera-views-derive/src/lib.rs
expression: pretty(generate_crypto_hash_code(input))
---
impl<C, MyParam> linera_views::views::CryptoHashView for TestView<C, MyParam>
where
    RegisterView<C, usize>: linera_views::views::HashableView,
    CollectionView<C, usize, RegisterView<C, usize>>: linera_views::views::HashableView,
    MyParam: Send + Sync + 'static,
    Self: linera_views::views::View,
{
    async fn crypto_hash(
        &self,
    ) -> Result<linera_base::crypto::CryptoHash, linera_views::ViewError> {
        use linera_base::crypto::{BcsHashable, CryptoHash};
        use linera_views::{
            generic_array::GenericArray, sha3::{digest::OutputSizeUser, Sha3_256},
            views::HashableView as _,
        };
        #[derive(serde::Serialize, serde::Deserialize)]
        struct TestViewHash(GenericArray<u8, <Sha3_256 as OutputSizeUser>::OutputSize>);
        impl<'de> BcsHashable<'de> for TestViewHash {}
        let hash = self.hash().await?;
        Ok(CryptoHash::new(&TestViewHash(hash)))
    }
    async fn crypto_hash_mut(
        &mut self,
    ) -> Result<linera_base::crypto::CryptoHash, linera_views::ViewError> {
        use linera_base::crypto::{BcsHashable, CryptoHash};
        use linera_views::{
            generic_array::GenericArray, sha3::{digest::OutputSizeUser, Sha3_256},
            views::HashableView as _,
        };
        #[derive(serde::Serialize, serde::Deserialize)]
        struct TestViewHash(GenericArray<u8, <Sha3_256 as OutputSizeUser>::OutputSize>);
        impl<'de> BcsHashable<'de> for TestViewHash {}
        let hash = self.hash_mut().await?;
        Ok(CryptoHash::new(&TestViewHash(hash)))
    }
}
