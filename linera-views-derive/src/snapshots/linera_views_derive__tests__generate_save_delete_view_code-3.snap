---
source: linera-views-derive/src/lib.rs
expression: pretty(generate_save_delete_view_code(input))
---
#[async_trait::async_trait]
impl linera_views::view::RootView<custom::path::to::ContextType> for TestView {
    async fn save(&mut self) -> Result<(), linera_views::view::ViewError> {
        use linera_views::{common::Context, batch::Batch, view::View};
        linera_views::increment_counter(
            &linera_views::SAVE_VIEW_COUNTER,
            stringify!(TestView),
            &self.context().base_key(),
        );
        let mut batch = Batch::new();
        self.register.flush(&mut batch)?;
        self.collection.flush(&mut batch)?;
        self.context().write_batch(batch).await?;
        Ok(())
    }
    async fn write_delete(self) -> Result<(), linera_views::view::ViewError> {
        use linera_views::{common::Context, batch::Batch, view::View};
        let context = self.context().clone();
        let batch = Batch::build(move |batch| {
                Box::pin(async move {
                    self.register.delete(batch);
                    self.collection.delete(batch);
                    Ok(())
                })
            })
            .await?;
        context.write_batch(batch).await?;
        Ok(())
    }
}

