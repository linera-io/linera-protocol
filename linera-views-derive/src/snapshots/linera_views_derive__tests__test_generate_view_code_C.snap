---
source: linera-views-derive/src/lib.rs
expression: "pretty(generate_view_code(input, true))"
---
#[async_trait::async_trait]
impl<C> linera_views::views::View<C> for TestView<C>
where
    C: linera_views::common::Context + Send + Sync + Clone + 'static,
    linera_views::views::ViewError: From<C::Error>,
{
    fn context(&self) -> &C {
        use linera_views::views::View;
        self.register.context()
    }
    async fn load(context: C) -> Result<Self, linera_views::views::ViewError> {
        use linera_views::{futures::join, common::Context};
        let index = 0;
        let base_key = context
            .derive_tag_key(linera_views::common::MIN_VIEW_TAG, &index)?;
        let register_fut = RegisterView::load(context.clone_with_base_key(base_key));
        let index = 1;
        let base_key = context
            .derive_tag_key(linera_views::common::MIN_VIEW_TAG, &index)?;
        let collection_fut = CollectionView::load(context.clone_with_base_key(base_key));
        let result = join!(register_fut, collection_fut);
        let register = result.0?;
        let collection = result.1?;
        Ok(Self { register, collection })
    }
    fn rollback(&mut self) {
        self.register.rollback();
        self.collection.rollback();
    }
    fn flush(
        &mut self,
        batch: &mut linera_views::batch::Batch,
    ) -> Result<bool, linera_views::views::ViewError> {
        use linera_views::views::View;
        let deleted0 = self.register.flush(batch)?;
        let deleted1 = self.collection.flush(batch)?;
        Ok(deleted0 && deleted1)
    }
    fn clear(&mut self) {
        self.register.clear();
        self.collection.clear();
    }
}
