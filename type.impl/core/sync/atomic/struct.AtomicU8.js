(function() {
    var type_impls = Object.fromEntries([["radium",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AtomicU8\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><a href=\"#impl-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.34.0\">1.34.0 (const: 1.34.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.new\" class=\"fn\">new</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Creates a new atomic integer.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">let </span>atomic_forty_two = AtomicU8::new(<span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.from_ptr\" class=\"fn\">from_ptr</a>&lt;'a&gt;(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Creates a new reference to an atomic integer from a pointer.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{<span class=\"self\">self</span>, AtomicU8};\n\n<span class=\"comment\">// Get a pointer to an allocated value\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = Box::into_raw(Box::new(<span class=\"number\">0</span>));\n\n<span class=\"macro\">assert!</span>(ptr.cast::&lt;AtomicU8&gt;().is_aligned());\n\n{\n    <span class=\"comment\">// Create an atomic view of the allocated value\n    </span><span class=\"kw\">let </span>atomic = <span class=\"kw\">unsafe </span>{AtomicU8::from_ptr(ptr) };\n\n    <span class=\"comment\">// Use `atomic` for atomic operations, possibly share it with other threads\n    </span>atomic.store(<span class=\"number\">1</span>, atomic::Ordering::Relaxed);\n}\n\n<span class=\"comment\">// It's ok to non-atomically access the value behind `ptr`,\n// since the reference to the atomic ended its lifetime in the block above\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr }, <span class=\"number\">1</span>);\n\n<span class=\"comment\">// Deallocate the value\n</span><span class=\"kw\">unsafe </span>{ drop(Box::from_raw(ptr)) }</code></pre></div>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li><code>ptr</code> must be aligned to\n<code>align_of::&lt;AtomicU8&gt;()</code>\n(note that this is always true, since <code>align_of::&lt;AtomicU8&gt;() == 1</code>).</li>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/1.86.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">valid</a> for both reads and writes for the whole lifetime <code>'a</code>.</li>\n<li>You must adhere to the <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/index.html#memory-model-for-atomic-accesses\" title=\"mod core::sync::atomic\">Memory model for atomic accesses</a>. In particular, it is not\nallowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes,\nwithout synchronization.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying integer.</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_var = AtomicU8::new(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>some_var.get_mut(), <span class=\"number\">10</span>);\n<span class=\"kw-2\">*</span>some_var.get_mut() = <span class=\"number\">5</span>;\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::SeqCst), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.from_mut\" class=\"fn\">from_mut</a>(v: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Get atomic access to a <code>&amp;mut u8</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_int = <span class=\"number\">123</span>;\n<span class=\"kw\">let </span>a = AtomicU8::from_mut(<span class=\"kw-2\">&amp;mut </span>some_int);\na.store(<span class=\"number\">100</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(some_int, <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.get_mut_slice\" class=\"fn\">get_mut_slice</a>(this: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a>]) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Get non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ints = [<span class=\"kw\">const </span>{ AtomicU8::new(<span class=\"number\">0</span>) }; <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>[u8] = AtomicU8::get_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ints);\n<span class=\"macro\">assert_eq!</span>(view, [<span class=\"number\">0</span>; <span class=\"number\">10</span>]);\nview\n    .iter_mut()\n    .enumerate()\n    .for_each(|(idx, int)| <span class=\"kw-2\">*</span>int = idx <span class=\"kw\">as _</span>);\n\nstd::thread::scope(|s| {\n    some_ints\n        .iter()\n        .enumerate()\n        .for_each(|(idx, int)| {\n            s.spawn(<span class=\"kw\">move </span>|| <span class=\"macro\">assert_eq!</span>(int.load(Ordering::Relaxed), idx <span class=\"kw\">as _</span>));\n        })\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.from_mut_slice\" class=\"fn\">from_mut_slice</a>(v: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>]) -&gt; &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Get atomic access to a <code>&amp;mut [u8]</code> slice.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ints = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>a = <span class=\"kw-2\">&amp;*</span>AtomicU8::from_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ints);\nstd::thread::scope(|s| {\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..a.len() {\n        s.spawn(<span class=\"kw\">move </span>|| a[i].store(i <span class=\"kw\">as _</span>, Ordering::Relaxed));\n    }\n});\n<span class=\"kw\">for </span>(i, n) <span class=\"kw\">in </span>some_ints.into_iter().enumerate() {\n    <span class=\"macro\">assert_eq!</span>(i, n <span class=\"kw\">as </span>usize);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.79.0\">1.34.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Consumes the atomic and returns the contained value.</p>\n<p>This is safe because passing <code>self</code> by value guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.into_inner(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.load\" class=\"fn\">load</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Loads a value from the atomic integer.</p>\n<p><code>load</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> and <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.AcqRel\" title=\"variant core::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.store\" class=\"fn\">store</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer.</p>\n<p><code>store</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> and <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.AcqRel\" title=\"variant core::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\nsome_var.store(<span class=\"number\">10</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer, returning the previous value.</p>\n<p><code>swap</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.swap(<span class=\"number\">10</span>, Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_and_swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.compare_and_swap\" class=\"fn\">compare_and_swap</a>(&amp;self, current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.50.0: Use <code>compare_exchange</code> or <code>compare_exchange_weak</code> instead</span></div></span></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>The return value is always the previous value. If it is equal to <code>current</code>, then the\nvalue was updated.</p>\n<p><code>compare_and_swap</code> also takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory\nordering of this operation. Notice that even when using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.AcqRel\" title=\"variant core::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>, the operation\nmight fail and hence just perform an <code>Acquire</code> load, but not have <code>Release</code> semantics.\nUsing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a> if it\nhappens, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"migrating-to-compare_exchange-and-compare_exchange_weak\"><a class=\"doc-anchor\" href=\"#migrating-to-compare_exchange-and-compare_exchange_weak\">§</a>Migrating to <code>compare_exchange</code> and <code>compare_exchange_weak</code></h5>\n<p><code>compare_and_swap</code> is equivalent to <code>compare_exchange</code> with the following mapping for\nmemory orderings:</p>\n<div><table><thead><tr><th>Original</th><th>Success</th><th>Failure</th></tr></thead><tbody>\n<tr><td>Relaxed</td><td>Relaxed</td><td>Relaxed</td></tr>\n<tr><td>Acquire</td><td>Acquire</td><td>Acquire</td></tr>\n<tr><td>Release</td><td>Release</td><td>Relaxed</td></tr>\n<tr><td>AcqRel</td><td>AcqRel</td><td>Acquire</td></tr>\n<tr><td>SeqCst</td><td>SeqCst</td><td>SeqCst</td></tr>\n</tbody></table>\n</div>\n<p><code>compare_and_swap</code> and <code>compare_exchange</code> also differ in their return type. You can use\n<code>compare_exchange(...).unwrap_or_else(|x| x)</code> to recover the behavior of <code>compare_and_swap</code>,\nbut in most cases it is more idiomatic to check whether the return value is <code>Ok</code> or <code>Err</code>\nrather than to infer success vs failure based on the value that was read.</p>\n<p>During migration, consider whether it makes sense to use <code>compare_exchange_weak</code> instead.\n<code>compare_exchange_weak</code> is allowed to fail spuriously even when the comparison succeeds,\nwhich allows the compiler to generate better assembly code when the compare and swap\nis used in a loop.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_and_swap(<span class=\"number\">5</span>, <span class=\"number\">10</span>, Ordering::Relaxed), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_and_swap(<span class=\"number\">6</span>, <span class=\"number\">12</span>, Ordering::Relaxed), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.compare_exchange\" class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>The return value is a result indicating whether the new value was written and\ncontaining the previous value. On success this value is guaranteed to be equal to\n<code>current</code>.</p>\n<p><code>compare_exchange</code> takes two <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the successful load\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The failure ordering can only be <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_exchange(<span class=\"number\">5</span>, <span class=\"number\">10</span>,\n                                     Ordering::Acquire,\n                                     Ordering::Relaxed),\n           <span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_exchange(<span class=\"number\">6</span>, <span class=\"number\">12</span>,\n                                     Ordering::SeqCst,\n                                     Ordering::Acquire),\n           <span class=\"prelude-val\">Err</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange_weak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.compare_exchange_weak\" class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange\" title=\"method core::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>,\nthis function is allowed to spuriously fail even\nwhen the comparison succeeds, which can result in more efficient code on some\nplatforms. The return value is a result indicating whether the new value was\nwritten and containing the previous value.</p>\n<p><code>compare_exchange_weak</code> takes two <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the successful load\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The failure ordering can only be <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>val = AtomicU8::new(<span class=\"number\">4</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>old = val.load(Ordering::Relaxed);\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>new = old * <span class=\"number\">2</span>;\n    <span class=\"kw\">match </span>val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(x) =&gt; old = x,\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_add\" class=\"fn\">fetch_add</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Adds to the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_add</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_add(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_sub\" class=\"fn\">fetch_sub</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Subtracts from the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_sub</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_sub(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_and\" class=\"fn\">fetch_and</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “and” with the current value.</p>\n<p>Performs a bitwise “and” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_and</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_and(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b100001</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_nand\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_nand\" class=\"fn\">fetch_nand</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “nand” with the current value.</p>\n<p>Performs a bitwise “nand” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_nand</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_nand(<span class=\"number\">0x31</span>, Ordering::SeqCst), <span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), !(<span class=\"number\">0x13 </span>&amp; <span class=\"number\">0x31</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_or\" class=\"fn\">fetch_or</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “or” with the current value.</p>\n<p>Performs a bitwise “or” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_or</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_or(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b111111</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_xor\" class=\"fn\">fetch_xor</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “xor” with the current value.</p>\n<p>Performs a bitwise “xor” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_xor</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_xor(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b011110</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_update\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_update\" class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function returned <code>Some(_)</code>, else\n<code>Err(previous_value)</code>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns <code>Some(_)</code>, but the function will have been applied\nonly once to the stored value.</p>\n<p><code>fetch_update</code> takes two <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange\" title=\"method core::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>\nrespectively.</p>\n<p>Using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the final successful load\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The (failed) load ordering can only be <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"considerations\"><a class=\"doc-anchor\" href=\"#considerations\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange_weak\" title=\"method core::sync::atomic::AtomicU8::compare_exchange_weak\"><code>AtomicU8::compare_exchange_weak</code></a>,\nand suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>x = AtomicU8::new(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(x.load(Ordering::SeqCst), <span class=\"number\">9</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_update\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.try_update\" class=\"fn\">try_update</a>(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_try_update</code>)</span></div></span></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function returned <code>Some(_)</code>, else\n<code>Err(previous_value)</code>.</p>\n<p>See also: <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.update\" title=\"method core::sync::atomic::AtomicU8::update\"><code>update</code></a>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns <code>Some(_)</code>, but the function will have been applied\nonly once to the stored value.</p>\n<p><code>try_update</code> takes two <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange\" title=\"method core::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>\nrespectively.</p>\n<p>Using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the final successful load\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The (failed) load ordering can only be <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"considerations-1\"><a class=\"doc-anchor\" href=\"#considerations-1\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange_weak\" title=\"method core::sync::atomic::AtomicU8::compare_exchange_weak\"><code>AtomicU8::compare_exchange_weak</code></a>,\nand suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_try_update)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>x = AtomicU8::new(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(x.load(Ordering::SeqCst), <span class=\"number\">9</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.update\" class=\"fn\">update</a>(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_try_update</code>)</span></div></span></summary><div class=\"docblock\"><p>Fetches the value, applies a function to it that it return a new value.\nThe new value is stored and the old value is returned.</p>\n<p>See also: <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.try_update\" title=\"method core::sync::atomic::AtomicU8::try_update\"><code>try_update</code></a>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, but the function will have been applied only once to the stored value.</p>\n<p><code>update</code> takes two <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange\" title=\"method core::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>\nrespectively.</p>\n<p>Using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the final successful load\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The (failed) load ordering can only be <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.SeqCst\" title=\"variant core::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"considerations-2\"><a class=\"doc-anchor\" href=\"#considerations-2\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#method.compare_exchange_weak\" title=\"method core::sync::atomic::AtomicU8::compare_exchange_weak\"><code>AtomicU8::compare_exchange_weak</code></a>,\nand suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_try_update)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>x = AtomicU8::new(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + <span class=\"number\">1</span>), <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + <span class=\"number\">1</span>), <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(x.load(Ordering::SeqCst), <span class=\"number\">9</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_max\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_max\" class=\"fn\">fetch_max</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Maximum with the current value.</p>\n<p>Finds the maximum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_max</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_max(<span class=\"number\">42</span>, Ordering::SeqCst), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">42</span>);</code></pre></div>\n<p>If you want to obtain the maximum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n<span class=\"macro\">assert!</span>(max_foo == <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_min\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.fetch_min\" class=\"fn\">fetch_min</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Minimum with the current value.</p>\n<p>Finds the minimum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_min</code> takes an <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Acquire\" title=\"variant core::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Release\" title=\"variant core::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html#variant.Relaxed\" title=\"variant core::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">42</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">22</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">22</span>);</code></pre></div>\n<p>If you want to obtain the minimum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n<span class=\"macro\">assert_eq!</span>(min_foo, <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const since 1.70.0\">1.70.0 (const: 1.70.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable pointer to the underlying integer.</p>\n<p>Doing non-atomic reads and writes on the resulting integer can be a data race.\nThis method is mostly useful for FFI, where the function signature may use\n<code>*mut u8</code> instead of <code>&amp;AtomicU8</code>.</p>\n<p>Returning an <code>*mut</code> pointer from a shared reference to this atomic is safe because the\natomic types work with interior mutability. All modifications of an atomic change the value\nthrough a shared reference, and can do so safely as long as they use atomic operations. Any\nuse of the returned raw pointer requires an <code>unsafe</code> block and still has to uphold the same\nrestriction: operations on it must be atomic.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{\n    <span class=\"kw\">fn </span>my_atomic_op(arg: <span class=\"kw-2\">*mut </span>u8);\n}\n\n<span class=\"kw\">let </span>atomic = AtomicU8::new(<span class=\"number\">1</span>);\n\n<span class=\"comment\">// SAFETY: Safe as long as `my_atomic_op` is atomic.\n</span><span class=\"kw\">unsafe </span>{\n    my_atomic_op(atomic.as_ptr());\n}</code></pre></div>\n</div></details></div></details>",0,"radium::types::RadiumU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><a href=\"#impl-Debug-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","radium::types::RadiumU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><a href=\"#impl-Default-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","radium::types::RadiumU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><a href=\"#impl-From%3Cu8%3E-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Converts an <code>u8</code> into an <code>AtomicU8</code>.</p>\n</div></details></div></details>","From<u8>","radium::types::RadiumU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Radium-for-AtomicU8\" class=\"impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#impl-Radium-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radium/trait.Radium.html\" title=\"trait radium::Radium\">Radium</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radium/trait.Radium.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.new\" class=\"fn\">new</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class='docblock'>Creates a new value of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fence\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fence\" class=\"fn\">fence</a>(order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class='docblock'>If the underlying value is atomic, calls <a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/fn.fence.html\" title=\"fn core::sync::atomic::fence\"><code>fence</code></a> with the given\n<a href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a>. Otherwise, does nothing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a mutable reference to the underlying value. <a href=\"radium/trait.Radium.html#tymethod.get_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.into_inner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Consumes the wrapper and returns the contained value. <a href=\"radium/trait.Radium.html#tymethod.into_inner\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.load\" class=\"fn\">load</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Load a value from this object. <a href=\"radium/trait.Radium.html#tymethod.load\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.store\" class=\"fn\">store</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class='docblock'>Store a value in this object. <a href=\"radium/trait.Radium.html#tymethod.store\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Swap with the value stored in this object. <a href=\"radium/trait.Radium.html#tymethod.swap\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_and_swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.compare_and_swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_and_swap\" class=\"fn\">compare_and_swap</a>(&amp;self, current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>compare_exchange</code> or <code>compare_exchange_weak</code> instead</span></div></span><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_and_swap\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.compare_exchange\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_exchange\" class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_exchange\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange_weak\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.compare_exchange_weak\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.compare_exchange_weak\" class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Stores a value into this object if the currently-stored value is the\nsame as the <code>current</code> value. <a href=\"radium/trait.Radium.html#tymethod.compare_exchange_weak\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_update\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_update\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_update\" class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class='docblock'>Fetches the value, and applies a function to it that returns an\noptional new value. <a href=\"radium/trait.Radium.html#tymethod.fetch_update\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_and\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_and\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_and\" class=\"fn\">fetch_and</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Performs a bitwise “and” on the currently-stored value and the argument\n<code>value</code>, and stores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_and\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_nand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_nand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_nand\" class=\"fn\">fetch_nand</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Performs a bitwise “nand” on the currently-stored value and the argument\n<code>value</code>, and stores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_nand\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_or\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_or\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_or\" class=\"fn\">fetch_or</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Performs a bitwise “or” on the currently-stored value and the argument\n<code>value</code>, and stores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_or\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_xor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_xor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_xor\" class=\"fn\">fetch_xor</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Performs a bitwise “xor” on the currently-stored value and the argument\n<code>value</code>, and stores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_xor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_add\" class=\"fn\">fetch_add</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Adds <code>value</code> to the currently-stored value, wrapping on overflow, and\nstores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radium/lib.rs.html#612-623\">Source</a><a href=\"#method.fetch_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radium/trait.Radium.html#tymethod.fetch_sub\" class=\"fn\">fetch_sub</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Subtracts <code>value</code> from the currently-stored value, wrapping on\nunderflow, and stores the result in <code>self</code>. <a href=\"radium/trait.Radium.html#tymethod.fetch_sub\">Read more</a></div></details></div></details>","Radium","radium::types::RadiumU8"],["<section id=\"impl-RefUnwindSafe-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/panic/unwind_safe.rs.html#228\">Source</a></span><a href=\"#impl-RefUnwindSafe-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section>","RefUnwindSafe","radium::types::RadiumU8"],["<section id=\"impl-Sync-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/sync/atomic.rs.html#3456-3473\">Source</a></span><a href=\"#impl-Sync-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/sync/atomic/struct.AtomicU8.html\" title=\"struct core::sync::atomic::AtomicU8\">AtomicU8</a></h3></section>","Sync","radium::types::RadiumU8"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[110306]}