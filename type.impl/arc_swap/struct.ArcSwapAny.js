(function() {
    var type_impls = Object.fromEntries([["arc_swap",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Access%3CT%3E-for-ArcSwapAny%3CArc%3CT%3E,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#166-171\">Source</a><a href=\"#impl-Access%3CT%3E-for-ArcSwapAny%3CArc%3CT%3E,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;&gt;&gt; <a class=\"trait\" href=\"arc_swap/access/trait.Access.html\" title=\"trait arc_swap::access::Access\">Access</a>&lt;T&gt; for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Guard\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#167\">Source</a><a href=\"#associatedtype.Guard\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\" class=\"associatedtype\">Guard</a> = DirectDeref&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;, S&gt;</h4></section></summary><div class='docblock'>A guard object containing the value and keeping it alive. <a href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#168-170\">Source</a><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arc_swap/access/trait.Access.html#tymethod.load\" class=\"fn\">load</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\" title=\"type arc_swap::access::Access::Guard\">Guard</a></h4></section></summary><div class='docblock'>The loading method. <a href=\"arc_swap/access/trait.Access.html#tymethod.load\">Read more</a></div></details></div></details>","Access<T>","arc_swap::ArcSwap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Access%3CT%3E-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#147-153\">Source</a><a href=\"#impl-Access%3CT%3E-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"arc_swap/access/trait.Access.html\" title=\"trait arc_swap::access::Access\">Access</a>&lt;T&gt; for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Guard\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#148\">Source</a><a href=\"#associatedtype.Guard\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\" class=\"associatedtype\">Guard</a> = <a class=\"struct\" href=\"arc_swap/struct.Guard.html\" title=\"struct arc_swap::Guard\">Guard</a>&lt;T, S&gt;</h4></section></summary><div class='docblock'>A guard object containing the value and keeping it alive. <a href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/access.rs.html#150-152\">Source</a><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arc_swap/access/trait.Access.html#tymethod.load\" class=\"fn\">load</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"arc_swap/access/trait.Access.html#associatedtype.Guard\" title=\"type arc_swap::access::Access::Guard\">Guard</a></h4></section></summary><div class='docblock'>The loading method. <a href=\"arc_swap/access/trait.Access.html#tymethod.load\">Read more</a></div></details></div></details>","Access<T>","arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArcSwapAny%3CArc%3CT%3E,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#687-697\">Source</a><a href=\"#impl-ArcSwapAny%3CArc%3CT%3E,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;&gt;&gt; <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_pointee\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#691-696\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.from_pointee\" class=\"fn\">from_pointee</a>(val: T) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>A convenience constructor directly from the pointed-to value.</p>\n<p>Direct equivalent for <code>ArcSwap::new(Arc::new(val))</code>.</p>\n</div></details></div></details>",0,"arc_swap::ArcSwap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArcSwapAny%3COption%3CArc%3CT%3E%3E,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#721-752\">Source</a><a href=\"#impl-ArcSwapAny%3COption%3CArc%3CT%3E%3E,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;&gt;&gt;&gt; <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T&gt;&gt;, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_pointee\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#736-741\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.from_pointee\" class=\"fn\">from_pointee</a>&lt;V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;&gt;(val: V) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>A convenience constructor directly from a pointed-to value.</p>\n<p>This just allocates the <code>Arc</code> under the hood.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arc_swap::ArcSwapOption;\n\n<span class=\"kw\">let </span>empty: ArcSwapOption&lt;usize&gt; = ArcSwapOption::from_pointee(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert!</span>(empty.load().is_none());\n<span class=\"kw\">let </span>non_empty: ArcSwapOption&lt;usize&gt; = ArcSwapOption::from_pointee(<span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42</span>, <span class=\"kw-2\">**</span>non_empty.load().as_ref().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#746-751\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.empty\" class=\"fn\">empty</a>() -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>A convenience constructor for an empty value.</p>\n<p>This is equivalent to <code>ArcSwapOption::new(None)</code>.</p>\n</div></details></div></details>",0,"arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#365-679\">Source</a><a href=\"#impl-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#367-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.new\" class=\"fn\">new</a>(val: T) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a new storage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_strategy\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#375-385\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.with_strategy\" class=\"fn\">with_strategy</a>(val: T, strategy: S) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a new storage while customizing the protection strategy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#388-394\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Extracts the value inside.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_full\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#403-405\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.load_full\" class=\"fn\">load_full</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Loads the value.</p>\n<p>This makes another copy of the held pointer and returns it, atomically (it is\nsafe even when other thread stores into the same instance at the same time).</p>\n<p>The method is lock-free and wait-free, but usually more expensive than\n<a href=\"#method.load\"><code>load</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#453-456\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.load\" class=\"fn\">load</a>(&amp;self) -&gt; <a class=\"struct\" href=\"arc_swap/struct.Guard.html\" title=\"struct arc_swap::Guard\">Guard</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a temporary borrow of the object inside.</p>\n<p>This returns a proxy object allowing access to the thing held inside. However, there’s\nonly limited amount of possible cheap proxies in existence for each thread ‒ if more are\ncreated, it falls back to equivalent of <a href=\"#method.load_full\"><code>load_full</code></a> internally.</p>\n<p>This is therefore a good choice to use for eg. searching a data structure or juggling the\npointers around a bit, but not as something to store in larger amounts. The rule of thumb\nis this is suited for local variables on stack, but not in long-living data structures.</p>\n<h5 id=\"consistency\"><a class=\"doc-anchor\" href=\"#consistency\">§</a>Consistency</h5>\n<p>In case multiple related operations are to be done on the loaded value, it is generally\nrecommended to call <code>load</code> just once and keep the result over calling it multiple times.\nFirst, keeping it is usually faster. But more importantly, the value can change between the\ncalls to load, returning different objects, which could lead to logical inconsistency.\nKeeping the result makes sure the same object is used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Point {\n    x: usize,\n    y: usize,\n}\n\n<span class=\"kw\">fn </span>print_broken(p: <span class=\"kw-2\">&amp;</span>ArcSwap&lt;Point&gt;) {\n    <span class=\"comment\">// This is broken, because the x and y may come from different points,\n    // combining into an invalid point that never existed.\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"X: {}\"</span>, p.load().x);\n    <span class=\"comment\">// If someone changes the content now, between these two loads, we\n    // have a problem\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"Y: {}\"</span>, p.load().y);\n}\n\n<span class=\"kw\">fn </span>print_correct(p: <span class=\"kw-2\">&amp;</span>ArcSwap&lt;Point&gt;) {\n    <span class=\"comment\">// Here we take a snapshot of one specific point so both x and y come\n    // from the same one.\n    </span><span class=\"kw\">let </span>point = p.load();\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"X: {}\"</span>, point.x);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Y: {}\"</span>, point.y);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#461-463\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.store\" class=\"fn\">store</a>(&amp;self, val: T)</h4></section></summary><div class=\"docblock\"><p>Replaces the value inside this instance.</p>\n<p>Further loads will yield the new value. Uses <a href=\"#method.swap\"><code>swap</code></a> internally.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#466-477\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;self, new: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Exchanges the value inside this instance.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_and_swap\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#495-502\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.compare_and_swap\" class=\"fn\">compare_and_swap</a>&lt;C&gt;(&amp;self, current: C, new: T) -&gt; <a class=\"struct\" href=\"arc_swap/struct.Guard.html\" title=\"struct arc_swap::Guard\">Guard</a>&lt;T, S&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"arc_swap/trait.AsRaw.html\" title=\"trait arc_swap::AsRaw\">AsRaw</a>&lt;T::<a class=\"associatedtype\" href=\"arc_swap/trait.RefCnt.html#associatedtype.Base\" title=\"type arc_swap::RefCnt::Base\">Base</a>&gt;,\n    S: <a class=\"trait\" href=\"arc_swap/strategy/trait.CaS.html\" title=\"trait arc_swap::strategy::CaS\">CaS</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Swaps the stored Arc if it equals to <code>current</code>.</p>\n<p>If the current value of the <code>ArcSwapAny</code> equals to <code>current</code>, the <code>new</code> is stored inside.\nIf not, nothing happens.</p>\n<p>The previous value (no matter if the swap happened or not) is returned. Therefore, if the\nreturned value is equal to <code>current</code>, the swap happened. You want to do a pointer-based\ncomparison to determine it.</p>\n<p>In other words, if the caller „guesses“ the value of current correctly, it acts like\n<a href=\"#method.swap\"><code>swap</code></a>, otherwise it acts like <a href=\"#method.load_full\"><code>load_full</code></a> (including\nthe limitations).</p>\n<p>The <code>current</code> can be specified as <code>&amp;Arc</code>, <a href=\"struct.Guard.html\"><code>Guard</code></a>,\n<a href=\"struct.Guards.html\"><code>&amp;Guards</code></a> or as a raw pointer (but <em>not</em> owned <code>Arc</code>). See the\n<a href=\"arc_swap/trait.AsRaw.html\" title=\"trait arc_swap::AsRaw\"><code>AsRaw</code></a> trait.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rcu\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#603-620\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.rcu\" class=\"fn\">rcu</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;T</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    S: <a class=\"trait\" href=\"arc_swap/strategy/trait.CaS.html\" title=\"trait arc_swap::strategy::CaS\">CaS</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Read-Copy-Update of the pointer inside.</p>\n<p>This is useful in read-heavy situations with several threads that sometimes update the data\npointed to. The readers can just repeatedly use <a href=\"#method.load\"><code>load</code></a> without any locking.\nThe writer uses this method to perform the update.</p>\n<p>In case there’s only one thread that does updates or in case the next version is\nindependent of the previous one, simple <a href=\"#method.swap\"><code>swap</code></a> or <a href=\"#method.store\"><code>store</code></a>\nis enough. Otherwise, it may be needed to retry the update operation if some other thread\nmade an update in between. This is what this method does.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This will <em>not</em> work as expected, because between loading and storing, some other thread\nmight have updated the value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>cnt = ArcSwap::from_pointee(<span class=\"number\">0</span>);\nthread::scope(|scope| {\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        scope.spawn(|<span class=\"kw\">_</span>| {\n           <span class=\"kw\">let </span>inner = cnt.load_full();\n            <span class=\"comment\">// Another thread might have stored some other number than what we have\n            // between the load and store.\n            </span>cnt.store(Arc::new(<span class=\"kw-2\">*</span>inner + <span class=\"number\">1</span>));\n        });\n    }\n}).unwrap();\n<span class=\"comment\">// This will likely fail:\n// assert_eq!(10, *cnt.load_full());</span></code></pre></div>\n<p>This will, but it can call the closure multiple times to retry:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>cnt = ArcSwap::from_pointee(<span class=\"number\">0</span>);\nthread::scope(|scope| {\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        scope.spawn(|<span class=\"kw\">_</span>| cnt.rcu(|inner| <span class=\"kw-2\">**</span>inner + <span class=\"number\">1</span>));\n    }\n}).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">10</span>, <span class=\"kw-2\">*</span>cnt.load_full());</code></pre></div>\n<p>Due to the retries, you might want to perform all the expensive operations <em>before</em> the\nrcu. As an example, if there’s a cache of some computations as a map, and the map is cheap\nto clone but the computations are not, you could do something like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>expensive_computation(x: usize) -&gt; usize {\n    x * <span class=\"number\">2 </span><span class=\"comment\">// Let's pretend multiplication is *really expensive expensive*\n</span>}\n\n<span class=\"kw\">type </span>Cache = HashMap&lt;usize, usize&gt;;\n\n<span class=\"kw\">static </span>CACHE: Lazy&lt;ArcSwap&lt;Cache&gt;&gt; = Lazy::new(|| ArcSwap::default());\n\n<span class=\"kw\">fn </span>cached_computation(x: usize) -&gt; usize {\n    <span class=\"kw\">let </span>cache = CACHE.load();\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(result) = cache.get(<span class=\"kw-2\">&amp;</span>x) {\n        <span class=\"kw\">return </span><span class=\"kw-2\">*</span>result;\n    }\n    <span class=\"comment\">// Not in cache. Compute and store.\n    // The expensive computation goes outside, so it is not retried.\n    </span><span class=\"kw\">let </span>result = expensive_computation(x);\n    CACHE.rcu(|cache| {\n        <span class=\"comment\">// The cheaper clone of the cache can be retried if need be.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cache = HashMap::clone(<span class=\"kw-2\">&amp;</span>cache);\n        cache.insert(x, result);\n        cache\n    });\n    result\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42</span>, cached_computation(<span class=\"number\">21</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42</span>, cached_computation(<span class=\"number\">21</span>));</code></pre></div>\n<h5 id=\"the-cost-of-cloning\"><a class=\"doc-anchor\" href=\"#the-cost-of-cloning\">§</a>The cost of cloning</h5>\n<p>Depending on the size of cache above, the cloning might not be as cheap. You can however\nuse persistent data structures ‒ each modification creates a new data structure, but it\nshares most of the data with the old one (which is usually accomplished by using <code>Arc</code>s\ninside to share the unchanged values). Something like\n<a href=\"https://crates.io/crates/rpds\"><code>rpds</code></a> or <a href=\"https://crates.io/crates/im\"><code>im</code></a> might do\nwhat you need.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#672-678\">Source</a><h4 class=\"code-header\">pub fn <a href=\"arc_swap/struct.ArcSwapAny.html#tymethod.map\" class=\"fn\">map</a>&lt;I, R, F&gt;(&amp;self, f: F) -&gt; <a class=\"struct\" href=\"arc_swap/access/struct.Map.html\" title=\"struct arc_swap::access::Map\">Map</a>&lt;&amp;Self, I, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;I</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;R</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Self: <a class=\"trait\" href=\"arc_swap/access/trait.Access.html\" title=\"trait arc_swap::access::Access\">Access</a>&lt;I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Provides an access to an up to date projection of the carried data.</p>\n<h5 id=\"motivation\"><a class=\"doc-anchor\" href=\"#motivation\">§</a>Motivation</h5>\n<p>Sometimes, an application consists of components. Each component has its own configuration\nstructure. The whole configuration contains all the smaller config parts.</p>\n<p>For the sake of separation and abstraction, it is not desirable to pass the whole\nconfiguration to each of the components. This allows the component to take only access to\nits own part.</p>\n<h5 id=\"lifetimes--flexibility\"><a class=\"doc-anchor\" href=\"#lifetimes--flexibility\">§</a>Lifetimes &amp; flexibility</h5>\n<p>This method is not the most flexible way, as the returned type borrows into the <code>ArcSwap</code>.\nTo provide access into eg. <code>Arc&lt;ArcSwap&lt;T&gt;&gt;</code>, you can create the <a href=\"arc_swap/access/struct.Map.html\" title=\"struct arc_swap::access::Map\"><code>Map</code></a> type directly. See\nthe <a href=\"arc_swap/access/index.html\" title=\"mod arc_swap::access\"><code>access</code></a> module.</p>\n<h5 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">§</a>Performance</h5>\n<p>As the provided function is called on each load from the shared storage, it should\ngenerally be cheap. It is expected this will usually be just referencing of a field inside\nthe structure.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">use </span>arc_swap::ArcSwap;\n<span class=\"kw\">use </span>arc_swap::access::Access;\n\n<span class=\"kw\">struct </span>Cfg {\n    value: usize,\n}\n\n<span class=\"kw\">fn </span>print_many_times&lt;V: Access&lt;usize&gt;&gt;(value: V) {\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">25 </span>{\n        <span class=\"kw\">let </span>value = value.load();\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>value);\n    }\n}\n\n<span class=\"kw\">let </span>shared = ArcSwap::from_pointee(Cfg { value: <span class=\"number\">0 </span>});\n<span class=\"kw\">let </span>mapped = shared.map(|c: <span class=\"kw-2\">&amp;</span>Cfg| <span class=\"kw-2\">&amp;</span>c.value);\ncrossbeam_utils::thread::scope(|s| {\n    <span class=\"comment\">// Will print some zeroes and some twos\n    </span>s.spawn(|<span class=\"kw\">_</span>| print_many_times(mapped));\n    s.spawn(|<span class=\"kw\">_</span>| shared.store(Arc::new(Cfg { value: <span class=\"number\">2 </span>})));\n}).expect(<span class=\"string\">\"Something panicked in a thread\"</span>);</code></pre></div>\n</div></details></div></details>",0,"arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#338-348\">Source</a><a href=\"#impl-Debug-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#342-347\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">FmtResult</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#359-363\">Source</a><a href=\"#impl-Default-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#360-362\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#350-357\">Source</a><a href=\"#impl-Display-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#354-356\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">FmtResult</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#326-336\">Source</a><a href=\"#impl-Drop-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>, S: <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#327-335\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","arc_swap::ArcSwap","arc_swap::ArcSwapOption"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-ArcSwapAny%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#320-324\">Source</a><a href=\"#impl-From%3CT%3E-for-ArcSwapAny%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"arc_swap/trait.RefCnt.html\" title=\"trait arc_swap::RefCnt\">RefCnt</a>, S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"arc_swap/strategy/trait.Strategy.html\" title=\"trait arc_swap::strategy::Strategy\">Strategy</a>&lt;T&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"arc_swap/struct.ArcSwapAny.html\" title=\"struct arc_swap::ArcSwapAny\">ArcSwapAny</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arc_swap/lib.rs.html#321-323\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<T>","arc_swap::ArcSwap","arc_swap::ArcSwapOption"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[38119]}