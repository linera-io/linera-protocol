(function() {
    var type_impls = Object.fromEntries([["async_graphql",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ContextBase%3C'a,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#232\">Source</a><a href=\"#impl-Clone-for-ContextBase%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#232\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","async_graphql::context::ContextSelectionSet","async_graphql::context::Context","async_graphql::context::ContextDirective"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextBase%3C'a,+%26Positioned%3CField%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#624-738\">Source</a><a href=\"#impl-ContextBase%3C'a,+%26Positioned%3CField%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'a, &amp;'a <a class=\"struct\" href=\"async_graphql_parser/pos/struct.Positioned.html\" title=\"struct async_graphql_parser::pos::Positioned\">Positioned</a>&lt;<a class=\"struct\" href=\"async_graphql_parser/types/executable/struct.Field.html\" title=\"struct async_graphql_parser::types::executable::Field\">Field</a>&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.look_ahead\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#686-688\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.look_ahead\" class=\"fn\">look_ahead</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_graphql/struct.Lookahead.html\" title=\"struct async_graphql::Lookahead\">Lookahead</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a uniform interface to inspect the forthcoming selections.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_graphql::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(SimpleObject)]\n</span><span class=\"kw\">struct </span>Detail {\n    c: i32,\n    d: i32,\n}\n\n<span class=\"attr\">#[derive(SimpleObject)]\n</span><span class=\"kw\">struct </span>MyObj {\n    a: i32,\n    b: i32,\n    detail: Detail,\n}\n\n<span class=\"kw\">struct </span>Query;\n\n<span class=\"attr\">#[Object]\n</span><span class=\"kw\">impl </span>Query {\n    <span class=\"kw\">async fn </span>obj(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ctx: <span class=\"kw-2\">&amp;</span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; MyObj {\n        <span class=\"kw\">if </span>ctx.look_ahead().field(<span class=\"string\">\"a\"</span>).exists() {\n            <span class=\"comment\">// This is a query like `obj { a }`\n        </span>} <span class=\"kw\">else if </span>ctx.look_ahead().field(<span class=\"string\">\"detail\"</span>).field(<span class=\"string\">\"c\"</span>).exists() {\n            <span class=\"comment\">// This is a query like `obj { detail { c } }`\n        </span>} <span class=\"kw\">else </span>{\n            <span class=\"comment\">// This query doesn't have `a`\n        </span>}\n        <span class=\"macro\">unimplemented!</span>()\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.field\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#731-737\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.field\" class=\"fn\">field</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_graphql/context/struct.SelectionField.html\" title=\"struct async_graphql::context::SelectionField\">SelectionField</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Get the current field.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_graphql::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(SimpleObject)]\n</span><span class=\"kw\">struct </span>MyObj {\n    a: i32,\n    b: i32,\n    c: i32,\n}\n\n<span class=\"kw\">pub struct </span>Query;\n\n<span class=\"attr\">#[Object]\n</span><span class=\"kw\">impl </span>Query {\n    <span class=\"kw\">async fn </span>obj(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ctx: <span class=\"kw-2\">&amp;</span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; MyObj {\n        <span class=\"kw\">let </span>fields = ctx\n            .field()\n            .selection_set()\n            .map(|field| field.name())\n            .collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n        <span class=\"macro\">assert_eq!</span>(fields, <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);\n        MyObj { a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span>, c: <span class=\"number\">3 </span>}\n    }\n}\n\n<span class=\"kw\">let </span>schema = Schema::new(Query, EmptyMutation, EmptySubscription);\n<span class=\"macro\">assert!</span>(schema.execute(<span class=\"string\">\"{ obj { a b c }}\"</span>).<span class=\"kw\">await</span>.is_ok());\n<span class=\"macro\">assert!</span>(schema.execute(<span class=\"string\">\"{ obj { a ... { b c } }}\"</span>).<span class=\"kw\">await</span>.is_ok());\n<span class=\"macro\">assert!</span>(\n    schema\n        .execute(<span class=\"string\">\"{ obj { a ... BC }} fragment BC on MyObj { b c }\"</span>)\n        .<span class=\"kw\">await\n        </span>.is_ok()\n);</code></pre></div>\n</div></details></div></details>",0,"async_graphql::context::Context"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextBase%3C'a,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#314-622\">Source</a><a href=\"#impl-ContextBase%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_error\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#368-370\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.add_error\" class=\"fn\">add_error</a>(&amp;self, error: <a class=\"struct\" href=\"async_graphql/struct.ServerError.html\" title=\"struct async_graphql::ServerError\">ServerError</a>)</h4></section></summary><div class=\"docblock\"><p>Report a resolver error.</p>\n<p>When implementing <code>OutputType</code>, if an error occurs, call this function\nto report this error and return <code>Value::Null</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#380-387\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.data\" class=\"fn\">data</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"type\" href=\"async_graphql/type.Result.html\" title=\"type async_graphql::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the global data defined in the <code>Context</code> or <code>Schema</code>.</p>\n<p>If both <code>Schema</code> and <code>Query</code> have the same data type, the data in the\n<code>Query</code> is obtained.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns a <code>Error</code> if the specified type data does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#394-397\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.data_unchecked\" class=\"fn\">data_unchecked</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a></h4></section></summary><div class=\"docblock\"><p>Gets the global data defined in the <code>Context</code> or <code>Schema</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>It will panic if the specified data type does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#401-409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.data_opt\" class=\"fn\">data_opt</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the global data defined in the <code>Context</code> or <code>Schema</code> or <code>None</code> if\nthe specified type data does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.http_header_contains\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#436-442\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.http_header_contains\" class=\"fn\">http_header_contains</a>(&amp;self, key: impl <a class=\"trait\" href=\"http/header/map/as_header_name/trait.AsHeaderName.html\" title=\"trait http::header::map::as_header_name::AsHeaderName\">AsHeaderName</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the HTTP header <code>key</code> is currently set on the response</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>::http::header::ACCESS_CONTROL_ALLOW_ORIGIN;\n<span class=\"kw\">use </span>async_graphql::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">struct </span>Query;\n\n<span class=\"attr\">#[Object]\n</span><span class=\"kw\">impl </span>Query {\n    <span class=\"kw\">async fn </span>greet(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ctx: <span class=\"kw-2\">&amp;</span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; String {\n        <span class=\"kw\">let </span>header_exists = ctx.http_header_contains(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>);\n        <span class=\"macro\">assert!</span>(!header_exists);\n\n        ctx.insert_http_header(ACCESS_CONTROL_ALLOW_ORIGIN, <span class=\"string\">\"*\"</span>);\n\n        <span class=\"kw\">let </span>header_exists = ctx.http_header_contains(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>);\n        <span class=\"macro\">assert!</span>(header_exists);\n\n        String::from(<span class=\"string\">\"Hello world\"</span>)\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_http_header\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#485-499\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.insert_http_header\" class=\"fn\">insert_http_header</a>(\n    &amp;self,\n    name: impl <a class=\"trait\" href=\"http/header/map/into_header_name/trait.IntoHeaderName.html\" title=\"trait http::header::map::into_header_name::IntoHeaderName\">IntoHeaderName</a>,\n    value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;<a class=\"struct\" href=\"http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets a HTTP header to response.</p>\n<p>If the header was not currently set on the response, then <code>None</code> is\nreturned.</p>\n<p>If the response already contained this header then the new value is\nassociated with this key and <strong>all the previous values are\nremoved</strong>, however only a the first previous value is returned.</p>\n<p>See <a href=\"http/header/map/struct.HeaderMap.html\" title=\"struct http::header::map::HeaderMap\"><code>http::HeaderMap</code></a> for more details on the underlying\nimplementation</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>::http::{HeaderValue, header::ACCESS_CONTROL_ALLOW_ORIGIN};\n<span class=\"kw\">use </span>async_graphql::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">struct </span>Query;\n\n<span class=\"attr\">#[Object]\n</span><span class=\"kw\">impl </span>Query {\n    <span class=\"kw\">async fn </span>greet(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ctx: <span class=\"kw-2\">&amp;</span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; String {\n        <span class=\"comment\">// Headers can be inserted using the `http` constants\n        </span><span class=\"kw\">let </span>was_in_headers = ctx.insert_http_header(ACCESS_CONTROL_ALLOW_ORIGIN, <span class=\"string\">\"*\"</span>);\n        <span class=\"macro\">assert_eq!</span>(was_in_headers, <span class=\"prelude-val\">None</span>);\n\n        <span class=\"comment\">// They can also be inserted using &amp;str\n        </span><span class=\"kw\">let </span>was_in_headers = ctx.insert_http_header(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"1234\"</span>);\n        <span class=\"macro\">assert_eq!</span>(was_in_headers, <span class=\"prelude-val\">None</span>);\n\n        <span class=\"comment\">// If multiple headers with the same key are `inserted` then the most recent\n        // one overwrites the previous. If you want multiple headers for the same key, use\n        // `append_http_header` for subsequent headers\n        </span><span class=\"kw\">let </span>was_in_headers = ctx.insert_http_header(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"Hello World\"</span>);\n        <span class=\"macro\">assert_eq!</span>(was_in_headers, <span class=\"prelude-val\">Some</span>(HeaderValue::from_static(<span class=\"string\">\"1234\"</span>)));\n\n        String::from(<span class=\"string\">\"Hello world\"</span>)\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_http_header\" class=\"method\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#536-550\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_graphql/context/struct.ContextBase.html#tymethod.append_http_header\" class=\"fn\">append_http_header</a>(\n    &amp;self,\n    name: impl <a class=\"trait\" href=\"http/header/map/into_header_name/trait.IntoHeaderName.html\" title=\"trait http::header::map::into_header_name::IntoHeaderName\">IntoHeaderName</a>,\n    value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;<a class=\"struct\" href=\"http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Sets a HTTP header to response.</p>\n<p>If the header was not currently set on the response, then <code>false</code> is\nreturned.</p>\n<p>If the response did have this header then the new value is appended to\nthe end of the list of values currently associated with the key,\nhowever the key is not updated <em>(which is important for types that\ncan be <code>==</code> without being identical)</em>.</p>\n<p>See <a href=\"http/header/map/struct.HeaderMap.html\" title=\"struct http::header::map::HeaderMap\"><code>http::HeaderMap</code></a> for more details on the underlying\nimplementation</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>::http::header::SET_COOKIE;\n<span class=\"kw\">use </span>async_graphql::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">struct </span>Query;\n\n<span class=\"attr\">#[Object]\n</span><span class=\"kw\">impl </span>Query {\n    <span class=\"kw\">async fn </span>greet(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, ctx: <span class=\"kw-2\">&amp;</span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; String {\n        <span class=\"comment\">// Insert the first instance of the header\n        </span>ctx.insert_http_header(SET_COOKIE, <span class=\"string\">\"Chocolate Chip\"</span>);\n\n        <span class=\"comment\">// Subsequent values should be appended\n        </span><span class=\"kw\">let </span>header_already_exists = ctx.append_http_header(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"Macadamia\"</span>);\n        <span class=\"macro\">assert!</span>(header_already_exists);\n\n        String::from(<span class=\"string\">\"Hello world\"</span>)\n    }\n}</code></pre></div>\n</div></details></div></details>",0,"async_graphql::context::ContextSelectionSet","async_graphql::context::Context","async_graphql::context::ContextDirective"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataContext%3C'a%3E-for-ContextBase%3C'a,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#300-312\">Source</a><a href=\"#impl-DataContext%3C'a%3E-for-ContextBase%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"async_graphql/context/trait.DataContext.html\" title=\"trait async_graphql::context::DataContext\">DataContext</a>&lt;'a&gt; for <a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.data\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#301-303\">Source</a><a href=\"#method.data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/context/trait.DataContext.html#tymethod.data\" class=\"fn\">data</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"type\" href=\"async_graphql/type.Result.html\" title=\"type async_graphql::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a>&gt;</h4></section></summary><div class='docblock'>Gets the global data defined in the <code>Context</code> or <code>Schema</code>. <a href=\"async_graphql/context/trait.DataContext.html#tymethod.data\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#305-307\">Source</a><a href=\"#method.data_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/context/trait.DataContext.html#tymethod.data_unchecked\" class=\"fn\">data_unchecked</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a></h4></section></summary><div class='docblock'>Gets the global data defined in the <code>Context</code> or <code>Schema</code>. <a href=\"async_graphql/context/trait.DataContext.html#tymethod.data_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_opt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/context.rs.html#309-311\">Source</a><a href=\"#method.data_opt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/context/trait.DataContext.html#tymethod.data_opt\" class=\"fn\">data_opt</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a D</a>&gt;</h4></section></summary><div class='docblock'>Gets the global data defined in the <code>Context</code> or <code>Schema</code> or <code>None</code> if\nthe specified type data does not exist.</div></details></div></details>","DataContext<'a>","async_graphql::context::ContextSelectionSet","async_graphql::context::Context","async_graphql::context::ContextDirective"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[26648]}