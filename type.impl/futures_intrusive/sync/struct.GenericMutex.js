(function() {
    var type_impls = Object.fromEntries([["futures_intrusive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericMutex%3CMutexType,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#422-430\">Source</a><a href=\"#impl-Debug-for-GenericMutex%3CMutexType,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>, T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutex.html\" title=\"struct futures_intrusive::sync::GenericMutex\">GenericMutex</a>&lt;MutexType, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#425-429\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","futures_intrusive::sync::mutex::if_std::Mutex","futures_intrusive::sync::mutex::LocalMutex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericMutex%3CMutexType,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#432-477\">Source</a><a href=\"#impl-GenericMutex%3CMutexType,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>, T&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutex.html\" title=\"struct futures_intrusive::sync::GenericMutex\">GenericMutex</a>&lt;MutexType, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#441-446\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericMutex.html#tymethod.new\" class=\"fn\">new</a>(value: T, is_fair: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutex.html\" title=\"struct futures_intrusive::sync::GenericMutex\">GenericMutex</a>&lt;MutexType, T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new futures-aware mutex.</p>\n<p><code>is_fair</code> defines whether the <code>Mutex</code> should behave be fair regarding the\norder of waiters. A fair <code>Mutex</code> will only allow the first waiter which\ntried to lock but failed to lock the <code>Mutex</code> once it’s available again.\nOther waiters must wait until either this locking attempt completes, and\nthe <code>Mutex</code> gets unlocked again, or until the <code>MutexLockFuture</code> which\ntried to gain the lock is dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#452-457\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericMutex.html#tymethod.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutexLockFuture.html\" title=\"struct futures_intrusive::sync::GenericMutexLockFuture\">GenericMutexLockFuture</a>&lt;'_, MutexType, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"GenericMutexLockFuture&lt;&#39;_, MutexType, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Acquire the mutex asynchronously.</p>\n<p>This method returns a future that will resolve once the mutex has been\nsuccessfully acquired.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_lock\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#465-471\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericMutex.html#tymethod.try_lock\" class=\"fn\">try_lock</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutexGuard.html\" title=\"struct futures_intrusive::sync::GenericMutexGuard\">GenericMutexGuard</a>&lt;'_, MutexType, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to acquire the mutex</p>\n<p>If acquiring the mutex is successful, a <a href=\"futures_intrusive/sync/struct.GenericMutexGuard.html\" title=\"struct futures_intrusive::sync::GenericMutexGuard\"><code>GenericMutexGuard</code></a>\nwill be returned, which allows to access the contained data.</p>\n<p>Otherwise <code>None</code> will be returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_locked\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#474-476\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericMutex.html#tymethod.is_locked\" class=\"fn\">is_locked</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the mutex is locked.</p>\n</div></details></div></details>",0,"futures_intrusive::sync::mutex::if_std::Mutex","futures_intrusive::sync::mutex::LocalMutex"],["<section id=\"impl-Send-for-GenericMutex%3CMutexType,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#412-415\">Source</a><a href=\"#impl-Send-for-GenericMutex%3CMutexType,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>, MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutex.html\" title=\"struct futures_intrusive::sync::GenericMutex\">GenericMutex</a>&lt;MutexType, T&gt;</h3></section>","Send","futures_intrusive::sync::mutex::if_std::Mutex","futures_intrusive::sync::mutex::LocalMutex"],["<section id=\"impl-Sync-for-GenericMutex%3CMutexType,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/mutex.rs.html#417-420\">Source</a><a href=\"#impl-Sync-for-GenericMutex%3CMutexType,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>, MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericMutex.html\" title=\"struct futures_intrusive::sync::GenericMutex\">GenericMutex</a>&lt;MutexType, T&gt;</h3></section>","Sync","futures_intrusive::sync::mutex::if_std::Mutex","futures_intrusive::sync::mutex::LocalMutex"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[8776]}