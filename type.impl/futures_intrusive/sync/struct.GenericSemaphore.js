(function() {
    var type_impls = Object.fromEntries([["futures_intrusive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericSemaphore%3CMutexType%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#443-449\">Source</a><a href=\"#impl-Debug-for-GenericSemaphore%3CMutexType%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphore.html\" title=\"struct futures_intrusive::sync::GenericSemaphore\">GenericSemaphore</a>&lt;MutexType&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#444-448\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","futures_intrusive::sync::semaphore::if_std::Semaphore","futures_intrusive::sync::semaphore::LocalSemaphore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSemaphore%3CMutexType%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#451-532\">Source</a><a href=\"#impl-GenericSemaphore%3CMutexType%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphore.html\" title=\"struct futures_intrusive::sync::GenericSemaphore\">GenericSemaphore</a>&lt;MutexType&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#470-474\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericSemaphore.html#tymethod.new\" class=\"fn\">new</a>(is_fair: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>, permits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphore.html\" title=\"struct futures_intrusive::sync::GenericSemaphore\">GenericSemaphore</a>&lt;MutexType&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new futures-aware semaphore.</p>\n<p><code>is_fair</code> defines whether the <code>Semaphore</code> should behave be fair regarding the\norder of waiters. A fair <code>Semaphore</code> will only allow the oldest waiter on\na <code>Semaphore</code> to retry acquiring it once it’s available again.\nOther waiters must wait until either this acquire attempt completes, and\nthe <code>Semaphore</code> has enough permits after that, or until the\n<a href=\"futures_intrusive/sync/type.SemaphoreAcquireFuture.html\" title=\"type futures_intrusive::sync::SemaphoreAcquireFuture\"><code>SemaphoreAcquireFuture</code></a> which tried to acquire the <code>Semaphore</code> is dropped.</p>\n<p>If the <code>Semaphore</code> isn’t fair, waiters that wait for a high amount of\npermits might never succeed since the permits might be stolen in between\nby other waiters. Therefore use-cases which make use of very different\namount of permits per acquire should use fair semaphores.\nFor use-cases where each <code>acquire()</code> tries to acquire the same amount of\npermits an unfair <code>Semaphore</code> might provide throughput advantages.</p>\n<p><code>permits</code> is the amount of permits that a semaphore should hold when\ncreated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acquire\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#482-491\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericSemaphore.html#tymethod.acquire\" class=\"fn\">acquire</a>(\n    &amp;self,\n    nr_permits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphoreAcquireFuture.html\" title=\"struct futures_intrusive::sync::GenericSemaphoreAcquireFuture\">GenericSemaphoreAcquireFuture</a>&lt;'_, MutexType&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"GenericSemaphoreAcquireFuture&lt;&#39;_, MutexType&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Acquire a certain amount of permits on a semaphore asynchronously.</p>\n<p>This method returns a future that will resolve once the given amount of\npermits have been acquired.\nThe Future will resolve to a <a href=\"futures_intrusive/sync/struct.GenericSemaphoreReleaser.html\" title=\"struct futures_intrusive::sync::GenericSemaphoreReleaser\"><code>GenericSemaphoreReleaser</code></a>, which will\nrelease all acquired permits automatically when dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_acquire\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#500-512\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericSemaphore.html#tymethod.try_acquire\" class=\"fn\">try_acquire</a>(\n    &amp;self,\n    nr_permits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphoreReleaser.html\" title=\"struct futures_intrusive::sync::GenericSemaphoreReleaser\">GenericSemaphoreReleaser</a>&lt;'_, MutexType&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to acquire a certain amount of permits on a semaphore.</p>\n<p>If acquiring the permits is successful, a <a href=\"futures_intrusive/sync/struct.GenericSemaphoreReleaser.html\" title=\"struct futures_intrusive::sync::GenericSemaphoreReleaser\"><code>GenericSemaphoreReleaser</code></a>\nwill be returned, which will release all acquired permits automatically\nwhen dropped.</p>\n<p>Otherwise <code>None</code> will be returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.release\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#524-526\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericSemaphore.html#tymethod.release\" class=\"fn\">release</a>(&amp;self, nr_permits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Releases the given amount of permits back to the semaphore.</p>\n<p>This method should in most cases not be used, since the\n<a href=\"futures_intrusive/sync/struct.GenericSemaphoreReleaser.html\" title=\"struct futures_intrusive::sync::GenericSemaphoreReleaser\"><code>GenericSemaphoreReleaser</code></a> which is obtained when acquiring a Semaphore\nwill automatically release the obtained permits again.</p>\n<p>Therefore this method should only be used if the automatic release was\ndisabled by calling <a href=\"futures_intrusive/sync/struct.GenericSemaphoreReleaser.html#method.disarm\" title=\"method futures_intrusive::sync::GenericSemaphoreReleaser::disarm\"><code>GenericSemaphoreReleaser::disarm</code></a>,\nor when the amount of permits in the Semaphore\nshould increase from the initial amount.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.permits\" class=\"method\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#529-531\">Source</a><h4 class=\"code-header\">pub fn <a href=\"futures_intrusive/sync/struct.GenericSemaphore.html#tymethod.permits\" class=\"fn\">permits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of permits that are available on the semaphore</p>\n</div></details></div></details>",0,"futures_intrusive::sync::semaphore::if_std::Semaphore","futures_intrusive::sync::semaphore::LocalSemaphore"],["<section id=\"impl-Send-for-GenericSemaphore%3CMutexType%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#439\">Source</a><a href=\"#impl-Send-for-GenericSemaphore%3CMutexType%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphore.html\" title=\"struct futures_intrusive::sync::GenericSemaphore\">GenericSemaphore</a>&lt;MutexType&gt;</h3></section>","Send","futures_intrusive::sync::semaphore::if_std::Semaphore","futures_intrusive::sync::semaphore::LocalSemaphore"],["<section id=\"impl-Sync-for-GenericSemaphore%3CMutexType%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_intrusive/sync/semaphore.rs.html#441\">Source</a><a href=\"#impl-Sync-for-GenericSemaphore%3CMutexType%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MutexType: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"futures_intrusive/sync/struct.GenericSemaphore.html\" title=\"struct futures_intrusive::sync::GenericSemaphore\">GenericSemaphore</a>&lt;MutexType&gt;</h3></section>","Sync","futures_intrusive::sync::semaphore::if_std::Semaphore","futures_intrusive::sync::semaphore::LocalSemaphore"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11447]}