(function() {
    var type_impls = Object.fromEntries([["linera_service_graphql_client",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#impl-Clone-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#178\">Source</a><a href=\"#impl-Debug-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#179\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#921\">Source</a><a href=\"#impl-Default-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3><div class=\"docblock\"><p>The default value is <code>Value::Null</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>This is useful for handling omitted <code>Value</code> fields when deserializing.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"attr\">#[derive(Deserialize)]\n</span><span class=\"kw\">struct </span>Settings {\n    level: i32,\n    <span class=\"attr\">#[serde(default)]\n    </span>extras: Value,\n}\n\n<span class=\"kw\">let </span>data = <span class=\"string\">r#\" { \"level\": 42 } \"#</span>;\n<span class=\"kw\">let </span>s: Settings = serde_json::from_str(data)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.level, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(s.extras, Value::Null);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#922\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#22\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#24-26\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserializer%3C'de%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#275\">Source</a><a href=\"#impl-Deserializer%3C'de%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#276\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a></h4></section></summary><div class='docblock'>The error type that can be returned if some error occurs during\ndeserialization.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_any\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#279-281\">Source</a><a href=\"#method.deserialize_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_any\" class=\"fn\">deserialize_any</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Require the <code>Deserializer</code> to figure out how to drive the visitor based\non what data type is in the input. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#296\">Source</a><a href=\"#method.deserialize_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_i8\" class=\"fn\">deserialize_i8</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#297\">Source</a><a href=\"#method.deserialize_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_i16\" class=\"fn\">deserialize_i16</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#298\">Source</a><a href=\"#method.deserialize_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_i32\" class=\"fn\">deserialize_i32</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#299\">Source</a><a href=\"#method.deserialize_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_i64\" class=\"fn\">deserialize_i64</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#300\">Source</a><a href=\"#method.deserialize_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#method.deserialize_i128\" class=\"fn\">deserialize_i128</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value. <a href=\"serde/de/trait.Deserializer.html#method.deserialize_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#301\">Source</a><a href=\"#method.deserialize_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_u8\" class=\"fn\">deserialize_u8</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#302\">Source</a><a href=\"#method.deserialize_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_u16\" class=\"fn\">deserialize_u16</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#303\">Source</a><a href=\"#method.deserialize_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_u32\" class=\"fn\">deserialize_u32</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#304\">Source</a><a href=\"#method.deserialize_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_u64\" class=\"fn\">deserialize_u64</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#305\">Source</a><a href=\"#method.deserialize_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#method.deserialize_u128\" class=\"fn\">deserialize_u128</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value. <a href=\"serde/de/trait.Deserializer.html#method.deserialize_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#306\">Source</a><a href=\"#method.deserialize_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_f32\" class=\"fn\">deserialize_f32</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#307\">Source</a><a href=\"#method.deserialize_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_f64\" class=\"fn\">deserialize_f64</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_option\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#310-312\">Source</a><a href=\"#method.deserialize_option\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_option\" class=\"fn\">deserialize_option</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an optional value. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_option\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_enum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#321-328\">Source</a><a href=\"#method.deserialize_enum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_enum\" class=\"fn\">deserialize_enum</a>&lt;V&gt;(\n    self,\n    name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>,\n    variants: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>],\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting an enum value with a\nparticular name and possible variants.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_newtype_struct\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#344-350\">Source</a><a href=\"#method.deserialize_newtype_struct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_newtype_struct\" class=\"fn\">deserialize_newtype_struct</a>&lt;V&gt;(\n    self,\n    name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a newtype struct with a\nparticular name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_bool\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#365-367\">Source</a><a href=\"#method.deserialize_bool\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_bool\" class=\"fn\">deserialize_bool</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_char\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#375-377\">Source</a><a href=\"#method.deserialize_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_char\" class=\"fn\">deserialize_char</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#382-384\">Source</a><a href=\"#method.deserialize_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_str\" class=\"fn\">deserialize_str</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n<code>Deserializer</code>. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#389-391\">Source</a><a href=\"#method.deserialize_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_string\" class=\"fn\">deserialize_string</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n<code>Deserializer</code>. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#400-402\">Source</a><a href=\"#method.deserialize_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_bytes\" class=\"fn\">deserialize_bytes</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n<code>Deserializer</code>. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_byte_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#407-409\">Source</a><a href=\"#method.deserialize_byte_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_byte_buf\" class=\"fn\">deserialize_byte_buf</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n<code>Deserializer</code>. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_byte_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#419-421\">Source</a><a href=\"#method.deserialize_unit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_unit\" class=\"fn\">deserialize_unit</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a unit value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unit_struct\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#429-431\">Source</a><a href=\"#method.deserialize_unit_struct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_unit_struct\" class=\"fn\">deserialize_unit_struct</a>&lt;V&gt;(\n    self,\n    _name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a unit struct with a\nparticular name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_seq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#436-438\">Source</a><a href=\"#method.deserialize_seq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_seq\" class=\"fn\">deserialize_seq</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a sequence of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_tuple\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#446-448\">Source</a><a href=\"#method.deserialize_tuple\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_tuple\" class=\"fn\">deserialize_tuple</a>&lt;V&gt;(\n    self,\n    _len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_tuple_struct\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#453-460\">Source</a><a href=\"#method.deserialize_tuple_struct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_tuple_struct\" class=\"fn\">deserialize_tuple_struct</a>&lt;V&gt;(\n    self,\n    _name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>,\n    _len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a tuple struct with a\nparticular name and number of fields.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#465-467\">Source</a><a href=\"#method.deserialize_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_map\" class=\"fn\">deserialize_map</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a map of key-value pairs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_struct\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#475-482\">Source</a><a href=\"#method.deserialize_struct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_struct\" class=\"fn\">deserialize_struct</a>&lt;V&gt;(\n    self,\n    _name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>,\n    _fields: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>],\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting a struct with a particular\nname and fields.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_identifier\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#491-493\">Source</a><a href=\"#method.deserialize_identifier\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_identifier\" class=\"fn\">deserialize_identifier</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type is expecting the name of a struct\nfield or the discriminant of an enum variant.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_ignored_any\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#498-500\">Source</a><a href=\"#method.deserialize_ignored_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_ignored_any\" class=\"fn\">deserialize_ignored_any</a>&lt;V&gt;(\n    self,\n    visitor: V,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;V as <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Visitor.html#associatedtype.Value\" title=\"type serde::de::Visitor::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"serde/de/trait.Visitor.html\" title=\"trait serde::de::Visitor\">Visitor</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Hint that the <code>Deserialize</code> type needs to deserialize a value whose type\ndoesn’t matter because it is ignored. <a href=\"serde/de/trait.Deserializer.html#tymethod.deserialize_ignored_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_human_readable\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/mod.rs.html#1222\">Source</a><a href=\"#method.is_human_readable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserializer.html#method.is_human_readable\" class=\"fn\">is_human_readable</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determine whether <code>Deserialize</code> implementations should expect to\ndeserialize their human-readable form. <a href=\"serde/de/trait.Deserializer.html#method.is_human_readable\">Read more</a></div></details></div></details>","Deserializer<'de>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#197\">Source</a><a href=\"#impl-Display-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#222\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Display a JSON value as a string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>json = <span class=\"macro\">json!</span>({ <span class=\"string\">\"city\"</span>: <span class=\"string\">\"London\"</span>, <span class=\"string\">\"street\"</span>: <span class=\"string\">\"10 Downing Street\" </span>});\n\n<span class=\"comment\">// Compact format:\n//\n// {\"city\":\"London\",\"street\":\"10 Downing Street\"}\n</span><span class=\"kw\">let </span>compact = <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, json);\n<span class=\"macro\">assert_eq!</span>(compact,\n    <span class=\"string\">\"{\\\"city\\\":\\\"London\\\",\\\"street\\\":\\\"10 Downing Street\\\"}\"</span>);\n\n<span class=\"comment\">// Pretty format:\n//\n// {\n//   \"city\": \"London\",\n//   \"street\": \"10 Downing Street\"\n// }\n</span><span class=\"kw\">let </span>pretty = <span class=\"macro\">format!</span>(<span class=\"string\">\"{:#}\"</span>, json);\n<span class=\"macro\">assert_eq!</span>(pretty,\n    <span class=\"string\">\"{\\n  \\\"city\\\": \\\"London\\\",\\n  \\\"street\\\": \\\"10 Downing Street\\\"\\n}\"</span>);</code></pre></div>\n</div></details></div></details>","Display","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#192\">Source</a><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#203\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert a slice to <code>Value::Array</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>v: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span>str] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"lorem\"</span>, <span class=\"string\">\"ipsum\"</span>, <span class=\"string\">\"dolor\"</span>];\n<span class=\"kw\">let </span>x: Value = v.into();</code></pre></div>\n</div></details></div></details>","From<&[T]>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#96\">Source</a><a href=\"#impl-From%3C%26str%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#107\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert string slice to <code>Value::String</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"lorem\"</span>;\n<span class=\"kw\">let </span>x: Value = s.into();</code></pre></div>\n</div></details></div></details>","From<&str>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#186\">Source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#187\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; N]>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C()%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#258\">Source</a><a href=\"#impl-From%3C()%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#269\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert <code>()</code> to <code>Value::Null</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>u = ();\n<span class=\"kw\">let </span>x: Value = u.into();</code></pre></div>\n</div></details></div></details>","From<()>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+str%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#112\">Source</a><a href=\"#impl-From%3CCow%3C'a,+str%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#132\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert copy-on-write string to <code>Value::String</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n<span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>s: Cow&lt;str&gt; = Cow::Borrowed(<span class=\"string\">\"lorem\"</span>);\n<span class=\"kw\">let </span>x: Value = s.into();</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n<span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>s: Cow&lt;str&gt; = Cow::Owned(<span class=\"string\">\"lorem\"</span>.to_owned());\n<span class=\"kw\">let </span>x: Value = s.into();</code></pre></div>\n</div></details></div></details>","From<Cow<'a, str>>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CMap%3CString,+Value%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#153\">Source</a><a href=\"#impl-From%3CMap%3CString,+Value%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"serde_json/map/struct.Map.html\" title=\"struct serde_json::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#165\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"serde_json/map/struct.Map.html\" title=\"struct serde_json::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert map (with string keys) to <code>Value::Object</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::{Map, Value};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = Map::new();\nm.insert(<span class=\"string\">\"Lorem\"</span>.to_owned(), <span class=\"string\">\"ipsum\"</span>.into());\n<span class=\"kw\">let </span>x: Value = m.into();</code></pre></div>\n</div></details></div></details>","From<Map<String, Value>>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNumber%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#137\">Source</a><a href=\"#impl-From%3CNumber%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"serde_json/number/struct.Number.html\" title=\"struct serde_json::number::Number\">Number</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#148\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"serde_json/number/struct.Number.html\" title=\"struct serde_json::number::Number\">Number</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert <code>Number</code> to <code>Value::Number</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::{Number, Value};\n\n<span class=\"kw\">let </span>n = Number::from(<span class=\"number\">7</span>);\n<span class=\"kw\">let </span>x: Value = n.into();</code></pre></div>\n</div></details></div></details>","From<Number>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CT%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#274-276\">Source</a><a href=\"#impl-From%3COption%3CT%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#278\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(opt: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Option<T>>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#80\">Source</a><a href=\"#impl-From%3CString%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#91\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert <code>String</code> to <code>Value::String</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>s: String = <span class=\"string\">\"lorem\"</span>.to_owned();\n<span class=\"kw\">let </span>x: Value = s.into();</code></pre></div>\n</div></details></div></details>","From<String>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CT%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#170\">Source</a><a href=\"#impl-From%3CVec%3CT%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#181\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert a <code>Vec</code> to <code>Value::Array</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"lorem\"</span>, <span class=\"string\">\"ipsum\"</span>, <span class=\"string\">\"dolor\"</span>];\n<span class=\"kw\">let </span>x: Value = v.into();</code></pre></div>\n</div></details></div></details>","From<Vec<T>>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#64\">Source</a><a href=\"#impl-From%3Cbool%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#75\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert boolean to <code>Value::Bool</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>b = <span class=\"bool-val\">false</span>;\n<span class=\"kw\">let </span>x: Value = b.into();</code></pre></div>\n</div></details></div></details>","From<bool>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#30\">Source</a><a href=\"#impl-From%3Cf32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#42\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert 32-bit floating point number to <code>Value::Number</code>, or\n<code>Value::Null</code> if infinite or NaN.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>f: f32 = <span class=\"number\">13.37</span>;\n<span class=\"kw\">let </span>x: Value = f.into();</code></pre></div>\n</div></details></div></details>","From<f32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#47\">Source</a><a href=\"#impl-From%3Cf64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#59\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(f: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Convert 64-bit floating point number to <code>Value::Number</code>, or\n<code>Value::Null</code> if infinite or NaN.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>f: f64 = <span class=\"number\">13.37</span>;\n<span class=\"kw\">let </span>x: Value = f.into();</code></pre></div>\n</div></details></div></details>","From<f64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Ci16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Ci32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Ci64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Ci8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i8>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cisize%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cisize%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<isize>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cu16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cu32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cu64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cu8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u8>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cusize%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#impl-From%3Cusize%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#20-23\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<usize>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#238\">Source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#249\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <code>Value::Object</code> by collecting an iterator of key-value pairs.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"macro\">vec!</span>[(<span class=\"string\">\"lorem\"</span>, <span class=\"number\">40</span>), (<span class=\"string\">\"ipsum\"</span>, <span class=\"number\">2</span>)];\n<span class=\"kw\">let </span>x: Value = v.into_iter().collect();</code></pre></div>\n</div></details></div></details>","FromIterator<(K, V)>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#208\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/from.rs.html#233\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <code>Value::Array</code> by collecting an iterator of array elements.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>v = std::iter::repeat(<span class=\"number\">42</span>).take(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>x: Value = v.collect();</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"string\">\"lorem\"</span>, <span class=\"string\">\"ipsum\"</span>, <span class=\"string\">\"dolor\"</span>];\n<span class=\"kw\">let </span>x: Value = v.into_iter().collect();</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::iter::FromIterator;\n<span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">let </span>x: Value = Value::from_iter(<span class=\"macro\">vec!</span>[<span class=\"string\">\"lorem\"</span>, <span class=\"string\">\"ipsum\"</span>, <span class=\"string\">\"dolor\"</span>]);</code></pre></div>\n</div></details></div></details>","FromIterator<T>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#155\">Source</a><a href=\"#impl-FromStr-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#156\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#157\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#impl-Hash-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/index.rs.html#178-180\">Source</a><a href=\"#impl-Index%3CI%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"serde_json/value/index/trait.Index.html\" title=\"trait serde_json::value::index::Index\">Index</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/index.rs.html#212\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\n<code>value[\"k\"]</code>.</p>\n<p>Returns <code>Value::Null</code> if the type of <code>self</code> does not match the type of\nthe index, for example if the index is a string and <code>self</code> is an array\nor a number. Also returns <code>Value::Null</code> if the given key does not exist\nin the map or the given index is not within the bounds of the array.</p>\n<p>For retrieving deeply nested values, you should have a look at the\n<code>Value::pointer</code> method.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>data = <span class=\"macro\">json!</span>({\n    <span class=\"string\">\"x\"</span>: {\n        <span class=\"string\">\"y\"</span>: [<span class=\"string\">\"z\"</span>, <span class=\"string\">\"zz\"</span>]\n    }\n});\n\n<span class=\"macro\">assert_eq!</span>(data[<span class=\"string\">\"x\"</span>][<span class=\"string\">\"y\"</span>], <span class=\"macro\">json!</span>([<span class=\"string\">\"z\"</span>, <span class=\"string\">\"zz\"</span>]));\n<span class=\"macro\">assert_eq!</span>(data[<span class=\"string\">\"x\"</span>][<span class=\"string\">\"y\"</span>][<span class=\"number\">0</span>], <span class=\"macro\">json!</span>(<span class=\"string\">\"z\"</span>));\n\n<span class=\"macro\">assert_eq!</span>(data[<span class=\"string\">\"a\"</span>], <span class=\"macro\">json!</span>(null)); <span class=\"comment\">// returns null for undefined values\n</span><span class=\"macro\">assert_eq!</span>(data[<span class=\"string\">\"a\"</span>][<span class=\"string\">\"b\"</span>], <span class=\"macro\">json!</span>(null)); <span class=\"comment\">// does not panic</span></code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/index.rs.html#182\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<I>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/index.rs.html#218-220\">Source</a><a href=\"#impl-IndexMut%3CI%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"serde_json/value/index/trait.Index.html\" title=\"trait serde_json::value::index::Index\">Index</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/index.rs.html#255\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Write into a <code>serde_json::Value</code> using the syntax <code>value[0] = ...</code> or\n<code>value[\"k\"] = ...</code>.</p>\n<p>If the index is a number, the value must be an array of length bigger\nthan the index. Indexing into a value that is not an array or an array\nthat is too small will panic.</p>\n<p>If the index is a string, the value must be an object or null which is\ntreated like an empty object. If the key is not already present in the\nobject, it will be inserted with a value of null. Indexing into a value\nthat is neither an object nor null will panic.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"macro\">json!</span>({ <span class=\"string\">\"x\"</span>: <span class=\"number\">0 </span>});\n\n<span class=\"comment\">// replace an existing key\n</span>data[<span class=\"string\">\"x\"</span>] = <span class=\"macro\">json!</span>(<span class=\"number\">1</span>);\n\n<span class=\"comment\">// insert a new key\n</span>data[<span class=\"string\">\"y\"</span>] = <span class=\"macro\">json!</span>([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>]);\n\n<span class=\"comment\">// replace an array value\n</span>data[<span class=\"string\">\"y\"</span>][<span class=\"number\">0</span>] = <span class=\"macro\">json!</span>(<span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// inserted a deeply nested key\n</span>data[<span class=\"string\">\"a\"</span>][<span class=\"string\">\"b\"</span>][<span class=\"string\">\"c\"</span>][<span class=\"string\">\"d\"</span>] = <span class=\"macro\">json!</span>(<span class=\"bool-val\">true</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, data);</code></pre></div>\n</div></details></div></details>","IndexMut<I>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputType-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#107\">Source</a><a href=\"#impl-InputType-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"async_graphql/base/trait.InputType.html\" title=\"trait async_graphql::base::InputType\">InputType</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.RawValueType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#108\">Source</a><a href=\"#associatedtype.RawValueType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"async_graphql/base/trait.InputType.html#associatedtype.RawValueType\" class=\"associatedtype\">RawValueType</a> = <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>The raw type used for validator. <a href=\"async_graphql/base/trait.InputType.html#associatedtype.RawValueType\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#110\">Source</a><a href=\"#method.type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#tymethod.type_name\" class=\"fn\">type_name</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Type the name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#114\">Source</a><a href=\"#method.create_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#tymethod.create_type_info\" class=\"fn\">create_type_info</a>(registry: &amp;mut Registry) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Create type information in the registry and return qualified typename.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#130\">Source</a><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#tymethod.parse\" class=\"fn\">parse</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, <a class=\"struct\" href=\"async_graphql/error/struct.InputValueError.html\" title=\"struct async_graphql::error::InputValueError\">InputValueError</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class='docblock'>Parse from <code>Value</code>. None represents undefined.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#134\">Source</a><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#tymethod.to_value\" class=\"fn\">to_value</a>(&amp;self) -&gt; <a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a></h4></section></summary><div class='docblock'>Convert to a <code>Value</code> for introspection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#138\">Source</a><a href=\"#method.as_raw_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#tymethod.as_raw_value\" class=\"fn\">as_raw_value</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a> as <a class=\"trait\" href=\"async_graphql/base/trait.InputType.html\" title=\"trait async_graphql::base::InputType\">InputType</a>&gt;::<a class=\"associatedtype\" href=\"async_graphql/base/trait.InputType.html#associatedtype.RawValueType\" title=\"type async_graphql::base::InputType::RawValueType\">RawValueType</a>&gt;</h4></section></summary><div class='docblock'>Returns a reference to the raw value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.qualified_type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/base.rs.html#44\">Source</a><a href=\"#method.qualified_type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.InputType.html#method.qualified_type_name\" class=\"fn\">qualified_type_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Qualified typename.</div></details></div></details>","InputType","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+Error%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#526\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+Error%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#527\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/de.rs.html#529\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(\n    self,\n) -&gt; &lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a> as <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, Error>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonRender-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/handlebars/json/value.rs.html#110\">Source</a><a href=\"#impl-JsonRender-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"handlebars/json/value/trait.JsonRender.html\" title=\"trait handlebars::json::value::JsonRender\">JsonRender</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.render\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/handlebars/json/value.rs.html#111\">Source</a><a href=\"#method.render\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"handlebars/json/value/trait.JsonRender.html#tymethod.render\" class=\"fn\">render</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></div></details>","JsonRender","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonTruthy-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/handlebars/json/value.rs.html#147\">Source</a><a href=\"#impl-JsonTruthy-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"handlebars/json/value/trait.JsonTruthy.html\" title=\"trait handlebars::json::value::JsonTruthy\">JsonTruthy</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.is_truthy\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/handlebars/json/value.rs.html#148\">Source</a><a href=\"#method.is_truthy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"handlebars/json/value/trait.JsonTruthy.html#tymethod.is_truthy\" class=\"fn\">is_truthy</a>(&amp;self, include_zero: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","JsonTruthy","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OutputType-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#144\">Source</a><a href=\"#impl-OutputType-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"async_graphql/base/trait.OutputType.html\" title=\"trait async_graphql::base::OutputType\">OutputType</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#145\">Source</a><a href=\"#method.type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.OutputType.html#tymethod.type_name\" class=\"fn\">type_name</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Type the name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#149\">Source</a><a href=\"#method.create_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.OutputType.html#tymethod.create_type_info\" class=\"fn\">create_type_info</a>(registry: &amp;mut Registry) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Create type information in the registry and return qualified typename.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/types/json.rs.html#165-169\">Source</a><a href=\"#method.resolve\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"async_graphql/base/trait.OutputType.html#tymethod.resolve\" class=\"fn\">resolve</a>(\n    &amp;self,\n    _ctx: &amp;<a class=\"struct\" href=\"async_graphql/context/struct.ContextBase.html\" title=\"struct async_graphql::context::ContextBase\">ContextBase</a>&lt;'_, &amp;<a class=\"struct\" href=\"async_graphql_parser/pos/struct.Positioned.html\" title=\"struct async_graphql_parser::pos::Positioned\">Positioned</a>&lt;<a class=\"struct\" href=\"async_graphql_parser/types/executable/struct.SelectionSet.html\" title=\"struct async_graphql_parser::types::executable::SelectionSet\">SelectionSet</a>&gt;&gt;,\n    _field: &amp;<a class=\"struct\" href=\"async_graphql_parser/pos/struct.Positioned.html\" title=\"struct async_graphql_parser::pos::Positioned\">Positioned</a>&lt;<a class=\"struct\" href=\"async_graphql_parser/types/executable/struct.Field.html\" title=\"struct async_graphql_parser::types::executable::Field\">Field</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a>, <a class=\"struct\" href=\"async_graphql/error/struct.ServerError.html\" title=\"struct async_graphql::error::ServerError\">ServerError</a>&gt;</h4></section></summary><div class='docblock'>Resolve an output value to <code>async_graphql::Value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.qualified_type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/base.rs.html#74\">Source</a><a href=\"#method.qualified_type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.OutputType.html#method.qualified_type_name\" class=\"fn\">qualified_type_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Qualified typename.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.introspection_type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql/base.rs.html#82\">Source</a><a href=\"#method.introspection_type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"async_graphql/base/trait.OutputType.html#method.introspection_type_name\" class=\"fn\">introspection_type_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Introspection type name <a href=\"async_graphql/base/trait.OutputType.html#method.introspection_type_name\">Read more</a></div></details></div></details>","OutputType","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#37\">Source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#38\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#55\">Source</a><a href=\"#impl-PartialEq%3CString%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#56\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cbool%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cbool%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<bool>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cf32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cf32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<f32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cf64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cf64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<f64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Ci16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<i16>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Ci32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<i32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Ci64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<i64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Ci8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<i8>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cisize%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cisize%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<isize>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#31\">Source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#32\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cu16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<u16>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cu32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<u32>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cu64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<u64>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cu8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<u8>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cusize%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3Cusize%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<usize>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#impl-PartialEq-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/ser.rs.html#11\">Source</a><a href=\"#impl-Serialize-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/value/ser.rs.html#13-15\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CValue%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#362\">Source</a><a href=\"#impl-TryFrom%3CValue%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#363\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#364\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, &lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.ConstValue.html\" title=\"enum async_graphql_value::ConstValue\">ConstValue</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<ConstValue>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CValue%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#499\">Source</a><a href=\"#impl-TryFrom%3CValue%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.Value.html\" title=\"enum async_graphql_value::Value\">Value</a>&gt; for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#500\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_graphql_value/lib.rs.html#501\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"enum\" href=\"async_graphql_value/enum.Value.html\" title=\"enum async_graphql_value::Value\">Value</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, &lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"async_graphql_value/enum.Value.html\" title=\"enum async_graphql_value::Value\">Value</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Value>","linera_service_graphql_client::service::JSONObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#266\">Source</a><a href=\"#impl-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#305\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"serde_json/value/index/trait.Index.html\" title=\"trait serde_json::value::index::Index\">Index</a>,</div></h4></section></summary><div class=\"docblock\"><p>Index into a JSON array or map. A string index can be used to access a\nvalue in a map, and a usize index can be used to access an element of an\narray.</p>\n<p>Returns <code>None</code> if the type of <code>self</code> does not match the type of the\nindex, for example if the index is a string and <code>self</code> is an array or a\nnumber. Also returns <code>None</code> if the given key does not exist in the map\nor the given index is not within the bounds of the array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>object = <span class=\"macro\">json!</span>({ <span class=\"string\">\"A\"</span>: <span class=\"number\">65</span>, <span class=\"string\">\"B\"</span>: <span class=\"number\">66</span>, <span class=\"string\">\"C\"</span>: <span class=\"number\">67 </span>});\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>object.get(<span class=\"string\">\"A\"</span>).unwrap(), <span class=\"macro\">json!</span>(<span class=\"number\">65</span>));\n\n<span class=\"kw\">let </span>array = <span class=\"macro\">json!</span>([ <span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\" </span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>array.get(<span class=\"number\">2</span>).unwrap(), <span class=\"macro\">json!</span>(<span class=\"string\">\"C\"</span>));\n\n<span class=\"macro\">assert_eq!</span>(array.get(<span class=\"string\">\"A\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Square brackets can also be used to index into a value in a more concise\nway. This returns <code>Value::Null</code> in cases where <code>get</code> would have returned\n<code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>object = <span class=\"macro\">json!</span>({\n    <span class=\"string\">\"A\"</span>: [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"á\"</span>, <span class=\"string\">\"à\"</span>],\n    <span class=\"string\">\"B\"</span>: [<span class=\"string\">\"b\"</span>, <span class=\"string\">\"b́\"</span>],\n    <span class=\"string\">\"C\"</span>: [<span class=\"string\">\"c\"</span>, <span class=\"string\">\"ć\"</span>, <span class=\"string\">\"ć̣\"</span>, <span class=\"string\">\"ḉ\"</span>],\n});\n<span class=\"macro\">assert_eq!</span>(object[<span class=\"string\">\"B\"</span>][<span class=\"number\">0</span>], <span class=\"macro\">json!</span>(<span class=\"string\">\"b\"</span>));\n\n<span class=\"macro\">assert_eq!</span>(object[<span class=\"string\">\"D\"</span>], <span class=\"macro\">json!</span>(null));\n<span class=\"macro\">assert_eq!</span>(object[<span class=\"number\">0</span>][<span class=\"string\">\"x\"</span>][<span class=\"string\">\"y\"</span>][<span class=\"string\">\"z\"</span>], <span class=\"macro\">json!</span>(null));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(&amp;mut self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"serde_json/value/index/trait.Index.html\" title=\"trait serde_json::value::index::Index\">Index</a>,</div></h4></section></summary><div class=\"docblock\"><p>Mutably index into a JSON array or map. A string index can be used to\naccess a value in a map, and a usize index can be used to access an\nelement of an array.</p>\n<p>Returns <code>None</code> if the type of <code>self</code> does not match the type of the\nindex, for example if the index is a string and <code>self</code> is an array or a\nnumber. Also returns <code>None</code> if the given key does not exist in the map\nor the given index is not within the bounds of the array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>object = <span class=\"macro\">json!</span>({ <span class=\"string\">\"A\"</span>: <span class=\"number\">65</span>, <span class=\"string\">\"B\"</span>: <span class=\"number\">66</span>, <span class=\"string\">\"C\"</span>: <span class=\"number\">67 </span>});\n<span class=\"kw-2\">*</span>object.get_mut(<span class=\"string\">\"A\"</span>).unwrap() = <span class=\"macro\">json!</span>(<span class=\"number\">69</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = <span class=\"macro\">json!</span>([ <span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\" </span>]);\n<span class=\"kw-2\">*</span>array.get_mut(<span class=\"number\">2</span>).unwrap() = <span class=\"macro\">json!</span>(<span class=\"string\">\"D\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_object\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_object\" class=\"fn\">is_object</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an Object. Returns false otherwise.</p>\n<p>For any Value on which <code>is_object</code> returns true, <code>as_object</code> and\n<code>as_object_mut</code> are guaranteed to return the map representation of the\nobject.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>obj = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: { <span class=\"string\">\"nested\"</span>: <span class=\"bool-val\">true </span>}, <span class=\"string\">\"b\"</span>: [<span class=\"string\">\"an\"</span>, <span class=\"string\">\"array\"</span>] });\n\n<span class=\"macro\">assert!</span>(obj.is_object());\n<span class=\"macro\">assert!</span>(obj[<span class=\"string\">\"a\"</span>].is_object());\n\n<span class=\"comment\">// array, not an object\n</span><span class=\"macro\">assert!</span>(!obj[<span class=\"string\">\"b\"</span>].is_object());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_object\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#366\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_object\" class=\"fn\">as_object</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"serde_json/map/struct.Map.html\" title=\"struct serde_json::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Object, returns the associated Map. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: { <span class=\"string\">\"nested\"</span>: <span class=\"bool-val\">true </span>}, <span class=\"string\">\"b\"</span>: [<span class=\"string\">\"an\"</span>, <span class=\"string\">\"array\"</span>] });\n\n<span class=\"comment\">// The length of `{\"nested\": true}` is 1 entry.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_object().unwrap().len(), <span class=\"number\">1</span>);\n\n<span class=\"comment\">// The array `[\"an\", \"array\"]` is not an object.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_object(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_object_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#384\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_object_mut\" class=\"fn\">as_object_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"serde_json/map/struct.Map.html\" title=\"struct serde_json::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Object, returns the associated mutable Map.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: { <span class=\"string\">\"nested\"</span>: <span class=\"bool-val\">true </span>} });\n\nv[<span class=\"string\">\"a\"</span>].as_object_mut().unwrap().clear();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: {} }));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_array\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#407\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_array\" class=\"fn\">is_array</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an Array. Returns false otherwise.</p>\n<p>For any Value on which <code>is_array</code> returns true, <code>as_array</code> and\n<code>as_array_mut</code> are guaranteed to return the vector representing the\narray.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>obj = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: [<span class=\"string\">\"an\"</span>, <span class=\"string\">\"array\"</span>], <span class=\"string\">\"b\"</span>: { <span class=\"string\">\"an\"</span>: <span class=\"string\">\"object\" </span>} });\n\n<span class=\"macro\">assert!</span>(obj[<span class=\"string\">\"a\"</span>].is_array());\n\n<span class=\"comment\">// an object, not an array\n</span><span class=\"macro\">assert!</span>(!obj[<span class=\"string\">\"b\"</span>].is_array());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#425\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_array\" class=\"fn\">as_array</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Array, returns the associated vector. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: [<span class=\"string\">\"an\"</span>, <span class=\"string\">\"array\"</span>], <span class=\"string\">\"b\"</span>: { <span class=\"string\">\"an\"</span>: <span class=\"string\">\"object\" </span>} });\n\n<span class=\"comment\">// The length of `[\"an\", \"array\"]` is 2 elements.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_array().unwrap().len(), <span class=\"number\">2</span>);\n\n<span class=\"comment\">// The object `{\"an\": \"object\"}` is not an array.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_array(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#443\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_array_mut\" class=\"fn\">as_array_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Array, returns the associated mutable vector.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: [<span class=\"string\">\"an\"</span>, <span class=\"string\">\"array\"</span>] });\n\nv[<span class=\"string\">\"a\"</span>].as_array_mut().unwrap().clear();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: [] }));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_string\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#465\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_string\" class=\"fn\">is_string</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a String. Returns false otherwise.</p>\n<p>For any Value on which <code>is_string</code> returns true, <code>as_str</code> is guaranteed\nto return the string slice.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"string\">\"some string\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"bool-val\">false </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_string());\n\n<span class=\"comment\">// The boolean `false` is not a string.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_string());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#492\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a String, returns the associated str. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"string\">\"some string\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"bool-val\">false </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"some string\"</span>));\n\n<span class=\"comment\">// The boolean `false` is not a string.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_str(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// JSON values are printed in JSON representation, so strings are in quotes.\n//\n//    The value is: \"some string\"\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"The value is: {}\"</span>, v[<span class=\"string\">\"a\"</span>]);\n\n<span class=\"comment\">// Rust strings are printed without quotes.\n//\n//    The value is: some string\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"The value is: {}\"</span>, v[<span class=\"string\">\"a\"</span>].as_str().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_number\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#511\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_number\" class=\"fn\">is_number</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a Number. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\" </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_number());\n\n<span class=\"comment\">// The string `\"2\"` is a string, not a number.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_number());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_number\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#533\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_number\" class=\"fn\">as_number</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"serde_json/number/struct.Number.html\" title=\"struct serde_json::number::Number\">Number</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a Number, returns the associated <a href=\"serde_json/number/struct.Number.html\" title=\"struct serde_json::number::Number\"><code>Number</code></a>. Returns\nNone otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">2.2</span>, <span class=\"string\">\"c\"</span>: -<span class=\"number\">3</span>, <span class=\"string\">\"d\"</span>: <span class=\"string\">\"4\" </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_number(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Number::from(<span class=\"number\">1u64</span>)));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_number(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Number::from_f64(<span class=\"number\">2.2</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"c\"</span>].as_number(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Number::from(-<span class=\"number\">3i64</span>)));\n\n<span class=\"comment\">// The string `\"4\"` is not a number.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"d\"</span>].as_number(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_i64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#560\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_i64\" class=\"fn\">is_i64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> and\n<code>i64::MAX</code>.</p>\n<p>For any Value on which <code>is_i64</code> returns true, <code>as_i64</code> is guaranteed to\nreturn the integer value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>big = i64::max_value() <span class=\"kw\">as </span>u64 + <span class=\"number\">10</span>;\n<span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"b\"</span>: big, <span class=\"string\">\"c\"</span>: <span class=\"number\">256.0 </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_i64());\n\n<span class=\"comment\">// Greater than i64::MAX.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_i64());\n\n<span class=\"comment\">// Numbers with a decimal point are not considered integers.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"c\"</span>].is_i64());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_u64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#585\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_u64\" class=\"fn\">is_u64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an integer between zero and <code>u64::MAX</code>.</p>\n<p>For any Value on which <code>is_u64</code> returns true, <code>as_u64</code> is guaranteed to\nreturn the integer value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"b\"</span>: -<span class=\"number\">64</span>, <span class=\"string\">\"c\"</span>: <span class=\"number\">256.0 </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_u64());\n\n<span class=\"comment\">// Negative integer.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_u64());\n\n<span class=\"comment\">// Numbers with a decimal point are not considered integers.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"c\"</span>].is_u64());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_f64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#611\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_f64\" class=\"fn\">is_f64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a number that can be represented by f64.</p>\n<p>For any Value on which <code>is_f64</code> returns true, <code>as_f64</code> is guaranteed to\nreturn the floating point value.</p>\n<p>Currently this function returns true if and only if both <code>is_i64</code> and\n<code>is_u64</code> return false but this is not a guarantee in the future.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">256.0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"c\"</span>: -<span class=\"number\">64 </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_f64());\n\n<span class=\"comment\">// Integers.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_f64());\n<span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"c\"</span>].is_f64());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#631\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_i64\" class=\"fn\">as_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an integer, represent it as i64 if possible. Returns\nNone otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>big = i64::max_value() <span class=\"kw\">as </span>u64 + <span class=\"number\">10</span>;\n<span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"b\"</span>: big, <span class=\"string\">\"c\"</span>: <span class=\"number\">256.0 </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_i64(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_i64(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"c\"</span>].as_i64(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#650\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_u64\" class=\"fn\">as_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an integer, represent it as u64 if possible. Returns\nNone otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"b\"</span>: -<span class=\"number\">64</span>, <span class=\"string\">\"c\"</span>: <span class=\"number\">256.0 </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_u64(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_u64(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"c\"</span>].as_u64(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_f64\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#669\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_f64\" class=\"fn\">as_f64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a number, represent it as f64 if possible. Returns\nNone otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"number\">256.0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">64</span>, <span class=\"string\">\"c\"</span>: -<span class=\"number\">64 </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_f64(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">256.0</span>));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_f64(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64.0</span>));\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"c\"</span>].as_f64(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">64.0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_boolean\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#691\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_boolean\" class=\"fn\">is_boolean</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a Boolean. Returns false otherwise.</p>\n<p>For any Value on which <code>is_boolean</code> returns true, <code>as_bool</code> is\nguaranteed to return the boolean value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"bool-val\">false</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"false\" </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_boolean());\n\n<span class=\"comment\">// The string `\"false\"` is a string, not a boolean.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_boolean());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bool\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#708\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_bool\" class=\"fn\">as_bool</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a Boolean, returns the associated bool. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: <span class=\"bool-val\">false</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"false\" </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_bool(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// The string `\"false\"` is a string, not a boolean.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_bool(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_null\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#730\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.is_null\" class=\"fn\">is_null</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a Null. Returns false otherwise.</p>\n<p>For any Value on which <code>is_null</code> returns true, <code>as_null</code> is guaranteed\nto return <code>Some(())</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: null, <span class=\"string\">\"b\"</span>: <span class=\"bool-val\">false </span>});\n\n<span class=\"macro\">assert!</span>(v[<span class=\"string\">\"a\"</span>].is_null());\n\n<span class=\"comment\">// The boolean `false` is not null.\n</span><span class=\"macro\">assert!</span>(!v[<span class=\"string\">\"b\"</span>].is_null());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_null\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#746\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.as_null\" class=\"fn\">as_null</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a Null, returns (). Returns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"a\"</span>: null, <span class=\"string\">\"b\"</span>: <span class=\"bool-val\">false </span>});\n\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"a\"</span>].as_null(), <span class=\"prelude-val\">Some</span>(()));\n\n<span class=\"comment\">// The boolean `false` is not null.\n</span><span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"b\"</span>].as_null(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pointer\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#779\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.pointer\" class=\"fn\">pointer</a>(&amp;self, pointer: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Looks up a value by a JSON Pointer.</p>\n<p>JSON Pointer defines a string syntax for identifying a specific value\nwithin a JavaScript Object Notation (JSON) document.</p>\n<p>A Pointer is a Unicode string with the reference tokens separated by <code>/</code>.\nInside tokens <code>/</code> is replaced by <code>~1</code> and <code>~</code> is replaced by <code>~0</code>. The\naddressed value is returned and if there is no such value <code>None</code> is\nreturned.</p>\n<p>For more information read <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>data = <span class=\"macro\">json!</span>({\n    <span class=\"string\">\"x\"</span>: {\n        <span class=\"string\">\"y\"</span>: [<span class=\"string\">\"z\"</span>, <span class=\"string\">\"zz\"</span>]\n    }\n});\n\n<span class=\"macro\">assert_eq!</span>(data.pointer(<span class=\"string\">\"/x/y/1\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"macro\">json!</span>(<span class=\"string\">\"zz\"</span>));\n<span class=\"macro\">assert_eq!</span>(data.pointer(<span class=\"string\">\"/a/b/c\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pointer_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#834\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.pointer_mut\" class=\"fn\">pointer_mut</a>(&amp;mut self, pointer: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Looks up a value by a JSON Pointer and returns a mutable reference to\nthat value.</p>\n<p>JSON Pointer defines a string syntax for identifying a specific value\nwithin a JavaScript Object Notation (JSON) document.</p>\n<p>A Pointer is a Unicode string with the reference tokens separated by <code>/</code>.\nInside tokens <code>/</code> is replaced by <code>~1</code> and <code>~</code> is replaced by <code>~0</code>. The\naddressed value is returned and if there is no such value <code>None</code> is\nreturned.</p>\n<p>For more information read <a href=\"https://tools.ietf.org/html/rfc6901\">RFC6901</a>.</p>\n<h5 id=\"example-of-use\"><a class=\"doc-anchor\" href=\"#example-of-use\">§</a>Example of Use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>serde_json::Value;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>s = <span class=\"string\">r#\"{\"x\": 1.0, \"y\": 2.0}\"#</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value: Value = serde_json::from_str(s).unwrap();\n\n    <span class=\"comment\">// Check value using read-only pointer\n    </span><span class=\"macro\">assert_eq!</span>(value.pointer(<span class=\"string\">\"/x\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1.0</span>.into()));\n    <span class=\"comment\">// Change value with direct assignment\n    </span><span class=\"kw-2\">*</span>value.pointer_mut(<span class=\"string\">\"/x\"</span>).unwrap() = <span class=\"number\">1.5</span>.into();\n    <span class=\"comment\">// Check that new value was written\n    </span><span class=\"macro\">assert_eq!</span>(value.pointer(<span class=\"string\">\"/x\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1.5</span>.into()));\n    <span class=\"comment\">// Or change the value only if it exists\n    </span>value.pointer_mut(<span class=\"string\">\"/x\"</span>).map(|v| <span class=\"kw-2\">*</span>v = <span class=\"number\">1.5</span>.into());\n\n    <span class=\"comment\">// \"Steal\" ownership of a value. Can replace with any valid Value.\n    </span><span class=\"kw\">let </span>old_x = value.pointer_mut(<span class=\"string\">\"/x\"</span>).map(Value::take).unwrap();\n    <span class=\"macro\">assert_eq!</span>(old_x, <span class=\"number\">1.5</span>);\n    <span class=\"macro\">assert_eq!</span>(value.pointer(<span class=\"string\">\"/x\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span>Value::Null);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#861\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its place.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">json!</span>({ <span class=\"string\">\"x\"</span>: <span class=\"string\">\"y\" </span>});\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"string\">\"x\"</span>].take(), <span class=\"macro\">json!</span>(<span class=\"string\">\"y\"</span>));\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">json!</span>({ <span class=\"string\">\"x\"</span>: null }));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_all_objects\" class=\"method\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#875\">Source</a><h4 class=\"code-header\">pub fn <a href=\"serde_json/value/enum.Value.html#tymethod.sort_all_objects\" class=\"fn\">sort_all_objects</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reorders the entries of all <code>Value::Object</code> nested within this JSON\nvalue according to <code>str</code>’s usual ordering.</p>\n<p>If serde_json’s “preserve_order” feature is not enabled, this method\ndoes no work because all JSON maps are always kept in a sorted state.</p>\n<p>If serde_json’s “preserve_order” feature is enabled, this method\ndestroys the original source order or insertion order of the JSON\nobjects in favor of an alphanumerical order that matches how a BTreeMap\nwith the same contents would be ordered.</p>\n</div></details></div></details>",0,"linera_service_graphql_client::service::JSONObject"],["<section id=\"impl-Eq-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#impl-Eq-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section>","Eq","linera_service_graphql_client::service::JSONObject"],["<section id=\"impl-StructuralPartialEq-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/value/mod.rs.html#115\">Source</a><a href=\"#impl-StructuralPartialEq-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a></h3></section>","StructuralPartialEq","linera_service_graphql_client::service::JSONObject"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[231400]}