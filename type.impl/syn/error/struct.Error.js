(function() {
    var type_impls = Object.fromEntries([["deluxe",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#378\">Source</a><a href=\"#impl-Clone-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#379\">Source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#350\">Source</a><a href=\"#impl-Debug-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#351\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#372\">Source</a><a href=\"#impl-Display-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#373\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#403\">Source</a><a href=\"#impl-Error-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#81\">Source</a></span><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#107\">Source</a></span><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#117\">Source</a></span><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#180\">Source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#127\">Source</a><a href=\"#impl-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#158\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(span: <a class=\"struct\" href=\"proc_macro2/struct.Span.html\" title=\"struct proc_macro2::Span\">Span</a>, message: T) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h4></section></summary><div class=\"docblock\"><p>Usually the <a href=\"https://docs.rs/syn/2.0.105/syn/parse/struct.ParseBuffer.html#method.error\" title=\"method syn::parse::ParseBuffer::error\"><code>ParseStream::error</code></a> method will be used instead, which\nautomatically uses the correct span from the current position of the\nparse stream.</p>\n<p>Use <code>Error::new</code> when the error needs to be triggered on some span other\nthan where the parse stream is currently positioned.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>syn::{Error, Ident, LitStr, <span class=\"prelude-ty\">Result</span>, Token};\n<span class=\"kw\">use </span>syn::parse::ParseStream;\n\n<span class=\"comment\">// Parses input that looks like `name = \"string\"` where the key must be\n// the identifier `name` and the value may be any string literal.\n// Returns the string literal.\n</span><span class=\"kw\">fn </span>parse_name(input: ParseStream) -&gt; <span class=\"prelude-ty\">Result</span>&lt;LitStr&gt; {\n    <span class=\"kw\">let </span>name_token: Ident = input.parse()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">if </span>name_token != <span class=\"string\">\"name\" </span>{\n        <span class=\"comment\">// Trigger an error not on the current position of the stream,\n        // but on the position of the unexpected identifier.\n        </span><span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(Error::new(name_token.span(), <span class=\"string\">\"expected `name`\"</span>));\n    }\n    input.parse::&lt;<span class=\"macro\">Token!</span>[=]&gt;()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>s: LitStr = input.parse()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(s)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_spanned\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.new_spanned\" class=\"fn\">new_spanned</a>&lt;T, U&gt;(tokens: T, message: U) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a>,\n    U: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates an error with the specified message spanning the given syntax\ntree node.</p>\n<p>Unlike the <code>Error::new</code> constructor, this constructor takes an argument\n<code>tokens</code> which is a syntax tree node. This allows the resulting <code>Error</code>\nto attempt to span all tokens inside of <code>tokens</code>. While you would\ntypically be able to use the <code>Spanned</code> trait with the above <code>Error::new</code>\nconstructor, implementation limitations today mean that\n<code>Error::new_spanned</code> may provide a higher-quality error message on\nstable Rust.</p>\n<p>When in doubt itâ€™s recommended to stick to <code>Error::new</code> (or\n<code>ParseStream::error</code>)!</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.span\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#210\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.span\" class=\"fn\">span</a>(&amp;self) -&gt; <a class=\"struct\" href=\"proc_macro2/struct.Span.html\" title=\"struct proc_macro2::Span\">Span</a></h4></section></summary><div class=\"docblock\"><p>The source location of the error.</p>\n<p>Spans are not thread-safe so this function returns <code>Span::call_site()</code>\nif called from a different thread than the one on which the <code>Error</code> was\noriginally created.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_compile_error\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.to_compile_error\" class=\"fn\">to_compile_error</a>(&amp;self) -&gt; <a class=\"struct\" href=\"proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class=\"docblock\"><p>Render the error as an invocation of <a href=\"https://doc.rust-lang.org/1.86.0/core/macro.compile_error.html\" title=\"macro core::compile_error\"><code>compile_error!</code></a>.</p>\n<p>The <a href=\"https://docs.rs/syn/2.0.105/syn/macro.parse_macro_input.html\" title=\"macro syn::parse_macro_input\"><code>parse_macro_input!</code></a> macro provides a convenient way to invoke\nthis method correctly in a procedural macro.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_compile_error\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#264\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.into_compile_error\" class=\"fn\">into_compile_error</a>(self) -&gt; <a class=\"struct\" href=\"proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class=\"docblock\"><p>Render the error as an invocation of <a href=\"https://doc.rust-lang.org/1.86.0/core/macro.compile_error.html\" title=\"macro core::compile_error\"><code>compile_error!</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>proc_macro::TokenStream;\n<span class=\"kw\">use </span>syn::{parse_macro_input, DeriveInput, Error};\n\n<span class=\"attr\">#[proc_macro_derive(MyTrait)]\n</span><span class=\"kw\">pub fn </span>derive_my_trait(input: TokenStream) -&gt; TokenStream {\n    <span class=\"kw\">let </span>input = <span class=\"macro\">parse_macro_input!</span>(input <span class=\"kw\">as </span>DeriveInput);\n    my_trait::expand(input)\n        .unwrap_or_else(Error::into_compile_error)\n        .into()\n}\n\n<span class=\"kw\">mod </span>my_trait {\n    <span class=\"kw\">use </span>proc_macro2::TokenStream;\n    <span class=\"kw\">use </span>syn::{DeriveInput, <span class=\"prelude-ty\">Result</span>};\n\n    <span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">fn </span>expand(input: DeriveInput) -&gt; <span class=\"prelude-ty\">Result</span>&lt;TokenStream&gt; {\n        <span class=\"comment\">/* ... */\n    </span>}\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#270\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.combine\" class=\"fn\">combine</a>(&amp;mut self, another: <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>)</h4></section></summary><div class=\"docblock\"><p>Add another error message to self such that when <code>to_compile_error()</code> is\ncalled, both errors will be emitted together.</p>\n</div></details></div></details>",0,"deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#461\">Source</a><a href=\"#impl-Extend%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#462\">Source</a><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Error>","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CLexError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#405\">Source</a><a href=\"#impl-From%3CLexError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"proc_macro2/struct.LexError.html\" title=\"struct proc_macro2::LexError\">LexError</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#406\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"proc_macro2/struct.LexError.html\" title=\"struct proc_macro2::LexError\">LexError</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<LexError>","deluxe::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#411\">Source</a><a href=\"#impl-IntoIterator-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#412\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#413\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#415\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","deluxe::Error"]]],["deluxe_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#378\">Source</a><a href=\"#impl-Clone-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#379\">Source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#350\">Source</a><a href=\"#impl-Debug-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#351\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#372\">Source</a><a href=\"#impl-Display-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#373\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#403\">Source</a><a href=\"#impl-Error-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#81\">Source</a></span><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#107\">Source</a></span><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#117\">Source</a></span><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/error.rs.html#180\">Source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.86.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#127\">Source</a><a href=\"#impl-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#158\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(span: <a class=\"struct\" href=\"deluxe_core/struct.Span.html\" title=\"struct deluxe_core::Span\">Span</a>, message: T) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h4></section></summary><div class=\"docblock\"><p>Usually the <a href=\"https://docs.rs/syn/2.0.105/syn/parse/struct.ParseBuffer.html#method.error\" title=\"method syn::parse::ParseBuffer::error\"><code>ParseStream::error</code></a> method will be used instead, which\nautomatically uses the correct span from the current position of the\nparse stream.</p>\n<p>Use <code>Error::new</code> when the error needs to be triggered on some span other\nthan where the parse stream is currently positioned.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>syn::{Error, Ident, LitStr, <span class=\"prelude-ty\">Result</span>, Token};\n<span class=\"kw\">use </span>syn::parse::ParseStream;\n\n<span class=\"comment\">// Parses input that looks like `name = \"string\"` where the key must be\n// the identifier `name` and the value may be any string literal.\n// Returns the string literal.\n</span><span class=\"kw\">fn </span>parse_name(input: ParseStream) -&gt; <span class=\"prelude-ty\">Result</span>&lt;LitStr&gt; {\n    <span class=\"kw\">let </span>name_token: Ident = input.parse()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">if </span>name_token != <span class=\"string\">\"name\" </span>{\n        <span class=\"comment\">// Trigger an error not on the current position of the stream,\n        // but on the position of the unexpected identifier.\n        </span><span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(Error::new(name_token.span(), <span class=\"string\">\"expected `name`\"</span>));\n    }\n    input.parse::&lt;<span class=\"macro\">Token!</span>[=]&gt;()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>s: LitStr = input.parse()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(s)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_spanned\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.new_spanned\" class=\"fn\">new_spanned</a>&lt;T, U&gt;(tokens: T, message: U) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a>,\n    U: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates an error with the specified message spanning the given syntax\ntree node.</p>\n<p>Unlike the <code>Error::new</code> constructor, this constructor takes an argument\n<code>tokens</code> which is a syntax tree node. This allows the resulting <code>Error</code>\nto attempt to span all tokens inside of <code>tokens</code>. While you would\ntypically be able to use the <code>Spanned</code> trait with the above <code>Error::new</code>\nconstructor, implementation limitations today mean that\n<code>Error::new_spanned</code> may provide a higher-quality error message on\nstable Rust.</p>\n<p>When in doubt itâ€™s recommended to stick to <code>Error::new</code> (or\n<code>ParseStream::error</code>)!</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.span\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#210\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.span\" class=\"fn\">span</a>(&amp;self) -&gt; <a class=\"struct\" href=\"deluxe_core/struct.Span.html\" title=\"struct deluxe_core::Span\">Span</a></h4></section></summary><div class=\"docblock\"><p>The source location of the error.</p>\n<p>Spans are not thread-safe so this function returns <code>Span::call_site()</code>\nif called from a different thread than the one on which the <code>Error</code> was\noriginally created.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_compile_error\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.to_compile_error\" class=\"fn\">to_compile_error</a>(&amp;self) -&gt; <a class=\"struct\" href=\"proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class=\"docblock\"><p>Render the error as an invocation of <a href=\"https://doc.rust-lang.org/1.86.0/core/macro.compile_error.html\" title=\"macro core::compile_error\"><code>compile_error!</code></a>.</p>\n<p>The <a href=\"https://docs.rs/syn/2.0.105/syn/macro.parse_macro_input.html\" title=\"macro syn::parse_macro_input\"><code>parse_macro_input!</code></a> macro provides a convenient way to invoke\nthis method correctly in a procedural macro.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_compile_error\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#264\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.into_compile_error\" class=\"fn\">into_compile_error</a>(self) -&gt; <a class=\"struct\" href=\"proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class=\"docblock\"><p>Render the error as an invocation of <a href=\"https://doc.rust-lang.org/1.86.0/core/macro.compile_error.html\" title=\"macro core::compile_error\"><code>compile_error!</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>proc_macro::TokenStream;\n<span class=\"kw\">use </span>syn::{parse_macro_input, DeriveInput, Error};\n\n<span class=\"attr\">#[proc_macro_derive(MyTrait)]\n</span><span class=\"kw\">pub fn </span>derive_my_trait(input: TokenStream) -&gt; TokenStream {\n    <span class=\"kw\">let </span>input = <span class=\"macro\">parse_macro_input!</span>(input <span class=\"kw\">as </span>DeriveInput);\n    my_trait::expand(input)\n        .unwrap_or_else(Error::into_compile_error)\n        .into()\n}\n\n<span class=\"kw\">mod </span>my_trait {\n    <span class=\"kw\">use </span>proc_macro2::TokenStream;\n    <span class=\"kw\">use </span>syn::{DeriveInput, <span class=\"prelude-ty\">Result</span>};\n\n    <span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">fn </span>expand(input: DeriveInput) -&gt; <span class=\"prelude-ty\">Result</span>&lt;TokenStream&gt; {\n        <span class=\"comment\">/* ... */\n    </span>}\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#270\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html#tymethod.combine\" class=\"fn\">combine</a>(&amp;mut self, another: <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>)</h4></section></summary><div class=\"docblock\"><p>Add another error message to self such that when <code>to_compile_error()</code> is\ncalled, both errors will be emitted together.</p>\n</div></details></div></details>",0,"deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#461\">Source</a><a href=\"#impl-Extend%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#462\">Source</a><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Error>","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CLexError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#405\">Source</a><a href=\"#impl-From%3CLexError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"proc_macro2/struct.LexError.html\" title=\"struct proc_macro2::LexError\">LexError</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#406\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"proc_macro2/struct.LexError.html\" title=\"struct proc_macro2::LexError\">LexError</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<LexError>","deluxe_core::util::Error"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#411\">Source</a><a href=\"#impl-IntoIterator-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#412\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#413\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.105/src/syn/error.rs.html#415\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.105/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","deluxe_core::util::Error"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[28419,28513]}