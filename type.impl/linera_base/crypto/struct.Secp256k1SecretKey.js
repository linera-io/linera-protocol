(function() {
    var type_impls = Object.fromEntries([["linera_base",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#104-108\">Source</a><a href=\"#impl-Debug-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#105-107\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","linera_base::crypto::ValidatorSecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#121-133\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#122-132\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, D::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","linera_base::crypto::ValidatorSecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#40\">Source</a><a href=\"#impl-PartialEq-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#40\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","linera_base::crypto::ValidatorSecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#319-345\">Source</a><a href=\"#impl-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.public\" class=\"method\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#321-323\">Source</a><h4 class=\"code-header\">pub fn <a href=\"linera_base/crypto/struct.Secp256k1SecretKey.html#tymethod.public\" class=\"fn\">public</a>(&amp;self) -&gt; <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1PublicKey.html\" title=\"struct linera_base::crypto::Secp256k1PublicKey\">Secp256k1PublicKey</a></h4></section></summary><div class=\"docblock\"><p>Returns a public key for the given secret key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy\" class=\"method\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#329-331\">Source</a><h4 class=\"code-header\">pub fn <a href=\"linera_base/crypto/struct.Secp256k1SecretKey.html#tymethod.copy\" class=\"fn\">copy</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Copies the key pair, <strong>including the secret key</strong>.</p>\n<p>The <code>Clone</code> and <code>Copy</code> traits are deliberately not implemented for <code>Secp256k1SecretKey</code> to prevent\naccidental copies of secret keys.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate\" class=\"method\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#335-338\">Source</a><h4 class=\"code-header\">pub fn <a href=\"linera_base/crypto/struct.Secp256k1SecretKey.html#tymethod.generate\" class=\"fn\">generate</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Generates a new key pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_from\" class=\"method\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#342-344\">Source</a><h4 class=\"code-header\">pub fn <a href=\"linera_base/crypto/struct.Secp256k1SecretKey.html#tymethod.generate_from\" class=\"fn\">generate_from</a>&lt;R: <a class=\"trait\" href=\"linera_base/crypto/trait.CryptoRng.html\" title=\"trait linera_base::crypto::CryptoRng\">CryptoRng</a>&gt;(rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut R</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Generates a new key pair from the given RNG. Use with care.</p>\n</div></details></div></details>",0,"linera_base::crypto::ValidatorSecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#110-119\">Source</a><a href=\"#impl-Serialize-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#111-118\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(&amp;self, serializer: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","linera_base::crypto::ValidatorSecretKey"],["<section id=\"impl-Eq-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#40\">Source</a><a href=\"#impl-Eq-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section>","Eq","linera_base::crypto::ValidatorSecretKey"],["<section id=\"impl-StructuralPartialEq-for-Secp256k1SecretKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/linera_base/crypto/secp256k1/mod.rs.html#40\">Source</a><a href=\"#impl-StructuralPartialEq-for-Secp256k1SecretKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"linera_base/crypto/struct.Secp256k1SecretKey.html\" title=\"struct linera_base::crypto::Secp256k1SecretKey\">Secp256k1SecretKey</a></h3></section>","StructuralPartialEq","linera_base::crypto::ValidatorSecretKey"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[12389]}