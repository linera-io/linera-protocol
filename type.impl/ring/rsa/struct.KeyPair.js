(function() {
    var type_impls = Object.fromEntries([["ring",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#42\">Source</a><a href=\"#impl-Debug-for-KeyPair\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"ring/rsa/struct.KeyPair.html\" title=\"struct ring::rsa::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#42\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","ring::signature::RsaKeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyPair-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#402-408\">Source</a><a href=\"#impl-KeyPair-for-KeyPair\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ring/signature/trait.KeyPair.html\" title=\"trait ring::signature::KeyPair\">KeyPair</a> for <a class=\"struct\" href=\"ring/rsa/struct.KeyPair.html\" title=\"struct ring::rsa::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PublicKey\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#403\">Source</a><a href=\"#associatedtype.PublicKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ring/signature/trait.KeyPair.html#associatedtype.PublicKey\" class=\"associatedtype\">PublicKey</a> = <a class=\"struct\" href=\"ring/rsa/struct.PublicKey.html\" title=\"struct ring::rsa::PublicKey\">PublicKey</a></h4></section></summary><div class='docblock'>The type of the public key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_key\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#405-407\">Source</a><a href=\"#method.public_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ring/signature/trait.KeyPair.html#tymethod.public_key\" class=\"fn\">public_key</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"ring/signature/trait.KeyPair.html#associatedtype.PublicKey\" title=\"type ring::signature::KeyPair::PublicKey\">PublicKey</a></h4></section></summary><div class='docblock'>The public key for the key pair.</div></details></div></details>","KeyPair","ring::signature::RsaKeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#44-400\">Source</a><a href=\"#impl-KeyPair\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"ring/rsa/struct.KeyPair.html\" title=\"struct ring::rsa::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_pkcs8\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#98-106\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.from_pkcs8\" class=\"fn\">from_pkcs8</a>(pkcs8: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"ring/error/struct.KeyRejected.html\" title=\"struct ring::error::KeyRejected\">KeyRejected</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses an unencrypted PKCS#8-encoded RSA private key.</p>\n<p>This will generate a 2048-bit RSA private key of the correct form using\nOpenSSL’s command line tool:</p>\n<div class=\"example-wrap\"><pre class=\"language-sh\"><code>   openssl genpkey -algorithm RSA \\\n       -pkeyopt rsa_keygen_bits:2048 \\\n       -pkeyopt rsa_keygen_pubexp:65537 | \\\n     openssl pkcs8 -topk8 -nocrypt -outform der &gt; rsa-2048-private-key.pk8</code></pre></div>\n<p>This will generate a 3072-bit RSA private key of the correct form:</p>\n<div class=\"example-wrap\"><pre class=\"language-sh\"><code>   openssl genpkey -algorithm RSA \\\n       -pkeyopt rsa_keygen_bits:3072 \\\n       -pkeyopt rsa_keygen_pubexp:65537 | \\\n     openssl pkcs8 -topk8 -nocrypt -outform der &gt; rsa-3072-private-key.pk8</code></pre></div>\n<p>Often, keys generated for use in OpenSSL-based software are stored in\nthe Base64 “PEM” format without the PKCS#8 wrapper. Such keys can be\nconverted to binary PKCS#8 form using the OpenSSL command line tool like\nthis:</p>\n<div class=\"example-wrap\"><pre class=\"language-sh\"><code>openssl pkcs8 -topk8 -nocrypt -outform der \\\n    -in rsa-2048-private-key.pem &gt; rsa-2048-private-key.pk8</code></pre></div>\n<p>Base64 (“PEM”) PKCS#8-encoded keys can be converted to the binary PKCS#8\nform like this:</p>\n<div class=\"example-wrap\"><pre class=\"language-sh\"><code>openssl pkcs8 -nocrypt -outform der \\\n    -in rsa-2048-private-key.pem &gt; rsa-2048-private-key.pk8</code></pre></div>\n<p>See <a href=\"ring/rsa/struct.KeyPair.html#method.from_components\" title=\"associated function ring::rsa::KeyPair::from_components\"><code>Self::from_components</code></a> for more details on how the input is\nvalidated.</p>\n<p>See <a href=\"https://tools.ietf.org/html/rfc5958\">RFC 5958</a> and <a href=\"https://tools.ietf.org/html/rfc3447#appendix-A.1.2\">RFC 3447 Appendix A.1.2</a> for more details of the\nencoding of the key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_der\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#126-135\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.from_der\" class=\"fn\">from_der</a>(input: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"ring/error/struct.KeyRejected.html\" title=\"struct ring::error::KeyRejected\">KeyRejected</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses an RSA private key that is not inside a PKCS#8 wrapper.</p>\n<p>The private key must be encoded as a binary DER-encoded ASN.1\n<code>RSAPrivateKey</code> as described in <a href=\"https://tools.ietf.org/html/rfc3447#appendix-A.1.2\">RFC 3447 Appendix A.1.2</a>). In all other\nrespects, this is just like <code>from_pkcs8()</code>. See the documentation for\n<code>from_pkcs8()</code> for more details.</p>\n<p>It is recommended to use <code>from_pkcs8()</code> (with a PKCS#8-encoded key)\ninstead.</p>\n<p>See <a href=\"ring/rsa/struct.KeyPair.html#method.from_components\" title=\"associated function ring::rsa::KeyPair::from_components\"><code>Self::from_components()</code></a> for more details on how the input is\nvalidated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_components\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#219-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.from_components\" class=\"fn\">from_components</a>&lt;Public, Private&gt;(\n    components: &amp;<a class=\"struct\" href=\"ring/rsa/struct.KeyPairComponents.html\" title=\"struct ring::rsa::KeyPairComponents\">KeyPairComponents</a>&lt;Public, Private&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"ring/error/struct.KeyRejected.html\" title=\"struct ring::error::KeyRejected\">KeyRejected</a>&gt;<div class=\"where\">where\n    Public: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt;,\n    Private: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs an RSA private key from its big-endian-encoded components.</p>\n<p>Only two-prime (not multi-prime) keys are supported. The public modulus\n(n) must be at least 2047 bits. The public modulus must be no larger\nthan 4096 bits. It is recommended that the public modulus be exactly\n2048 or 3072 bits. The public exponent must be at least 65537 and must\nbe no more than 33 bits long.</p>\n<p>The private key is validated according to [NIST SP-800-56B rev. 1]\nsection 6.4.1.4.3, crt_pkv (Intended Exponent-Creation Method Unknown),\nwith the following exceptions:</p>\n<ul>\n<li>Section 6.4.1.2.1, Step 1: Neither a target security level nor an\nexpected modulus length is provided as a parameter, so checks\nregarding these expectations are not done.</li>\n<li>Section 6.4.1.2.1, Step 3: Since neither the public key nor the\nexpected modulus length is provided as a parameter, the consistency\ncheck between these values and the private key’s value of n isn’t\ndone.</li>\n<li>Section 6.4.1.2.1, Step 5: No primality tests are done, both for\nperformance reasons and to avoid any side channels that such tests\nwould provide.</li>\n<li>Section 6.4.1.2.1, Step 6, and 6.4.1.4.3, Step 7:\n<ul>\n<li>\n<p><em>ring</em> has a slightly looser lower bound for the values of <code>p</code>\nand <code>q</code> than what the NIST document specifies. This looser lower\nbound matches what most other crypto libraries do. The check might\nbe tightened to meet NIST’s requirements in the future. Similarly,\nthe check that <code>p</code> and <code>q</code> are not too close together is skipped\ncurrently, but may be added in the future.</p>\n</li>\n<li>\n<p>The validity of the mathematical relationship of <code>dP</code>, <code>dQ</code>, <code>e</code>\nand <code>n</code> is verified only during signing. Some size checks of <code>d</code>,\n<code>dP</code> and <code>dQ</code> are performed at construction, but some NIST checks\nare skipped because they would be expensive and/or they would leak\ninformation through side channels. If a preemptive check of the\nconsistency of <code>dP</code>, <code>dQ</code>, <code>e</code> and <code>n</code> with each other is\nnecessary, that can be done by signing any message with the key\npair.</p>\n</li>\n<li>\n<p><code>d</code> is not fully validated, neither at construction nor during\nsigning. This is OK as far as <em>ring</em>’s usage of the key is\nconcerned because <em>ring</em> never uses the value of <code>d</code> (<em>ring</em> always\nuses <code>p</code>, <code>q</code>, <code>dP</code> and <code>dQ</code> via the Chinese Remainder Theorem,\ninstead). However, <em>ring</em>’s checks would not be sufficient for\nvalidating a key pair for use by some other system; that other\nsystem must check the value of <code>d</code> itself if <code>d</code> is to be used.</p>\n</li>\n</ul>\n</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#388-390\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.public\" class=\"fn\">public</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"ring/rsa/struct.PublicKey.html\" title=\"struct ring::rsa::PublicKey\">PublicKey</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the public key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_modulus_len\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#397-399\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.public_modulus_len\" class=\"fn\">public_modulus_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>public().modulus_len()</code></span></div></span></summary><div class=\"docblock\"><p>Returns the length in bytes of the key pair’s public modulus.</p>\n<p>A signature has the same length as the public modulus.</p>\n</div></details></div></details>",0,"ring::signature::RsaKeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#515-646\">Source</a><a href=\"#impl-KeyPair\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"ring/rsa/struct.KeyPair.html\" title=\"struct ring::rsa::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign\" class=\"method\"><a class=\"src rightside\" href=\"src/ring/rsa/keypair.rs.html#533-568\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ring/rsa/struct.KeyPair.html#tymethod.sign\" class=\"fn\">sign</a>(\n    &amp;self,\n    padding_alg: &amp;'static dyn <a class=\"trait\" href=\"ring/signature/trait.RsaEncoding.html\" title=\"trait ring::signature::RsaEncoding\">RsaEncoding</a>,\n    rng: &amp;dyn <a class=\"trait\" href=\"ring/rand/trait.SecureRandom.html\" title=\"trait ring::rand::SecureRandom\">SecureRandom</a>,\n    msg: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>],\n    signature: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"ring/error/struct.Unspecified.html\" title=\"struct ring::error::Unspecified\">Unspecified</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the signature of <code>msg</code> and writes it into <code>signature</code>.</p>\n<p><code>msg</code> is digested using the digest algorithm from <code>padding_alg</code> and the\ndigest is then padded using the padding algorithm from <code>padding_alg</code>.</p>\n<p>The signature it written into <code>signature</code>; <code>signature</code>’s length must be\nexactly the length returned by <code>self::public().modulus_len()</code> or else\nan error will be returned. On failure, <code>signature</code> may contain\nintermediate results, but won’t contain anything that would endanger the\nprivate key.</p>\n<p><code>rng</code> may be used to randomize the padding (e.g. for PSS).</p>\n<p>Many other crypto libraries have signing functions that takes a\nprecomputed digest as input, instead of the message to digest. This\nfunction does <em>not</em> take a precomputed digest; instead, <code>sign</code>\ncalculates the digest itself.</p>\n</div></details></div></details>",0,"ring::signature::RsaKeyPair"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16737]}