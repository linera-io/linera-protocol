(function() {
    var type_impls = Object.fromEntries([["scylla",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GenericSessionBuilder%3CKind%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#71\">Source</a><a href=\"#impl-Clone-for-GenericSessionBuilder%3CKind%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Kind: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"scylla/client/session_builder/trait.SessionBuilderKind.html\" title=\"trait scylla::client::session_builder::SessionBuilderKind\">SessionBuilderKind</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html\" title=\"struct scylla::client::session_builder::GenericSessionBuilder\">GenericSessionBuilder</a>&lt;Kind&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#71\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html\" title=\"struct scylla::client::session_builder::GenericSessionBuilder\">GenericSessionBuilder</a>&lt;Kind&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","scylla::client::session_builder::SessionBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSessionBuilder%3CDefaultMode%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#80-358\">Source</a><a href=\"#impl-GenericSessionBuilder%3CDefaultMode%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html\" title=\"struct scylla::client::session_builder::GenericSessionBuilder\">GenericSessionBuilder</a>&lt;<a class=\"enum\" href=\"scylla/client/session_builder/enum.DefaultMode.html\" title=\"enum scylla::client::session_builder::DefaultMode\">DefaultMode</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#85-90\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates new SessionBuilder with default configuration</p>\n<h5 id=\"default-configuration\"><a class=\"doc-anchor\" href=\"#default-configuration\">§</a>Default configuration</h5>\n<ul>\n<li>Compression: None</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.known_node\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#117-120\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.known_node\" class=\"fn\">known_node</a>(self, hostname: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Add a known node with a hostname</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"db1.example.com\"</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.known_node_addr\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#136-139\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.known_node_addr\" class=\"fn\">known_node_addr</a>(self, node_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Add a known node with an IP address</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node_addr(SocketAddr::new(IpAddr::V4(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"number\">9042</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.known_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#154-157\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.known_nodes\" class=\"fn\">known_nodes</a>(\n    self,\n    hostnames: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Add a list of known nodes with hostnames</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_nodes([<span class=\"string\">\"127.0.0.1:9042\"</span>, <span class=\"string\">\"db1.example.com\"</span>])\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.known_nodes_addr\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#176-182\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.known_nodes_addr\" class=\"fn\">known_nodes_addr</a>(\n    self,\n    node_addrs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Add a list of known nodes with IP addresses</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>addr1 = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>)), <span class=\"number\">9042</span>);\n<span class=\"kw\">let </span>addr2 = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>)), <span class=\"number\">9042</span>);\n\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_nodes_addr([addr1, addr2])\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.user\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#202-208\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.user\" class=\"fn\">user</a>(\n    self,\n    username: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    passwd: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set username and password for plain text authentication.<br />\nIf the database server will require authentication\\</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .use_keyspace(<span class=\"string\">\"my_keyspace_name\"</span>, <span class=\"bool-val\">false</span>)\n    .user(<span class=\"string\">\"cassandra\"</span>, <span class=\"string\">\"cassandra\"</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.authenticator_provider\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#255-261\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.authenticator_provider\" class=\"fn\">authenticator_provider</a>(\n    self,\n    authenticator_provider: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn <a class=\"trait\" href=\"scylla/authentication/trait.AuthenticatorProvider.html\" title=\"trait scylla::authentication::AuthenticatorProvider\">AuthenticatorProvider</a>&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set custom authenticator provider to create an authenticator instance during a session creation.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bytes::Bytes;\n<span class=\"kw\">use </span>async_trait::async_trait;\n<span class=\"kw\">use </span>scylla::authentication::{AuthenticatorProvider, AuthenticatorSession, AuthError};\n\n<span class=\"kw\">struct </span>CustomAuthenticator;\n\n<span class=\"attr\">#[async_trait]\n</span><span class=\"kw\">impl </span>AuthenticatorSession <span class=\"kw\">for </span>CustomAuthenticator {\n    <span class=\"kw\">async fn </span>evaluate_challenge(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, token: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>[u8]&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt;, AuthError&gt; {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>)\n    }\n\n    <span class=\"kw\">async fn </span>success(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, token: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>[u8]&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), AuthError&gt; {\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n}\n\n<span class=\"kw\">struct </span>CustomAuthenticatorProvider;\n\n<span class=\"attr\">#[async_trait]\n</span><span class=\"kw\">impl </span>AuthenticatorProvider <span class=\"kw\">for </span>CustomAuthenticatorProvider {\n    <span class=\"kw\">async fn </span>start_authentication_session(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _authenticator_name: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(<span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt;, Box&lt;<span class=\"kw\">dyn </span>AuthenticatorSession&gt;), AuthError&gt; {\n        <span class=\"prelude-val\">Ok</span>((<span class=\"prelude-val\">None</span>, Box::new(CustomAuthenticator)))\n    }\n}\n\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .use_keyspace(<span class=\"string\">\"my_keyspace_name\"</span>, <span class=\"bool-val\">false</span>)\n    .user(<span class=\"string\">\"cassandra\"</span>, <span class=\"string\">\"cassandra\"</span>)\n    .authenticator_provider(Arc::new(CustomAuthenticatorProvider))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.address_translator\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#320-323\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.address_translator\" class=\"fn\">address_translator</a>(self, translator: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn <a class=\"trait\" href=\"scylla/policies/address_translator/trait.AddressTranslator.html\" title=\"trait scylla::policies::address_translator::AddressTranslator\">AddressTranslator</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Uses a custom address translator for peer addresses retrieved from the cluster.\nBy default, no translation is performed.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>IdentityTranslator;\n\n<span class=\"attr\">#[async_trait]\n</span><span class=\"kw\">impl </span>AddressTranslator <span class=\"kw\">for </span>IdentityTranslator {\n    <span class=\"kw\">async fn </span>translate_address(\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n        untranslated_peer: <span class=\"kw-2\">&amp;</span>UntranslatedPeer,\n    ) -&gt; <span class=\"prelude-ty\">Result</span>&lt;SocketAddr, TranslationError&gt; {\n        <span class=\"prelude-val\">Ok</span>(untranslated_peer.untranslated_address())\n    }\n}\n\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .address_translator(Arc::new(IdentityTranslator))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>translation_rules = HashMap::new();\n<span class=\"kw\">let </span>addr_before_translation = SocketAddr::from_str(<span class=\"string\">\"192.168.0.42:19042\"</span>).unwrap();\n<span class=\"kw\">let </span>addr_after_translation = SocketAddr::from_str(<span class=\"string\">\"157.123.12.42:23203\"</span>).unwrap();\ntranslation_rules.insert(addr_before_translation, addr_after_translation);\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .address_translator(Arc::new(translation_rules))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tls_context\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#354-357\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tls_context\" class=\"fn\">tls_context</a>(self, tls_context: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"scylla/client/session/enum.TlsContext.html\" title=\"enum scylla::client::session::TlsContext\">TlsContext</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>TLS feature</p>\n<p>Provide SessionBuilder with TlsContext that will be\nused to create a TLS connection to the database.\nIf set to None TLS connection won’t be used.</p>\n<p>Default is None.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>certdir = fs::canonicalize(PathBuf::from(<span class=\"string\">\"./examples/certs/scylla.crt\"</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>context_builder = SslContextBuilder::new(SslMethod::tls())<span class=\"question-mark\">?</span>;\ncontext_builder.set_certificate_file(certdir.as_path(), SslFiletype::PEM)<span class=\"question-mark\">?</span>;\ncontext_builder.set_verify(SslVerifyMode::NONE);\n\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tls_context(<span class=\"prelude-val\">Some</span>(context_builder.build()))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"scylla::client::session_builder::SessionBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSessionBuilder%3CK%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#398-1161\">Source</a><a href=\"#impl-GenericSessionBuilder%3CK%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"scylla/client/session_builder/trait.SessionBuilderKind.html\" title=\"trait scylla::client::session_builder::SessionBuilderKind\">SessionBuilderKind</a>&gt; <a class=\"struct\" href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html\" title=\"struct scylla::client::session_builder::GenericSessionBuilder\">GenericSessionBuilder</a>&lt;K&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.local_ip_address\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#419-422\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.local_ip_address\" class=\"fn\">local_ip_address</a>(\n    self,\n    local_ip_address: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/net/ip_addr/enum.IpAddr.html\" title=\"enum core::net::ip_addr::IpAddr\">IpAddr</a>&gt;&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Sets the local ip address all TCP sockets are bound to.</p>\n<p>By default, this option is set to <code>None</code>, which is equivalent to:</p>\n<ul>\n<li><code>INADDR_ANY</code> for IPv4 (<a href=\"https://doc.rust-lang.org/1.86.0/core/net/ip_addr/struct.Ipv4Addr.html#associatedconstant.UNSPECIFIED\" title=\"associated constant core::net::ip_addr::Ipv4Addr::UNSPECIFIED\"><code>Ipv4Addr::UNSPECIFIED</code></a>)</li>\n<li><code>in6addr_any</code> for IPv6 (<a href=\"https://doc.rust-lang.org/1.86.0/core/net/ip_addr/struct.Ipv6Addr.html#associatedconstant.UNSPECIFIED\" title=\"associated constant core::net::ip_addr::Ipv6Addr::UNSPECIFIED\"><code>Ipv6Addr::UNSPECIFIED</code></a>)</li>\n</ul>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .local_ip_address(<span class=\"prelude-val\">Some</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">168</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shard_aware_local_port_range\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#448-451\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.shard_aware_local_port_range\" class=\"fn\">shard_aware_local_port_range</a>(\n    self,\n    port_range: <a class=\"struct\" href=\"scylla/routing/struct.ShardAwarePortRange.html\" title=\"struct scylla::routing::ShardAwarePortRange\">ShardAwarePortRange</a>,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Specifies the local port range used for shard-aware connections.</p>\n<p>A possible use case is when you want to have multiple <a href=\"scylla/client/session/struct.Session.html\" title=\"struct scylla::client::session::Session\"><code>Session</code></a> objects and do not want\nthem to compete for the ports within the same range. It is then advised to assign\nmutually non-overlapping port ranges to each session object.</p>\n<p>By default this option is set to <a href=\"scylla/routing/struct.ShardAwarePortRange.html#associatedconstant.EPHEMERAL_PORT_RANGE\" title=\"associated constant scylla::routing::ShardAwarePortRange::EPHEMERAL_PORT_RANGE\"><code>ShardAwarePortRange::EPHEMERAL_PORT_RANGE</code></a>.</p>\n<p>For details, see <a href=\"scylla/routing/struct.ShardAwarePortRange.html\" title=\"struct scylla::routing::ShardAwarePortRange\"><code>ShardAwarePortRange</code></a> documentation.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .shard_aware_local_port_range(ShardAwarePortRange::new(<span class=\"number\">49200</span>..=<span class=\"number\">50000</span>)<span class=\"question-mark\">?</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compression\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#471-474\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.compression\" class=\"fn\">compression</a>(self, compression: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"scylla/frame/enum.Compression.html\" title=\"enum scylla::frame::Compression\">Compression</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set preferred Compression algorithm.\nThe default is no compression.\nIf it is not supported by database server Session will fall back to no encryption.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .compression(<span class=\"prelude-val\">Some</span>(Compression::Snappy))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_agreement_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#493-496\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.schema_agreement_interval\" class=\"fn\">schema_agreement_interval</a>(self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the delay for schema agreement check. How often driver should ask if schema is in agreement\nThe default is 200 milliseconds.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .schema_agreement_interval(Duration::from_secs(<span class=\"number\">5</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_execution_profile_handle\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#520-526\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.default_execution_profile_handle\" class=\"fn\">default_execution_profile_handle</a>(\n    self,\n    profile_handle: <a class=\"struct\" href=\"scylla/client/execution_profile/struct.ExecutionProfileHandle.html\" title=\"struct scylla::client::execution_profile::ExecutionProfileHandle\">ExecutionProfileHandle</a>,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the default execution profile using its handle</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>execution_profile = ExecutionProfile::builder()\n    .consistency(Consistency::All)\n    .request_timeout(<span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">2</span>)))\n    .build();\n<span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .default_execution_profile_handle(execution_profile.into_handle())\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tcp_nodelay\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#544-547\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tcp_nodelay\" class=\"fn\">tcp_nodelay</a>(self, nodelay: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the nodelay TCP flag.\nThe default is true.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tcp_nodelay(<span class=\"bool-val\">true</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tcp_keepalive_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#568-578\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tcp_keepalive_interval\" class=\"fn\">tcp_keepalive_interval</a>(self, interval: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the TCP keepalive interval.\nThe default is <code>None</code>, which implies that no keepalive messages\nare sent <strong>on TCP layer</strong> when a connection is idle.\nNote: CQL-layer keepalives are configured separately,\nwith <code>Self::keepalive_interval</code>.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tcp_keepalive_interval(std::time::Duration::from_secs(<span class=\"number\">42</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.use_keyspace\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#598-602\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.use_keyspace\" class=\"fn\">use_keyspace</a>(\n    self,\n    keyspace_name: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    case_sensitive: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set keyspace to be used on all connections.<br />\nEach connection will send <code>\"USE &lt;keyspace_name&gt;\"</code> before sending any requests.<br />\nThis can be later changed with <a href=\"scylla/client/session/struct.Session.html#method.use_keyspace\" title=\"method scylla::client::session::Session::use_keyspace\"><code>crate::client::session::Session::use_keyspace</code></a></p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .use_keyspace(<span class=\"string\">\"my_keyspace_name\"</span>, <span class=\"bool-val\">false</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#620-622\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.build\" class=\"fn\">build</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/client/session/struct.Session.html\" title=\"struct scylla::client::session::Session\">Session</a>, <a class=\"enum\" href=\"scylla/errors/enum.NewSessionError.html\" title=\"enum scylla::errors::NewSessionError\">NewSessionError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the Session after setting all the options.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .compression(<span class=\"prelude-val\">Some</span>(Compression::Snappy))\n    .build() <span class=\"comment\">// Turns SessionBuilder into Session\n    </span>.<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connection_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#642-645\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.connection_timeout\" class=\"fn\">connection_timeout</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Changes connection timeout\nThe default is 5 seconds.\nIf it’s higher than underlying os’s default connection timeout it won’t effect.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .connection_timeout(Duration::from_secs(<span class=\"number\">30</span>))\n    .build() <span class=\"comment\">// Turns SessionBuilder into Session\n    </span>.<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pool_size\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#668-671\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.pool_size\" class=\"fn\">pool_size</a>(self, size: <a class=\"enum\" href=\"scylla/client/enum.PoolSize.html\" title=\"enum scylla::client::PoolSize\">PoolSize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Sets the per-node connection pool size.\nThe default is one connection per shard, which is the recommended setting for Scylla.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::num::NonZeroUsize;\n<span class=\"kw\">use </span>scylla::client::PoolSize;\n\n<span class=\"comment\">// This session will establish 4 connections to each node.\n// For Scylla clusters, this number will be divided across shards\n</span><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .pool_size(PoolSize::PerHost(NonZeroUsize::new(<span class=\"number\">4</span>).unwrap()))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disallow_shard_aware_port\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#708-711\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.disallow_shard_aware_port\" class=\"fn\">disallow_shard_aware_port</a>(self, disallow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>If true, prevents the driver from connecting to the shard-aware port, even if the node supports it.</p>\n<p><em>This is a Scylla-specific option</em>. It has no effect on Cassandra clusters.</p>\n<p>By default, connecting to the shard-aware port is <strong>allowed</strong> and, in general, this setting\n<em>should not be changed</em>. The shard-aware port (19042 or 19142) makes the process of\nestablishing connection per shard more robust compared to the regular transport port\n(9042 or 9142). With the shard-aware port, the driver is able to choose which shard\nwill be assigned to the connection.</p>\n<p>In order to be able to use the shard-aware port effectively, the port needs to be\nreachable and not behind a NAT which changes source ports (the driver uses the source port\nto tell Scylla which shard to assign). However, the driver is designed to behave in a robust\nway if those conditions are not met - if the driver fails to connect to the port or gets\na connection to the wrong shard, it will re-attempt the connection to the regular transport port.</p>\n<p>The only cost of misconfigured shard-aware port should be a slightly longer reconnection time.\nIf it is unacceptable to you or suspect that it causes you some other problems,\nyou can use this option to disable the shard-aware port feature completely.\nHowever, <strong>you should use it as a last resort</strong>. Before you do that, we strongly recommend\nthat you consider fixing the network issues.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .disallow_shard_aware_port(<span class=\"bool-val\">true</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.timestamp_generator\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#730-733\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.timestamp_generator\" class=\"fn\">timestamp_generator</a>(\n    self,\n    timestamp_generator: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn <a class=\"trait\" href=\"scylla/policies/timestamp_generator/trait.TimestampGenerator.html\" title=\"trait scylla::policies::timestamp_generator::TimestampGenerator\">TimestampGenerator</a>&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the timestamp generator that will generate timestamps on the client-side.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .timestamp_generator(Arc::new(SimpleTimestampGenerator::new()))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keyspaces_to_fetch\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#751-757\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.keyspaces_to_fetch\" class=\"fn\">keyspaces_to_fetch</a>(\n    self,\n    keyspaces: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the keyspaces to be fetched, to retrieve their strategy, and schema metadata if enabled\nNo keyspaces, the default value, means all the keyspaces will be fetched.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .keyspaces_to_fetch([<span class=\"string\">\"my_keyspace\"</span>])\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_schema_metadata\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#775-778\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.fetch_schema_metadata\" class=\"fn\">fetch_schema_metadata</a>(self, fetch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the fetch schema metadata flag.\nThe default is true.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .fetch_schema_metadata(<span class=\"bool-val\">true</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata_request_serverside_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#800-803\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.metadata_request_serverside_timeout\" class=\"fn\">metadata_request_serverside_timeout</a>(self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the server-side timeout for metadata queries.\nThe default is <code>Some(Duration::from_secs(2))</code>. It means that\nthe all metadata queries will be set the 2 seconds timeout\nno matter what timeout is set as a cluster default.\nThis prevents timeouts of schema queries when the schema is large\nand the default timeout is configured as tight.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .metadata_request_serverside_timeout(std::time::Duration::from_secs(<span class=\"number\">5</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keepalive_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#824-834\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.keepalive_interval\" class=\"fn\">keepalive_interval</a>(self, interval: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the keepalive interval.\nThe default is <code>Some(Duration::from_secs(30))</code>, which corresponds\nto keepalive CQL messages being sent every 30 seconds.\nNote: this configures CQL-layer keepalives. See also:\n<code>Self::tcp_keepalive_interval</code>.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .keepalive_interval(std::time::Duration::from_secs(<span class=\"number\">42</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keepalive_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#855-865\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.keepalive_timeout\" class=\"fn\">keepalive_timeout</a>(self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the keepalive timeout.\nThe default is <code>Some(Duration::from_secs(30))</code>. It means that\nthe connection will be closed if time between sending a keepalive\nand receiving a response to any keepalive (not necessarily the same -\nit may be one sent later) exceeds 30 seconds.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .keepalive_timeout(std::time::Duration::from_secs(<span class=\"number\">42</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_agreement_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#883-886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.schema_agreement_timeout\" class=\"fn\">schema_agreement_timeout</a>(self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Sets the timeout for waiting for schema agreement.\nBy default, the timeout is 60 seconds.</p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .schema_agreement_timeout(std::time::Duration::from_secs(<span class=\"number\">120</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.auto_await_schema_agreement\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#904-907\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.auto_await_schema_agreement\" class=\"fn\">auto_await_schema_agreement</a>(self, enabled: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Controls automatic waiting for schema agreement after a schema-altering\nstatement is sent. By default, it is enabled.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .auto_await_schema_agreement(<span class=\"bool-val\">false</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.host_filter\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#938-941\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.host_filter\" class=\"fn\">host_filter</a>(self, filter: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn <a class=\"trait\" href=\"scylla/policies/host_filter/trait.HostFilter.html\" title=\"trait scylla::policies::host_filter::HostFilter\">HostFilter</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Sets the host filter. The host filter decides whether any connections\nshould be opened to the node or not. The driver will also avoid\nthose nodes when re-establishing the control connection.</p>\n<p>See the <a href=\"scylla/policies/host_filter/index.html\" title=\"mod scylla::policies::host_filter\">host filter</a> module for a list\nof pre-defined filters. It is also possible to provide a custom filter\nby implementing the HostFilter trait.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"comment\">// The session will only connect to nodes from \"my-local-dc\"\n</span><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .host_filter(Arc::new(DcHostFilter::new(<span class=\"string\">\"my-local-dc\"</span>.to_string())))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.refresh_metadata_on_auto_schema_agreement\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#959-962\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.refresh_metadata_on_auto_schema_agreement\" class=\"fn\">refresh_metadata_on_auto_schema_agreement</a>(\n    self,\n    refresh_metadata: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the refresh metadata on schema agreement flag.\nThe default is true.</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .refresh_metadata_on_auto_schema_agreement(<span class=\"bool-val\">true</span>)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tracing_info_fetch_attempts\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#989-992\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tracing_info_fetch_attempts\" class=\"fn\">tracing_info_fetch_attempts</a>(self, attempts: <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/num/nonzero/type.NonZeroU32.html\" title=\"type core::num::nonzero::NonZeroU32\">NonZeroU32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the number of attempts to fetch <a href=\"scylla/observability/tracing/struct.TracingInfo.html\" title=\"struct scylla::observability::tracing::TracingInfo\">TracingInfo</a>\nin <a href=\"scylla/client/session/struct.Session.html#method.get_tracing_info\" title=\"method scylla::client::session::Session::get_tracing_info\"><code>Session::get_tracing_info</code></a>.\nThe default is 5 attempts.</p>\n<p>Tracing info might not be available immediately on queried node - that’s why\nthe driver performs a few attempts with sleeps in between.</p>\n<p>Cassandra users may want to increase this value - the default is good\nfor Scylla, but Cassandra sometimes needs more time for the data to\nappear in tracing table.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tracing_info_fetch_attempts(NonZeroU32::new(<span class=\"number\">10</span>).unwrap())\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tracing_info_fetch_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1019-1022\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tracing_info_fetch_interval\" class=\"fn\">tracing_info_fetch_interval</a>(self, interval: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the delay between attempts to fetch <a href=\"scylla/observability/tracing/struct.TracingInfo.html\" title=\"struct scylla::observability::tracing::TracingInfo\">TracingInfo</a>\nin <a href=\"scylla/client/session/struct.Session.html#method.get_tracing_info\" title=\"method scylla::client::session::Session::get_tracing_info\"><code>Session::get_tracing_info</code></a>.\nThe default is 3 milliseconds.</p>\n<p>Tracing info might not be available immediately on queried node - that’s why\nthe driver performs a few attempts with sleeps in between.</p>\n<p>Cassandra users may want to increase this value - the default is good\nfor Scylla, but Cassandra sometimes needs more time for the data to\nappear in tracing table.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tracing_info_fetch_interval(Duration::from_millis(<span class=\"number\">50</span>))\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tracing_info_fetch_consistency\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1042-1045\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.tracing_info_fetch_consistency\" class=\"fn\">tracing_info_fetch_consistency</a>(self, consistency: <a class=\"enum\" href=\"scylla/statement/enum.Consistency.html\" title=\"enum scylla::statement::Consistency\">Consistency</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the consistency level of fetching <a href=\"scylla/observability/tracing/struct.TracingInfo.html\" title=\"struct scylla::observability::tracing::TracingInfo\">TracingInfo</a>\nin <a href=\"scylla/client/session/struct.Session.html#method.get_tracing_info\" title=\"method scylla::client::session::Session::get_tracing_info\"><code>Session::get_tracing_info</code></a>.\nThe default is <a href=\"scylla/statement/enum.Consistency.html#variant.One\" title=\"variant scylla::statement::Consistency::One\"><code>Consistency::One</code></a>.</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .tracing_info_fetch_consistency(Consistency::One)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_coalescing\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1074-1077\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.write_coalescing\" class=\"fn\">write_coalescing</a>(self, enable: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>If true, the driver will inject a delay controlled by <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#method.write_coalescing_delay\" title=\"method scylla::client::session_builder::GenericSessionBuilder::write_coalescing_delay\">SessionBuilder::write_coalescing_delay()</a>\nbefore flushing data to the socket.\nThis gives the driver an opportunity to collect more write requests\nand write them in a single syscall, increasing the efficiency.</p>\n<p>However, this optimization may worsen latency if the rate of requests\nissued by the application is low, but otherwise the application is\nheavily loaded with other tasks on the same tokio executor.\nPlease do performance measurements before committing to disabling\nthis option.</p>\n<p>This option is true by default.</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .write_coalescing(<span class=\"bool-val\">false</span>) <span class=\"comment\">// Enabled by default\n    </span>.build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_coalescing_delay\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1099-1102\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.write_coalescing_delay\" class=\"fn\">write_coalescing_delay</a>(self, delay: <a class=\"enum\" href=\"scylla/client/enum.WriteCoalescingDelay.html\" title=\"enum scylla::client::WriteCoalescingDelay\">WriteCoalescingDelay</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Controls the write coalescing delay (if enabled).</p>\n<p>This option has no effect if <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#method.write_coalescing\" title=\"method scylla::client::session_builder::GenericSessionBuilder::write_coalescing\"><code>SessionBuilder::write_coalescing()</code></a> is set to false.</p>\n<p>This option is <a href=\"scylla/client/enum.WriteCoalescingDelay.html#variant.SmallNondeterministic\" title=\"variant scylla::client::WriteCoalescingDelay::SmallNondeterministic\"><code>WriteCoalescingDelay::SmallNondeterministic</code></a> by default.</p>\n<h5 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n    .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n    .write_coalescing_delay(WriteCoalescingDelay::SmallNondeterministic)\n    .build()\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cluster_metadata_refresh_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1124-1127\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.cluster_metadata_refresh_interval\" class=\"fn\">cluster_metadata_refresh_interval</a>(self, interval: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the interval at which the driver refreshes the cluster metadata which contains information\nabout the cluster topology as well as the cluster schema.</p>\n<p>The default is 60 seconds.</p>\n<p>In the given example, we have set the duration value to 20 seconds, which\nmeans that the metadata is refreshed every 20 seconds.</p>\n<h5 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n        .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n        .cluster_metadata_refresh_interval(std::time::Duration::from_secs(<span class=\"number\">20</span>))\n        .build()\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.custom_identity\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/client/session_builder.rs.html#1157-1160\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/client/session_builder/struct.GenericSessionBuilder.html#tymethod.custom_identity\" class=\"fn\">custom_identity</a>(self, identity: <a class=\"struct\" href=\"scylla/client/struct.SelfIdentity.html\" title=\"struct scylla::client::SelfIdentity\">SelfIdentity</a>&lt;'static&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the custom identity of the driver/application/instance,\nto be sent as options in STARTUP message.</p>\n<p>By default driver name and version are sent;\napplication name and version and client id are not sent.</p>\n<h5 id=\"example-28\"><a class=\"doc-anchor\" href=\"#example-28\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>    <span class=\"kw\">let </span>(app_major, app_minor, app_patch) = (<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>);\n    <span class=\"kw\">let </span>app_version = <span class=\"macro\">format!</span>(<span class=\"string\">\"{app_major}.{app_minor}.{app_patch}\"</span>);\n\n    <span class=\"kw\">let </span>session: Session = SessionBuilder::new()\n        .known_node(<span class=\"string\">\"127.0.0.1:9042\"</span>)\n        .custom_identity(\n            SelfIdentity::new()\n                .with_custom_driver_version(<span class=\"string\">\"0.13.0-custom_build_17\"</span>)\n                .with_application_name(<span class=\"string\">\"my-app\"</span>)\n                .with_application_version(app_version)\n        )\n        .build()\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"scylla::client::session_builder::SessionBuilder"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[67757]}