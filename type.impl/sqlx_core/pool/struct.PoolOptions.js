(function() {
    var type_impls = Object.fromEntries([["sqlx_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-PoolOptions%3CDB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#93-112\">Source</a><a href=\"#impl-Clone-for-PoolOptions%3CDB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DB: <a class=\"trait\" href=\"sqlx_core/database/trait.Database.html\" title=\"trait sqlx_core::database::Database\">Database</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">PoolOptions</a>&lt;DB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#94-111\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sqlx_core::any::AnyPoolOptions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-PoolOptions%3CDB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#585-596\">Source</a><a href=\"#impl-Debug-for-PoolOptions%3CDB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DB: <a class=\"trait\" href=\"sqlx_core/database/trait.Database.html\" title=\"trait sqlx_core::database::Database\">Database</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">PoolOptions</a>&lt;DB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#586-595\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sqlx_core::any::AnyPoolOptions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-PoolOptions%3CDB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#130-134\">Source</a><a href=\"#impl-Default-for-PoolOptions%3CDB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DB: <a class=\"trait\" href=\"sqlx_core/database/trait.Database.html\" title=\"trait sqlx_core::database::Database\">Database</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">PoolOptions</a>&lt;DB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#131-133\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","sqlx_core::any::AnyPoolOptions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PoolOptions%3CDB%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#136-583\">Source</a><a href=\"#impl-PoolOptions%3CDB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DB: <a class=\"trait\" href=\"sqlx_core/database/trait.Database.html\" title=\"trait sqlx_core::database::Database\">Database</a>&gt; <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">PoolOptions</a>&lt;DB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#143-166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a default “sane” configuration, suitable for testing or light-duty applications.</p>\n<p>Production applications will likely want to at least modify\n<a href=\"sqlx_core/pool/struct.PoolOptions.html#method.max_connections\" title=\"method sqlx_core::pool::PoolOptions::max_connections\"><code>max_connections</code></a>.</p>\n<p>See the source of this method for the current default values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_connections\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#173-176\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.max_connections\" class=\"fn\">max_connections</a>(self, max: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the maximum number of connections that this pool should maintain.</p>\n<p>Be mindful of the connection limits for your database as well as other applications\nwhich may want to connect to the same database (or even multiple instances of the same\napplication in high-availability deployments).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_max_connections\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#179-181\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_max_connections\" class=\"fn\">get_max_connections</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Get the maximum number of connections that this pool should maintain</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_connections\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#205-208\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.min_connections\" class=\"fn\">min_connections</a>(self, min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the minimum number of connections to maintain at all times.</p>\n<p>When the pool is built, this many connections will be automatically spun up.</p>\n<p>If any connection is reaped by <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.max_lifetime\" title=\"method sqlx_core::pool::PoolOptions::max_lifetime\"><code>max_lifetime</code></a> or <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.idle_timeout\" title=\"method sqlx_core::pool::PoolOptions::idle_timeout\"><code>idle_timeout</code></a>, or explicitly closed,\nand it brings the connection count below this amount, a new connection will be opened to\nreplace it.</p>\n<p>This is only done on a best-effort basis, however. The routine that maintains this value\nhas a deadline so it doesn’t wait forever if the database is being slow or returning errors.</p>\n<p>This value is clamped internally to not exceed <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.max_connections\" title=\"method sqlx_core::pool::PoolOptions::max_connections\"><code>max_connections</code></a>.</p>\n<p>We’ve chosen not to assert <code>min_connections &lt;= max_connections</code> anywhere\nbecause it shouldn’t break anything internally if the condition doesn’t hold,\nand if the application allows either value to be dynamically set\nthen it should be checking this condition itself and returning\na nicer error than a panic anyway.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_min_connections\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#211-213\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_min_connections\" class=\"fn\">get_min_connections</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Get the minimum number of connections to maintain at all times.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acquire_time_level\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#220-223\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.acquire_time_level\" class=\"fn\">acquire_time_level</a>(self, level: <a class=\"enum\" href=\"log/enum.LevelFilter.html\" title=\"enum log::LevelFilter\">LevelFilter</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Enable logging of time taken to acquire a connection from the connection pool via\n<a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>.</p>\n<p>If slow acquire logging is also enabled, this level is used for acquires that are not\nconsidered slow.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acquire_slow_level\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#227-230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.acquire_slow_level\" class=\"fn\">acquire_slow_level</a>(self, level: <a class=\"enum\" href=\"log/enum.LevelFilter.html\" title=\"enum log::LevelFilter\">LevelFilter</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Log excessive time taken to acquire a connection at a different log level than time taken\nfor faster connection acquires via <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acquire_slow_threshold\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#237-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.acquire_slow_threshold\" class=\"fn\">acquire_slow_threshold</a>(self, threshold: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set a threshold for reporting excessive time taken to acquire a connection from\nthe connection pool via <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>. When the threshold is exceeded, a warning is logged.</p>\n<p>Defaults to a value that should not typically be exceeded by the pool enlarging\nitself with an additional new connection.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_acquire_slow_threshold\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#244-246\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_acquire_slow_threshold\" class=\"fn\">get_acquire_slow_threshold</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Get the threshold for reporting excessive time taken to acquire a connection via\n<a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acquire_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#261-264\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.acquire_timeout\" class=\"fn\">acquire_timeout</a>(self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the maximum amount of time to spend waiting for a connection in <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>.</p>\n<p>Caps the total amount of time <code>Pool::acquire()</code> can spend waiting across multiple phases:</p>\n<ul>\n<li>First, it may need to wait for a permit from the semaphore, which grants it the privilege\nof opening a connection or popping one from the idle queue.</li>\n<li>If an existing idle connection is acquired, by default it will be checked for liveness\nand integrity before being returned, which may require executing a command on the\nconnection. This can be disabled with <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.test_before_acquire\" title=\"method sqlx_core::pool::PoolOptions::test_before_acquire\"><code>test_before_acquire(false)</code></a>.\n<ul>\n<li>If <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.before_acquire\" title=\"method sqlx_core::pool::PoolOptions::before_acquire\"><code>before_acquire</code></a> is set, that will also be executed.</li>\n</ul>\n</li>\n<li>If a new connection needs to be opened, that will obviously require I/O, handshaking,\nand initialization commands.\n<ul>\n<li>If <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.after_connect\" title=\"method sqlx_core::pool::PoolOptions::after_connect\"><code>after_connect</code></a> is set, that will also be executed.</li>\n</ul>\n</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_acquire_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#267-269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_acquire_timeout\" class=\"fn\">get_acquire_timeout</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Get the maximum amount of time to spend waiting for a connection in <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_lifetime\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#285-288\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.max_lifetime\" class=\"fn\">max_lifetime</a>(self, lifetime: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the maximum lifetime of individual connections.</p>\n<p>Any connection with a lifetime greater than this will be closed.</p>\n<p>When set to <code>None</code>, all connections live until either reaped by <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.idle_timeout\" title=\"method sqlx_core::pool::PoolOptions::idle_timeout\"><code>idle_timeout</code></a>\nor explicitly disconnected.</p>\n<p>Infinite connections are not recommended due to the unfortunate reality of memory/resource\nleaks on the database-side. It is better to retire connections periodically\n(even if only once daily) to allow the database the opportunity to clean up data structures\n(parse trees, query metadata caches, thread-local storage, etc.) that are associated with a\nsession.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_max_lifetime\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#291-293\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_max_lifetime\" class=\"fn\">get_max_lifetime</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the maximum lifetime of individual connections.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.idle_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#300-303\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.idle_timeout\" class=\"fn\">idle_timeout</a>(self, timeout: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set a maximum idle duration for individual connections.</p>\n<p>Any connection that remains in the idle queue longer than this will be closed.</p>\n<p>For usage-based database server billing, this can be a cost saver.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_idle_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#306-308\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_idle_timeout\" class=\"fn\">get_idle_timeout</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the maximum idle duration for individual connections.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.test_before_acquire\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#314-317\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.test_before_acquire\" class=\"fn\">test_before_acquire</a>(self, test: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>If true, the health of a connection will be verified by a call to <a href=\"sqlx_core/connection/trait.Connection.html#tymethod.ping\" title=\"method sqlx_core::connection::Connection::ping\"><code>Connection::ping</code></a>\nbefore returning the connection.</p>\n<p>Defaults to <code>true</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_test_before_acquire\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#320-322\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.get_test_before_acquire\" class=\"fn\">get_test_before_acquire</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Get whether <code>test_before_acquire</code> is currently set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after_connect\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#380-391\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.after_connect\" class=\"fn\">after_connect</a>&lt;F&gt;(self, callback: F) -&gt; Self<div class=\"where\">where\n    for&lt;'c&gt; F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;'c mut DB::<a class=\"associatedtype\" href=\"sqlx_core/database/trait.Database.html#associatedtype.Connection\" title=\"type sqlx_core::database::Database::Connection\">Connection</a>, <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolConnectionMetadata.html\" title=\"struct sqlx_core::pool::PoolConnectionMetadata\">PoolConnectionMetadata</a>) -&gt; <a class=\"type\" href=\"futures_core/future/type.BoxFuture.html\" title=\"type futures_core::future::BoxFuture\">BoxFuture</a>&lt;'c, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;&gt; + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform an asynchronous action after connecting to the database.</p>\n<p>If the operation returns with an error then the error is logged, the connection is closed\nand a new one is opened in its place and the callback is invoked again.</p>\n<p>This occurs in a backoff loop to avoid high CPU usage and spamming logs during a transient\nerror condition.</p>\n<p>Note that this may be called for internally opened connections, such as when maintaining\n<a href=\"sqlx_core/pool/struct.PoolOptions.html#method.min_connections\" title=\"method sqlx_core::pool::PoolOptions::min_connections\"><code>min_connections</code></a>, that are then immediately returned to the pool\nwithout invoking <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.after_release\" title=\"method sqlx_core::pool::PoolOptions::after_release\"><code>after_release</code></a>.</p>\n<h5 id=\"example-additional-parameters\"><a class=\"doc-anchor\" href=\"#example-additional-parameters\">§</a>Example: Additional Parameters</h5>\n<p>This callback may be used to set additional configuration parameters\nthat are not exposed by the database’s <code>ConnectOptions</code>.</p>\n<p>This example is written for PostgreSQL but can likely be adapted to other databases.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sqlx::Executor;\n<span class=\"kw\">use </span>sqlx::postgres::PgPoolOptions;\n\n<span class=\"kw\">let </span>pool = PgPoolOptions::new()\n    .after_connect(|conn, _meta| Box::pin(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// When directly invoking `Executor` methods,\n        // it is possible to execute multiple statements with one call.\n        </span>conn.execute(<span class=\"string\">\"SET application_name = 'your_app'; SET search_path = 'my_schema';\"</span>)\n            .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n        <span class=\"prelude-val\">Ok</span>(())\n    }))\n    .connect(<span class=\"string\">\"postgres:// …\"</span>).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n<p>For a discussion on why <code>Box::pin()</code> is required, see <a href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">the type-level docs</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_acquire\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#435-444\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.before_acquire\" class=\"fn\">before_acquire</a>&lt;F&gt;(self, callback: F) -&gt; Self<div class=\"where\">where\n    for&lt;'c&gt; F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;'c mut DB::<a class=\"associatedtype\" href=\"sqlx_core/database/trait.Database.html#associatedtype.Connection\" title=\"type sqlx_core::database::Database::Connection\">Connection</a>, <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolConnectionMetadata.html\" title=\"struct sqlx_core::pool::PoolConnectionMetadata\">PoolConnectionMetadata</a>) -&gt; <a class=\"type\" href=\"futures_core/future/type.BoxFuture.html\" title=\"type futures_core::future::BoxFuture\">BoxFuture</a>&lt;'c, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;&gt; + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform an asynchronous action on a previously idle connection before giving it out.</p>\n<p>Alongside the connection, the closure gets <a href=\"sqlx_core/pool/struct.PoolConnectionMetadata.html\" title=\"struct sqlx_core::pool::PoolConnectionMetadata\"><code>PoolConnectionMetadata</code></a> which contains\npotentially useful information such as the connection’s age and the duration it was\nidle.</p>\n<p>If the operation returns <code>Ok(true)</code>, the connection is returned to the task that called\n<a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire</code></a>.</p>\n<p>If the operation returns <code>Ok(false)</code> or an error, the error is logged (if applicable)\nand then the connection is closed and <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire</code></a> tries again with another idle\nconnection. If it runs out of idle connections, it opens a new connection instead.</p>\n<p>This is <em>not</em> invoked for new connections. Use <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.after_connect\" title=\"method sqlx_core::pool::PoolOptions::after_connect\"><code>after_connect</code></a>\nfor those.</p>\n<h5 id=\"example-custom-test_before_acquire-logic\"><a class=\"doc-anchor\" href=\"#example-custom-test_before_acquire-logic\">§</a>Example: Custom <code>test_before_acquire</code> Logic</h5>\n<p>If you only want to ping connections if they’ve been idle a certain amount of time,\nyou can implement your own logic here:</p>\n<p>This example is written for Postgres but should be trivially adaptable to other databases.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sqlx::{Connection, Executor};\n<span class=\"kw\">use </span>sqlx::postgres::PgPoolOptions;\n\n<span class=\"kw\">let </span>pool = PgPoolOptions::new()\n    .test_before_acquire(<span class=\"bool-val\">false</span>)\n    .before_acquire(|conn, meta| Box::pin(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// One minute\n        </span><span class=\"kw\">if </span>meta.idle_for.as_secs() &gt; <span class=\"number\">60 </span>{\n            conn.ping().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n        }\n\n        <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>)\n    }))\n    .connect(<span class=\"string\">\"postgres:// …\"</span>).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n<p>For a discussion on why <code>Box::pin()</code> is required, see <a href=\"sqlx_core/pool/struct.PoolOptions.html\" title=\"struct sqlx_core::pool::PoolOptions\">the type-level docs</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after_release\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#492-501\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.after_release\" class=\"fn\">after_release</a>&lt;F&gt;(self, callback: F) -&gt; Self<div class=\"where\">where\n    for&lt;'c&gt; F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;'c mut DB::<a class=\"associatedtype\" href=\"sqlx_core/database/trait.Database.html#associatedtype.Connection\" title=\"type sqlx_core::database::Database::Connection\">Connection</a>, <a class=\"struct\" href=\"sqlx_core/pool/struct.PoolConnectionMetadata.html\" title=\"struct sqlx_core::pool::PoolConnectionMetadata\">PoolConnectionMetadata</a>) -&gt; <a class=\"type\" href=\"futures_core/future/type.BoxFuture.html\" title=\"type futures_core::future::BoxFuture\">BoxFuture</a>&lt;'c, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;&gt; + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform an asynchronous action on a connection before it is returned to the pool.</p>\n<p>Alongside the connection, the closure gets <a href=\"sqlx_core/pool/struct.PoolConnectionMetadata.html\" title=\"struct sqlx_core::pool::PoolConnectionMetadata\"><code>PoolConnectionMetadata</code></a> which contains\npotentially useful information such as the connection’s age.</p>\n<p>If the operation returns <code>Ok(true)</code>, the connection is returned to the pool’s idle queue.\nIf the operation returns <code>Ok(false)</code> or an error, the error is logged (if applicable)\nand the connection is closed, allowing a task waiting on <a href=\"sqlx_core/pool/struct.Pool.html#method.acquire\" title=\"method sqlx_core::pool::Pool::acquire\"><code>Pool::acquire</code></a> to\nopen a new one in its place.</p>\n<h5 id=\"example-postgres-close-memory-hungry-connections\"><a class=\"doc-anchor\" href=\"#example-postgres-close-memory-hungry-connections\">§</a>Example (Postgres): Close Memory-Hungry Connections</h5>\n<p>Instead of relying on <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.max_lifetime\" title=\"method sqlx_core::pool::PoolOptions::max_lifetime\"><code>max_lifetime</code></a> to close connections,\nwe can monitor their memory usage directly and close any that have allocated too much.</p>\n<p>Note that this is purely an example showcasing a possible use for this callback\nand may be flawed as it has not been tested.</p>\n<p>This example queries <a href=\"https://www.postgresql.org/docs/current/view-pg-backend-memory-contexts.html\"><code>pg_backend_memory_contexts</code></a>\nwhich is only allowed for superusers.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sqlx::{Connection, Executor};\n<span class=\"kw\">use </span>sqlx::postgres::PgPoolOptions;\n\n<span class=\"kw\">let </span>pool = PgPoolOptions::new()\n    <span class=\"comment\">// Let connections live as long as they want.\n    </span>.max_lifetime(<span class=\"prelude-val\">None</span>)\n    .after_release(|conn, meta| Box::pin(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// Only check connections older than 6 hours.\n        </span><span class=\"kw\">if </span>meta.age.as_secs() &lt; <span class=\"number\">6 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60 </span>{\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>);\n        }\n\n        <span class=\"kw\">let </span>total_memory_usage: i64 = sqlx::query_scalar(\n            <span class=\"string\">\"select sum(used_bytes) from pg_backend_memory_contexts\"\n        </span>)\n        .fetch_one(conn)\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n        <span class=\"comment\">// Close the connection if the backend memory usage exceeds 256 MiB.\n        </span><span class=\"prelude-val\">Ok</span>(total_memory_usage &lt;= (<span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">28</span>))\n    }))\n    .connect(<span class=\"string\">\"postgres:// …\"</span>).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#528-530\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.connect\" class=\"fn\">connect</a>(self, url: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"sqlx_core/pool/struct.Pool.html\" title=\"struct sqlx_core::pool::Pool\">Pool</a>&lt;DB&gt;, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new pool from this <code>PoolOptions</code> and immediately open at least one connection.</p>\n<p>This ensures the configuration is correct.</p>\n<p>The total number of connections opened is <code>max(1, <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.min_connections\" title=\"method sqlx_core::pool::PoolOptions::min_connections\">min_connections</a>)</code>.</p>\n<p>Refer to the relevant <code>ConnectOptions</code> impl for your database for the expected URL format:</p>\n<ul>\n<li>Postgres: [<code>PgConnectOptions</code>][crate::postgres::PgConnectOptions]</li>\n<li>MySQL: [<code>MySqlConnectOptions</code>][crate::mysql::MySqlConnectOptions]</li>\n<li>SQLite: [<code>SqliteConnectOptions</code>][crate::sqlite::SqliteConnectOptions]</li>\n<li>MSSQL: [<code>MssqlConnectOptions</code>][crate::mssql::MssqlConnectOptions]</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect_with\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#537-558\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.connect_with\" class=\"fn\">connect_with</a>(\n    self,\n    options: &lt;DB::<a class=\"associatedtype\" href=\"sqlx_core/database/trait.Database.html#associatedtype.Connection\" title=\"type sqlx_core::database::Database::Connection\">Connection</a> as <a class=\"trait\" href=\"sqlx_core/connection/trait.Connection.html\" title=\"trait sqlx_core::connection::Connection\">Connection</a>&gt;::<a class=\"associatedtype\" href=\"sqlx_core/connection/trait.Connection.html#associatedtype.Options\" title=\"type sqlx_core::connection::Connection::Options\">Options</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"sqlx_core/pool/struct.Pool.html\" title=\"struct sqlx_core::pool::Pool\">Pool</a>&lt;DB&gt;, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new pool from this <code>PoolOptions</code> and immediately open at least one connection.</p>\n<p>This ensures the configuration is correct.</p>\n<p>The total number of connections opened is <code>max(1, <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.min_connections\" title=\"method sqlx_core::pool::PoolOptions::min_connections\">min_connections</a>)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect_lazy\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#571-573\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.connect_lazy\" class=\"fn\">connect_lazy</a>(self, url: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"sqlx_core/pool/struct.Pool.html\" title=\"struct sqlx_core::pool::Pool\">Pool</a>&lt;DB&gt;, <a class=\"enum\" href=\"sqlx_core/error/enum.Error.html\" title=\"enum sqlx_core::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new pool from this <code>PoolOptions</code>, but don’t open any connections right now.</p>\n<p>If <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.min_connections\" title=\"method sqlx_core::pool::PoolOptions::min_connections\"><code>min_connections</code></a> is set, a background task will be spawned to\noptimistically establish that many connections for the pool.</p>\n<p>Refer to the relevant <code>ConnectOptions</code> impl for your database for the expected URL format:</p>\n<ul>\n<li>Postgres: [<code>PgConnectOptions</code>][crate::postgres::PgConnectOptions]</li>\n<li>MySQL: [<code>MySqlConnectOptions</code>][crate::mysql::MySqlConnectOptions]</li>\n<li>SQLite: [<code>SqliteConnectOptions</code>][crate::sqlite::SqliteConnectOptions]</li>\n<li>MSSQL: [<code>MssqlConnectOptions</code>][crate::mssql::MssqlConnectOptions]</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect_lazy_with\" class=\"method\"><a class=\"src rightside\" href=\"src/sqlx_core/pool/options.rs.html#579-582\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sqlx_core/pool/struct.PoolOptions.html#tymethod.connect_lazy_with\" class=\"fn\">connect_lazy_with</a>(\n    self,\n    options: &lt;DB::<a class=\"associatedtype\" href=\"sqlx_core/database/trait.Database.html#associatedtype.Connection\" title=\"type sqlx_core::database::Database::Connection\">Connection</a> as <a class=\"trait\" href=\"sqlx_core/connection/trait.Connection.html\" title=\"trait sqlx_core::connection::Connection\">Connection</a>&gt;::<a class=\"associatedtype\" href=\"sqlx_core/connection/trait.Connection.html#associatedtype.Options\" title=\"type sqlx_core::connection::Connection::Options\">Options</a>,\n) -&gt; <a class=\"struct\" href=\"sqlx_core/pool/struct.Pool.html\" title=\"struct sqlx_core::pool::Pool\">Pool</a>&lt;DB&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new pool from this <code>PoolOptions</code>, but don’t open any connections right now.</p>\n<p>If <a href=\"sqlx_core/pool/struct.PoolOptions.html#method.min_connections\" title=\"method sqlx_core::pool::PoolOptions::min_connections\"><code>min_connections</code></a> is set, a background task will be spawned to\noptimistically establish that many connections for the pool.</p>\n</div></details></div></details>",0,"sqlx_core::any::AnyPoolOptions"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[43468]}