(function() {
    var type_impls = Object.fromEntries([["corosensei",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+Stack%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#438-455\">Source</a><a href=\"#impl-Drop-for-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+Stack%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Input, Yield, Return, Stack: <a class=\"trait\" href=\"corosensei/stack/trait.Stack.html\" title=\"trait corosensei::stack::Stack\">Stack</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"corosensei/struct.ScopedCoroutine.html\" title=\"struct corosensei::ScopedCoroutine\">ScopedCoroutine</a>&lt;'a, Input, Yield, Return, Stack&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#441-454\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","corosensei::coroutine::Coroutine"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+DefaultStack%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#120-133\">Source</a><a href=\"#impl-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+DefaultStack%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Input, Yield, Return&gt; <a class=\"struct\" href=\"corosensei/struct.ScopedCoroutine.html\" title=\"struct corosensei::ScopedCoroutine\">ScopedCoroutine</a>&lt;'a, Input, Yield, Return, <a class=\"struct\" href=\"corosensei/stack/struct.DefaultStack.html\" title=\"struct corosensei::stack::DefaultStack\">DefaultStack</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#126-132\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.new\" class=\"fn\">new</a>&lt;F&gt;(f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"corosensei/struct.Yielder.html\" title=\"struct corosensei::Yielder\">Yielder</a>&lt;Input, Yield&gt;, Input) -&gt; Return + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new coroutine which will execute <code>func</code> on a new stack.</p>\n<p>This function returns a <code>Coroutine</code> which, when resumed, will execute\n<code>func</code> to completion. When desired the <code>func</code> can suspend itself via\n<code>Yielder::suspend</code>.</p>\n</div></details></div></details>",0,"corosensei::coroutine::Coroutine"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+Stack%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#135-436\">Source</a><a href=\"#impl-ScopedCoroutine%3C'a,+Input,+Yield,+Return,+Stack%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Input, Yield, Return, Stack: <a class=\"trait\" href=\"corosensei/stack/trait.Stack.html\" title=\"trait corosensei::stack::Stack\">Stack</a>&gt; <a class=\"struct\" href=\"corosensei/struct.ScopedCoroutine.html\" title=\"struct corosensei::ScopedCoroutine\">ScopedCoroutine</a>&lt;'a, Input, Yield, Return, Stack&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_stack\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#143-206\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.with_stack\" class=\"fn\">with_stack</a>&lt;F&gt;(stack: Stack, f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"corosensei/struct.Yielder.html\" title=\"struct corosensei::Yielder\">Yielder</a>&lt;Input, Yield&gt;, Input) -&gt; Return + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new coroutine which will execute <code>func</code> on the given stack.</p>\n<p>This function returns a coroutine which, when resumed, will execute\n<code>func</code> to completion. When desired the <code>func</code> can suspend itself via\n<a href=\"corosensei/struct.Yielder.html#method.suspend\" title=\"method corosensei::Yielder::suspend\"><code>Yielder::suspend</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#225-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.resume\" class=\"fn\">resume</a>(&amp;mut self, val: Input) -&gt; <a class=\"enum\" href=\"corosensei/enum.CoroutineResult.html\" title=\"enum corosensei::CoroutineResult\">CoroutineResult</a>&lt;Yield, Return&gt;</h4></section></summary><div class=\"docblock\"><p>Resumes execution of this coroutine.</p>\n<p>This function will transfer execution to the coroutine and resume from\nwhere it last left off.</p>\n<p>If the coroutine calls <a href=\"corosensei/struct.Yielder.html#method.suspend\" title=\"method corosensei::Yielder::suspend\"><code>Yielder::suspend</code></a> then this function returns\n<a href=\"corosensei/enum.CoroutineResult.html#variant.Yield\" title=\"variant corosensei::CoroutineResult::Yield\"><code>CoroutineResult::Yield</code></a> with the value passed to <code>suspend</code>.</p>\n<p>If the coroutine returns then this function returns\n<a href=\"corosensei/enum.CoroutineResult.html#variant.Return\" title=\"variant corosensei::CoroutineResult::Return\"><code>CoroutineResult::Return</code></a> with the return value of the coroutine.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the coroutine has already finished executing.</p>\n<p>If the coroutine itself panics during execution then the panic will be\npropagated to this caller.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.started\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#267-269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.started\" class=\"fn\">started</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether this coroutine has been resumed at least once.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.done\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#275-277\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.done\" class=\"fn\">done</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether this coroutine has finished executing.</p>\n<p>A coroutine that has returned from its initial function can no longer\nbe resumed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_reset\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#289-291\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.force_reset\" class=\"fn\">force_reset</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Forcibly marks the coroutine as having completed, even if it is\ncurrently suspended in the middle of a function.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is equivalent to a <code>longjmp</code> all the way back to the initial\nfunction of the coroutine, so the same rules apply.</p>\n<p>This can only be done safely if there are no objects currently on the\ncoroutine’s stack that need to execute <code>Drop</code> code.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_unwind\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#311-316\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.force_unwind\" class=\"fn\">force_unwind</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unwinds the coroutine stack, dropping any live objects that are\ncurrently on the stack. This is automatically called when the coroutine\nis dropped.</p>\n<p>If the coroutine has already completed then this function is a no-op.</p>\n<p>If the coroutine is currently suspended on a <code>Yielder::suspend</code> call\nthen unwinding it requires the <code>unwind</code> feature to be enabled and\nfor the crate to be compiled with <code>-C panic=unwind</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if the coroutine could not be fully unwound. This\ncan happen for one of two reasons:</p>\n<ul>\n<li>The <code>ForcedUnwind</code> panic that is used internally was caught and not\nrethrown.</li>\n<li>This crate was compiled without the <code>unwind</code> feature and the\ncoroutine is currently suspended in the yielder (<code>started &amp;&amp; !done</code>).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_stack\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#400-416\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.into_stack\" class=\"fn\">into_stack</a>(self) -&gt; Stack</h4></section></summary><div class=\"docblock\"><p>Extracts the stack from a coroutine that has finished executing.</p>\n<p>This allows the stack to be re-used for another coroutine.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trap_handler\" class=\"method\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#429-435\">Source</a><h4 class=\"code-header\">pub fn <a href=\"corosensei/struct.ScopedCoroutine.html#tymethod.trap_handler\" class=\"fn\">trap_handler</a>(&amp;self) -&gt; <a class=\"struct\" href=\"corosensei/trap/struct.CoroutineTrapHandler.html\" title=\"struct corosensei::trap::CoroutineTrapHandler\">CoroutineTrapHandler</a>&lt;Return&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"corosensei/trap/struct.CoroutineTrapHandler.html\" title=\"struct corosensei::trap::CoroutineTrapHandler\"><code>CoroutineTrapHandler</code></a> which can be used to handle traps that\noccur inside the coroutine. Examples of traps that can be handled are\ninvalid memory accesses and stack overflows.</p>\n<p>The returned <a href=\"corosensei/trap/struct.CoroutineTrapHandler.html\" title=\"struct corosensei::trap::CoroutineTrapHandler\"><code>CoroutineTrapHandler</code></a> can be used in a trap handler to\nforce the trapping coroutine to return with a specific value, after\nwhich is it considered to have completed and can no longer be resumed.</p>\n<p>Needless to say, this is extremely unsafe and must be used with extreme\ncare. See <a href=\"corosensei/trap/struct.CoroutineTrapHandler.html#method.setup_trap_handler\" title=\"method corosensei::trap::CoroutineTrapHandler::setup_trap_handler\"><code>CoroutineTrapHandler::setup_trap_handler</code></a> for the exact\nsafety requirements.</p>\n</div></details></div></details>",0,"corosensei::coroutine::Coroutine"],["<section id=\"impl-Sync-for-ScopedCoroutine%3C'_,+Input,+Yield,+Return,+Stack%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/corosensei/coroutine.rs.html#114-117\">Source</a><a href=\"#impl-Sync-for-ScopedCoroutine%3C'_,+Input,+Yield,+Return,+Stack%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Input, Yield, Return, Stack: <a class=\"trait\" href=\"corosensei/stack/trait.Stack.html\" title=\"trait corosensei::stack::Stack\">Stack</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"corosensei/struct.ScopedCoroutine.html\" title=\"struct corosensei::ScopedCoroutine\">ScopedCoroutine</a>&lt;'_, Input, Yield, Return, Stack&gt;</h3></section>","Sync","corosensei::coroutine::Coroutine"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[13614]}