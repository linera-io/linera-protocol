(function() {
    var type_impls = Object.fromEntries([["tonic",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#469-474\">Source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#471-473\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#20\">Source</a><a href=\"#impl-Clone-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#20\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#476-480\">Source</a><a href=\"#impl-Debug-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#477-479\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26MetadataValue%3CVE%3E%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#589-594\">Source</a><a href=\"#impl-From%3C%26MetadataValue%3CVE%3E%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#591-593\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: &amp;'a <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a MetadataValue<VE>>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CMetadataKey%3CKeyVE%3E%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#482-490\">Source</a><a href=\"#impl-From%3CMetadataKey%3CKeyVE%3E%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;KeyVE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"tonic/metadata/struct.MetadataKey.html\" title=\"struct tonic::metadata::MetadataKey\">MetadataKey</a>&lt;KeyVE&gt;&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#484-489\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(h: <a class=\"struct\" href=\"tonic/metadata/struct.MetadataKey.html\" title=\"struct tonic::metadata::MetadataKey\">MetadataKey</a>&lt;KeyVE&gt;) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<MetadataKey<KeyVE>>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Ci16%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Ci32%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Ci64%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cisize%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#541-544\">Source</a><a href=\"#impl-From%3Cisize%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#541-544\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<isize>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Cu16%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Cu32%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#impl-From%3Cu64%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#516-526\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cusize%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#541-544\">Source</a><a href=\"#impl-From%3Cusize%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#541-544\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<usize>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#568-580\">Source</a><a href=\"#impl-FromStr-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#569\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValue.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValue\">InvalidMetadataValue</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#572-579\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#612-616\">Source</a><a href=\"#impl-Hash-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#613-615\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-MetadataValue%3CBinary%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#618-625\">Source</a><a href=\"#impl-Hash-for-MetadataValue%3CBinary%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Binary.html\" title=\"enum tonic::metadata::Binary\">Binary</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#619-624\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#382-450\">Source</a><a href=\"#impl-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_key\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#396-398\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.from_key\" class=\"fn\">from_key</a>&lt;KeyVE: ValueEncoding&gt;(key: <a class=\"struct\" href=\"tonic/metadata/struct.MetadataKey.html\" title=\"struct tonic::metadata::MetadataKey\">MetadataKey</a>&lt;KeyVE&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a MetadataKey into a <code>MetadataValue&lt;Ascii&gt;</code>.</p>\n<p>Since every valid MetadataKey is a valid MetadataValue this is done\ninfallibly.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_key::&lt;Ascii&gt;(<span class=\"string\">\"accept\"</span>.parse().unwrap());\n<span class=\"macro\">assert_eq!</span>(val, AsciiMetadataValue::try_from(<span class=\"string\">b\"accept\"</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#415-417\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>, in bytes.</p>\n<p>This method is not available for <code>MetadataValue&lt;Binary&gt;</code> because that\ncannot be implemented in constant time, which most people would probably\nexpect. To get the length of <code>MetadataValue&lt;Binary&gt;</code>, convert it to a\nBytes value and measure its length.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.len(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_str\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#432-434\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>, <a class=\"struct\" href=\"tonic/metadata/errors/struct.ToStrError.html\" title=\"struct tonic::metadata::errors::ToStrError\">ToStrError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <code>&amp;str</code> slice if the <code>MetadataValue</code> only contains visible ASCII\nchars.</p>\n<p>This function will perform a scan of the metadata value, checking all the\ncharacters.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.to_str().unwrap(), <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#447-449\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>MetadataValue</code> to a byte slice. For Binary values, use\n<code>to_bytes</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.as_bytes(), <span class=\"string\">b\"hello\"</span>);</code></pre></div>\n</div></details></div></details>",0,"tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MetadataValue%3CBinary%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#452-467\">Source</a><a href=\"#impl-MetadataValue%3CBinary%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Binary.html\" title=\"enum tonic::metadata::Binary\">Binary</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#463-466\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Convert a byte slice to a <code>MetadataValue&lt;Binary&gt;</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = BinaryMetadataValue::from_bytes(<span class=\"string\">b\"hello\\xfa\"</span>);\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"kw-2\">&amp;</span><span class=\"string\">b\"hello\\xfa\"</span>[..]);</code></pre></div>\n</div></details></div></details>",0,"tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#43-225\">Source</a><a href=\"#impl-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_static\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#71-76\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.from_static\" class=\"fn\">from_static</a>(src: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Convert a static string to a <code>MetadataValue</code>.</p>\n<p>This function will not perform any copying, however the string is\nchecked to ensure that no invalid characters are present.</p>\n<p>For Ascii values, only visible ASCII characters (32-127) are permitted.\nFor Binary values, the string must be valid base64.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if the argument contains invalid metadata value\ncharacters.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = BinaryMetadataValue::from_static(<span class=\"string\">\"SGVsbG8hIQ==\"</span>);\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"string\">\"Hello!!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shared_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#87-92\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.from_shared_unchecked\" class=\"fn\">from_shared_unchecked</a>(src: <a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Convert a <code>Bytes</code> directly into a <code>MetadataValue</code> without validating.\nFor <code>MetadataValue&lt;Binary&gt;</code> the provided parameter must be base64\nencoded without padding bytes at the end.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function does NOT validate that illegal bytes are not contained\nwithin the buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#107-109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>MetadataValue</code> has a length of zero bytes.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert!</span>(val.is_empty());\n\n<span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert!</span>(!val.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#129-131\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.to_bytes\" class=\"fn\">to_bytes</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>, <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValueBytes.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValueBytes\">InvalidMetadataValueBytes</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>MetadataValue</code> to a Bytes buffer. This method cannot\nfail for Ascii values. For Ascii values, <code>as_bytes</code> is more convenient\nto use.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.to_bytes().unwrap().as_ref(), <span class=\"string\">b\"hello\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = BinaryMetadataValue::from_bytes(<span class=\"string\">b\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.to_bytes().unwrap().as_ref(), <span class=\"string\">b\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_sensitive\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#148-150\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.set_sensitive\" class=\"fn\">set_sensitive</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Mark that the metadata value represents sensitive information.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"my secret\"</span>);\n\nval.set_sensitive(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert!</span>(val.is_sensitive());\n\nval.set_sensitive(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert!</span>(!val.is_sensitive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sensitive\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#174-176\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.is_sensitive\" class=\"fn\">is_sensitive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the value represents sensitive data.</p>\n<p>Sensitive data could represent passwords or other data that should not\nbe stored on disk or in memory. This setting can be used by components\nlike caches to avoid storing the value. HPACK encoders must set the\nmetadata field to never index when <code>is_sensitive</code> returns true.</p>\n<p>Note that sensitivity is not factored into equality or ordering.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"my secret\"</span>);\n\nval.set_sensitive(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert!</span>(val.is_sensitive());\n\nval.set_sensitive(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert!</span>(!val.is_sensitive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_encoded_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#195-197\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tonic/metadata/struct.MetadataValue.html#tymethod.as_encoded_bytes\" class=\"fn\">as_encoded_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>MetadataValue</code> to a byte slice. For Binary values, the\nreturn value is base64 encoded.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::from_static(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.as_encoded_bytes(), <span class=\"string\">b\"hello\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = BinaryMetadataValue::from_bytes(<span class=\"string\">b\"Hello!\"</span>);\n<span class=\"macro\">assert_eq!</span>(val.as_encoded_bytes(), <span class=\"string\">b\"SGVsbG8h\"</span>);</code></pre></div>\n</div></details></div></details>",0,"tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#649-654\">Source</a><a href=\"#impl-Ord-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#651-653\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#998-1000\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1037-1039\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1063-1065\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26T%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#754-762\">Source</a><a href=\"#impl-PartialEq%3C%26T%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, VE: ValueEncoding, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#759-761\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a T>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#663-668\">Source</a><a href=\"#impl-PartialEq%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#665-667\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[u8]>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#712-717\">Source</a><a href=\"#impl-PartialEq%3CString%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#714-716\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#656-661\">Source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#658-660\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#629-638\">Source</a><a href=\"#impl-PartialEq-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#631-637\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26T%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#764-772\">Source</a><a href=\"#impl-PartialOrd%3C%26T%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, VE: ValueEncoding, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#769-771\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&'a T>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#677-682\">Source</a><a href=\"#impl-PartialOrd%3C%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#679-681\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<[u8]>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CString%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#719-724\">Source</a><a href=\"#impl-PartialOrd%3CString%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#721-723\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<String>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#670-675\">Source</a><a href=\"#impl-PartialOrd%3Cstr%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#672-674\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<str>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#642-647\">Source</a><a href=\"#impl-PartialOrd-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#644-646\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#251-261\">Source</a><a href=\"#impl-TryFrom%3C%26%5Bu8%5D%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3><div class=\"docblock\"><p>Attempt to convert a byte slice to a <code>MetadataValue</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>For Ascii metadata values, If the argument contains invalid metadata\nvalue bytes, an error is returned. Only byte values between 32 and 255\n(inclusive) are permitted, excluding byte 127 (DEL).</p>\n<p>For Binary metadata values this method cannot fail. See also the Binary\nonly version of this method <code>from_bytes</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::try_from(<span class=\"string\">b\"hello\\xfa\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"kw-2\">&amp;</span><span class=\"string\">b\"hello\\xfa\"</span>[..]);</code></pre></div>\n<p>An invalid value</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::try_from(<span class=\"string\">b\"\\n\"</span>);\n<span class=\"macro\">assert!</span>(val.is_err());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#252\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValueBytes.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValueBytes\">InvalidMetadataValueBytes</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#255-260\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[u8]>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8;+N%5D%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#287-294\">Source</a><a href=\"#impl-TryFrom%3C%26%5Bu8;+N%5D%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3><div class=\"docblock\"><p>Attempt to convert a byte slice to a <code>MetadataValue</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>For Ascii metadata values, If the argument contains invalid metadata\nvalue bytes, an error is returned. Only byte values between 32 and 255\n(inclusive) are permitted, excluding byte 127 (DEL).</p>\n<p>For Binary metadata values this method cannot fail. See also the Binary\nonly version of this method <code>from_bytes</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::try_from(<span class=\"string\">b\"hello\\xfa\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"kw-2\">&amp;</span><span class=\"string\">b\"hello\\xfa\"</span>[..]);</code></pre></div>\n<p>An invalid value</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = AsciiMetadataValue::try_from(<span class=\"string\">b\"\\n\"</span>);\n<span class=\"macro\">assert!</span>(val.is_err());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#288\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValueBytes.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValueBytes\">InvalidMetadataValueBytes</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#291-293\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.array.html\">N</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[u8; N]>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26String%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#358-365\">Source</a><a href=\"#impl-TryFrom%3C%26String%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3><div class=\"docblock\"><p>Attempt to convert a string to a <code>MetadataValue&lt;Ascii&gt;</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>If the argument contains invalid metadata value characters, an error is\nreturned. Only visible ASCII characters (32-127) are permitted. Use\n<code>from_bytes</code> to create a <code>MetadataValue</code> that includes opaque octets\n(128-255).</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#359\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValue.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValue\">InvalidMetadataValue</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#362-364\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(s: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a String>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#343-350\">Source</a><a href=\"#impl-TryFrom%3C%26str%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3><div class=\"docblock\"><p>Attempt to convert a string to a <code>MetadataValue&lt;Ascii&gt;</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>If the argument contains invalid metadata value characters, an error is\nreturned. Only visible ASCII characters (32-127) are permitted. Use\n<code>from_bytes</code> to create a <code>MetadataValue</code> that includes opaque octets\n(128-255).</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#344\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValue.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValue\">InvalidMetadataValue</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#347-349\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a str>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBytes%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#306-316\">Source</a><a href=\"#impl-TryFrom%3CBytes%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3><div class=\"docblock\"><p>Attempt to convert a <code>Bytes</code> buffer to a <code>MetadataValue</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>For <code>MetadataValue&lt;Ascii&gt;</code>, if the argument contains invalid metadata\nvalue bytes, an error is returned. Only byte values between 32 and 255\n(inclusive) are permitted, excluding byte 127 (DEL).</p>\n<p>For <code>MetadataValue&lt;Binary&gt;</code>, if the argument is not valid base64, an\nerror is returned. In use cases where the input is not base64 encoded,\nuse <code>from_bytes</code>; if the value has to be encoded it’s not possible to\nshare the memory anyways.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#307\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValueBytes.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValueBytes\">InvalidMetadataValueBytes</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#310-315\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(src: <a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Bytes>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CString%3E-for-MetadataValue%3CAscii%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#373-380\">Source</a><a href=\"#impl-TryFrom%3CString%3E-for-MetadataValue%3CAscii%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;<a class=\"enum\" href=\"tonic/metadata/enum.Ascii.html\" title=\"enum tonic::metadata::Ascii\">Ascii</a>&gt;</h3><div class=\"docblock\"><p>Attempt to convert a string to a <code>MetadataValue&lt;Ascii&gt;</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>If the argument contains invalid metadata value characters, an error is\nreturned. Only visible ASCII characters (32-127) are permitted. Use\n<code>from_bytes</code> to create a <code>MetadataValue</code> that includes opaque octets\n(128-255).</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#374\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValue.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValue\">InvalidMetadataValue</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#377-379\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<String>","tonic::metadata::value::AsciiMetadataValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3Cu8%3E%3E-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#328-335\">Source</a><a href=\"#impl-TryFrom%3CVec%3Cu8%3E%3E-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3><div class=\"docblock\"><p>Attempt to convert a Vec of bytes to a <code>MetadataValue</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>For <code>MetadataValue&lt;Ascii&gt;</code>, if the argument contains invalid metadata\nvalue bytes, an error is returned. Only byte values between 32 and 255\n(inclusive) are permitted, excluding byte 127 (DEL).</p>\n<p>For <code>MetadataValue&lt;Binary&gt;</code>, if the argument is not valid base64, an\nerror is returned. In use cases where the input is not base64 encoded,\nuse <code>from_bytes</code>; if the value has to be encoded it’s not possible to\nshare the memory anyways.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#329\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"tonic/metadata/errors/struct.InvalidMetadataValueBytes.html\" title=\"struct tonic::metadata::errors::InvalidMetadataValueBytes\">InvalidMetadataValueBytes</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#332-334\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(src: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<u8>>","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"],["<section id=\"impl-Eq-for-MetadataValue%3CVE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tonic/metadata/value.rs.html#640\">Source</a><a href=\"#impl-Eq-for-MetadataValue%3CVE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;VE: ValueEncoding&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"tonic/metadata/struct.MetadataValue.html\" title=\"struct tonic::metadata::MetadataValue\">MetadataValue</a>&lt;VE&gt;</h3></section>","Eq","tonic::metadata::value::AsciiMetadataValue","tonic::metadata::value::BinaryMetadataValue"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[124369]}