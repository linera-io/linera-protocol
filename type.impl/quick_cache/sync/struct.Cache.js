(function() {
    var type_impls = Object.fromEntries([["linera_exporter",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cache%3CKey,+Val,+We%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#59\">Source</a><a href=\"#impl-Cache%3CKey,+Val,+We%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Key, Val, We&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We&gt;<div class=\"where\">where\n    Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    Val: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    We: <a class=\"trait\" href=\"quick_cache/trait.Weighter.html\" title=\"trait quick_cache::Weighter\">Weighter</a>&lt;Key, Val&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_weighter\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#60-64\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.with_weighter\" class=\"fn\">with_weighter</a>(\n    estimated_items_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    weight_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>,\n    weighter: We,\n) -&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We&gt;</h4></section></div></details>",0,"linera_exporter::storage::BlobCache","linera_exporter::storage::BlockCache"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cache%3CKey,+Val,+We,+B,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#75-81\">Source</a><a href=\"#impl-Cache%3CKey,+Val,+We,+B,+L%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Key, Val, We, B, L&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We, B, L&gt;<div class=\"where\">where\n    Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    Val: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    We: <a class=\"trait\" href=\"quick_cache/trait.Weighter.html\" title=\"trait quick_cache::Weighter\">Weighter</a>&lt;Key, Val&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    L: <a class=\"trait\" href=\"quick_cache/trait.Lifecycle.html\" title=\"trait quick_cache::Lifecycle\">Lifecycle</a>&lt;Key, Val&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#86-92\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.with\" class=\"fn\">with</a>(\n    estimated_items_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    weight_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a>,\n    weighter: We,\n    hash_builder: B,\n    lifecycle: L,\n) -&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We, B, L&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new cache that can hold up to <code>weight_capacity</code> in weight.\n<code>estimated_items_capacity</code> is the estimated number of items the cache is expected to hold,\nroughly equivalent to <code>weight_capacity / average item weight</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_options\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#123\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.with_options\" class=\"fn\">with_options</a>(\n    options: <a class=\"struct\" href=\"quick_cache/options/struct.Options.html\" title=\"struct quick_cache::options::Options\">Options</a>,\n    weighter: We,\n    hash_builder: B,\n    lifecycle: L,\n) -&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We, B, L&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a cache based on <a href=\"quick_cache/options/struct.OptionsBuilder.html\" title=\"struct quick_cache::options::OptionsBuilder\">OptionsBuilder</a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>quick_cache::{sync::{Cache, DefaultLifecycle}, OptionsBuilder, UnitWeighter, DefaultHashBuilder};\n\nCache::&lt;(String, u64), String&gt;::with_options(\n  OptionsBuilder::new()\n    .estimated_items_capacity(<span class=\"number\">10000</span>)\n    .weight_capacity(<span class=\"number\">10000</span>)\n    .build()\n    .unwrap(),\n    UnitWeighter,\n    DefaultHashBuilder::default(),\n    DefaultLifecycle::default(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the cache is empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#171\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of cached items</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weight\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#176\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.weight\" class=\"fn\">weight</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the total weight of cached items</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the <em>total</em> maximum weight capacity of cached items.\nNote that the cache may be composed of multiple shards and each shard has its own maximum weight capacity,\nsee <a href=\"quick_cache/sync/struct.Cache.html#method.shard_capacity\" title=\"method quick_cache::sync::Cache::shard_capacity\"><code>Self::shard_capacity</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shard_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#188\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.shard_capacity\" class=\"fn\">shard_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum weight capacity of each shard.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_shards\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#193\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.num_shards\" class=\"fn\">num_shards</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of shards.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#231\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserver additional space for <code>additional</code> entries.\nNote that this is counted in entries, and is not weighted.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#240-242\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Check if a key exist in the cache.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#249-251\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Val&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Fetches an item from the cache whose key is <code>key</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#259-261\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.peek\" class=\"fn\">peek</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Val&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Peeks an item from the cache whose key is <code>key</code>.\nContrary to gets, peeks donโt alter the key โhotnessโ.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#269-271\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.tuple.html\">(Key, Val)</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove an item from the cache whose key is <code>key</code>.\nReturns the removed entry, if any.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#283\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.replace\" class=\"fn\">replace</a>(\n    &amp;self,\n    key: Key,\n    value: Val,\n    soft: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.tuple.html\">(Key, Val)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts an item in the cache, but <em>only</em> if an entry with key <code>key</code> already exists.\nIf <code>soft</code> is set, the replace operation wonโt affect the โhotnessโ of the entry,\neven if the value is replaced.</p>\n<p>Returns <code>Ok</code> if the entry was admitted and <code>Err(_)</code> if it wasnโt.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_with_lifecycle\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#294-299\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.replace_with_lifecycle\" class=\"fn\">replace_with_lifecycle</a>(\n    &amp;self,\n    key: Key,\n    value: Val,\n    soft: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;L as <a class=\"trait\" href=\"quick_cache/trait.Lifecycle.html\" title=\"trait quick_cache::Lifecycle\">Lifecycle</a>&lt;Key, Val&gt;&gt;::<a class=\"associatedtype\" href=\"quick_cache/trait.Lifecycle.html#associatedtype.RequestState\" title=\"type quick_cache::Lifecycle::RequestState\">RequestState</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.tuple.html\">(Key, Val)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts an item in the cache, but <em>only</em> if an entry with key <code>key</code> already exists.\nIf <code>soft</code> is set, the replace operation wonโt affect the โhotnessโ of the entry,\neven if the value is replaced.</p>\n<p>Returns <code>Ok</code> if the entry was admitted and <code>Err(_)</code> if it wasnโt.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#311-313\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Key</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Val</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the items specified by the predicate.\nIn other words, remove all items for which <code>f(&amp;key, &amp;value)</code> returns <code>false</code>. The\nelements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#321\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;self, key: Key, value: Val)</h4></section></summary><div class=\"docblock\"><p>Inserts an item in the cache with key <code>key</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_with_lifecycle\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.insert_with_lifecycle\" class=\"fn\">insert_with_lifecycle</a>(\n    &amp;self,\n    key: Key,\n    value: Val,\n) -&gt; &lt;L as <a class=\"trait\" href=\"quick_cache/trait.Lifecycle.html\" title=\"trait quick_cache::Lifecycle\">Lifecycle</a>&lt;Key, Val&gt;&gt;::<a class=\"associatedtype\" href=\"quick_cache/trait.Lifecycle.html#associatedtype.RequestState\" title=\"type quick_cache::Lifecycle::RequestState\">RequestState</a></h4></section></summary><div class=\"docblock\"><p>Inserts an item in the cache with key <code>key</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#339\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Clear all items from the cache</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#350-352\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Iter.html\" title=\"struct quick_cache::sync::Iter\">Iter</a>&lt;'_, Key, Val, We, B, L&gt;<div class=\"where\">where\n    Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Iterates over the items in the cache returning cloned key value pairs.</p>\n<p>The iterator is guaranteed to yield all items in the cache at the time of creation\nprovided that they are not removed or evicted from the cache while iterating.\nThe iterator may also yield items added to the cache after the iterator is created.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#371\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quick_cache/sync/struct.Drain.html\" title=\"struct quick_cache::sync::Drain\">Drain</a>&lt;'_, Key, Val, We, B, L&gt;</h4></section></summary><div class=\"docblock\"><p>Drains items from the cache.</p>\n<p>The iterator is guaranteed to drain all items in the cache at the time of creation\nprovided that they are not removed or evicted from the cache while draining.\nThe iterator may also drain items added to the cache after the iterator is created.\nDue to the above, the cache may not be empty after the iterator is fully consumed\nif items are added to the cache while draining.</p>\n<p>Note that dropping the iterator will <em>not</em> finish the draining process, unlike other\ndrain methods.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_value_or_guard\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#390-396\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.get_value_or_guard\" class=\"fn\">get_value_or_guard</a>&lt;Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>,\n    timeout: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"quick_cache/sync_placeholder/enum.GuardResult.html\" title=\"enum quick_cache::sync_placeholder::GuardResult\">GuardResult</a>&lt;'_, Key, Val, We, B, L&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets an item from the cache with key <code>key</code> .</p>\n<p>If the corresponding value isnโt present in the cache, this functions returns a guard\nthat can be used to insert the value once itโs computed.\nWhile the returned guard is alive, other calls with the same key using the\n<code>get_value_guard</code> or <code>get_or_insert</code> family of functions will wait until the guard\nis dropped or the value is inserted.</p>\n<p>A <code>None</code> <code>timeout</code> means waiting forever.\nA <code>Some(&lt;zero&gt;)</code> timeout will return a Timeout error immediately if the value is not present\nand a guard is alive elsewhere.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#408-414\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;Q, E&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>,\n    with: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Val, E&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Val, E&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets or inserts an item in the cache with key <code>key</code>.</p>\n<p>See also <code>get_value_or_guard</code> and <code>get_value_or_guard_async</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_value_or_guard_async\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#434-439\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.get_value_or_guard_async\" class=\"fn\">get_value_or_guard_async</a>&lt;'a, Q&gt;(\n    &amp;'a self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Val, <a class=\"struct\" href=\"quick_cache/sync_placeholder/struct.PlaceholderGuard.html\" title=\"struct quick_cache::sync_placeholder::PlaceholderGuard\">PlaceholderGuard</a>&lt;'a, Key, Val, We, B, L&gt;&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets an item from the cache with key <code>key</code>.</p>\n<p>If the corresponding value isnโt present in the cache, this functions returns a guard\nthat can be used to insert the value once itโs computed.\nWhile the returned guard is alive, other calls with the same key using the\n<code>get_value_guard</code> or <code>get_or_insert</code> family of functions will wait until the guard\nis dropped or the value is inserted.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_async\" class=\"method\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#449-455\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"quick_cache/sync/struct.Cache.html#tymethod.get_or_insert_async\" class=\"fn\">get_or_insert_async</a>&lt;Q, E&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Q</a>,\n    with: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Val, E&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Val, E&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;Key&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = Key&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets or inserts an item in the cache with key <code>key</code>.</p>\n</div></details></div></details>",0,"linera_exporter::storage::BlobCache","linera_exporter::storage::BlockCache"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Cache%3CKey,+Val,+We,+B,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#468\">Source</a><a href=\"#impl-Debug-for-Cache%3CKey,+Val,+We,+B,+L%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Key, Val, We, B, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"quick_cache/sync/struct.Cache.html\" title=\"struct quick_cache::sync::Cache\">Cache</a>&lt;Key, Val, We, B, L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/quick_cache/sync.rs.html#469\">Source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","linera_exporter::storage::BlobCache","linera_exporter::storage::BlockCache"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[32793]}