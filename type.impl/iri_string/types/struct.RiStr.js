(function() {
    var type_impls = Object.fromEntries([["iri_string",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CRiReferenceStr%3CS%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-AsRef%3CRiReferenceStr%3CS%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;S&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<RiReferenceStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CRiStr%3CS%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-AsRef%3CRiStr%3CS%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<RiStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-AsRef%3Cstr%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-Debug-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-Display-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-Hash-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.86.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details>","Hash","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-Ord-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26RiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialEq%3C%26RiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&RiAbsoluteStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26RiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialEq%3C%26RiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&RiReferenceStr<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26RiStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialEq%3C%26RiStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&RiStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'_,+RiAbsoluteStr%3CS%3E%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'_,+RiAbsoluteStr%3CS%3E%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'_, RiAbsoluteStr<S>>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'_,+RiReferenceStr%3CT%3E%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'_,+RiReferenceStr%3CT%3E%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'_, RiReferenceStr<T>>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'_,+str%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#impl-PartialEq%3CCow%3C'_,+str%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'_, str>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialEq%3CRiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RiAbsoluteStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRiAbsoluteString%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialEq%3CRiAbsoluteString%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteString.html\" title=\"struct iri_string::types::RiAbsoluteString\">RiAbsoluteString</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteString.html\" title=\"struct iri_string::types::RiAbsoluteString\">RiAbsoluteString</a>&lt;S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RiAbsoluteString<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialEq%3CRiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RiReferenceStr<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRiReferenceString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialEq%3CRiReferenceString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceString.html\" title=\"struct iri_string::types::RiReferenceString\">RiReferenceString</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceString.html\" title=\"struct iri_string::types::RiReferenceString\">RiReferenceString</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RiReferenceString<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRiString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#impl-PartialEq%3CRiString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiString.html\" title=\"struct iri_string::types::RiString\">RiString</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiString.html\" title=\"struct iri_string::types::RiString\">RiString</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RiString<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, o: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialEq-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26RiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialOrd%3C%26RiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&RiAbsoluteStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26RiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialOrd%3C%26RiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&RiReferenceStr<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26RiStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialOrd%3C%26RiStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&RiStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26str%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialOrd%3C%26str%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&str>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'_,+RiAbsoluteStr%3CS%3E%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialOrd%3CCow%3C'_,+RiAbsoluteStr%3CS%3E%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'_, RiAbsoluteStr<S>>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'_,+RiReferenceStr%3CT%3E%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialOrd%3CCow%3C'_,+RiReferenceStr%3CT%3E%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'_, RiReferenceStr<T>>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'_,+str%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#impl-PartialOrd%3CCow%3C'_,+str%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'_, str>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialOrd%3CRiAbsoluteStr%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<RiAbsoluteStr<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRiAbsoluteString%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#impl-PartialOrd%3CRiAbsoluteString%3CS%3E%3E-for-RiStr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteString.html\" title=\"struct iri_string::types::RiAbsoluteString\">RiAbsoluteString</a>&lt;S&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/absolute.rs.html#716-721\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteString.html\" title=\"struct iri_string::types::RiAbsoluteString\">RiAbsoluteString</a>&lt;S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<RiAbsoluteString<S>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialOrd%3CRiReferenceStr%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceStr.html\" title=\"struct iri_string::types::RiReferenceStr\">RiReferenceStr</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<RiReferenceStr<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRiReferenceString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#impl-PartialOrd%3CRiReferenceString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceString.html\" title=\"struct iri_string::types::RiReferenceString\">RiReferenceString</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#939-944\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiReferenceString.html\" title=\"struct iri_string::types::RiReferenceString\">RiReferenceString</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<RiReferenceString<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRiString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#impl-PartialOrd%3CRiString%3CT%3E%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>, T: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"iri_string/types/struct.RiString.html\" title=\"struct iri_string::types::RiString\">RiString</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiString.html\" title=\"struct iri_string::types::RiString\">RiString</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<RiString<T>>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialOrd%3Cstr%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, o: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<str>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-PartialOrd-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1407\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#1425\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#110-510\">Source</a><a href=\"#impl-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_absolute_and_fragment\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#152-162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.to_absolute_and_fragment\" class=\"fn\">to_absolute_and_fragment</a>(\n    &amp;self,\n) -&gt; (&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiFragmentStr.html\" title=\"struct iri_string::types::RiFragmentStr\">RiFragmentStr</a>&lt;S&gt;&gt;)</h4></section></summary><div class=\"docblock\"><p>Splits the IRI into an absolute IRI part and a fragment part.</p>\n<p>A leading <code>#</code> character is truncated if the fragment part exists.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>If the IRI has a fragment part, <code>Some(_)</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>(absolute, fragment) = iri.to_absolute_and_fragment();\n<span class=\"kw\">let </span>fragment_expected = IriFragmentStr::new(<span class=\"string\">\"corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(absolute, <span class=\"string\">\"foo://bar/baz?qux=quux\"</span>);\n<span class=\"macro\">assert_eq!</span>(fragment, <span class=\"prelude-val\">Some</span>(fragment_expected));</code></pre></div>\n<p>When the fragment part exists but is empty string, <code>Some(_)</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>(absolute, fragment) = iri.to_absolute_and_fragment();\n<span class=\"kw\">let </span>fragment_expected = IriFragmentStr::new(<span class=\"string\">\"\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(absolute, <span class=\"string\">\"foo://bar/baz?qux=quux\"</span>);\n<span class=\"macro\">assert_eq!</span>(fragment, <span class=\"prelude-val\">Some</span>(fragment_expected));</code></pre></div>\n<p>If the IRI has no fragment, <code>None</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>(absolute, fragment) = iri.to_absolute_and_fragment();\n<span class=\"macro\">assert_eq!</span>(absolute, <span class=\"string\">\"foo://bar/baz?qux=quux\"</span>);\n<span class=\"macro\">assert_eq!</span>(fragment, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_absolute\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#184-189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.to_absolute\" class=\"fn\">to_absolute</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"iri_string/types/struct.RiAbsoluteStr.html\" title=\"struct iri_string::types::RiAbsoluteStr\">RiAbsoluteStr</a>&lt;S&gt;</h4></section></summary><div class=\"docblock\"><p>Strips the fragment part if exists, and returns <a href=\"struct.RiAbsoluteStr.html\"><code>&amp;RiAbsoluteStr</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.to_absolute(), <span class=\"string\">\"foo://bar/baz?qux=quux\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.to_absolute(), <span class=\"string\">\"foo://bar/baz?qux=quux\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ensure_rfc3986_normalizable\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#210-212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.ensure_rfc3986_normalizable\" class=\"fn\">ensure_rfc3986_normalizable</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"iri_string/normalize/struct.Error.html\" title=\"struct iri_string::normalize::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns Ok<code>(())</code> if the IRI is normalizable by the RFC 3986 algorithm.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/%2e/bar/..\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(iri.ensure_rfc3986_normalizable().is_ok());\n\n<span class=\"kw\">let </span>iri2 = IriStr::new(<span class=\"string\">\"scheme:/..//bar\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// The normalization result would be `scheme://bar` according to RFC\n// 3986, but it is unintended and should be treated as a failure.\n// This crate automatically handles this case so that `.normalize()` won't fail.\n</span><span class=\"macro\">assert!</span>(!iri.ensure_rfc3986_normalizable().is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normalized\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#267-269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.is_normalized\" class=\"fn\">is_normalized</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the IRI is already normalized.</p>\n<p>This returns the same result as <code>self.normalize().to_string() == self</code>,\nbut does this more efficiently without heap allocation.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/./bar/%2e%2e/../baz?query#fragment\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!iri.is_normalized());\n\n<span class=\"kw\">let </span>normalized = iri.normalize().to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"http://example.com/baz?query#fragment\"</span>);\n<span class=\"macro\">assert!</span>(normalized.is_normalized());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:/.///foo\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Already normalized.\n</span><span class=\"macro\">assert!</span>(iri.is_normalized());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:relative/..//not-a-host\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Default normalization algorithm assumes the path part to be NOT opaque.\n</span><span class=\"macro\">assert!</span>(!iri.is_normalized());\n\n<span class=\"kw\">let </span>normalized = iri.normalize().to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"scheme:/.//not-a-host\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normalized_rfc3986\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#325-327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.is_normalized_rfc3986\" class=\"fn\">is_normalized_rfc3986</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the IRI is already normalized in the sense of RFC 3986.</p>\n<p>This returns the same result as\n<code>self.ensure_rfc3986_normalizable() &amp;&amp; (self.normalize().to_string() == self)</code>,\nbut does this more efficiently without heap allocation.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/./bar/%2e%2e/../baz?query#fragment\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!iri.is_normalized_rfc3986());\n\n<span class=\"kw\">let </span>normalized = iri.normalize().to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"http://example.com/baz?query#fragment\"</span>);\n<span class=\"macro\">assert!</span>(normalized.is_normalized_rfc3986());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:/.///foo\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Not normalized in the sense of RFC 3986.\n</span><span class=\"macro\">assert!</span>(!iri.is_normalized_rfc3986());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:relative/..//not-a-host\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// RFC 3986 normalization algorithm assumes the path part to be NOT opaque.\n</span><span class=\"macro\">assert!</span>(!iri.is_normalized_rfc3986());\n\n<span class=\"kw\">let </span>normalized = iri.normalize().to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"scheme:/.//not-a-host\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normalized_but_authorityless_relative_path_preserved\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#387-392\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.is_normalized_but_authorityless_relative_path_preserved\" class=\"fn\">is_normalized_but_authorityless_relative_path_preserved</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the IRI is already normalized in the sense of\n<a href=\"iri_string/types/struct.RiStr.html#method.normalize_but_preserve_authorityless_relative_path\" title=\"method iri_string::types::RiStr::normalize_but_preserve_authorityless_relative_path\"><code>normalize_but_preserve_authorityless_relative_path</code></a> method.</p>\n<p>This returns the same result as\n<code>self.normalize_but_preserve_authorityless_relative_path().to_string() == self</code>,\nbut does this more efficiently without heap allocation.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/./bar/%2e%2e/../baz?query#fragment\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!iri.is_normalized_but_authorityless_relative_path_preserved());\n\n<span class=\"kw\">let </span>normalized = iri\n    .normalize_but_preserve_authorityless_relative_path()\n    .to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"http://example.com/baz?query#fragment\"</span>);\n<span class=\"macro\">assert!</span>(normalized.is_normalized());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:/.///foo\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Already normalized in the sense of\n// `normalize_but_opaque_authorityless_relative_path()` method.\n</span><span class=\"macro\">assert!</span>(iri.is_normalized_but_authorityless_relative_path_preserved());</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:relative/..//not-a-host\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Relative path is treated as opaque since the autority component is absent.\n</span><span class=\"macro\">assert!</span>(iri.is_normalized_but_authorityless_relative_path_preserved());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.normalize\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#424-426\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.normalize\" class=\"fn\">normalize</a>(&amp;self) -&gt; <a class=\"struct\" href=\"iri_string/normalize/struct.Normalized.html\" title=\"struct iri_string::normalize::Normalized\">Normalized</a>&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the normalized IRI.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>For some abnormal IRIs, the normalization can produce semantically\nincorrect string that looks syntactically valid. To avoid security\nissues by this trap, the normalization algorithm by this crate\nautomatically applies the workaround.</p>\n<p>If you worry about this, test by <a href=\"iri_string/types/struct.RiStr.html#method.ensure_rfc3986_normalizable\" title=\"method iri_string::types::RiStr::ensure_rfc3986_normalizable\"><code>RiStr::ensure_rfc3986_normalizable</code></a>\nmethod or <a href=\"iri_string/normalize/struct.Normalized.html#method.ensure_rfc3986_normalizable\" title=\"method iri_string::normalize::Normalized::ensure_rfc3986_normalizable\"><code>Normalized::ensure_rfc3986_normalizable</code></a> before using the\nresult string.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/./bar/%2e%2e/../baz?query#fragment\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>normalized = iri.normalize().to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"http://example.com/baz?query#fragment\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.normalize_but_preserve_authorityless_relative_path\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#479-482\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.normalize_but_preserve_authorityless_relative_path\" class=\"fn\">normalize_but_preserve_authorityless_relative_path</a>(\n    &amp;self,\n) -&gt; <a class=\"struct\" href=\"iri_string/normalize/struct.Normalized.html\" title=\"struct iri_string::normalize::Normalized\">Normalized</a>&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the normalized IRI, but preserving dot segments in relative path\nif the authority component is absent.</p>\n<p>This normalization would be similar to that of <a href=\"https://url.spec.whatwg.org/\">WHATWG URL Standard</a>\nwhile this implementation is not guaranteed to stricly follow the spec.</p>\n<p>Note that this normalization algorithm is not compatible with RFC 3986\nalgorithm for some inputs.</p>\n<p>Note that case normalization and percent-encoding normalization will\nstill be applied to any path.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"HTTP://example.COM/foo/./bar/%2e%2e/../baz?query#fragment\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>normalized = iri\n    .normalize_but_preserve_authorityless_relative_path()\n    .to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"http://example.com/baz?query#fragment\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"scheme:relative/../f%6f%6f\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>normalized = iri\n    .normalize_but_preserve_authorityless_relative_path()\n    .to_dedicated_string();\n<span class=\"macro\">assert_eq!</span>(normalized, <span class=\"string\">\"scheme:relative/../foo\"</span>);\n<span class=\"comment\">// `.normalize()` would normalize this to `scheme:/foo`.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mask_password\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#507-509\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.mask_password\" class=\"fn\">mask_password</a>(&amp;self) -&gt; <a class=\"struct\" href=\"iri_string/mask_password/struct.PasswordMasked.html\" title=\"struct iri_string::mask_password::PasswordMasked\">PasswordMasked</a>&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the proxy to the IRI with password masking feature.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::format::ToDedicatedString;\n<span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://user:password@example.com/path?query\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>masked = iri.mask_password();\n<span class=\"macro\">assert_eq!</span>(masked.to_dedicated_string(), <span class=\"string\">\"http://user:@example.com/path?query\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    masked.replace_password(<span class=\"string\">\"${password}\"</span>).to_string(),\n    <span class=\"string\">\"http://user:${password}@example.com/path?query\"\n</span>);</code></pre></div>\n</div></details></div></details>",0,"iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.new\" class=\"fn\">new</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"struct\" href=\"iri_string/validate/struct.Error.html\" title=\"struct iri_string::validate::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>) -&gt; &amp;Self</h4></section></summary><div class=\"docblock\"><p>Creates a new string without validation.</p>\n<p>This does not validate the given string, so it is caller’s\nresponsibility to ensure the given string is valid.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The given string must be syntactically valid as <code>Self</code> type.\nIf not, any use of the returned value or the call of this\nfunction itself may result in undefined behavior.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>&amp;str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the string length.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the string is empty.</p>\n</div></details></div></details>",0,"iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#513-745\">Source</a><a href=\"#impl-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3><div class=\"docblock\"><p>Components getters.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.scheme_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#530-532\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.scheme_str\" class=\"fn\">scheme_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the scheme.</p>\n<p>The following colon is truncated.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://example.com/pathpath?queryquery#fragfrag\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.scheme_str(), <span class=\"string\">\"http\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.authority_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#559-561\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.authority_str\" class=\"fn\">authority_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the authority.</p>\n<p>The leading <code>//</code> is truncated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://example.com/pathpath?queryquery#fragfrag\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.authority_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"example.com\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"urn:uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.authority_str(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#586-588\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.path_str\" class=\"fn\">path_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the path.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://example.com/pathpath?queryquery#fragfrag\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.path_str(), <span class=\"string\">\"/pathpath\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"urn:uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.path_str(), <span class=\"string\">\"uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#616-618\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.query\" class=\"fn\">query</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiQueryStr.html\" title=\"struct iri_string::types::RiQueryStr\">RiQueryStr</a>&lt;S&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query.</p>\n<p>The leading question mark (<code>?</code>) is truncated.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::{IriQueryStr, IriStr};\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://example.com/pathpath?queryquery#fragfrag\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>query = IriQueryStr::new(<span class=\"string\">\"queryquery\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.query(), <span class=\"prelude-val\">Some</span>(query));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"urn:uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.query(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#645-647\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.query_str\" class=\"fn\">query_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query in a raw string slice.</p>\n<p>The leading question mark (<code>?</code>) is truncated.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://example.com/pathpath?queryquery#fragfrag\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.query_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"queryquery\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"urn:uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.query_str(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fragment\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#679-681\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.fragment\" class=\"fn\">fragment</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"iri_string/types/struct.RiFragmentStr.html\" title=\"struct iri_string::types::RiFragmentStr\">RiFragmentStr</a>&lt;S&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the fragment part if exists.</p>\n<p>A leading <code>#</code> character is truncated if the fragment part exists.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>fragment = IriFragmentStr::new(<span class=\"string\">\"corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment(), <span class=\"prelude-val\">Some</span>(fragment));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>fragment = IriFragmentStr::new(<span class=\"string\">\"\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment(), <span class=\"prelude-val\">Some</span>(fragment));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fragment_str\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#711-713\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.fragment_str\" class=\"fn\">fragment_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the fragment part as a raw string slice if exists.</p>\n<p>A leading <code>#</code> character is truncated if the fragment part exists.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#corge\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"corge\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux#\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"foo://bar/baz?qux=quux\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.fragment_str(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.authority_components\" class=\"method\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#742-744\">Source</a><h4 class=\"code-header\">pub fn <a href=\"iri_string/types/struct.RiStr.html#tymethod.authority_components\" class=\"fn\">authority_components</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"iri_string/components/struct.AuthorityComponents.html\" title=\"struct iri_string::components::AuthorityComponents\">AuthorityComponents</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the authority components.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"http://user:pass@example.com:8080/pathpath?queryquery\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>authority = iri.authority_components()\n    .expect(<span class=\"string\">\"authority is available\"</span>);\n<span class=\"macro\">assert_eq!</span>(authority.userinfo(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"user:pass\"</span>));\n<span class=\"macro\">assert_eq!</span>(authority.host(), <span class=\"string\">\"example.com\"</span>);\n<span class=\"macro\">assert_eq!</span>(authority.port(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"8080\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>iri_string::types::IriStr;\n\n<span class=\"kw\">let </span>iri = IriStr::new(<span class=\"string\">\"urn:uuid:10db315b-fcd1-4428-aca8-15babc9a2da2\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iri.authority_str(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToOwned-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#impl-ToOwned-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"iri_string/types/struct.RiString.html\" title=\"struct iri_string::types::RiString\">RiString</a>&lt;S&gt;</h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#87-108\">Source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" title=\"type alloc::borrow::ToOwned::Owned\">Owned</a></h4></section></summary><div class='docblock'>Creates owned data from borrowed data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/borrow.rs.html#76\">Source</a></span><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" title=\"type alloc::borrow::ToOwned::Owned\">Owned</a>)</h4></section></summary><div class='docblock'>Uses borrowed data to replace owned data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.86.0/alloc/borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details>","ToOwned","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<section id=\"impl-Buildable%3C'_%3E-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/build.rs.html#1082\">Source</a><a href=\"#impl-Buildable%3C'_%3E-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"iri_string/build/trait.Buildable.html\" title=\"trait iri_string::build::Buildable\">Buildable</a>&lt;'_&gt; for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section>","Buildable<'_>","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"],["<section id=\"impl-Eq-for-RiStr%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/iri_string/types/generic/normal.rs.html#20-84\">Source</a><a href=\"#impl-Eq-for-RiStr%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"iri_string/spec/trait.Spec.html\" title=\"trait iri_string::spec::Spec\">Spec</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"iri_string/types/struct.RiStr.html\" title=\"struct iri_string::types::RiStr\">RiStr</a>&lt;S&gt;</h3></section>","Eq","iri_string::types::iri::IriStr","iri_string::types::uri::UriStr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[189087]}