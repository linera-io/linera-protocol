(function() {
    var type_impls = Object.fromEntries([["alloy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Caller%3CN,+Resp%3E-for-Weak%3CRpcClientInner%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/alloy_provider/provider/eth_call/caller.rs.html#36-39\">Source</a><a href=\"#impl-Caller%3CN,+Resp%3E-for-Weak%3CRpcClientInner%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, Resp&gt; <a class=\"trait\" href=\"alloy/providers/trait.Caller.html\" title=\"trait alloy::providers::Caller\">Caller</a>&lt;N, Resp&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;<a class=\"struct\" href=\"alloy/rpc/client/struct.RpcClientInner.html\" title=\"struct alloy::rpc::client::RpcClientInner\">RpcClientInner</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"alloy/providers/trait.Network.html\" title=\"trait alloy::providers::Network\">Network</a>,\n    Resp: <a class=\"trait\" href=\"alloy/rpc/json_rpc/trait.RpcRecv.html\" title=\"trait alloy::rpc::json_rpc::RpcRecv\">RpcRecv</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/alloy_provider/provider/eth_call/caller.rs.html#41-44\">Source</a><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"alloy/providers/trait.Caller.html#tymethod.call\" class=\"fn\">call</a>(\n    &amp;self,\n    params: <a class=\"struct\" href=\"alloy/providers/struct.EthCallParams.html\" title=\"struct alloy::providers::EthCallParams\">EthCallParams</a>&lt;N&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"alloy/providers/enum.ProviderCall.html\" title=\"enum alloy::providers::ProviderCall\">ProviderCall</a>&lt;<a class=\"struct\" href=\"alloy/providers/struct.EthCallParams.html\" title=\"struct alloy::providers::EthCallParams\">EthCallParams</a>&lt;N&gt;, Resp&gt;, <a class=\"enum\" href=\"alloy/transports/enum.RpcError.html\" title=\"enum alloy::transports::RpcError\">RpcError</a>&lt;<a class=\"enum\" href=\"alloy/transports/enum.TransportErrorKind.html\" title=\"enum alloy::transports::TransportErrorKind\">TransportErrorKind</a>&gt;&gt;</h4></section></summary><div class='docblock'>Method that needs to be implemented to convert to a <code>ProviderCall</code>. <a href=\"alloy/providers/trait.Caller.html#tymethod.call\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.estimate_gas\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/alloy_provider/provider/eth_call/caller.rs.html#48-51\">Source</a><a href=\"#method.estimate_gas\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"alloy/providers/trait.Caller.html#tymethod.estimate_gas\" class=\"fn\">estimate_gas</a>(\n    &amp;self,\n    params: <a class=\"struct\" href=\"alloy/providers/struct.EthCallParams.html\" title=\"struct alloy::providers::EthCallParams\">EthCallParams</a>&lt;N&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"alloy/providers/enum.ProviderCall.html\" title=\"enum alloy::providers::ProviderCall\">ProviderCall</a>&lt;<a class=\"struct\" href=\"alloy/providers/struct.EthCallParams.html\" title=\"struct alloy::providers::EthCallParams\">EthCallParams</a>&lt;N&gt;, Resp&gt;, <a class=\"enum\" href=\"alloy/transports/enum.RpcError.html\" title=\"enum alloy::transports::RpcError\">RpcError</a>&lt;<a class=\"enum\" href=\"alloy/transports/enum.TransportErrorKind.html\" title=\"enum alloy::transports::TransportErrorKind\">TransportErrorKind</a>&gt;&gt;</h4></section></summary><div class='docblock'>Method that needs to be implemented for estimating gas using “eth_estimateGas” for the\ntransaction.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_many\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/alloy_provider/provider/eth_call/caller.rs.html#55-58\">Source</a><a href=\"#method.call_many\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"alloy/providers/trait.Caller.html#tymethod.call_many\" class=\"fn\">call_many</a>(\n    &amp;self,\n    params: <a class=\"struct\" href=\"alloy/providers/struct.EthCallManyParams.html\" title=\"struct alloy::providers::EthCallManyParams\">EthCallManyParams</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"alloy/providers/enum.ProviderCall.html\" title=\"enum alloy::providers::ProviderCall\">ProviderCall</a>&lt;<a class=\"struct\" href=\"alloy/providers/struct.EthCallManyParams.html\" title=\"struct alloy::providers::EthCallManyParams\">EthCallManyParams</a>&lt;'static&gt;, Resp&gt;, <a class=\"enum\" href=\"alloy/transports/enum.RpcError.html\" title=\"enum alloy::transports::RpcError\">RpcError</a>&lt;<a class=\"enum\" href=\"alloy/transports/enum.TransportErrorKind.html\" title=\"enum alloy::transports::TransportErrorKind\">TransportErrorKind</a>&gt;&gt;</h4></section></summary><div class='docblock'>Method that needs to be implemented for <code>\"eth_callMany\"</code> RPC requests.</div></details></div></details>","Caller<N, Resp>","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3130\">Source</a></span><a href=\"#impl-Clone-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3143\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of the <code>Weak</code> pointer that points to the same allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>Arc::new(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let _ </span>= Weak::clone(<span class=\"kw-2\">&amp;</span>weak_five);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#340\">Source</a></span><a href=\"#impl-Debug-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#341\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Weak%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3162\">Source</a></span><a href=\"#impl-Default-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3177\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating memory.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always\ngives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Default::default();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>","Default","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2038-2040\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3><div class=\"docblock\"><p>This impl requires the <a href=\"https://serde.rs/feature-flags.html#-features-rc\"><code>\"rc\"</code></a> Cargo feature of Serde. The resulting\n<code>Weak&lt;T&gt;</code> has a reference count of 0 and cannot be upgraded.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2042-2044\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3183\">Source</a></span><a href=\"#impl-Drop-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3208\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Drops the <code>Weak</code> pointer.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped!\"</span>);\n    }\n}\n\n<span class=\"kw\">let </span>foo = Arc::new(Foo);\n<span class=\"kw\">let </span>weak_foo = Arc::downgrade(<span class=\"kw-2\">&amp;</span>foo);\n<span class=\"kw\">let </span>other_weak_foo = Weak::clone(<span class=\"kw-2\">&amp;</span>weak_foo);\n\ndrop(weak_foo);   <span class=\"comment\">// Doesn't print anything\n</span>drop(foo);        <span class=\"comment\">// Prints \"dropped!\"\n\n</span><span class=\"macro\">assert!</span>(other_weak_foo.upgrade().is_none());</code></pre></div>\n</div></details></div></details>","Drop","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#605-607\">Source</a><a href=\"#impl-Serialize-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3><div class=\"docblock\"><p>This impl requires the <a href=\"https://serde.rs/feature-flags.html#-features-rc\"><code>\"rc\"</code></a> Cargo feature of Serde.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#609-611\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2676\">Source</a><a href=\"#impl-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.73.0\">1.10.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2694\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Weak::new();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2731\">Source</a><a href=\"#impl-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2775\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code>.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>new</code></a>,\nas these don’t own anything; the method still works on them).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference, and must point to a block of memory allocated by global allocator.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2699\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2719\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any memory, technically in the provided\nallocator.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::sync::Weak;\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64, <span class=\"kw\">_</span>&gt; = Weak::new_in(System);\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2780\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2784\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2815\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the object <code>T</code> pointed to by this <code>Weak&lt;T&gt;</code>.</p>\n<p>The pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even <a href=\"https://doc.rust-lang.org/1.86.0/core/ptr/fn.null.html\" title=\"ptr::null\"><code>null</code></a> otherwise.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"comment\">// Both point to the same object\n</span><span class=\"macro\">assert!</span>(ptr::eq(<span class=\"kw-2\">&amp;*</span>strong, weak.as_ptr()));\n<span class=\"comment\">// The strong here keeps it alive, so we can still access the object.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>weak.as_ptr() });\n\ndrop(strong);\n<span class=\"comment\">// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behavior.\n// assert_eq!(\"hello\", unsafe { &amp;*weak.as_ptr() });</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2859\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.from_raw\" title=\"associated function alloc::sync::Weak::from_raw\"><code>from_raw</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.as_ptr\" title=\"method alloc::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>raw = weak.into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2894\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.into_raw_with_allocator\" class=\"fn\">into_raw_with_allocator</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and allocator.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.from_raw_in\" title=\"associated function alloc::sync::Weak::from_raw_in\"><code>from_raw_in</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.as_ptr\" title=\"method alloc::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n</span><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>strong = Arc::new_in(<span class=\"string\">\"hello\"</span>.to_owned(), System);\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>(raw, alloc) = weak.into_raw_with_allocator();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw_in(raw, alloc) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2946\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.from_raw_in\" class=\"fn\">from_raw_in</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code> in the provided\nallocator.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>new</code></a>,\nas these don’t own anything; the method still works on them).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference, and must point to a block of memory allocated by <code>alloc</code>.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy::rpc::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2966\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.upgrade\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2993-2995\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.upgrade\" class=\"fn\">upgrade</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to upgrade the <code>Weak</code> pointer to an <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\"><code>Arc</code></a>, delaying\ndropping of the inner value if successful.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the inner value has since been dropped.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>five = Arc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>five);\n\n<span class=\"kw\">let </span>strong_five: <span class=\"prelude-ty\">Option</span>&lt;Arc&lt;<span class=\"kw\">_</span>&gt;&gt; = weak_five.upgrade();\n<span class=\"macro\">assert!</span>(strong_five.is_some());\n\n<span class=\"comment\">// Destroy all strong pointers.\n</span>drop(strong_five);\ndrop(five);\n\n<span class=\"macro\">assert!</span>(weak_five.upgrade().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strong_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3029\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.strong_count\" class=\"fn\">strong_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the number of strong (<code>Arc</code>) pointers pointing to this allocation.</p>\n<p>If <code>self</code> was created using <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>Weak::new</code></a>, this will return 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weak_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3046\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.weak_count\" class=\"fn\">weak_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets an approximation of the number of <code>Weak</code> pointers pointing to this\nallocation.</p>\n<p>If <code>self</code> was created using <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>Weak::new</code></a>, or if there are no remaining\nstrong pointers, this will return 0.</p>\n<h5 id=\"accuracy\"><a class=\"doc-anchor\" href=\"#accuracy\">§</a>Accuracy</h5>\n<p>Due to implementation details, the returned value can be off by 1 in\neither direction when other threads are manipulating any <code>Arc</code>s or\n<code>Weak</code>s pointing to the same allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr_eq\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0\">1.39.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3124\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.ptr_eq\" class=\"fn\">ptr_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation similar to <a href=\"https://doc.rust-lang.org/1.86.0/core/ptr/fn.eq.html\" title=\"ptr::eq\"><code>ptr::eq</code></a>, or if\nboth don’t point to any allocation (because they were created with <code>Weak::new()</code>). However,\nthis function ignores the metadata of  <code>dyn Trait</code> pointers.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>Since this compares pointers it means that <code>Weak::new()</code> will equal each\nother, even though they don’t point to any allocation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>first_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>first = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n<span class=\"kw\">let </span>second = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre></div>\n<p>Comparing <code>Weak::new</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>first = Weak::new();\n<span class=\"kw\">let </span>second = Weak::new();\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(());\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre></div>\n</div></details></div></details>",0,"alloy::rpc::client::WeakClient"],["<section id=\"impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#335\">Source</a><a href=\"#impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<Weak<U, A>>","alloy::rpc::client::WeakClient"],["<section id=\"impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#337\">Source</a><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<Weak<U>>","alloy::rpc::client::WeakClient"],["<section id=\"impl-PinCoerceUnsized-for-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2214\">Source</a><a href=\"#impl-PinCoerceUnsized-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","alloy::rpc::client::WeakClient"],["<section id=\"impl-Send-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#330\">Source</a></span><a href=\"#impl-Send-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","alloy::rpc::client::WeakClient"],["<section id=\"impl-Sync-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#332\">Source</a></span><a href=\"#impl-Sync-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","alloy::rpc::client::WeakClient"]]],["alloy_rpc_client",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3130\">Source</a></span><a href=\"#impl-Clone-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3143\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of the <code>Weak</code> pointer that points to the same allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>Arc::new(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let _ </span>= Weak::clone(<span class=\"kw-2\">&amp;</span>weak_five);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#340\">Source</a></span><a href=\"#impl-Debug-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#341\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Weak%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3162\">Source</a></span><a href=\"#impl-Default-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3177\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating memory.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always\ngives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Default::default();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>","Default","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2038-2040\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3><div class=\"docblock\"><p>This impl requires the <a href=\"https://serde.rs/feature-flags.html#-features-rc\"><code>\"rc\"</code></a> Cargo feature of Serde. The resulting\n<code>Weak&lt;T&gt;</code> has a reference count of 0 and cannot be upgraded.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2042-2044\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3183\">Source</a></span><a href=\"#impl-Drop-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3208\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Drops the <code>Weak</code> pointer.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped!\"</span>);\n    }\n}\n\n<span class=\"kw\">let </span>foo = Arc::new(Foo);\n<span class=\"kw\">let </span>weak_foo = Arc::downgrade(<span class=\"kw-2\">&amp;</span>foo);\n<span class=\"kw\">let </span>other_weak_foo = Weak::clone(<span class=\"kw-2\">&amp;</span>weak_foo);\n\ndrop(weak_foo);   <span class=\"comment\">// Doesn't print anything\n</span>drop(foo);        <span class=\"comment\">// Prints \"dropped!\"\n\n</span><span class=\"macro\">assert!</span>(other_weak_foo.upgrade().is_none());</code></pre></div>\n</div></details></div></details>","Drop","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#605-607\">Source</a><a href=\"#impl-Serialize-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3><div class=\"docblock\"><p>This impl requires the <a href=\"https://serde.rs/feature-flags.html#-features-rc\"><code>\"rc\"</code></a> Cargo feature of Serde.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#609-611\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2676\">Source</a><a href=\"#impl-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.73.0\">1.10.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2694\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Weak::new();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2731\">Source</a><a href=\"#impl-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2775\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code>.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>new</code></a>,\nas these don’t own anything; the method still works on them).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference, and must point to a block of memory allocated by global allocator.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2699\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2719\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any memory, technically in the provided\nallocator.\nCalling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::sync::Weak;\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64, <span class=\"kw\">_</span>&gt; = Weak::new_in(System);\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2780\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2784\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2815\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the object <code>T</code> pointed to by this <code>Weak&lt;T&gt;</code>.</p>\n<p>The pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even <a href=\"https://doc.rust-lang.org/1.86.0/core/ptr/fn.null.html\" title=\"ptr::null\"><code>null</code></a> otherwise.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"comment\">// Both point to the same object\n</span><span class=\"macro\">assert!</span>(ptr::eq(<span class=\"kw-2\">&amp;*</span>strong, weak.as_ptr()));\n<span class=\"comment\">// The strong here keeps it alive, so we can still access the object.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>weak.as_ptr() });\n\ndrop(strong);\n<span class=\"comment\">// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behavior.\n// assert_eq!(\"hello\", unsafe { &amp;*weak.as_ptr() });</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2859\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.from_raw\" title=\"associated function alloc::sync::Weak::from_raw\"><code>from_raw</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.as_ptr\" title=\"method alloc::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>raw = weak.into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2894\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.into_raw_with_allocator\" class=\"fn\">into_raw_with_allocator</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and allocator.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.from_raw_in\" title=\"associated function alloc::sync::Weak::from_raw_in\"><code>from_raw_in</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.as_ptr\" title=\"method alloc::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n</span><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>strong = Arc::new_in(<span class=\"string\">\"hello\"</span>.to_owned(), System);\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>(raw, alloc) = weak.into_raw_with_allocator();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw_in(raw, alloc) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2946\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.from_raw_in\" class=\"fn\">from_raw_in</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*const T</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code> in the provided\nallocator.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.upgrade\" title=\"method alloc::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>new</code></a>,\nas these don’t own anything; the method still works on them).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference, and must point to a block of memory allocated by <code>alloc</code>.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.into_raw\" title=\"method alloc::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"alloy_rpc_client::client::WeakClient"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2966\">Source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.upgrade\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2993-2995\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.upgrade\" class=\"fn\">upgrade</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to upgrade the <code>Weak</code> pointer to an <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\"><code>Arc</code></a>, delaying\ndropping of the inner value if successful.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the inner value has since been dropped.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>five = Arc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>five);\n\n<span class=\"kw\">let </span>strong_five: <span class=\"prelude-ty\">Option</span>&lt;Arc&lt;<span class=\"kw\">_</span>&gt;&gt; = weak_five.upgrade();\n<span class=\"macro\">assert!</span>(strong_five.is_some());\n\n<span class=\"comment\">// Destroy all strong pointers.\n</span>drop(strong_five);\ndrop(five);\n\n<span class=\"macro\">assert!</span>(weak_five.upgrade().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strong_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3029\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.strong_count\" class=\"fn\">strong_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the number of strong (<code>Arc</code>) pointers pointing to this allocation.</p>\n<p>If <code>self</code> was created using <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>Weak::new</code></a>, this will return 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weak_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3046\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.weak_count\" class=\"fn\">weak_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets an approximation of the number of <code>Weak</code> pointers pointing to this\nallocation.</p>\n<p>If <code>self</code> was created using <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#method.new\" title=\"associated function alloc::sync::Weak::new\"><code>Weak::new</code></a>, or if there are no remaining\nstrong pointers, this will return 0.</p>\n<h5 id=\"accuracy\"><a class=\"doc-anchor\" href=\"#accuracy\">§</a>Accuracy</h5>\n<p>Due to implementation details, the returned value can be off by 1 in\neither direction when other threads are manipulating any <code>Arc</code>s or\n<code>Weak</code>s pointing to the same allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr_eq\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0\">1.39.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#3124\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html#tymethod.ptr_eq\" class=\"fn\">ptr_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation similar to <a href=\"https://doc.rust-lang.org/1.86.0/core/ptr/fn.eq.html\" title=\"ptr::eq\"><code>ptr::eq</code></a>, or if\nboth don’t point to any allocation (because they were created with <code>Weak::new()</code>). However,\nthis function ignores the metadata of  <code>dyn Trait</code> pointers.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>Since this compares pointers it means that <code>Weak::new()</code> will equal each\nother, even though they don’t point to any allocation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>first_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>first = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n<span class=\"kw\">let </span>second = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre></div>\n<p>Comparing <code>Weak::new</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>first = Weak::new();\n<span class=\"kw\">let </span>second = Weak::new();\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(());\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre></div>\n</div></details></div></details>",0,"alloy_rpc_client::client::WeakClient"],["<section id=\"impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#335\">Source</a><a href=\"#impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<Weak<U, A>>","alloy_rpc_client::client::WeakClient"],["<section id=\"impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#337\">Source</a><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<Weak<U>>","alloy_rpc_client::client::WeakClient"],["<section id=\"impl-PinCoerceUnsized-for-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#2214\">Source</a><a href=\"#impl-PinCoerceUnsized-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","alloy_rpc_client::client::WeakClient"],["<section id=\"impl-Send-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#330\">Source</a></span><a href=\"#impl-Send-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","alloy_rpc_client::client::WeakClient"],["<section id=\"impl-Sync-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/alloc/sync.rs.html#332\">Source</a></span><a href=\"#impl-Sync-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Weak.html\" title=\"struct alloc::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","alloy_rpc_client::client::WeakClient"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[58387,52864]}