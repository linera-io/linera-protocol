searchState.loadedDescShard("encoding_rs", 0, "encoding_rs is a Gecko-oriented Free Software / Open …\nThe Big5 encoding.\nThe initializer for the Big5 encoding.\nResult of a (potentially partial) decode or encode …\nA converter that decodes a byte stream into Unicode …\nResult of a (potentially partial) decode operation without …\nThe EUC-JP encoding.\nThe initializer for the EUC-JP encoding.\nThe EUC-KR encoding.\nThe initializer for the EUC-KR encoding.\nA converter that encodes a Unicode stream into bytes …\nResult of a (potentially partial) encode operation without …\nAn encoding as defined in the Encoding Standard.\nThe gb18030 encoding.\nThe initializer for the gb18030 encoding.\nThe GBK encoding.\nThe initializer for the GBK encoding.\nThe IBM866 encoding.\nThe initializer for the IBM866 encoding.\nThe ISO-2022-JP encoding.\nThe initializer for the ISO-2022-JP encoding.\nThe ISO-8859-10 encoding.\nThe initializer for the ISO-8859-10 encoding.\nThe ISO-8859-13 encoding.\nThe initializer for the ISO-8859-13 encoding.\nThe ISO-8859-14 encoding.\nThe initializer for the ISO-8859-14 encoding.\nThe ISO-8859-15 encoding.\nThe initializer for the ISO-8859-15 encoding.\nThe ISO-8859-16 encoding.\nThe initializer for the ISO-8859-16 encoding.\nThe ISO-8859-2 encoding.\nThe initializer for the ISO-8859-2 encoding.\nThe ISO-8859-3 encoding.\nThe initializer for the ISO-8859-3 encoding.\nThe ISO-8859-4 encoding.\nThe initializer for the ISO-8859-4 encoding.\nThe ISO-8859-5 encoding.\nThe initializer for the ISO-8859-5 encoding.\nThe ISO-8859-6 encoding.\nThe initializer for the ISO-8859-6 encoding.\nThe ISO-8859-7 encoding.\nThe initializer for the ISO-8859-7 encoding.\nThe ISO-8859-8 encoding.\nThe ISO-8859-8-I encoding.\nThe initializer for the ISO-8859-8 encoding.\nThe initializer for the ISO-8859-8-I encoding.\nThe input was exhausted.\nThe input was exhausted.\nThe input was exhausted.\nThe KOI8-R encoding.\nThe initializer for the KOI8-R encoding.\nThe KOI8-U encoding.\nThe initializer for the KOI8-U encoding.\nThe macintosh encoding.\nThe initializer for the macintosh encoding.\nThe decoder encountered a malformed byte sequence.\nThe converter cannot produce another unit of output, …\nThe decoder cannot produce another unit of output, because …\nThe encoder cannot produce another unit of output, because …\nThe replacement encoding.\nThe initializer for the replacement encoding.\nThe Shift_JIS encoding.\nThe initializer for the Shift_JIS encoding.\nThe UTF-16BE encoding.\nThe initializer for the UTF-16BE encoding.\nThe UTF-16LE encoding.\nThe initializer for the UTF-16LE encoding.\nThe UTF-8 encoding.\nThe initializer for the UTF-8 encoding.\nThe encoder encountered an unmappable character.\nThe windows-1250 encoding.\nThe initializer for the windows-1250 encoding.\nThe windows-1251 encoding.\nThe initializer for the windows-1251 encoding.\nThe windows-1252 encoding.\nThe initializer for the windows-1252 encoding.\nThe windows-1253 encoding.\nThe initializer for the windows-1253 encoding.\nThe windows-1254 encoding.\nThe initializer for the windows-1254 encoding.\nThe windows-1255 encoding.\nThe initializer for the windows-1255 encoding.\nThe windows-1256 encoding.\nThe initializer for the windows-1256 encoding.\nThe windows-1257 encoding.\nThe initializer for the windows-1257 encoding.\nThe windows-1258 encoding.\nThe initializer for the windows-1258 encoding.\nThe windows-874 encoding.\nThe initializer for the windows-874 encoding.\nThe x-mac-cyrillic encoding.\nThe initializer for the x-mac-cyrillic encoding.\nThe x-user-defined encoding.\nThe initializer for the x-user-defined encoding.\nValidates ASCII.\nChecks whether the <em>output encoding</em> of this encoding can …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM sniffing</em> …\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 with type …\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 using a …\nIncrementally decode a byte stream into UTF-16 with …\nIncrementally decode a byte stream into UTF-16 <em>without </em>…\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 <em>without </em>…\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM removal</em> and …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …\nEncode complete input to <code>Cow&lt;&#39;a, [u8]&gt;</code> using the <em>output </em>…\nIncrementally encode into byte stream from UTF-16 with …\nIncrementally encode into byte stream from UTF-16 <em>without </em>…\nIncrementally encode into byte stream from UTF-8 with …\nIncrementally encode into byte stream from UTF-8 with …\nIncrementally encode into byte stream from UTF-8 <em>without </em>…\nIncrementally encode into byte stream from UTF-8 <em>without </em>…\nThe <code>Encoding</code> this <code>Decoder</code> is for.\nThe <code>Encoding</code> this <code>Encoder</code> is for.\nPerforms non-incremental BOM sniffing.\nImplements the <em>get an encoding</em> algorithm.\nThis method behaves the same as <code>for_label()</code>, except when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if this is an ISO-2022-JP encoder that’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the bytes 0x00…0x7F map exclusively to …\nChecks whether this encoding maps one byte to one Basic …\nValidates ISO-2022-JP ASCII-state data.\nChecks for compatibility with storing Unicode scalar …\nQuery the worst-case output size when encoding from UTF-16 …\nQuery the worst-case output size when encoding from UTF-16 …\nQuery the worst-case output size when encoding from UTF-8 …\nQuery the worst-case output size when encoding from UTF-8 …\nQuery the worst-case UTF-16 output size (with or without …\nQuery the worst-case UTF-8 output size <em>with replacement</em>.\nQuery the worst-case UTF-8 output size <em>without replacement</em>.\nFunctions for converting between different in-RAM …\nReturns the name of this encoding.\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new encoder for the <em>output encoding</em> of this …\nReturns the <em>output encoding</em> of this encoding. This is …\nValidates UTF-8.\nThere is at least one right-to-left character.\nEvery character is below U+0100.\nClassification of text as Latin1 (all code points are …\nThere is at least one character that’s U+0100 or higher, …\nChecks whether a valid UTF-8 buffer contains code points …\nChecks whether a potentially invalid UTF-16 buffer …\nChecks whether a potentially invalid UTF-8 buffer contains …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts valid UTF-8 to valid UTF-16.\nIf the input is valid UTF-16 representing only Unicode …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nIf the input is valid UTF-8 representing only Unicode code …\nConverts potentially-invalid UTF-8 to valid UTF-16 with …\nConverts potentially-invalid UTF-8 to valid UTF-16 …\nCopies ASCII from source to destination up to the first …\nCopies ASCII from source to destination zero-extending it …\nCopies Basic Latin from source to destination narrowing it …\nConverts bytes whose unsigned value is interpreted as …\nIf the input is valid UTF-8 representing only Unicode code …\nReplaces unpaired surrogates in the input with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the buffer is all-ASCII.\nChecks whether the buffer is all-Basic Latin (i.e. UTF-16 …\nChecks whether a scalar value triggers right-to-left …\nChecks whether a valid UTF-8 buffer contains code points …\nChecks whether the buffer represents only code points less …\nChecks whether a UTF-16 buffer contains code points that …\nChecks whether a UTF-16 code unit triggers right-to-left …\nChecks whether the buffer represents only code point less …\nChecks whether a potentially-invalid UTF-8 buffer contains …\nChecks whether the buffer is valid UTF-8 representing only …\nReturns the index of first byte that starts a non-Latin1 …\nReturns the index of the first unpaired surrogate or, if …\nReturns the index of first byte that starts an invalid byte")