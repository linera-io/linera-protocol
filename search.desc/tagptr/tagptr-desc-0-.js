searchState.loadedDescShard("tagptr", 0, "Strongly typed pointers with reserved space for storing …\nA raw pointer type which can be safely shared between …\nA type representing a <code>null</code> pointer with potential tag bits.\nThe bitmask for the (higher) bits for storing the pointer …\nThe bitmask for the (higher) bits for storing the pointer …\nThe bitmask for the (higher) bits for storing the pointer …\nThe number of available tag bits for this type.\nThe number of available tag bits for this type.\nThe number of available tag bits for this type.\nThe bitmask for the lower bits available for storing the …\nThe bitmask for the lower bits available for storing the …\nThe bitmask for the lower bits available for storing the …\nA non-nullable tagged raw pointer type similar to <code>NonNull</code> …\nA raw, unsafe pointer type like <code>*mut T</code> which can use up to …\nAdds <code>value</code> to the current tag <em>without</em> regard for the …\nAdds <code>value</code> to the current tag <em>without</em> regard for the …\nDecomposes the marked pointer, returning an optional …\nDecomposes the marked pointer, returning a <em>mutable</em> …\nDecomposes the marked pointer, returning an optional …\nDecomposes the marked pointer, returning a reference and …\nAsserts that the alignment of <code>U</code> is large enough so a …\nCasts to a pointer of another type.\nCasts to a pointer of another type.\nClears the marked pointer’s tag value.\nClears the marked pointer’s tag value.\nStores a value into the pointer if the current value is …\nStores a value into the pointer if the current value is …\nComposes a new marked pointer from a raw <code>ptr</code> and a <code>tag</code> …\nComposes a new marked pointer from a raw <code>ptr</code> and a <code>tag</code> …\nComposes a new marked pointer from a raw (non-null) <code>ptr</code> …\nCreates a new pointer that is dangling but well aligned.\nDecomposes the marked pointer, returning the raw pointer …\nDecomposes the marked pointer, returning the raw pointer …\nDecomposes the marked pointer, returning an optional …\nDecomposes the marked pointer, returning a <em>mutable</em> …\nDecomposes the marked pointer, returning only the …\nDecomposes the marked pointer, returning only the …\nDecomposes the marked pointer, returning only the …\nDecomposes the marked pointer, returning an optional …\nDecomposes the marked pointer, returning a reference and …\nDecomposes the marked pointer, returning only the …\nDecomposes the marked pointer, returning only the …\nAdds <code>value</code> to the current tag value, returning the …\nPerforms a bitwise “and” of <code>value</code> with the current tag …\nPerforms a bitwise “or” of <code>value</code> with the current tag …\nSubtracts <code>value</code> from the current tag value, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pointer from the numeric (integer) …\nCreates a new pointer from the numeric (integer) …\nReturns a mutable reference to the underlying marked …\nReturns <code>true</code> if the alignment of <code>T</code> is large enough so a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic marked pointer and returns its …\nConverts <code>self</code> into a (nullable) marked pointer.\nReturns the internal representation of the pointer <em>as is</em>, …\nReturns the internal representation of the pointer <em>as is</em>, …\nReturns the numeric (integer) representation of the …\nReturns the numeric (integer) representation of the …\nReturns <code>true</code> if the marked pointer is <code>null</code>.\nLoads the value of the atomic marked pointer.\nCreates a new atomic marked pointer.\nCreates a new unmarked pointer.\nCreates a new non-null pointer from <code>marked_ptr</code>.\nCreates a new marked non-null pointer from <code>marked_ptr</code> …\nCreates a new <code>null</code> pointer.\nCreates a new <code>null</code> pointer.\nSets the marked pointer’s tag value to <code>tag</code> and …\nSets the marked pointer’s tag value to <code>tag</code> and …\nSplits the tag value from the marked pointer, returning …\nSplits the tag value from the marked pointer, returning …\nStores a value into the atomic marked pointer.\nSubtracts <code>value</code> from the current tag <em>without</em> regard for …\nSubtracts <code>value</code> from the current tag <em>without</em> regard for …\nStores a value into the atomic marked pointer and returns …\nReturns the tag value.\nAttempts to compose a new marked pointer from a raw …\nUpdates the marked pointer’s tag value to the result of …\nUpdates the marked pointer’s tag value to the result of …")