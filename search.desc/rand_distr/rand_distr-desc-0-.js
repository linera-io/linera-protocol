searchState.loadedDescShard("rand_distr", 0, "Generating random samples from probability distributions.\n<code>a &lt;= 1</code> or <code>nan</code>.\n<code>|beta| &gt;= alpha</code> or <code>nan</code>.\nAll items in the provided weight collection are zero.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\n<code>alpha.len() &lt; 2</code>.\n<code>alpha &lt;= 0.0</code> or <code>nan</code>.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe shape parameter is not finite.\nThe standard deviation or other dispersion parameter is …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nThe Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>.\nError type returned from <code>Beta::new</code>.\n<code>beta &lt;= 0</code> or <code>nan</code>.\nThe binomial distribution <code>Binomial(n, p)</code>.\nError type returned from <code>Binomial::new</code>.\nThe Cauchy distribution <code>Cauchy(median, scale)</code>.\nError type returned from <code>Cauchy::new</code>.\nThe chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …\nError type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>.\nThe Dirichlet distribution <code>Dirichlet(alpha)</code>.\nError type returned from <code>Dirchlet::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nTypes (distributions) that can be used to create a random …\n<code>0.5 * k &lt;= 0</code> or <code>nan</code>.\nThe exponential distribution <code>Exp(lambda)</code>.\nSamples floating-point numbers according to the …\nError type returned from <code>Exp::new</code>.\nThe Fisher F distribution <code>F(m, n)</code>.\nError type returned from <code>FisherF::new</code>.\nSamples floating-point numbers according to the Fréchet …\nError type returned from <code>Frechet::new</code>.\nThe Gamma distribution <code>Gamma(shape, scale)</code> distribution.\nError type returned from <code>Gamma::new</code>.\nError type returned from <code>Geometric::new</code>.\nThe geometric distribution <code>Geometric(p)</code> bounded to …\nSamples floating-point numbers according to the Gumbel …\nError type returned from <code>Gumbel::new</code>.\nError type returned from <code>Hypergeometric::new</code>.\nThe hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\n<code>p &lt; 0 || p &gt; 1</code> or <code>nan</code>\nA weight is either less than zero, greater than the …\nThe inverse Gaussian distribution\nError type returned from <code>InverseGaussian::new</code>\n<code>lambda &lt; 0</code> or <code>nan</code>.\nlocation is infinite or NaN\nlocation is infinite or NaN\nThe log-normal distribution <code>ln N(mean, std_dev**2)</code>.\n<code>m &lt;= 0</code> or <code>nan</code>.\n<code>mean &lt;= 0</code> or <code>nan</code>.\nThe mean value is too small (log-normal samples must be …\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>n &lt;= 0</code> or <code>nan</code>.\n<code>n &lt; 1</code>.\nThe provided weight collection contains no items.\nThe normal distribution <code>N(mean, std_dev**2)</code>.\nError type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.\nThe normal-inverse Gaussian distribution\nError type returned from <code>NormalInverseGaussian::new</code>\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nSamples floating-point numbers according to the Pareto …\nError type returned from <code>Pareto::new</code>.\nThe PERT distribution.\nError type returned from <code>Pert</code> constructors.\nThe Poisson distribution <code>Poisson(lambda)</code>.\nError type returned from <code>Poisson::new</code>.\n<code>total_population_size</code> is too large, causing floating point …\n<code>p &gt; 1</code>.\n<code>population_with_feature &gt; total_population_size</code>.\n<code>p &lt; 0</code> or <code>nan</code>.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>s &lt; 0</code> or <code>nan</code>.\n<code>sample_size &gt; total_population_size</code>.\nscale is not finite positive number\nscale is not finite positive number\n<code>1 / scale == 0</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\nThe scale parameter is not finite or it is less or equal …\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\nshape is not finite positive number\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt; 0</code> or <code>shape</code> is NaN\n<code>lambda &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>size &lt; 2</code>.\nThe skew normal distribution <code>SN(location, scale, shape)</code>.\nError type returned from <code>SkewNormal::new</code>.\nA generic random value distribution, implemented for many …\nSamples integers according to the geometric distribution …\nSamples floating-point numbers according to the normal …\nThe Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the degrees …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nThe triangular distribution.\nError type returned from <code>Triangular::new</code>.\nSample values uniformly between two bounds.\nSamples uniformly from the unit ball (surface and …\nSamples uniformly from the edge of the unit circle in two …\nSamples uniformly from the unit disc in two dimensions.\nSamples uniformly from the surface of the unit sphere in …\nSamples floating-point numbers according to the Weibull …\nError type returned from <code>Weibull::new</code>.\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nSamples integers according to the zeta distribution.\nError type returned from <code>Zeta::new</code>.\nSamples integers according to the Zipf distribution.\nError type returned from <code>Zipf::new</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct, from mean and coefficient of variation\nConstruct, from (linear-space) mean and coefficient of …\nConstruct a new <code>Bernoulli</code> with the probability of success …\nSample from a z-score\nSample from a z-score\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the location of the distribution.\nCreate a distribution of values of ‘S’ by mapping the …\nReturns the mean (<code>μ</code>) of the distribution.\nConstruct a new <code>Binomial</code> with the given shape parameters <code>n</code> …\nConstruct a new <code>Cauchy</code> with the given shape parameters …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nConstruct a new <code>Dirichlet</code> with the given alpha parameter …\nConstruct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.\nConstruct a new <code>Frechet</code> distribution with given <code>location</code>, …\nConstruct an object representing the <code>Gamma(shape, scale)</code> …\nCreate a new chi-squared distribution with …\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nCreate a new <code>FisherF</code> distribution, with the given …\nCreate a new Student t distribution with <code>n</code> degrees of …\nConstruct an object representing the <code>Beta(alpha, beta)</code> …\nConstruct a new <code>Geometric</code> with the given shape parameter <code>p</code> …\nConstruct a new <code>Gumbel</code> distribution with given <code>location</code> …\nConstructs a new <code>Hypergeometric</code> with the shape parameters …\nConstruct a new <code>InverseGaussian</code> distribution with the …\nConstruct, from mean and standard deviation\nConstruct, from (log-space) mean and standard deviation\nConstruct a new <code>NormalInverseGaussian</code> distribution with …\nConstruct a new Pareto distribution with given <code>scale</code> and …\nSet up the PERT distribution with defined <code>min</code>, <code>max</code> and <code>mode</code>…\nConstruct a new <code>Poisson</code> with the given shape parameter …\nConstruct, from location, scale and shape.\nSet up the Triangular distribution with defined <code>min</code>, <code>max</code> …\nConstruct a new <code>Weibull</code> distribution with given <code>scale</code> and …\nConstruct a new <code>Zeta</code> distribution with given <code>a</code> parameter.\nConstruct a new <code>Zipf</code> distribution for a set with <code>n</code> …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nSet up the PERT distribution with defined <code>min</code>, <code>max</code>, <code>mode</code> …\nConstruct a new <code>Dirichlet</code> with the given shape parameter …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nReturns the scale of the distribution.\nReturns the shape of the distribution.\nReturns the standard deviation (<code>σ</code>) of the distribution.\nA distribution uniformly sampling numbers within a given …\nUpdate a subset of weights, without changing the number of …\nThis module contains an implementation of alias method for …\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nTrait that must be implemented for weights, that are used …\nMaximum number representable by <code>Self</code>.\nA distribution using weighted sampling to pick a …\nElement of <code>Self</code> equivalent to 0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WeightedAliasIndex</code>.\nSums all values in slice <code>values</code>.\nProduce an instance of <code>Self</code> from a <code>u32</code> value, or return …")