searchState.loadedDescShard("rgb", 0, "Basic struct for <code>RGB</code> and <code>RGBA</code> pixels. Packed, with red …\nAn <code>Alpha + Blue + Green + Red</code> pixel.\nAn <code>Alpha + Red + Green + Blue</code> pixel.\nUse <code>::bytemuck::cast_slice()</code> instead.\nA <code>Blue + Green + Red</code> pixel.\nA <code>Blue + Green + Red + Alpha</code> pixel.\nSame as <code>ComponentMap</code>, but doesn’t change the alpha …\nUse <code>::bytemuck::cast_slice()</code> instead.\nApplying operation to every component\nCasting the struct to slices of its components\nUse <code>::bytemuck::cast_slice()</code> or <code>::bytemuck::from_bytes()</code> …\nA <code>Grayscale</code> pixel (rgb crate v0.8)\nA pixel for grayscale value + alpha components (rgb crate …\nA <code>Green + Red + Blue</code> pixel.\nRe-export from <code>bytemuck</code> crate Marker trait for “plain …\n16-bit RGB in machine’s native endian\n8-bit RGB\n16-bit RGB in machine’s native endian. 0 = transparent, …\n8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.\nA <code>Red + Green + Blue</code> pixel.\nA <code>Red + Green + Blue + Alpha</code> pixel.\nRe-export from <code>bytemuck</code> crate Trait for types that can be …\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nBGR/BGRA alernative layouts &amp; grayscale\nReinterpert slice as reverse-order ABGR pixels\nReinterpert mutable slice as reverse-order alpha-first …\nReinterpert slice as alpha-first ARGB pixels\nReinterpert mutable slice as alpha-first ARGB pixels\nReinterpert slice as reverse-order BGR pixels\nReinterpert ntable slice as reverse-order BGR pixels\nReinterpert slice as reverse-order BGRA pixels\nReinterpert mutable slice as reverse-order alpha-last BGRA …\nThe components interpreted as raw bytes, in machine’s …\nThe components interpreted as raw bytes, in machine’s …\nThe components interpreted as raw bytes, in machine’s …\nThe components interpreted as raw bytes, in machine’s …\nReinterpert mutable slice as grayscale pixels\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels\nThe components interpreted as a mutable array, e.g. one <code>RGB</code>…\nUse <code>::bytemuck::cast_slice()</code> instead.\nUse <code>::bytemuck::cast_slice_mut()</code> instead.\nReinterpert slice as RGB pixels\nReinterpert mutable slice as RGB pixels\nReinterpert slice as RGBA pixels\nReinterpert mutable slice as RGBA pixels\nThe components interpreted as an array, e.g. one <code>RGB</code> …\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nCopy RGB components out of the RGBA struct\nCopy RGB components out of the RGBA struct\nCopy RGB components out of the RGBA struct\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nRe-export of the <code>bytemuck</code> crate. See docs.\nA trick that allows using <code>.v</code> and <code>.a</code> on the old <code>GrayAlpha</code> …\nA trick that allows using <code>.v</code> and <code>.a</code> on the old <code>GrayAlpha</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes exactly 3 elements from the iterator and creates a …\nTakes exactly 4 elements from the iterator and creates a …\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nCopy <code>Gray</code> component out of the <code>GrayAlpha</code> struct\nProvide a mutable view of only <code>Gray</code> component (leaving out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all components (length=4)\nIterate over all components (length=4)\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nIterate over color components (R, G, and B)\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nConvenience function (equivalent of …\nCreate a new RGBA with a new alpha value created by the …\nCreate a new RGBA with a new alpha value created by the …\nCreate a new RGBA with a new alpha value created by the …\nCreate a new <code>GrayAlpha</code> with a new alpha value created by …\nCreate a new RGBA with a new alpha value created by the …\nAlias of <code>map_colors</code>\nConvenience function for applying the same formula to …\nCreate new <code>GrayAlpha</code> with the same alpha value, but …\nCreate new RGBA with the same alpha value, but different …\nCreate new RGBA with the same alpha value, but different …\nCreate new RGBA with the same alpha value, but different …\nCreate new RGBA with the same alpha value, but different …\nConvenience function for creating a new pixel The order of …\nConvenience function for creating a new pixel The order of …\nConvenience function for creating a new pixel Warning: The …\nConvenience function for creating a new pixel Warning: The …\nCreates a new <code>Gray_v08</code> pixel type from its components.\nCreates a new <code>GrayAlpha_v08</code> pixel type from its components.\nCreates a new <code>Rgb</code> pixel type from its components.\nCreates a new <code>Rgba</code> pixel type from its components.\nCreates a new <code>Abgr</code> pixel type from its components.\nConvenience function for creating a new pixel The order of …\nConvenience function for creating a new pixel The order of …\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel Warning: The …\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel The order of …\nCreates a new <code>Argb</code> pixel type from its components.\nCreates a new <code>Bgr</code> pixel type from its components.\nCreates a new <code>Bgra</code> pixel type from its components.\nCreates a new <code>Grb</code> pixel type from its components.\nUse as <code>use rgb::prelude::*</code>\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nCopy RGB components out of the ARGB struct\nCopy RGB components out of the RGBA struct\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nProvide a mutable view of only RGB components (leaving out …\nReads the <code>.0</code> field\nReads the <code>.v</code> field\nExposes the <code>.0</code> field for writing\nExposes the <code>.v</code> field for writing\nCreate a new RGBA with the new alpha value, but same RGB …\nCreate a new RGBA with the new alpha value, but same RGB …\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nAdd alpha component to this pixel\nCreate a new <code>GrayAlpha</code> with the new alpha value, but same …\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nCalls <code>zeroed</code>.\n16-bit ABGR in machine’s native endian. 0 = transparent, …\n8-bit ABGR, alpha is first. 0 = transparent, 255 = opaque.\n16-bit ARGB in machine’s native endian. 0 = transparent, …\n8-bit ARGB, alpha is first. 0 = transparent, 255 = opaque.\n16-bit BGR in machine’s native endian\n8-bit BGR\n16-bit BGR in machine’s native endian\n8-bit BGRA\n16-bit gray in machine’s native endian\n8-bit gray\n16-bit gray with alpha in machine’s native endian\n8-bit gray with alpha in machine’s native endian\n8-bit GRB\nA <code>Grayscale</code> pixel (rgb crate v0.8)\nA pixel for grayscale value + alpha components (rgb crate …\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nAlpha Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nSame as <code>ComponentMap</code>, but doesn’t change the alpha …\nApplying operation to every component\nConvenience function (equivalent of …\nAlias of <code>map_colors</code>\nAlias of <code>map_colors</code>\nConvenience function for applying the same formula to …\nConvenience function for applying the same formula to …")