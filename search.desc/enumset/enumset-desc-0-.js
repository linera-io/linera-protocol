searchState.loadedDescShard("enumset", 0, "A library for defining enums that can be used in compact …\nAn <code>EnumSet</code> containing all valid variants of the enum.\nAn empty <code>EnumSet</code>.\nAn efficient set type for enums.\nThe iterator used by <code>EnumSet</code>s.\nThe trait used to define enum types that may be used with …\nThe procedural macro used to derive <code>EnumSetType</code>, and allow …\nAn <code>EnumSetType</code> for which <code>EnumSet</code>s have a guaranteed …\nThe guaranteed representation.\nReturns an <code>EnumSet</code> containing all valid variants of the …\nReturns an <code>[u64; O]</code> representing the elements of this set.\nReturns an <code>[u64; O]</code> representing the elements of this set.\nReturns a <code>T::Repr</code> representing the elements of this set.\nReturns a <code>u128</code> representing the elements of this set.\nReturns a truncated <code>u128</code> representing the elements of this …\nReturns a <code>u16</code> representing the elements of this set.\nReturns a truncated <code>u16</code> representing the elements of this …\nReturns a <code>u32</code> representing the elements of this set.\nReturns a truncated <code>u32</code> representing the elements of this …\nReturns a <code>u64</code> representing the elements of this set.\nReturns a truncated <code>u64</code> representing the elements of this …\nReturns a <code>u8</code> representing the elements of this set.\nReturns a truncated <code>u8</code> representing the elements of this …\nReturns a <code>usize</code> representing the elements of this set.\nReturns a truncated <code>usize</code> representing the elements of …\nTotal number of bits used by this type. Note that the …\nRemoves all elements from the set.\nReturns a set containing all enum variants not in this set.\nChecks whether this set contains a value.\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nReturns an empty set.\nReturns a set containing element present in <code>self</code> but not …\nCreates an empty <code>EnumSet</code>.\nCreates a EnumSet literal, which can be used in const …\nComputes the complement of an enums or constants enumset …\nComputes the difference of multiple enums or constants …\nComputes the intersection of multiple enums or constants …\nComputes the symmetric difference of multiple enums or …\nComputes the union of multiple enums or constants enumset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to constructs a bitset from a <code>[u64; O]</code>.\nConstructs a bitset from a <code>[u64; O]</code>, ignoring bits that do …\nConstructs a bitset from a <code>[u64; O]</code>, without checking for …\nConstructs a bitset from a <code>T::Repr</code>.\nConstructs a bitset from a <code>T::Repr</code>, ignoring invalid …\nConstructs a bitset from a <code>T::Repr</code> without checking for …\nAttempts to constructs a bitset from a <code>&amp;[u64]</code>.\nConstructs a bitset from a <code>&amp;[u64]</code>, ignoring bits that do …\nConstructs a bitset from a <code>&amp;[u64]</code>, without checking for …\nConstructs a bitset from a <code>u128</code>.\nConstructs a bitset from a <code>u128</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u128</code>, without checking for …\nConstructs a bitset from a <code>u16</code>.\nConstructs a bitset from a <code>u16</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u16</code>, without checking for …\nConstructs a bitset from a <code>u32</code>.\nConstructs a bitset from a <code>u32</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u32</code>, without checking for …\nConstructs a bitset from a <code>u64</code>.\nConstructs a bitset from a <code>u64</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u64</code>, without checking for …\nConstructs a bitset from a <code>u8</code>.\nConstructs a bitset from a <code>u8</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u8</code>, without checking for …\nConstructs a bitset from a <code>usize</code>.\nConstructs a bitset from a <code>usize</code>, ignoring bits that do …\nConstructs a bitset from a <code>usize</code>, without checking for …\nAdds a value to this set.\nAdds all elements in another set to this one.\nReturns a set containing every element present in both …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nIterates the contents of the set in order from the least …\nReturns the number of elements in this set.\nCreates an empty <code>EnumSet</code>.\nReturns an <code>EnumSet</code> containing a single element.\nRemoves a value from this set. Returns whether the value …\nRemoves all values in another set from this one.\nReturns a set containing every element present in either …\nReturns an <code>[u64; O]</code> representing the elements of this set.\nTries to return a <code>u128</code> representing the elements of this …\nTries to return a <code>u16</code> representing the elements of this …\nTries to return a <code>u32</code> representing the elements of this …\nTries to return a <code>u64</code> representing the elements of this …\nTries to return a <code>u8</code> representing the elements of this set.\nTries to return a <code>usize</code> representing the elements of this …\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nAttempts to constructs a bitset from a <code>[u64; O]</code>.\nAttempts to constructs a bitset from a <code>T::Repr</code>.\nAttempts to constructs a bitset from a <code>&amp;[u64]</code>.\nAttempts to constructs a bitset from a <code>u128</code>.\nAttempts to constructs a bitset from a <code>u16</code>.\nAttempts to constructs a bitset from a <code>u32</code>.\nAttempts to constructs a bitset from a <code>u64</code>.\nAttempts to constructs a bitset from a <code>u8</code>.\nAttempts to constructs a bitset from a <code>usize</code>.\nReturns a set containing any elements present in either …\nThe number of valid variants that this type can contain.")