searchState.loadedDescShard("quick_cache", 0, "Lightweight, high performance concurrent cache. It allows …\nKey equivalence trait.\nHooks into the lifetime of the cache items.\nCache options. Built with OptionsBuilder.\nBuilder for Options.\nEach cache entry weights exactly <code>1</code> unit of weight.\nDefines the weight of a cache entry.\nCalled when a cache item is about to be evicted. Note that …\nCalled before the insert request starts, e.g.: insert, …\nBuilds an <code>Option</code> struct which can be used in the …\nCalled after a request finishes, e.g.: insert, replace.\nCompare self to <code>key</code> and return <code>true</code> if they are equal.\nThe estimated number of items the cache is expected to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cache optimistically tracks recently seen keys that …\nWhat percentage <code>[0..=1.0]</code> of the cache space to reserve …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the item is pinned. Items that are pinned …\nCalled when an item is evicted.\nSet the number of internal shards. Each shard has …\nConcurrent cache variants that can be used from multiple …\nNon-concurrent cache variants.\nReturns the weight of the cache item.\nThe max weight that the cache can hold.\nA concurrent cache\nDefault <code>Lifecycle</code> for a sync cache.\nDraining iterator for the items in the cache.\nIterator over the items in the cache.\nFuture that results in an Ok(Value) or Err(Guard)\nReturns the <em>total</em> maximum weight capacity of cached items. …\nClear all items from the cache\nCheck if a key exist in the cache.\nDrains items from the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches an item from the cache whose key is <code>key</code>.\nGets or inserts an item in the cache with key <code>key</code>.\nGets or inserts an item in the cache with key <code>key</code>.\nGets an item from the cache with key <code>key</code> .\nGets an item from the cache with key <code>key</code>.\nInserts an item in the cache with key <code>key</code>.\nInserts the value into the placeholder\nInserts an item in the cache with key <code>key</code>.\nInserts the value into the placeholder\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the cache is empty\nIterates over the items in the cache returning cloned key …\nReturns the number of cached items\nCreates a new cache with holds up to <code>items_capacity</code> items …\nReturns the number of shards.\nPeeks an item from the cache whose key is <code>key</code>. Contrary to …\nRemove an item from the cache whose key is <code>key</code>. Returns …\nInserts an item in the cache, but <em>only</em> if an entry with …\nInserts an item in the cache, but <em>only</em> if an entry with …\nReserver additional space for <code>additional</code> entries. Note …\nRetains only the items specified by the predicate. In …\nReturns the maximum weight capacity of each shard.\nReturns the total weight of cached items\nCreates a new cache that can hold up to <code>weight_capacity</code> in …\nConstructs a cache based on OptionsBuilder.\nA non-concurrent cache.\nDefault <code>Lifecycle</code> for the unsync cache.\nReturns the maximum weight of cached items\nClear all items from the cache\nCheck if a key exist in the cache.\nDrain all items from the cache\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches an item from the cache.\nFetches an item from the cache.\nGets an item from the cache with key <code>key</code> . If the …\nGets or inserts an item in the cache with key <code>key</code>. Returns …\nGets or inserts an item in the cache with key <code>key</code>. Returns …\nGets an item from the cache with key <code>key</code> . If the …\nInserts the value into the placeholder\nInserts an item in the cache with key <code>key</code>.\nInserts the value into the placeholder\nInserts an item in the cache with key <code>key</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the cache is empty.\nIterator for the items in the cache\nReturns the number of cached items\nCreates a new cache with holds up to <code>items_capacity</code> items …\nPeeks an item from the cache. Contrary to gets, peeks don…\nPeeks an item from the cache. Contrary to gets, peeks don…\nRemove an item from the cache whose key is <code>key</code>. Returns …\nReplaces an item in the cache, but only if it already …\nReplaces an item in the cache, but only if it already …\nReserver additional space for <code>additional</code> entries. Note …\nRetains only the items specified by the predicate. In …\nReturns the total weight of cached items\nCreates a new cache that can hold up to <code>weight_capacity</code> in …\nConstructs a cache based on OptionsBuilder.")