searchState.loadedDescShard("lz4_flex", 0, "Pure Rust, high performance implementation of LZ4 …\nLZ4 Block Format\nLZ4 Frame Format\nErrors that can happen during compression.\nAn error representing invalid compressed data.\nExpected another byte, but none found.\nLiteral is out of bounds of the input\nDeduplication offset out of bounds (not in buffer).\nThe provided output is too small\nThe provided output is too small.\nCompress all bytes of <code>input</code>.\nCompress all bytes of <code>input</code> into <code>output</code>. The method …\nCompress all bytes of <code>input</code> into <code>output</code>. The method …\nCompress all bytes of <code>input</code> into <code>output</code>. The uncompressed …\nCompress all bytes of <code>input</code> into <code>output</code>. The uncompressed …\nCompress all bytes of <code>input</code> with an external dictionary.\nDecompress all bytes of <code>input</code> into a new vec. The passed …\nDecompress all bytes of <code>input</code> into <code>output</code>. <code>output</code> should …\nDecompress all bytes of <code>input</code> into <code>output</code>.\nDecompress all bytes of <code>input</code> into a new vec. The first 4 …\nDecompress all bytes of <code>input</code> into a new vec. The first 4 …\nDecompress all bytes of <code>input</code> into a new vec. The passed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the maximum output size of the compressed data. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis can be used in conjunction with …\nActual size of output\nMinimum expected output size\nWill detect optimal frame size based on the size of the …\nA wrapper around an <code>FrameEncoder&lt;W&gt;</code> that finishes the …\nThe block checksum doesn’t match.\nThe two <code>BlockMode</code> operations that can be set on (<code>FrameInfo</code>)…\nDifferent predefines blocksizes to choose when compressing …\nRead a block larger than specified in the Frame header.\nCompression error.\nThe content checksum doesn’t match.\nContent length differs.\nDecompression error.\nExternal dictionaries are not supported.\nErrors that can occur when de/compressing lz4.\nA reader for decompressing the LZ4 frame format\nA writer for compressing a LZ4 stream.\nThe metadata for de/compressing with lz4 frame format.\nThe Frame header checksum doesn’t match.\nEvery block is compressed independently. The default.\nBlock header is malformed.\nAn io::Error was encountered.\nBlocks can reference data from previous blocks.\n1MB block size.\n256KB block size.\n4MB block size.\nThe default block size.\n8MB block size.\nReserved bits set.\nRead an skippable frame. The caller may read the specified …\nUnsupported block size.\nUnsupported frame version.\nWrong magic number for the LZ4 frame format.\nReturns a wrapper around <code>self</code> that will finish the stream …\nIf set, includes a checksum for each data block in the …\nIf set, includes a checksum for each data block in the …\nThe block mode.\nThe block mode.\nThe maximum uncompressed size of each data block.\nThe maximum uncompressed size of each data block.\nIf set, includes a content checksum to verify that the …\nIf set, includes a content checksum to verify that the …\nWhether to include the total uncompressed size of data in …\nIf set, includes the total uncompressed size of data in …\nConsumes this encoder, flushing internal buffer and …\nThe frame information used by this Encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying writer in this encoder.\nGets a mutable reference to the underlying reader in this …\nGets a reference to the underlying writer in this encoder.\nGets a reference to the underlying reader in this decoder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying writer <em>without</em> flushing the stream. …\nConsumes the FrameDecoder and returns the underlying …\nIf set, use the legacy frame format.\nIf set, use the legacy frame format\nCreates a new Encoder with the default settings.\nCreates a new Decoder for the specified reader.\nCreate a new <code>FrameInfo</code>.\nAttempt to finish this output stream, flushing internal …\nCreates a new Encoder with the specified FrameInfo.\nActual content length.\nExpected content length.")