searchState.loadedDescShard("wasm_encoder", 0, "A WebAssembly encoder.\nAlias for the unshared <code>any</code> heap type.\nAlias for the <code>anyref</code> type in WebAssembly.\nAlias for the <code>arrayref</code> type in WebAssembly.\nAn abstract heap type; e.g., <code>anyref</code>.\nAn abstract heap type.\nFor a load, it acquires; this orders all operations before …\nAn active data segment.\nAn active element segment.\nDifferent forms of aliases that can be inserted into a …\nThe section is an alias section.\nThe abstract <code>any</code> heap type.\nThe type is for an array.\nThe abstract <code>array</code> heap type.\nRepresents a type of an array in a WebAssembly module.\nThe type for a <code>block</code>/<code>if</code>/<code>loop</code>.\nThe type is a boolean.\nThe section is a canonical function section.\nAn encoder for the canonical function section of …\nRepresents options for canonical function definitions.\nThe type is a Unicode character.\nThe code section.\nAn encoder for the code section.\nThe string types in the function signature are compact …\nRepresents a WebAssembly component that is being encoded.\nThe alias is to a component.\nThe export is a component.\nThe reference is to a component type.\nThe section is a component section.\nAn encoder for the alias section of WebAssembly component.\nConvenience type to build a component incrementally and …\nUsed for encoding component defined types.\nRepresents the kind of an export from a WebAssembly …\nAn encoder for the export section of WebAssembly component.\nUsed to encode component function types.\nAn encoder for the import section of WebAssembly …\nAn encoder for the instance section of WebAssembly …\nEncoding for the <code>component-name</code> custom section which …\nRepresents the kinds of outer aliasable items in a …\nA WebAssembly component section.\nKnown section identifiers of WebAssembly components.\nAn encoder for the start section of WebAssembly components.\nRepresents a component type.\nUsed to encode component and instance types.\nRepresents a reference to a type.\nAn encoder for the type section of WebAssembly components.\nRepresents a component value type.\nA <code>CompositeType</code> can contain one of these types.\nRepresents a composite type in a WebAssembly module.\nA concrete Wasm-defined type at the given index.\nA constant expression.\nThe section is a core custom section.\nThe “coreinstances” section for the core dump\nThe “coremodules” custom section for coredumps which …\nThe “core” custom section for coredumps, as described …\nA “corestack” custom section as described in the …\nLocal and stack values are encoded using one byte for the …\nThe section is a core instance section.\nSame as <code>InstanceExport</code>, but for core instances.\nThe alias is to a core module.\nThe section is a core module section.\nThe alias is to a core type.\nThe section is a core type section.\nUsed to encode core types.\nAn encoder for the core type section of WebAssembly …\nThe custom section.\nA custom section holding arbitrary data.\nThe data section.\nThe data count section.\nAn encoder for the data count section.\nAn encoder for the data section.\nA segment in the data section.\nA data segment’s mode.\nThe definition of a data symbol within a symbol table.\nA declared element segment.\nAlias for the <code>anyref</code> type in WebAssembly.\nAlias for the <code>exnref</code> type in WebAssembly\nAlias for the <code>exnref</code> type in WebAssembly.\nAlias for the unshared <code>extern</code> heap type.\nAlias for the <code>externref</code> type in WebAssembly\nAlias for the <code>externref</code> type in WebAssembly.\nThe element section.\nAn element segment’s mode.\nAn encoder for the element section.\nAn element segment in the element section.\nA sequence of elements in a segment in the element section.\n<code>[] -&gt; []</code>\nImplemented by types that can be encoded into a byte sink.\nThe type of an entity.\nThe type is bounded by equality to the type index …\nThe abstract <code>eq</code> heap type.\nThe tag is an exception type.\nThe abstract <code>exception</code> heap type.\nThe section is an export section.\nThe export section.\nRepresents the kind of an export from a WebAssembly module.\nAn encoder for the export section of WebAssembly module.\nA sequence of reference expressions.\nThe abstract external heap type.\nThe type is a 32-bit floating point number with only one …\nAn f32 value\nThe <code>f32</code> type.\nThe type is a 64-bit floating point number with only one …\nAn f64 value\nThe <code>f64</code> type.\nAlias for the unshared <code>func</code> heap type.\nAlias for the <code>funcref</code> type in WebAssembly\nAlias for the <code>funcref</code> type in WebAssembly.\nField type in composite types (structs, arrays).\nThe export is a function.\nThe reference is to a function type.\nThe export is a function.\nThe type is for a function.\nUntyped (any) function.\nRepresents a type of a function in a WebAssembly module.\nAn encoder for a function body within the code section.\nA function type.\nThe function section.\nAn encoder for the function section of WebAssembly modules.\nThe <code>n</code>th function type.\nA sequences of references to functions by their indices.\nThe export is a global.\nA global type.\nThe global section.\nAn encoder for the global section.\nA global’s type.\nThe 8-byte header at the beginning of all components.\nThe 8-byte header at the beginning of all core wasm …\nPart of the function references proposal.\nThe <code>i16</code> type.\nThe unboxed <code>i31</code> heap type.\nAlias for the unshared <code>i31</code> heap type.\nAlias for the <code>i31ref</code> type in WebAssembly.\nAn i32 value\nThe <code>i32</code> type.\nAn i64 value\nThe <code>i64</code> type.\nThe <code>i8</code> type.\nThe section is an import section.\nThe import section.\nAn encoder for the import section of WebAssembly modules.\nA map used to describe names with two levels of …\nThe export is an instance.\nThe reference is to an instance type.\nThe argument is an instance.\nThe section is an instance section.\nAn alias of a component instance export.\nAn encoder for the core instance section of WebAssembly …\nRepresents an instance type.\nWebAssembly instructions.\nDescribe an unchecked SIMD lane index.\nAn encoder for the linking custom section.\nThe immediate for a memory instruction.\nThe memory to use if the lifting or lowering of a function …\nThe export is a memory.\nA memory type.\nThe memory section.\nAn encoder for the memory section.\nA memory’s type.\na missing value (usually missing because it was optimized …\nRepresents a WebAssembly component that is being encoded.\nThe export is a core module.\nThe reference is to a core module type.\nRepresents an argument to a module instantiation.\nAn encoder for the module section of WebAssembly …\nRepresents the type of a core module.\nA map used to name items in a wasm module, organized by …\nAn encoder for the custom <code>name</code> section.\nAn encoder for the component section of WebAssembly …\nThe abstract <code>noexn</code> heap type.\nThe abstract <code>noextern</code> heap type.\nThe abstract <code>nofunc</code> heap type.\nThe abstract <code>none</code> heap type.\nThe memory ordering for atomic instructions.\nAliasing an item from an outer component.\nA passive data segment.\nA passive element segment.\nThe post-return function to use if the lifting of a …\nThe value is a primitive type.\nRepresents a primitive component value type.\nThe value of a field in the producers custom section\nAn encoder for the producers custom section.\nA raw custom section where the bytes specified contain the …\nA section made up of uninterpreted, raw bytes.\nThe realloc function to use if the lifting or lowering of …\nA reference type.\nA reference type.\n<code>[] -&gt; [t]</code>\nThe type is a signed 16-bit integer.\nThe type is a signed 32-bit integer.\nThe type is a signed 64-bit integer.\nThe type is a signed 8-bit integer.\nA WebAssembly module section.\nKnown section identifiers of WebAssembly modules.\nLike <code>AcqRel</code> but all threads see all sequentially …\nThe section is a start section.\nThe start section.\nAn encoder for the start section of WebAssembly modules.\nStorage type for composite type fields.\nThe type is a string.\nThe type is for a struct.\nThe abstract <code>struct</code> heap type.\nRepresents a type of a struct in a WebAssembly module.\nThis type is a fresh resource type,\nRepresents a subtype of possible other types in a …\nA subsection of the linking custom section that provides …\nThe export is a table.\nA table type.\nThe table section.\nAn encoder for the table section.\nA table’s type.\nThe export is a tag.\nA tag type.\nThe tag section.\nRepresents a tag kind.\nAn encoder for the tag section.\nA tag’s type.\nThe alias is to a type.\nThe export is a type.\nThe reference is to a bounded type.\nThe value is to a defined value type.\nThe section is a type section.\nThe type section.\nRepresents the possible type bounds for type references.\nAn encoder for the type section of WebAssembly modules.\nThe type is an unsigned 16-bit integer.\nThe type is an unsigned 32-bit integer.\nThe type is an unsigned 64-bit integer.\nThe type is an unsigned 8-bit integer.\nThe string types in the function signature are UTF-16 …\nThe string types in the function signature are UTF-8 …\nThe <code>v128</code> type.\nA value type.\nThe type of a core WebAssembly value.\nThe export is a value.\nThe reference is to a value type.\nThis is a local symbol.\nThis is a weak symbol.\nThis symbol uses an explicit symbol name, rather than …\nThis symbol is intended to be exported from the wasm …\nThis symbol is intended to be included in the linker …\nThis symbol is not defined.\nThis is a hidden symbol.\nDefine an active data segment.\nDefine an active element segment.\nDefine an alias to a component instance’s export.\nAdds a new alias to this component\nDefines an alias for an exported item of a prior instance …\nDefines an outer core type alias in this component type.\nCreates an alias to a previous core instance’s exported …\nCreates an alias to a previous component instance’s …\nDefines an outer core type alias in this module type.\nThe expected alignment of the instruction’s dynamic …\nAdds a an entry where the item at <code>idx</code> has the <code>name</code> …\nAdds a new entry where the item at <code>idx</code> has sub-items named …\nAppends this section to the specified destination list of …\nAppends this section to the specified destination list of …\nAppends this section to the specified destination list of …\nAppends this section to the specified destination list of …\nThe arguments to pass to the start function.\nDefine an array type in this type section.\nView the encoded section as a CustomSection.\nView the encoded section as a CustomSection.\nView the encoded section as a CustomSection.\nView the encoded section as a CustomSection.\nView the encoded section as a CustomSection.\nView the encoded bytes.\nGet the encoded Wasm module as a slice.\nDefine a <code>borrow</code> handle type\nThe number of bytes already added to this section.\nThe number of bytes already added to this function.\nDefines a new subcomponent of this component.\nAppends a component name subsection to this section.\nDefine a component type.\nDefine a component type in this type section.\nReturns the current number of components.\nDefines a new subcomponent of this component.\nAppends a decls name subsection to name components within …\nThe composite type of the subtype.\nCreates a new aliased item where the core <code>instance</code> …\nReturns the current number of core funcs.\nAppends a decls name subsection to name core functions …\nReturns the current number of core globals.\nAppends a decls name subsection to name core globals …\nReturns the current number of core instances.\nAppends a decls name subsection to name core instances …\nInstantiates a core wasm module at <code>module_index</code> with the …\nCreates a new core wasm instance from the <code>exports</code> provided.\nAppends a decls name subsection to name core memories …\nReturns the current number of core memories.\nEncodes a core wasm <code>Module</code> into this component, returning …\nReturns the current number of core modules.\nEncodes a core wasm <code>module</code> into this component, returning …\nAppends a decls name subsection to name core modules …\nReturns the current number of core tables.\nAppends a decls name subsection to name core tables within …\nReturns the current number of core tags.\nCreates a new encoder for the next core type in this …\nDefine a core type in this component type.\nDefine a core type in this instance type.\nReturns the current number of core types.\nGets the number of core types that have been added to this …\nGets the number of core types that have been added to this …\nAppends a decls name subsection to name core types within …\nThe number of segments in the data section.\nAdds a new custom section to this component.\nAdd a data symbol to this symbol table.\nAppends a subsection for the names of all data in this …\nThis custom section’s data.\nThis data segment’s data.\nThe raw data for this section.\nEncode a declared element segment.\nDefine a defined component type.\nAdd a component defined type to this type section.\nThe table’s element type.\nStorage type of the field.\nAppends a subsection for the names of all elements in this …\nThis segment’s elements.\nCreate a new empty constant expression builder.\nEncode the type into the given byte sink.\nDefine an enum type.\nExports a new item from this component with the <code>name</code> and …\nDefine an export in the export section.\nDefines an export in this module type.\nDefines an export in this component type.\nDefines an export in this instance type.\nDefine an export in the export section.\nDefine an instance by exporting core WebAssembly items.\nDefine an instance by exporting items.\nCreate a constant expression containing a single <code>f32.const</code> …\nCreate a constant expression containing a single <code>f64.const</code> …\nAdd a field to the section. The spec recommends names for …\nAppends a subsection for the names of fields within types …\nStruct fields.\nCompletes this component and returns the binary encoding …\nFinish writing this component and extract ownership of the …\nFinish writing this Wasm module and extract ownership of …\nDefine a flags type.\nAdd a stack frame to this coredump stack section.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current number of component funcs.\nDefine a function type in this type section.\nThe function type this tag uses\nAppends a decls name subsection to name component …\nDefine a function type.\nDefine a function type in this type section.\nDefine a function type.\nDefine a function type in this type section.\nWrite a function body into this code section.\nDefine a function in a module’s function section.\nDefine a function symbol in this symbol table.\nDefine a function type in this type section.\nThe index to the start function.\nThe index of the start function.\nAppends a subsection for the names of all functions in …\nReturns the function, if any, referenced by this global.\nDefine a global.\nDefine a global symbol in this symbol table.\nCreate a constant expression containing a single <code>global.get</code>…\nAppends a subsection for the names of all globals in this …\nCreate a constant expression containing a single <code>i32.const</code> …\nCreate a constant expression containing a single <code>i64.const</code> …\nGets the section identifier for this section.\nGets the section identifier for this section.\nThe id for this section.\nImports a new item into this component with the <code>name</code> and <code>ty</code>…\nDefine an import in the component import section.\nDefines an import in this module type.\nDefines an import in this component type.\nDefine an import in the import section.\nThe index of the data segment that this symbol is in.\nReturns the type used to index this table.\nThe type defined inside the composite type.\nDefine an instance type.\nDefine an instance type in this type section.\nEncode an instance into the section’s bytes.\nReturns the current number of component instances.\nGets the number of instances that have been defined in …\nGets the number of instances that have been imported or …\nAppends a decls name subsection to name component …\nInstantiates the <code>component_index</code> specified with the <code>args</code> …\nDefine an instance by instantiating a core module.\nDefine an instance by instantiating a component.\nWrite an instruction into this function body.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps and returns the raw byte encoding of this function.\nIs this storage type defaultable?\nIs this value defaultable?\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nReturns whether this section is empty, or nothing has been …\nDetermines if the section is empty.\nReturns whether or not this instance type is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nReturns whether no names have been added to this map.\nDetermines if the section is empty.\nDetermines if the section is empty.\nDetermines if the section is empty.\nIs the subtype final.\nIs this a numeric value type?\nIs this a reference type?\nIs this a vector type?\nGets the export kind of the reference.\nThe kind of tag\nAppends a subsection for the names of labels within …\nThe number of aliases in the section.\nThe number of functions in the section.\nThe number of exports in the section.\nThe number of imports in the section.\nThe number of instances in the section.\nThe number of instances in the section.\nThe number of types in the section.\nReturns the number of entries added to this instance types.\nThe number of types in the section.\nThe number of functions in the section.\nThe number of data segments in the section.\nThe number of modules that are encoded in the section.\nThe number of modules that are encoded in the section.\nThe number of element segments in the section.\nThe number of exports in the section.\nThe number of functions in the section.\nThe number of globals in the section.\nThe number of imports in the section.\nThe number of memories in the section.\nThe number of tables in the section.\nThe number of tags in the section.\nThe number of types in the section.\nDefine a function that will lift a core WebAssembly …\nLifts the core wasm <code>core_func_index</code> function with the …\nDefine a list type.\nAppends a subsection for the names of locals within …\nDefine a function that will lower a canonical ABI function …\nLowers the <code>func_index</code> component function into a core wasm …\nMaximum size, in pages, of this memory\nMaximum size, in elements, of this table\nAppends a subsection for the names of all memories in this …\nDefine a memory.\nWhether or not this is a 64-bit memory.\nThe index of the memory this instruction is operating upon.\nMinimum size, in pages, of this memory\nMinimum size, in elements, of this table\nThis data segment’s mode.\nThe element segment’s mode.\nDefine a module type.\nDefine a module type in this type section.\nEncode a module name into the section’s bytes.\nAppends a module name subsection to this section.\nWhether this global is mutable or not.\nIs the field mutable.\nThe name of this custom section.\nCreate a new alias section encoder.\nConstruct a new component function section encoder.\nCreate a new component export section encoder.\nCreate a new component import section encoder.\nCreate a new core instance section encoder.\nCreate a new instance section encoder.\nCreates a new blank <code>name</code> custom section.\nCreates a new core module type.\nCreate a new core type section encoder.\nCreates a new component type.\nCreates a new instance type.\nCreate a new component type section encoder.\nBegin writing a new <code>Component</code>.\nCreate a new code section encoder.\nCreate a new function body with the given locals.\nCreate a new data section encoder.\nCreate a new core dump section encoder\nCreate a new core dump modules section encoder.\nCreate a new core dump instances section encoder.\nCreate a new core dump stack section encoder.\nCreate a new element section encoder.\nCreate a new export section encoder.\nConstruct a new module function section encoder.\nCreate a new global section encoder.\nCreate a new import section encoder.\nConstruct a new encoder for the linking custom section.\nConstruct a new symbol table subsection encoder.\nCreate a new memory section encoder.\nCreates a new blank <code>name</code> custom section.\nCreates a new empty <code>NameMap</code>.\nCreates a new empty name map.\nConstruct an empty encoder for the producers custom …\nConstruct an empty encoder for a producers field value\nConstruct a new table section encoder.\nCreate a new tag section encoder.\nCreates a new <code>FuncType</code> from the given <code>params</code> and <code>results</code>.\nCreate a new module type section encoder.\nBegin writing a new <code>Module</code>.\nCreate a function from a list of locals’ types.\nSet the nullability of this reference type.\nA static offset to add to the instruction’s dynamic …\nThe offset of this symbol within its segment.\nDefine an option type.\nDefine a <code>own</code> handle type\nThe log base 2 of a custom page size for this memory.\nDefines named parameters.\nReturns a shared slice to the parameter types of the …\nDefine a passive data segment.\nEncode a passive element segment.\nDefine a primitive value type.\nAppends a raw subsection with the given id and data.\nAdd a raw byte slice into this code section as a function …\nAdd raw bytes to this function’s body.\nCreate a constant expression with the specified raw …\nCopy an already-encoded data segment into this data …\nCopy a raw, already-encoded element segment into this …\nAdd a raw byte slice into this code section as a global.\nAppends a raw subsection with the given id and data.\nAdds a new custom section to this component.\nDefine an explicit recursion group in this type section.\nDefine a record type.\nCreate a constant expression containing a single <code>ref.func</code> …\nCreate a constant expression containing a single <code>ref.null</code> …\nDefine a resource type.\nDefines a new resource type.\nDeclares a new <code>resource.drop</code> intrinsic.\nDefines a function which will drop the specified type of …\nDeclares a new <code>resource.new</code> intrinsic.\nDefines a function which will create an owned handle to …\nDeclares a new <code>resource.rep</code> intrinsic.\nDefines a function which will return the representation of …\nDefines a single unnamed result.\nDefine a result type.\nDefines named results.\nReturns a shared slice to the result types of the <code>FuncType</code>.\nThe number of expected results for the start function.\nWrite a section to this component.\nWrite a section into this module.\nDefine a data segment.\nDefine an element segment.\nWhether this global is shared or not.\nWhether or not this memory is shared.\nWhether this table is shared or not.\nWhether the type is shared. This is part of the …\nThe byte size (which can be zero) of this data symbol.\nDefine a struct type in this type section.\nDefine an explicit subtype in this type section.\nThe list of supertype indexes. As of GC MVP, there can be …\nAdd a symbol table subsection.\nDefine a table symbol in this symbol table.\nDefine a table.\nWhether or not this is a 64-bit table.\nDefine a table with an explicit initialization expression.\nAppends a subsection for the names of all tables in this …\nAppends a subsection for the names of all tags in this …\nDefine a tag.\nAppends a subsection for the names of all tags in this …\nDefine a tuple type.\nCreates a new encoder for the next type in this component.\nDefine a type in this module type.\nEncode a type into this section.\nDefine a type in this component type.\nDefine a type in this instance type.\nEncode a type into this section.\nCreates a new component type within this component.\nReturns the current number of component types.\nGets the number of types that have been added to this …\nGets the number of types that have been added or aliased …\nGets the number of types that have been added or aliased …\nCreates a new defined component type within this component.\nCreates a new component function type within this …\nCreates a new instance type within this component.\nDeclares a\nAppends a decls name subsection to name component type …\nAppends a subsection for the names of all types in this …\nUnpack this storage type into a value type.\nCreate a constant expression containing a single <code>v128.const</code>…\nThis global’s value type.\nAdd a value to the field encoder. Each value in a field …\nReturns the current number of component values.\nAppends a decls name subsection to name component values …\nDefine a variant type.\nAdd a <code>f32.const</code> instruction to this constant expression.\nAdd a <code>f64.const</code> instruction to this constant expression.\nAdd a <code>global.get</code> instruction to this constant expression.\nAdd an <code>i32.add</code> instruction to this constant expression.\nAdd an <code>i32.const</code> instruction to this constant expression.\nAdd an <code>i32.mul</code> instruction to this constant expression.\nAdd an <code>i32.sub</code> instruction to this constant expression.\nAdd an <code>i64.add</code> instruction to this constant expression.\nAdd an <code>i64.const</code> instruction to this constant expression.\nAdd an <code>i64.mul</code> instruction to this constant expression.\nAdd an <code>i64.sub</code> instruction to this constant expression.\nAdd a <code>ref.func</code> instruction to this constant expression.\nAdd a <code>ref.null</code> instruction to this constant expression.\nAdd a <code>v128.const</code> instruction to this constant expression.\nNumber of levels “up” to go to lookup the index …\nThe index of the item to alias within the scope referenced …\nThe index of the component instance that’s being aliased …\nThe kind of item that’s being extracted from the …\nThe kind of item being aliased, either a type or a …\nThe name of the export that’s being aliased.\nThe memory this segment applies to.\nThe offset where this segment’s data is initialized at.\nThe offset within the table to place this segment.\nThe table index.\nWhether the type is shared.\nThe actual heap type.")