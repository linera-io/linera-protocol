searchState.loadedDescShard("linera_chain", 0, "This module manages the state of a Linera chain, including …\nA view accessing the state of a chain.\nReturns true if there are no more outgoing messages in …\nApplies an execution outcome to the chain, updating the …\nReturns the hashes of all blocks we have in the given …\nReturns the <code>ChainId</code> of the chain this <code>ChainStateView</code> …\nHashes of all certified blocks for this sender. This ends …\nExecutes a block: first the incoming messages, then the …\nExecution state, including system and user applications.\nHash of the execution state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMailboxes used to receive messages indexed by their origin.\nInitializes the chain if it is not active yet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvariant for the states of active chains.\nReturns whether this is a child chain.\nReturns whether this error is caused by an issue in the …\nReturns the outboxes for the given targets, or an error if …\nChain manager\nConsensus state.\nThe indices of next events we expect to see per stream …\nReturns the height of the highest block we have, plus one. …\nReturns the chain IDs of all recipients for which a …\nOutboxes with at least one pending message. This allows us …\nNumber of outgoing messages in flight for each block …\nMailboxes used to send messages, indexed by their target.\nThe incomplete sets of blobs for upcoming proposals.\nPending validated block that is still missing blobs. The …\nAdds a block to <code>preprocessed_blocks</code>, and updates the …\nBlocks that have been verified but not executed yet, and …\nThe heights of previous blocks that published events to …\nThe heights of previous blocks that sent messages to the …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nAttempts to process a new <code>bundle</code> of messages from the …\nThe number of <code>received_log</code> entries we have synchronized, …\nSender chain and height of all certified blocks known as a …\nRemoves the incoming message bundles in the block from the …\nUnskippable bundles that have been removed but are still …\nTest utilities\nBlock-chaining state.\n<code>ToString::to_string</code>, but without panic on OOM.\nA queue of unskippable bundles, with the timestamp when we …\nUpdates the <code>received_log</code> trackers.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nBlock defines the atomic unit of growth of the Linera …\nThe body of a block containing all the data included in …\nSuccinct representation of a block. Contains all the …\nWrapper around a <code>Block</code> that has been confirmed.\nFailure to convert to <code>ConfirmedBlock</code> certificate.\nFailure to convert a <code>Certificate</code> into one of the expected …\nFailure to convert to <code>Timeout</code> certificate.\nWrapper around a <code>Block</code> that has been validated.\nFailure to convert to <code>ValidatedBlock</code> certificate.\nThe user signing for the operations in the block and …\nThe list of blobs produced by each transaction.\nCryptographic hash of all the created blobs in the block.\nReturns a reference to the <code>Block</code> contained in this …\nReturns a reference to the <code>Block</code> contained in this …\nBody of the block containing all of the data.\nThe chain to which this block belongs.\nReturns all the blob IDs created by the block’s …\nReturns all the blobs created by the block’s …\nThe number identifying the current configuration.\nThe list of events produced by each transaction.\nCryptographic hash of all the events in the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether there are any oracle responses in this …\nHeader of the block containing metadata of the block.\nThe block height.\nReturns all incoming bundles in this block body.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>ConfirmedBlock</code>, returning the <code>Block</code> it …\nConsumes this <code>ValidatedBlock</code>, returning the <code>Block</code> it …\nReturns whether this block matches the proposal.\nReturns whether this block matches the proposal.\nReturns the bundles of messages sent via the given medium …\nReturns reference to the outgoing messages in the block.\nThe list of outgoing messages for each transaction.\nCryptographic hash of all the messages in the block.\nCreates a new <code>ValidatedBlock</code> from a <code>Block</code>.\nThe execution result for each operation.\nA cryptographic hash of the execution results of all …\nReturns all operations in this block body.\nReturns set of blob IDs that were a result of an oracle …\nThe record of oracle responses for each transaction.\nCryptographic hash of all the oracle responses in the …\nCertified hash of the previous block in the chain, if any.\nThe hashes and heights of previous blocks that published …\nCryptographic hash of the lookup table for previous blocks …\nThe hashes and heights of previous blocks that sent …\nCryptographic hash of the lookup table for previous …\nReturns all the published blob IDs in this block’s …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReturns all recipients of messages in this block.\nReturns all the blob IDs required by this block. Either as …\nReturns whether this block requires the blob with the …\nThe hash of the chain’s execution state after this block.\nThe timestamp when this block was created.\nReturns a blob state that applies to all blobs used by …\nThe transactions to execute in this block. Each …\nCryptographic hash of all the transactions in the block.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nExecute the incoming message.\nThe messages and the state hash resulting from a …\nAn authenticated proposal for a new block.\nA chain ID with a block height.\nExecute an operation.\nA proposal in the fast round.\nA bundle of cross-chain messages.\nThe hash and chain ID of a <code>CertificateValue</code>.\nA vote on a statement from a validator, represented as a …\nWhat to do with a message picked from the inbox.\nA set of messages from a single block, for a single …\nThe execution result of a single operation.\nAn earlier proposal that is being retried.\nA message together with kind, authentication and grant …\nThe data a block proposer signs.\nA block containing operations to apply on a given chain, …\nReceive a bundle of incoming messages.\nA validated block certificate from an earlier round.\nDo not execute the incoming message.\nA transaction in a block: incoming messages or an …\nGraphQL-compatible metadata about a transaction.\nA vote on a statement from a validator.\nWhat to do with the message.\nTries to append a signature to a (partial) certificate. …\nFor user operations, the application ID\nThe user signing for the operations in the block and …\nThe user authentication carried by the message, if any.\nThe list of blobs created by each transaction.\nThe proposed block.\nThe messages to be delivered to the inbox identified by …\nThe confirmed block certificate hash.\nThe chain to which this block belongs.\nVerifies the signature in the vote.\nChecks that the original proposal, if present, matches the …\nThe number identifying the current configuration.\nThe list of events produced by each transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA grant to pay for the message execution.\nReturns whether the block contains only rejected incoming …\nThe block height.\nThe block height.\nThe incoming bundle, if this is a ReceiveMessages …\nReturns all incoming bundles in this block.\nReturns an iterator over all incoming <code>PostedMessage</code>s in …\nThe index of the message in the sending block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the posted message, i.e. the outgoing message …\nThe kind of message being sent.\nReturns the vote, with a <code>LiteValue</code> instead of the full …\nThe message itself.\nReturns the number of incoming messages.\nReturns an iterator over all posted messages in this …\nThe relevant messages.\nThe list of outgoing messages for each transaction.\nGraphQL-compatible structured metadata representations for …\nStarts aggregating signatures for the given value into a …\nUse signing key to create a signed object.\nUses the signing key to create a signed object.\nThe operation, if this is an ExecuteOperation transaction\nThe execution result for each operation.\nThe type of operation: “System” or “User”\nReturns all operations in this block.\nThe record of oracle responses for each transaction.\nThe origin of the messages.\nIf this is a retry from an earlier round, the execution …\nReturns the <code>AccountOwner</code> that proposed the block.\nCertified hash (see <code>Certificate</code> below) of the previous …\nThe hashes and heights of previous blocks that published …\nThe hashes and heights of previous blocks that sent …\nReturns all the published blob IDs in this block’s …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWhere to send a refund for the unused part of the grant …\nThe consensus round in which this proposal is made.\nThe hash of the chain’s execution state after this block.\nFor system operations, structured representation\nThe timestamp when this block was created. This must be …\nThe block’s timestamp.\nThe index of the transaction in the block that is sending …\nReturns an iterator over all transactions as references.\nThe type of transaction: “ReceiveMessages” or “…\nThe transactions to execute in this block. Each …\nFor user operations, the serialized bytes (as a hex string …\nReturns the value this vote is for.\nReturns the full vote, with the value, if it matches.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nAdmin operation metadata.\nApplication permissions metadata for GraphQL.\nChain ownership metadata for GraphQL.\nChange application permissions operation metadata.\nChange ownership operation metadata.\nClaim operation metadata.\nCreate application operation metadata.\nCredit message metadata.\nStructured representation of a message for GraphQL.\nOpen chain operation metadata.\nOwner with weight metadata.\nPublish data blob operation metadata.\nPublish module operation metadata.\nStructured representation of a system message for GraphQL.\nStructured representation of a system operation for …\nTimeout configuration metadata for GraphQL.\nTransfer operation metadata.\nUpdate stream metadata.\nVerify blob operation metadata.\nWithdraw message metadata.\nAdmin operation details\nFor user messages, the application ID\nThe duration of the first single-leader and all …\nChange application permissions operation details\nChange ownership operation details\nClaim operation details\nCreate application operation details\nCredit message details\nEpoch operation details (<code>ProcessNewEpoch</code>, …\nThe age of an incoming tracked or protected message after …\nThe duration of the fast round in milliseconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of message: “System” or “User”\nOpen chain operation details\nJSON serialized <code>ChainOwnership</code> for full representation.\nJSON serialized <code>ApplicationPermissions</code>.\nPublish data blob operation details\nPublish module operation details\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nFor system messages, structured representation\nThe type of system message\nThe type of system operation\nThe duration by which the timeout increases after each …\nTransfer operation details\n<code>UpdateStreams</code> operation details\nFor user messages, the serialized bytes (as a hex string …\nVerify blob operation details\nWithdraw message details\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe state of the certification process for a chain’s …\nChain manager information that is included in <code>ChainInfo</code> …\nA proposal in the <code>Fast</code> round.\nFirst branch of the type\nThe latest block that validators may have voted to …\nThe result of verifying a (valid) query.\nA <code>ValidatedBlock</code> certificate in a round other than <code>Fast</code>.\nSecond branch of the type\nAdds requested certificate values and proposals to the …\nReturns whether a proposal with this content was already …\nReturns whether the <code>identity</code> is allowed to propose a block …\nVerifies that a proposed block is relevant and should be …\nVerifies that a validated block is still relevant and …\nReturns the most recent confirmed vote we cast.\nLatest vote we cast to confirm a block.\nSigns a vote to confirm the validated block.\nChecks if the current round has timed out, and signs a …\nSigns a vote to validate the proposed block.\nReturns the lowest round where we can still vote to …\nThe lowest round where we can still vote to validate or …\nThe current round, i.e. the lowest round where we can …\nThe probability distribution for choosing a round leader.\nThe probability distribution for choosing a fallback round …\nThe owners that take over in fallback mode.\nReturns the most recent fallback vote we cast.\nFallback vote we cast.\nFallback vote we cast.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdates the round number and timer if the timeout …\nReturns whether there is a locking block in the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current leader, who is allowed to propose the next …\nThese are blobs published or read by the locking block.\nLatest validated proposal that a validator may have voted …\nThe public keys, weights and types of the chain’s owners.\nThe configuration of the chain’s owners.\nLatest vote we cast (either to validate or to confirm a …\nReturns the requested blob if it belongs to the proposal …\nHighest-round authenticated block that we have received …\nThese are blobs published or read by the proposed block.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe value we voted for, if requested.\nLatest validated proposal that we have voted to confirm …\nLatest authenticated block that we have received and …\nLatest authenticated block that we have received, if …\nThe value we voted for, if requested.\nReplaces <code>self</code> with a new chain manager.\nReturns the locking block’s round. To propose a …\nThe time after which we are ready to sign a timeout …\nThe timestamp when the current round times out.\nThe seed for the pseudo-random number generator that …\nHighest-round authenticated block that we have received, …\nLatest leader timeout certificate we have received.\nLatest timeout certificate we have seen.\nReturns the most recent timeout vote we cast.\nLatest timeout vote we cast.\nLatest timeout vote we cast.\nSets the signed proposal, if it is newer than the known …\nReturns the most recent validated vote we cast.\nLatest vote we cast to validate a block.\nReturns whether the signer is a valid owner and allowed to …\nSigns a <code>Timeout</code> certificate to switch to fallback mode.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA helper trait to simplify constructing blocks for tests.\nA handle to a running HTTP server.\nHelper trait to simplify constructing messages for tests.\nReturns the argument unchanged.\nReturns the hostname of this HTTP server.\nCalls <code>U::from(self)</code>.\nReturns a certificate for a committee consisting only of …\nReturns a block proposal in the first round in a default …\nReturns a block proposal without any hashed certificate …\nCreates a new child of the given block, with the same …\nCreates a block at height 0 for a new chain.\nReturns the port this HTTP server is listening on.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nSpawns a task with an HTTP server serving the routes …\nReturns the URL string this HTTP server is listening on.\nReturns the block with the given authenticated owner.\nReturns the block with the burn operation (transfer to a …\nReturns the block with the specified epoch.\nReturns the block with the given message appended at the …\nReturns the block with the given operation appended at the …\nReturns the block with a simple transfer operation …\nReturns the block with the specified timestamp.\nReturns the block with a transfer operation appended at …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nEnum wrapping all types of certificates that can be …\nCertificate for <code>ConfirmedBlock</code>.\nCertificate for a <code>ConfirmedBlock</code> instance. A confirmed …\nGeneric type representing a certificate for <code>value</code> of type <code>T</code>…\nA certified statement from the committee, without the …\nCertificate for <code>Timeout</code>.\nCertificate for a <code>Timeout</code> instance. A timeout certificate …\nCertificate for <code>ValidatedBlock</code>.\nCertificate for a <code>ValidatedBlock</code> instance. A validated …\nAdds a signature to the certificate’s list of signatures …\nReturns reference to the <code>Block</code> contained in this …\nReturns reference to the <code>Block</code> contained in this …\nVerifies the certificate.\nVerifies the certificate.\nChecks whether the value matches this certificate.\nReturns a <code>LiteCertificate</code> that owns the list of signatures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the certified value’s hash.\nReturns reference to the value contained in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this certificate, returning the value it contains.\nConsumes this certificate, returning the value it contains.\nReturns whether the validator is among the signatories of …\nReturns the bundles of messages sent to the specified …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe round in which the value was certified.\nSignatures on the value.\nCreates a <code>LiteCertificate</code> from a list of votes with their …\nReturns a reference to the <code>Hashed</code> value contained in this …\nHash and chain ID of the certified value (used as key for …\nReturns the <code>GenericCertificate</code> with the specified value, …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")