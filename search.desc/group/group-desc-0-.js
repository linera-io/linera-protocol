searchState.loadedDescShard("group", 0, "The affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nGiven a base and a number of scalars, compute a window …\nPerforms exponentiation given a base.\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nPerforms exponentiation given a scalar.\nGiven a scalar, compute its wNAF representation and return …\nConstructs new space for the window table while borrowing …\nConstructs new space for the scalar representation while …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.")