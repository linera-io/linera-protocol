searchState.loadedDescShard("rand_pcg", 0, "The PCG random number generators.\nA PCG random number generator (CM DXSM 128/64 (LCG) …\nA PCG random number generator (XSL RR 128/64 (LCG) …\nA PCG random number generator (XSH RR 64/32 (LCG) variant).\nA PCG random number generator (XSL 128/64 (MCG) variant).\n<code>Lcg64Xsh32</code> is also officially known as <code>pcg32</code>.\n<code>Lcg128Xsl64</code> is also officially known as <code>pcg64</code>.\n<code>Lcg128CmDxsm64</code> is also known as <code>PCG64DXSM</code>.\nA friendly name for <code>Mcg128Xsl64</code> (also known as <code>pcg64_fast</code>).\nMulti-step advance functions (jump-ahead, jump-back)\nMulti-step advance functions (jump-ahead, jump-back)\nMulti-step advance functions (jump-ahead, jump-back)\nMulti-step advance functions (jump-ahead, jump-back)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe use a single 255-bit seed to initialise the state and …\nWe use a single 255-bit seed to initialise the state and …\nWe use a single 127-bit seed to initialise the state and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an instance compatible with PCG seed and stream.\nConstruct an instance compatible with PCG seed.\nConstruct an instance compatible with PCG seed and stream.\nConstruct an instance compatible with PCG seed and stream.")