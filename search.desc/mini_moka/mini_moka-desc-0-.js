searchState.loadedDescShard("mini_moka", 0, "Mini Moka is a fast, concurrent cache library for Rust. …\nThe policy of a cache.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>max_capacity</code> of the cache.\nProvides a thread-safe, concurrent cache implementation …\nReturns the <code>time_to_idle</code> of the cache.\nReturns the <code>time_to_live</code> of the cache.\nProvides a <em>not</em> thread-safe cache implementation built upon …\nA thread-safe concurrent in-memory cache built upon …\nBuilds a <code>Cache</code> or with various configuration knobs.\nProvides extra methods that will be useful for testing.\nBuilds a <code>Cache&lt;K, V&gt;</code>.\nBuilds a <code>Cache&lt;K, V, S&gt;</code>, with the given <code>hasher</code>.\nReturns a <code>CacheBuilder</code>, which can builds a <code>Cache</code> with …\nMakes a clone of this shared cache.\nReturns <code>true</code> if the cache contains a value for the key.\nReturns an approximate number of entries in this cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <em>clone</em> of the value corresponding to the key.\nSets the initial capacity (number of entries) of the cache.\nInserts a key-value pair into the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiscards any cached value for the key.\nDiscards all cached values.\nCreates an iterator visiting all key-value pairs in …\nSets the max capacity of the cache.\nConstruct a new <code>CacheBuilder</code> that will be used to build a …\nConstructs a new <code>Cache&lt;K, V&gt;</code> that will store up to the …\nReturns a read-only cache policy of this cache.\nPerforms any pending maintenance operations needed by the …\nSets the time to idle of the cache.\nSets the time to live of the cache.\nSets the weigher closure of the cache.\nReturns an approximate total weighted size of entries in …\nAn in-memory cache that is <em>not</em> thread-safe.\nBuilds a <code>Cache</code> with various configuration knobs.\nBuilds a <code>Cache&lt;K, V&gt;</code>.\nBuilds a <code>Cache&lt;K, V, S&gt;</code>, with the given <code>hasher</code>.\nReturns a <code>CacheBuilder</code>, which can builds a <code>Cache</code> with …\nReturns <code>true</code> if the cache contains a value for the key.\nReturns the number of entries in this cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference of the value corresponding …\nSets the initial capacity (number of entries) of the cache.\nInserts a key-value pair into the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiscards any cached value for the key.\nDiscards all cached values.\nDiscards cached values that satisfy a predicate.\nCreates an iterator visiting all key-value pairs in …\nSets the max capacity of the cache.\nConstruct a new <code>CacheBuilder</code> that will be used to build a …\nConstructs a new <code>Cache&lt;K, V&gt;</code> that will store up to the …\nReturns a read-only cache policy of this cache.\nSets the time to idle of the cache.\nSets the time to live of the cache.\nSets the weigher closure of the cache.\nReturns the total weighted size of entries in this cache.")