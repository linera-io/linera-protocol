searchState.loadedDescShard("alloy", 0, "Alloy\nInterface with an Ethereum blockchain.\nEthereum JSON-RPC client and types.\nEthereum signer abstraction and implementations.\nLow-level Ethereum JSON-RPC transport abstraction and …\nRepresents an TrieAccount in the account trie.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nEthereum full block.\nA response to <code>GetBlockBodies</code>, containing bodies if any …\nTrait for extracting specific Ethereum block data from a …\nThe builtin transaction type.\nA commitment/proof serialized as 0x-prefixed hex string\nOmmer root of empty list.\nRoot hash of an empty trie.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nReceipt envelope with type flag 2, containing a EIP-1559 …\nTransaction type of <code>Signed &lt; TxEip1559 &gt;</code>.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nReceipt type that knows its EIP-2718 encoding.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nReceipt envelope with type flag 1, containing a EIP-2930 …\nTransaction type of <code>Signed &lt; TxEip2930 &gt;</code>.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nReceipt envelope with type flag 3, containing a EIP-4844 …\nTransaction type of <code>Signed &lt; Eip4844 &gt;</code>.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nA boolean <code>statusCode</code> introduced by EIP-658.\nCaptures the result of a transaction execution.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nReceipt envelope with type flag 4, containing a EIP-7702 …\nTransaction type of <code>Signed &lt; TxEip7702 &gt;</code>.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nA trait for ethereum like blocks.\nThe Ethereum EIP-2718 Transaction Envelope.\nThe TypedTransaction enum represents all Ethereum …\nAn enum that combines two different transaction types.\nEthereum Block header\nEssential info extracted from a header.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nReceipt envelope with no type flag.\nTransaction type of <code>Signed &lt; TxLegacy &gt;</code>.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nThe associated log type.\nThe other transaction type.\nA pre-EIP-658 hash value.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nA collection of receipts organized as a two-dimensional …\nReceipt type that knows how to decode itself with a <code>Bloom</code> …\nReceipt type that knows how to encode itself with a <code>Bloom</code> …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nA signable transaction.\nA transaction with a signature and hash seal.\nSimple coder that only uses the last 31 bytes of each …\nThe EIP-2718 transaction type.\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nA typed transaction envelope.\nDerive macro for creating transaction envelope types.\nRepresents an TrieAccount in the account trie.\nA transaction with a priority fee (EIP-1559).\nTransaction with an <code>AccessList</code> (EIP-2930).\nEIP-4844 Blob Transaction\nA standalone transaction with blob hashes and max blob fee.\nEIP-4844 Blob Transaction\nEIP-4844 Blob Transaction\nA transaction with a sidecar, which contains the blob …\nA transaction with a priority fee (EIP-7702).\nThe Ethereum EIP-2718 Transaction Envelope.\nLegacy transaction.\nReceipt is the result of a transaction execution.\nTransaction types supported by <code>EthereumTxEnvelope</code>.\nThe enum of transaction types.\nA trait that helps to determine the type of the …\nBasic typed transaction which can contain both <code>TxEip4844</code> …\nReturns the EIP-2930 <code>access_list</code> for the particular …\nThe accessList specifies a list of addresses and storage …\nThe access list. See EIP-2930.\nThe accessList specifies a list of addresses and storage …\nThe accessList specifies a list of addresses and storage …\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxEip4844Variant</code> variant if the transaction is …\nFallibly convert to the EIP-658 status code.\nReturns the <code>TxEip7702</code> variant if the transaction is an …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nFallibly convert to the post state.\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nReturn the mutable inner receipt with bloom. Currently …\nReturns the <code>TxEip4844WithSidecar</code> if it has a sidecar\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorizations are used to temporarily set the code of its …\nThe account’s balance.\nThe account’s balance.\nRetrieves the base fee per gas of the block, if available\nA scalar representing EIP1559 base fee which can move up …\nThe base fee per gas, added in the London upgrade with …\nRetrieves the beneficiary (miner) of the block\nThe 160-bit address to which all fees collected from the …\nBeneficiary (Coinbase or miner) is a address that have …\nReturns the blob corresponding to the versioned hash, if …\nReturns the number of blobs of this transaction.\nReturns the blob fee for <em>this</em> block according to the …\nReturns the blob fee for <em>this</em> block according to the …\nReturns the total gas for all blobs in this transaction.\nRetrieves the blob gas used by the block, if available\nReturns the total gas for all blobs in this transaction.\nThe total amount of blob gas consumed by the transactions …\nThe total amount of blob gas consumed by the transactions …\nBlob versioned hashes for eip4844 transaction. For …\nIt contains a vector of fixed size hash(32 bytes)\nReturns an iterator over all blob versioned hashes from …\nThe blob data.\nReturns the bloom filter for the logs in the receipt. This …\nReturn the receipt’s bloom.\nReturns the bloom filter for the logs in the receipt, if …\nReturns a reference to the bloom.\nCalculates <code>Log</code>’s bloom filter. This is slow operation and\nBlock body.\nCalculate the ommers root for the block body.\nCalculate the withdrawals root for the block body, if …\nTrue if the Cancun hardfork is active.\nGet <code>chain_id</code>.\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nAdded as EIP-155: Simple replay attack protection\nCode a slice of data into the builder.\nThe hash of the code of the account.\nThe hash of the code of the account.\nReturns true if the transaction was successful OR if the …\nCoerce this variant into a <code>Eip658Value::Eip658</code> with …\nThe blob commitments.\nHelpers for conditional transactions.\nEthereum protocol-related constants\nConverts the transaction type to the given alternative …\nConverts only the built-in transaction type using <code>From</code>, …\nConverts only the other transaction type using <code>From</code>, …\nConverts the block’s transaction type to the given …\nCryptographic algorithms\nReturns the cumulative gas used in the block after this …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDecode all slices of data from the blobs.\nRetrieves the difficulty of the block\nA scalar value corresponding to the difficulty level of …\nThe difficulty of the block\nReturns the effective gas price for the given base fee.\nReturns the effective tip for this transaction.\nReturn the inner EIP-1559 transaction if it exists.\nEIP-2718 decode the signed transaction.\nEIP-2718 decode the signed transaction with a specified …\nEIP-2718 encode the signed transaction.\nEIP-2718 encodes the receipt with the provided bloom …\nEIP-2718 encode the signed transaction with a specified …\nReturn the length of the inner txn, including type byte …\nGet the length of the transaction when EIP-2718 encoded.\nEIP-2718 encoded length with the provided bloom filter.\nReturn the inner EIP-2930 transaction if it exists.\nReturns an iterator over all blob transactions of the …\nReturn the inner EIP-7702 transaction if it exists.\nEncodes the inner BlobTransactionSidecar fields as RLP …\nRLP-encodes the transaction for signing.\nRLP-encodes the transaction for signing it. Used to …\nHelper errors.\nChecks if the block’s timestamp is in the future based …\nRetrieves the excess blob gas of the block, if available\nA running total of blob gas consumed in excess of the …\nA running total of blob gas consumed in excess of the …\nExtended transaction types\nRetrieves the block’s extra data field\nAn arbitrary byte array containing data relevant to this …\nFinish the sidecar, and commit to the data. This method …\nNo-op\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes the TxEip4844WithSidecar and returns the inner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder and …\nCreate a new builder from a slice of data.\nCreate a new builder from a slice of data by calling …\nConstructs a new TxEip4844WithSidecar from a TxEip4844 and …\nCreates the envelope for a given type and receipt.\nReturns the first 4bytes of the calldata for a function …\nRetrieves the gas limit of the block\nGet <code>gas_limit</code>.\nA scalar value equal to the current limit of gas …\nThe gas limit of the block\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nGet <code>gas_price</code>.\nA scalar value equal to the number of Wei to be paid per …\nA scalar value equal to the number of Wei to be paid per …\nRetrieves the gas used by the block\nA scalar value equal to the total gas used in transactions …\nReturns whether or not the block body contains any blob …\nReturns whether or not the block body contains any …\nReference to transaction hash. Used to identify …\nReturns a reference to the transaction hash.\nCalculate the seal hash, this may be slow.\nHeavy function that will calculate hash of data and will …\nBlock header.\nExtracts essential information into one container type.\nIngest a slice of data into the builder.\nGet the length of the inner receipt in the 2718 encoding.\nGet <code>data</code>.\nInput has two uses depending if <code>to</code> field is Create or Call.\nInput has two uses depending if <code>to</code> field is Create or Call.\nAn unlimited size byte array specifying the input data of …\nInput has two uses depending if transaction is Create or …\nInput has two uses depending if <code>to</code> field is Create or Call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Block</code> from the body and its header.\nCreate a <code>Block</code> from the body and its header.\nConsumes the block and returns the body.\nConsume the structure, returning the receipt and the bloom …\nConverts the transaction into …\nConsumes the block and returns the header.\nConsumes the type and returns the logs.\nConsumes the type and returns the logs emitted by this …\nConsumes the TxEip4844WithSidecar and returns the inner …\nSplits the transaction into parts.\nConverts a <code>ReceiptEnvelope</code> with a custom log type into a …\nConverts a <code>Receipt</code> with a custom log type into a <code>Receipt</code> …\nConverts a <code>ReceiptWithBloom</code> with a custom log type into a …\nConsumes the type and returns the underlying <code>Receipt</code>.\nConsumes the TxEip4844WithSidecar and returns the inner …\nConvert to a <code>Signed</code> object.\nConsumes the type into a <code>Signed</code>\nConsumes the type, removes the signature and returns the …\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConverts the transactions in the block’s body to …\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nReturns true if the transaction type has dynamic fee.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the transaction type is EIP-1559.\nReturns true if the transaction is an EIP-1559 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the transaction type is EIP-2930.\nReturns true if the transaction is an EIP-2930 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the transaction type is EIP-4844.\nReturns true if the transaction is an EIP-4844 transaction.\nReturns true if the transaction was a post-[EIP-658] …\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the transaction type is EIP-7702.\nReturns true if the transaction is an EIP-7702 transaction.\nCheck if the builder is empty.\nChecks if the header is considered empty - has no …\nReturns <code>true</code> if the <code>Receipts</code> vector is empty.\nReturns true if the type is a legacy transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the transaction type is Legacy.\nReturns true if the transaction is a legacy transaction.\nChecks if the nonce exists, and if it exists, if it’s …\nReturns true if the transaction was a pre-EIP-658 …\nReturns true if the transaction is replay protected.\nReturn true if the transaction was successful.\nReturns true if the type matches the given type.\nReturns true if the type matches the given type.\nReturns true if the type matches the given type.\nReturns true if the type matches the given type.\nChecks if the block’s difficulty is set to zero, …\nReturns the transaction kind.\nReturn the inner legacy transaction if it exists.\nCalculate the length of bytes used by field elements in …\nReturns the length of the <code>Receipts</code> vector.\nReturns the logs emitted by this transaction.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nRetrieves the logs bloom filter of the block\nReturn the receipt’s bloom.\nThe Bloom filter composed from indexable information …\nThe bloom filter.\nApplies the given closure to the inner transaction type.\nMaps only the built-in transaction type using the provided …\nConverts the EIP-4844 variant of this transaction with the …\nConverts the EIP-4844 variant of this transaction with the …\nConverts the block’s header type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the body’s ommers type by applying a function …\nMaps only the other transaction type using the provided …\nConverts the receipt type by applying the given closure to …\nConverts the block’s transaction type by applying a …\nMatches versioned hashes and returns an iterator of …\nMax fee per blob gas for EIP-4844 transaction.\nMax fee per data gas\nFor dynamic fee transactions returns the maximum fee per …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nFor dynamic fee transactions returns the Priority fee the …\nMax Priority fee that transaction is paying\nMax Priority fee that transaction is paying\nMax Priority fee that transaction is paying\nConvenience function for <code>Self::next_block_blob_fee</code> with an …\nConvenience function for <code>Self::next_block_excess_blob_gas</code> …\nRetrieves the mix hash of the block, if available\nA 256-bit hash which, combined with the nonce, proves that …\nThe output of the randomness beacon provided by the beacon …\nNetwork decode the signed transaction.\nNetwork decode the signed transaction with a specified …\nNetwork encode the signed transaction.\nNetwork encode the signed transaction with a specified …\nGet the length of the transaction when network encoded.\nInstantiate a new builder and new coder instance.\nConstructs a new BlobTransactionSidecar from a set of …\nCreates a new block with the given header and body.\nCreate new ReceiptWithBloom\nCreates a new signed transaction from the given …\nCreates a new signed transaction from the given …\nInstantiate from a transaction and signature. Does not …\nCreates a new signed transaction from the given typed …\nInstantiate from a transaction and signature. Does not …\nCalculate base fee for next block according to the …\nCalculate base fee for next block according to the …\nReturns the blob fee for the next block according to the …\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nCalculate excess blob gas for the next block according to …\nRetrieves the nonce of the block, if available\nGet <code>nonce</code>.\nThe account’s nonce.\nThe account’s nonce.\nA 64-bit value which, combined with the mixhash, proves …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nReturns the block’s number and hash.\nReturns the block’s number and hash with the parent hash.\nRetrieves the block number\nA scalar value equal to the number of ancestor blocks. The …\nThe number of ancestor blocks of this block (block height).\nOmmers/uncles header.\nRetrieves the ommers hash of the block\nThe Keccak 256-bit hash of the ommers list portion of this …\nCheck if the ommers hash equals to empty hash list.\nReturns an iterator over the hashes of the ommers in the …\nRetrieves the parent beacon block root of the block, if …\nThe hash of the parent beacon block’s root is included …\nRetrieves the parent hash of the block\nThe Keccak 256-bit hash of the parent block’s header, in …\nReturns the parent block’s number and hash\nReturns the parent block’s number and hash\nOutputs the length of the signature RLP encoding for the …\nTrue if the Prague hardfork is active.\nReturn the max priority fee per gas if the transaction is …\nHelper function for calculating Merkle proofs and hashes.\nThe blob proofs.\nPush a new vector of receipts into the <code>Receipts</code> collection.\nThe receipt.\nA two-dimensional vector of <code>Receipt</code> instances.\nRetrieves the receipts root hash of the block\nThe Keccak 256-bit hash of the root node of the trie …\nRetrieves the requests hash of the block, if available\nThe Keccak 256-bit hash of the an RLP encoded list with …\nCalculate the number of field elements required to store …\nDecodes the BlobTransactionSidecar from RLP bytes.\nRLP decode the signed transaction.\nRLP-decodes receipt’s field with a <code>Bloom</code>.\nRLP decodes receipt and <code>Bloom</code> into <code>ReceiptWithBloom</code> …\nEncodes the BlobTransactionSidecar as RLP bytes.\nRLP encode the signed transaction.\nRLP-encodes receipt fields with the given <code>Bloom</code> without an …\nRLP encodes the receipt with the provided bloom filter.\nReturns length of RLP-encoded receipt fields with the …\nCalculates the length of the BlobTransactionSidecar when …\nGet the length of the transaction when RLP encoded.\nReturns the length of the receipt payload with the …\nReturns RLP header for this receipt encoding with the …\nReturns the RLP encoded length of the block’s header and …\nCalculate the length of the rlp payload of the network …\nSeal the header with a known hash.\nSets <code>chain_id</code>.\nSet <code>chain_id</code> if it is not already set. Checks that the …\nTrue if the shanghai hardfork is active.\nReturns the sidecar if this is …\nGet access to the inner sidecar.\nThe sidecar.\nReturn the reference to signature.\nReturns a reference to the signature.\nCalculate the signing hash for the transaction.\nCalculate the signing hash for the transaction.\nCalculate the signing hash for the transaction.\nCalculates a size heuristic for the in-memory size of the …\nCalculate a heuristic for the in-memory size of the Header.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nRetrieves the state root hash of the block\nThe Keccak 256-bit hash of the root node of the state …\nReturns true if the transaction was successful OR if the …\nReturns the success status of the receipt’s transaction.\nIf transaction is executed successfully.\nReturns the status or post state of the transaction.\nThe hash of the storage account data.\nThe hash of the storage account data.\nReturns the transaction without signature.\nReturns a successful transaction status.\nTake the blobs from the builder, without committing them …\nRetrieves the timestamp of the block\nA scalar value equal to the reasonable output of Unix’s …\nThe timestamp of the block in seconds since the UNIX epoch\nGet the transaction’s address of the contract that will …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient.\nThe 160-bit address of the message call’s recipient.\nThe 160-bit address of the message call’s recipient or, …\nTransaction types.\nCheck if the transaction root equals to empty root.\nReturns an iterator over all transactions.\nTransactions in this block.\nRetrieves the transactions root hash of the block\nThe Keccak 256-bit hash of the root node of the trie …\nCompute  hash as committed to in the MPT trie without …\nConverts the transaction to the given alternative that is …\nAttempts to convert only the built-in transaction type …\nAttempts to convert only the other transaction type using …\nConverts the block’s transaction to the given …\nTries to unwrap the <code>TxEip4844WithSidecar</code> returns the …\nConsumes the type and returns the <code>TxEip2930</code>if this …\nConsumes the type and returns the EIP-4844 if this …\nConsumes the type and returns the EIP-4844 if this …\nConsumes the type and returns the <code>TxLegacy</code> if this …\nAttempts to convert the envelope into the pooled variant.\nAttempts to convert the envelope into the pooled variant.\nConverts from an EIP-4844 transaction to a …\nApplies the given fallible closure to the inner …\nAttempts to map only the built-in transaction type using …\nConverts the block’s header type by applying a fallible …\nConverts the body’s ommers type by applying a fallible …\nAttempts to map only the other transaction type using the …\nConverts the block’s transaction type by applying a …\n<code>ToString::to_string</code>, but without panic on OOM.\nGet access to the inner tx TxEip4844.\nGet access to the inner tx TxEip4844.\nReturns a reference to the transaction.\nThe actual transaction.\nReturn the hash of the inner Signed.\nCalculate the transaction hash for the given signature.\nReturns a mutable reference to the transaction.\nReturn the <code>TxType</code> of the inner receipt.\nGet the transaction type\nGet the transaction type.\nGet the transaction type.\nReturn the <code>TxType</code> of the inner txn.\nGet the transaction type.\nGet transaction type.\nGet the transaction type.\nReturn the <code>TxType</code> of the inner txn.\nReturns the EIP-2718 type flag.\nCreates a new empty uncle block.\nGet <code>value</code>.\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nReturns the versioned hash for the blob at the given …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nCalculates the bloom filter for the receipt and returns the\nReturns <code>ReceiptWithBloom</code> with the computed bloom filter …\nCreate a new builder with a pre-allocated capacity. This …\nReplaces the header of the block.\nAttaches the blob sidecar to the transaction\nReturns reference to withdrawals in the block if present\nBlock withdrawals.\nRetrieves the withdrawals root hash of the block, if …\nThe Keccak 256-bit hash of the withdrawals list portion of …\nContains attributes of a block that are relevant for block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BlockConditionalAttributes</code> with the given …\nThe number of the block.\nThe block’s timestamp\nTestnet genesis hash.\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nOmmer root of empty list.\nTransactions root of empty receipts set.\nRoot hash of an empty trie.\nTransactions root of empty transactions set.\nWithdrawals root of empty withdrawals set.\nMultiplier for converting ether to wei.\nMultiplier for converting finney (milliether) to wei.\nBase goerli genesis hash.\nGoerli genesis hash.\nOptimism goerli genesis hash.\nMultiplier for converting gwei to wei.\nHolesky genesis hash.\nHoodi genesis hash.\nKeccak256 over empty array.\nIdentifier for legacy transaction, however a legacy tx is …\nThe Ethereum mainnet genesis hash.\nMaximum extra data size in a block after genesis\nMultiplier for converting mgas to gas.\nThe first four bytes of the call data for a function call …\nSepolia genesis hash.\nError for signature S.\nOpaque error type for sender recovery.\nThe order of the secp256k1 curve, divided by two. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nHelper type that is <code>core::error::Error</code> and wraps a value …\nConverts the value to the given alternative that is <code>From&lt;T&gt;</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the underlying value.\nMaps the error’s value with the given closure.\nCreates a new error with the given value and error message.\nCreates a new error with a static error message.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns a reference to the value.\nThe builtin transaction type.\nAn enum that combines two different transaction types.\nThe other transaction type.\nCalculates the root hash for ommer/uncle headers.\nCalculates the receipt root.\nCalculate a transaction root.\nCalculates the root hash of the withdrawals.\nCompute a trie root of the collection of rlp encodable …\nCompute a trie root of the collection of items with a …\nCalculates the root hash of the state represented as MPT.\nHashes and sorts account keys, then proceeds to …\nHashes and sorts account keys, then proceeds to …\nSorts the hashed account keys and calculates the root hash …\nCalculates the root hash of account storage trie.\nHashes storage keys, sorts them and them calculates the …\nSorts and calculates the root hash of account storage trie.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nA commitment/proof serialized as 0x-prefixed hex string\nA <code>TxEip1559</code> tagged with type 2.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nTransaction type of <code>Signed &lt; TxEip1559 &gt;</code>.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nA <code>TxEip2930</code> tagged with type 1.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nTransaction type of <code>Signed &lt; TxEip2930 &gt;</code>.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nTransaction type of <code>Signed &lt; Eip4844 &gt;</code>.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nA <code>TxEip7702</code> tagged with type 4.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nTransaction type of <code>Signed &lt; TxEip7702 &gt;</code>.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe Ethereum EIP-2718 Transaction Envelope.\nThe TypedTransaction enum represents all Ethereum …\nA value of type <code>L</code>.\nAn untagged <code>TxLegacy</code>.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nTransaction type of <code>Signed &lt; TxLegacy &gt;</code>.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nAll possible transactions that can be included in a …\nSigned object with recovered signer.\nA value of type <code>R</code>.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nA signable transaction.\nA type that can recover the signer of a transaction.\nSimple coder that only uses the last 31 bytes of each …\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nA typed transaction envelope.\nAdditional fields in the context of a (maybe) pending …\nAdditional fields in the context of a block that contains …\nA transaction with a priority fee (EIP-1559).\nTransaction with an <code>AccessList</code> (EIP-2930).\nEIP-4844 Blob Transaction\nA standalone transaction with blob hashes and max blob fee.\nAn EIP-4844 transaction sidecar.\nEIP-4844 Blob Transaction\nEIP-4844 Blob Transaction\nA transaction with a sidecar, which contains the blob …\nA transaction with a priority fee (EIP-7702).\nThe Ethereum EIP-2718 Transaction Envelope.\nLegacy transaction.\nTransaction types supported by <code>EthereumTxEnvelope</code>.\nThe enum of transaction types.\nBasic typed transaction which can contain both <code>TxEip4844</code> …\nReturns the EIP-2930 <code>access_list</code> for the particular …\nThe accessList specifies a list of addresses and storage …\nThe access list. See EIP-2930.\nThe accessList specifies a list of addresses and storage …\nThe accessList specifies a list of addresses and storage …\nConverts from <code>&amp;Recovered&lt;T&gt;</code> to <code>Recovered&lt;&amp;T&gt;</code>.\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorizations are used to temporarily set the code of its …\nBase fee of the block.\nBase fee of the block.\nBlob versioned hashes for eip4844 transaction. For …\nIt contains a vector of fixed size hash(32 bytes)\nThe blob data.\nHash of the block.\nHash of the block.\nNumber of the block.\nNumber of the block.\nGet <code>chain_id</code>.\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nAdded as EIP-155: Simple replay attack protection\nClone the inner signed object.\nClone the inner transaction.\nMaps a <code>Recovered&lt;&amp;T&gt;</code> to a <code>Recovered&lt;T&gt;</code> by cloning the …\nCode a slice of data into the builder.\nThe blob commitments.\nConverts the inner signed object to the given alternative …\nConverts the transaction type to the given alternative …\nHelper function to explicitly create a new copy of …\nDecode all slices of data from the blobs.\nReturns the effective gas price for the given base fee.\n[EIP-4844] constants, helpers, and types.\nUtilities for working with EIP-4844 field elements and …\nThis encodes the transaction <em>with</em> the signature, and an …\nRLP-encodes the transaction for signing.\nRLP-encodes the transaction for signing it. Used to …\nThe excess blob gas of the block.\nFinish the sidecar, and commit to the data. This method …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper for decoding EIP-155 <code>v</code> value into <code>y_parity</code> boolean …\nGet <code>gas_limit</code>.\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nGet <code>gas_price</code>.\nA scalar value equal to the number of Wei to be paid per …\nA scalar value equal to the number of Wei to be paid per …\nHash of the transaction.\nIndex of the transaction in the block\nIndex of the transaction in the block\nReference to the inner recovered object.\nReference to the inner recovered object.\nGet <code>data</code>.\nInput has two uses depending if <code>to</code> field is Create or Call.\nInput has two uses depending if <code>to</code> field is Create or Call.\nAn unlimited size byte array specifying the input data of …\nInput has two uses depending if transaction is Create or …\nInput has two uses depending if <code>to</code> field is Create or Call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes the inner type and returns the <code>WithEncoded</code> …\nReturns the <code>WithEncoded</code> representation of <code>Recovered</code> with …\nReference to the inner signed object.\nDissolve Self to its component\nConvert to a <code>Signed</code> object.\nTransform back to the transaction.\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nReturns the transaction kind.\nApplies the given closure to the inner signed object.\nApplies the given closure to the inner transaction type.\nMax fee per blob gas for EIP-4844 transaction.\nMax fee per data gas\nFor dynamic fee transactions returns the maximum fee per …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nFor dynamic fee transactions returns the Priority fee the …\nMax Priority fee that transaction is paying\nMax Priority fee that transaction is paying\nMax Priority fee that transaction is paying\nCreate <code>Recovered</code> from the given transaction and <code>Address</code> of …\nGet <code>nonce</code>.\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nOutputs the length of the signature RLP encoding for the …\nDefines the exact transaction variant that are allowed to …\nReturn the max priority fee per gas if the transaction is …\nThe blob proofs.\nRecover signer from signature and hash.\nRecover signer from signature and hash <em>without ensuring </em>…\nSame as <code>SignerRecoverable::recover_signer_unchecked</code> but …\nCalculate the number of field elements required to store …\nSets <code>chain_id</code>.\nSet <code>chain_id</code> if it is not already set. Checks that the …\nThe sidecar.\nCalculate the signing hash for the transaction.\nHelper module for encoding signatures of transactions …\nSigner of the object recovered from signature\nReference to the signer of the object recovered from …\nCalculate a size heuristic for the in-memory size of the …\nThe block’s timestamp.\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient.\nThe 160-bit address of the message call’s recipient.\nThe 160-bit address of the message call’s recipient or, …\nHelper for encoding <code>y_parity</code> boolean and optional <code>chain_id</code> …\nConverts the inner signed object to the given alternative …\nConverts the transaction to the given alternative that is …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via …\nApplies the given fallible closure to the inner signed …\nApplies the given fallible closure to the inner …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via …\nReturns a reference to the transaction.\nThe actual transaction.\nHash of the transaction.\nHelper module for deserializing legacy transactions and …\nGet <code>value</code>.\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nEIP-4844 Blob Transaction\nA standalone transaction with blob hashes and max blob fee.\nEIP-4844 Blob Transaction\nEIP-4844 Blob Transaction\nA transaction with a sidecar, which contains the blob …\nThe accessList specifies a list of addresses and storage …\nIt contains a vector of fixed size hash(32 bytes)\nAdded as EIP-pub 155: Simple replay attack protection\nA scalar value equal to the maximum amount of gas that …\nInput has two uses depending if transaction is Create or …\nMax fee per data gas\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nA scalar value equal to the number of transactions sent by …\nThe sidecar.\nThe 160-bit address of the message call’s recipient.\nThe actual transaction.\nA scalar value equal to the number of Wei to be …\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nInstantiate a new <code>WholeFe</code> from a slice of bytes, if it is …\nA <code>TxEip1559</code> tagged with type 2.\nA <code>TxEip2930</code> tagged with type 1.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nA <code>TxEip7702</code> tagged with type 4.\nAn untagged <code>TxLegacy</code>.\nAll possible transactions that can be included in a …\nDeserializes signed transaction expecting <code>v</code> key for …\nSerializes signed transaction with <code>v</code> key for signature …\nDeserializes a legacy transaction without a tag.\nAn error occurred ABI encoding or decoding.\nA builder for sending a transaction via <code>eth_sendTransaction</code>…\nA trait for decoding the output of a contract function.\nA handle to an Ethereum contract at a specific address.\n<code>contractAddress</code> was not found in the deployment …\nThe error was successfully decoded into the specified …\n<code>CallBuilder</code> using a <code>Function</code> as the call decoder.\nContains the error value\nError when interacting with contracts.\nAn <code>alloy_provider::EthCall</code> with an abi decoder.\nHelper for managing the event filter before querying or …\nAn event poller.\nA smart contract interface.\nCalled <code>deploy</code> with a transaction that is not a deployment …\nContains the success value\nThe error was not decoded and the revert data was not …\nAn error occurred while waiting for a pending transaction.\n<code>CallBuilder</code> that does not have a call decoder.\nDynamic contract result type.\n<code>CallBuilder</code> using a <code>SolCall</code> type as the call decoder.\nA utility for finding storage slots in smart contracts, …\nAn error occurred interacting with a contract over RPC.\nExtension trait for TransportError parsing capabilities\nThe result of trying to parse a transport error into a …\nUnknown function referenced.\nUnknown function selector referenced.\nThe error was not decoded but the revert data was …\nThe contract returned no data.\nReturns a reference to the contract’s ABI.\nReturns a reference to the contract’s ABI.\nSets the <code>access_list</code> in the transaction to the provided …\nAppends a single AccountOverride to the state override.\nExtends the given AccountOverride to the state override.\nSets the address to query with this filter.\nReturns a reference to the contract’s address.\nDecode the revert data into a custom <code>SolError</code> type.\nAttempts to decode the revert data into one of the custom …\nReturn the revert data in case the call reverted.\nReturns a new contract instance at <code>address</code>.\nPins the block hash for the filter\nConvenience constructor for finding the storage slot of an …\nSet the block to use for this call.\nSets the <code>block</code> field for sending the tx to the chain\nBuild a RLP-encoded signed raw transaction for the call …\nBuilds and returns a RLP-encoded unsigned transaction from …\nCalculates the address that will be created by the …\nQueries the blockchain via an <code>eth_call</code> without submitting …\nQueries the blockchain via an <code>eth_call</code> without submitting …\nReturns the underlying transaction’s ABI-encoded data.\nSets the <code>chain_id</code> field in the transaction to the provided …\nClears the decoder, returning a raw call builder.\nClears the decoder, returning a raw call builder.\nCreate a <code>ContractInstance</code> from this ABI for a contract at …\nABI-decodes the given data according to the function’s …\nDecode the provided ABI encoded bytes as the input of the …\nDecode the provided ABI encoded bytes as the output of the …\nDecodes the output of a contract function using the …\nDecode the provided ABI encoded bytes as the output of the …\nBroadcasts the underlying transaction to the network as a …\nReturns the ABI encoded data (including the selector) for …\nReturns the ABI encoded data (including the selector) for …\nReturns the estimated gas cost for the underlying …\nGiven the event signature in string form, it hashes it and …\nReturns an <code>Event</code> builder with the provided filter.\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nThe filter to use for querying or streaming logs.\nFinds the storage slot containing the expected value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nSets the from block number\nReturns a transaction builder for the provided function …\nReturns a transaction builder for the provided function …\nSets the <code>gas</code> field in the transaction to the provided value\nSets the <code>gas_price</code> field in the transaction to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the interface, returning the inner ABI.\nStarts the poller and returns a stream that yields the …\nConverts the call builder to the inner transaction request\nReturn <code>true</code> if filter configured to match pending block.\nSets the transaction request to the provided tx kind.\nUses a Legacy transaction instead of an EIP-1559 one to …\nApplies a function to the internal transaction request.\nSets the <code>max_fee_per_blob_gas</code> in the transaction to the …\nSets the <code>max_fee_per_gas</code> in the transaction to the provide …\nSets the <code>max_priority_fee_per_gas</code> in the transaction to …\nCreates a new event with the provided provider and filter.\nCreate a new <code>EthCall</code>.\nCreates a new storage slot finder for a generic function …\nCreates a new contract interface from the provided ABI.\nCreates a new contract from the provided address, …\nCreate a new <code>EthCall</code>.\nCreates a new call builder with the provided provider and …\nCreates a new call builder with the provided provider and …\nSets the <code>nonce</code> field in the transaction to the provided …\nSet the state overrides for this call.\nThe inner poller.\nReturns a reference to the contract’s provider.\nThe provider to use for querying or streaming logs.\nThe provider.\nThe provider.\nThe provider.\nThe provider.\nQueries the blockchain for the selected filter and returns …\nQueries the blockchain for the selected filter and returns …\nSets the inner filter object\nBroadcasts the underlying transaction to the network.\nSets the contract’s address.\nSets the <code>sidecar</code> field in the transaction to the provided …\nSets the state override set.\nSets the <code>to</code> field in the transaction to the provided …\nSets the to block number\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nTry to decode a contract error into a specific Solidity …\nAttempts to parse a transport error into a specific …\n<code>ToString::to_string</code>, but without panic on OOM.\nSets the <code>value</code> field in the transaction to the provided …\nWatches for events that match the filter.\nClones the provider and returns a new event with the …\nClones the provider and returns a new contract instance …\nClones the provider and returns a new builder with the …\nSwap the decoder for this call.\nConfigures a specific value that should be used in the …\nSets the decoder to the provided <code>SolCall</code>.\nAddress.\nAn address.\nDynamically sized array.\nA dynamically-sized array of values.\nBoolean.\nA boolean.\nDynamic bytes.\nA dynamic-length byte array.\nWhether the ABI-encoded size is dynamic.\nWhether the ABI-encoded size is dynamic.\nA decoded dynamic ABI error.\nA decoded dynamic ABI event.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nA dynamic-length sequence.\nA representation of a Solidity call\nA dynamic ABI error.\nA dynamic ABI event.\nA representation of a Solidity call’s returns.\nA dynamic Solidity type.\nA dynamic Solidity value.\nA dynamic token.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nLength mismatch during encoding.\nAn ABI encoder.\nContains the error value\nError when parsing EIP-712 <code>encodeType</code> strings\nProvides error encoding and decoding for the <code>Error</code> type.\nProvides event encoding and decoding for the <code>Event</code> type.\nInvalid event signature.\nFixed-sized array.\nA fixed-size array of values.\nFixed-size bytes, up to 32.\nA fixed-length byte array. The second parameter is the …\nA Fixed Sequence.\nFunction.\nA function pointer.\nProvide ABI encoding and decoding for the <code>Function</code> type.\n<code>hex</code> error.\nSigned Integer.\nA signed integer. The second parameter is the number of …\nProvides ABI encoding and decoding functionality.\nThe name of the struct.\nContains the success value\nThe statically-known Non-standard Packed Mode ABI-encoded …\nA packed sequence (string or bytes).\nDynamic ABI result type.\nThe corresponding Rust type.\nThe name of this type in Solidity.\nSelector mismatch during function or error decoding.\nA Solidity type.\n<code>alloy_sol_types</code> error.\nTrait for items that can be resolved to <code>DynSol*</code>, i.e. they …\nString.\nA string.\nThe corresponding ABI token type.\nLength mismatch during event topic decoding.\nTuple.\nA tuple of values.\nType mismatch during encoding or coercion.\n<code>alloy_sol_type_parser</code> error.\nUnsigned Integer.\nAn unsigned integer. The second parameter is the number of …\nThe ABI word type.\nA single word.\nEthereum ABI codec implementation.\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data according to this item’s …\nABI decode the given data as function returns.\nABI-decodes the given data according to this functions’s …\nABI decode the given data as function return values.\nABI decode the given data as function return values.\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nDecodes this type’s value from an ABI blob by …\nEncode this value into a byte array by wrapping it into a …\nTokenizes and ABI-encodes the given value by wrapping it …\nTokenizes and ABI-encodes the given value by wrapping it …\nABI-encodes the given values, prefixed by this item’s …\nABI encode the given values as function params.\nABI-encodes the given values, without prefixing the data …\nABI encode the given values as function params without …\nABI-encodes the given values.\nABI encode the given values as function return values.\nABI encode the given values as function return values.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncode this value into a byte array suitable for passing …\nTokenizes and ABI-encodes the given value as function …\nTokenizes and ABI-encodes the given value as function …\nIf this value is a fixed sequence, encode it into a byte …\nTokenizes and ABI-encodes the given value as a sequence.\nTokenizes and ABI-encodes the given value as a sequence.\nCalculate the ABI-encoded size of the data, counting both …\nCalculate the ABI-encoded size of the data, counting both …\nReturns the number of bytes that will be used to encode …\nReturns the length of this value when ABI-encoded in …\nReturns the length of this value when ABI-encoded in …\nReturns the length of this value when ABI-encoded in …\nShortcut for appending a token sequence.\nAppend a pointer to the current suffix offset.\nAppend a sequence of bytes as a packed sequence with a …\nAppend a sequence length.\nAppend a word to the encoder.\nFallible cast to the contents of a variant DynSolValue {.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a dynamic sequence.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a fixed sequence.\nFallible cast to a fixed-size array. Any of a <code>FixedArray</code>, …\nFallible cast to the contents of a variant.\nFallible cast into a packed sequence.\nFallible cast to a packed sequence. Any of a String, or a …\nFallible cast to the contents of a variant.\nFallible cast into a sequence, dynamic or fixed-size\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nThe Solidity type. This returns the Solidity type …\nFallible cast to the contents of a variant.\nAttempt to cast to a word.\nFallible cast to a single word. Will succeed for any …\nError body types.\nGet the un-indexed types.\nThe decoded error body.\nThe un-indexed values, in order.\nBump the suffix offset by a given number of words.\nReturn a reference to the encoded bytes.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nCoerces a string into a <code>DynSolValue</code> via this type.\nInstantiates a new error with a static str.\nDecodes a single token from the underlying buffer.\nDecode the error from the given data.\nDecode the error from the given data.\nDecodes the given log object according to this item’s …\nDecode the event from the given log info.\nDecodes the given log info according to this item’s …\nDecode the event from the given log info.\nDecodes a sequence of tokens from the underlying buffer.\nDetokenize this type’s value from the given token.\nDynamic detokenization.\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nEncodes this domain using EIP-712 <code>encodeData</code>.\nEncodes this domain using EIP-712 <code>encodeData</code> into the …\nTransform a <code>Log</code> containing this event into a <code>Log</code> containing\nRe-encode the event into a <code>LogData</code>\nThe EIP-712-encoded type string.\nFinish the encoding process, returning the encoded words.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a DynToken from a dynamic sequence of values.\nInstantiate a DynToken from a fixed sequence of values.\nReturns whether this type is contains a custom struct.\nReturns whether this type is contains a custom struct.\nHashes this domain according to EIP-712 <code>hashStruct</code>.\nAppend this data to the head of an in-progress blob via …\nGet the indexed types.\nThe indexed values, in order.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinish the encoding process, returning the encoded bytes.\nTrue if anonymous.\nTrue if anonymous. False if not.\nReturns <code>true</code> if this type is dynamically sized type.\nTrue if the type is dynamic, else false.\nReturns <code>true</code> if the value is an instance of a dynamically …\nReturns whether the remaining buffer is empty.\nReturns true if the value is a sequence type.\nTrust if this value is encoded as a single word. False …\nReturn true if the type is zero-sized, e.g. <code>()</code> or <code>T[0]</code>\nCheck that the given <code>DynSolValue</code> matches this type.\nCheck that this value has the same type as the given …\nCheck that the given <code>DynSolValue</code>s match these types.\nCheck that these values have the same type as the given …\nGet the method name of the call (if available)\nCalculate the minimum number of ABI words necessary to …\nCalculate the minimum number of words required to encode …\nThe user readable name of signing domain, i.e. the name of …\nCalculate the nesting depth of this type. Simple types …\nCreates a new error from a selector.\nCreates a new event.\nCreate a new <code>DynSolCall</code> with the given selector and types.\nCreate a new <code>DynSolReturns</code> with the given types.\nInstantiate a new empty encoder.\nInstantiate a new decoder from a byte slice and a …\nInstantiate a new EIP-712 domain.\nCreates a new error, without length-checking the body. …\nCreates a new event, without length-checking the indexed, …\nReturns the number of ABI words (32 bytes) that will be …\nReturns the current offset in the buffer.\nA Solidity panic.\nParses a Solidity type name string into a <code>DynSolType</code>.\nPeek into the buffer.\nPeek a slice of size <code>len</code> from the buffer without advancing …\nPeek a slice of size <code>len</code> from the buffer at a specific …\nPeek a <code>usize</code> from the buffer, without advancing the offset.\nPeek a <code>usize</code> from the buffer at a specific offset, without …\nPeek the next word from the buffer without advancing the …\nPeek a word from the buffer at a specific offset, without …\nRemoves the last offset and returns it.\nAppends a suffix offset.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nReturns the number of bytes in the remaining buffer.\nReturns a reference to the remaining bytes in the buffer.\nReturns the number of words in the remaining buffer.\nResolve the type into a value.\nGet the types of the call’s returns.\nRepresents a standard Solidity revert. These are thrown by …\nA disambiguating salt for the protocol. This can be used …\nError selector is the first 4 bytes of the keccak256 hash …\nGet the selector of the call.\nThe hashes event_signature (if any)\nCalculate the domain separator for the domain object.\nSets the current offset in the buffer.\nThe Solidity type name. This returns the Solidity type …\nThe Solidity type name. This returns the Solidity type …\nReturns the name of this type in Solidity.\nReturns the name of this type in Solidity.\nDetermine the current suffix offset.\nAppend this data to the tail of an in-progress blob via …\nReturn a child decoder by consuming a word, interpreting …\nTakes a <code>usize</code> offset from the buffer by consuming a word.\nTakes the offset from the child decoder and sets it as the …\nTakes a slice of bytes of the given length.\nTake a word from the buffer, advancing the offset.\nThe Solidity type name, as a <code>String</code>.\nTokenize this value into a <code>DynToken</code>.\nTokenizes the given value into this type’s token.\nTokenizes the given value into this type’s token.\nGet the selector for this event, if any.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns an error if the given token cannot be detokenized …\nReturns an error if the given token cannot be detokenized …\nCalculates the EIP-712 <code>typeHash</code> for this domain.\nGet the types of the call.\nGet the types of the returns.\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nInstantiate a new encoder with a given capacity in words.\nReturn a reference to the encoded words.\nThe contents of the dynamic sequence.\nThe actual type.\nThe actual length.\nThe actual length.\nThe actual selector.\nThe actual signature.\nThe expected type.\nThe expected length.\nThe expected length.\nThe expected selector.\nThe expected signature.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nTrue for tuples only.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nABI-decodes a token by wrapping it in a single-element …\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nAppend head words to the encoder.\nCalculate the number of head words.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nCalculate the total number of head and tail words.\nCalculate the total number of head and tail words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nReturns a reference to the array.\nReturns a reference to the word as a slice.\nReturns a reference to the array as a slice.\nReturns a reference to the backing slice.\nReturns a reference to the slice.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the backing array, consuming the token.\nInstantiate a new <code>Bytes</code> by copying the underlying slice.\nInstantiate a new <code>Vec</code> by copying the underlying slice.\nCreate a new word token from a word.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nNonpayable functions promise not to receive Ether.\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nPayable functions make no promises.\nPure functions promise not to read from or modify the …\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nA JSON ABI function’s state mutability.\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nView functions promise not to modify the state.\nFallible conversion to a root type\nReturns a string representation of the storage specifier.\nFallible conversion to a tuple type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the parameter indexed.\nInner input being wrapped in state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate an invalid identifier string error. Invalid …\nInstantiate an invalid size error. Invalid size errors are …\nInstantiate an invalid type string error. Invalid type …\nReturns true if this type is an array.\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nInstantiate a new error.\nCreate a new root type from a string without checking if it…\nThe parameters.\nParse a root type from a string.\nParse a type stem from a string.\nParse a tuple specifier from a string.\nParse a type specifier from a string.\nParse a parameter from a string.\nParse a parameter list from a string.\nParse a string storage specifier.\nInstantiate a new parser error.\n<code>serde</code> implementation for <code>StateMutability</code> for backwards …\nArray sizes, in innermost-to-outermost order. If the size …\nThe string underlying this type. The type name.\nReturns the type stem as a string.\nReturns the tuple specifier as a string.\nReturns the type stem as a string.\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nUser-provided state\nReturns the type stem.\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nReturns <code>Ok(())</code> if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe type of the parameter.\nThe internal types.\nDeserializes a <code>StateMutability</code>, compatible with older JSON …\nSerializes a <code>StateMutability</code> as a single-field struct (…\nBlob parameters configuration for a chain, including …\nA scheduled blob parameter update entry.\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlob parameters for the Cancun hardfork\nDecoding trait for EIP-2718 envelopes. These envelopes …\nEarliest block (genesis)\nEncoding trait for EIP-2718 envelopes.\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nThe hash\nA block hash and an optional bool that defines if it’s …\nThe hash\nEither a hash <em>or</em> a block number\nLatest block\nA number and a hash.\nThe number\nBlock by number from canonical chain\nA block number\nThe number\nPending block (not yet part of the blockchain)\nBlob parameters for the Prague hardfork\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nBlob parameters that take effect at a specific timestamp\nA trait that helps to determine the type of the …\nReturns the highest active blob parameters at the given …\nReturns the block hash if it is BlockId::Hash\nReturns the block hash if it is a <code>HashOrNumber::Hash</code>.\nReturns the numeric block number if explicitly set\nReturns the block number if it is a <code>HashOrNumber::Number</code>.\nReturns the block number if it is <code>BlockId::Number</code> and not …\nA block hash\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculate the base fee for the next block based on the …\nReturns the configured Cancun <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Cancun …\nDecode the transaction according to EIP-2718 rules. First …\nDecode the transaction according to EIP-2718 rules. First …\nDecode a transaction according to EIP-2718, ensuring no …\nDecode a transaction according to EIP-2718, ensuring no …\nCreates a new “earliest” tag instance.\nEIP-1559 constants, helpers, and types.\nRe-export the EIP-2124 types.\nEIP-2718 traits.\nRe-export the EIP-2930 types.\nContains the history storage contract, first introduced in …\nEIP-4788 constants.\nEIP-4844 constants and helpers.\nEIP-4895 Withdrawal type and serde helpers.\nContains Deposit request types, first introduced in the …\nContains the system contract and WithdrawalRequest types, …\nContains consolidation types, first introduced in the …\nTypes and constants for PeerDAS.\nConstants and utils for calldata cost.\nEIP-7685: General purpose execution layer requests\nContains constants and utility functions for EIP-7691\nRe-export the EIP-7702 types.\nContains constants and utility functions for EIP-7840\nContains constants and helper functions for EIP-7892\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nCreates a new “finalized” tag instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>RpcBlockHash</code> from a <code>B256</code>.\nCreate a new block hash instance.\nThe hash.\nThe hash.\nThe hash.\nCreate a new block hash instance that requires the block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Self</code> and returns the number and hash\nA convenience function that encodes the value in the 2718 …\nA convenience function that encodes the value in the 2718 …\nReturns <code>true</code> if it’s “earliest”\nReturns true if this is BlockNumberOrTag::Earliest\nReturns <code>true</code> if it’s “finalized”\nReturns true if this is BlockNumberOrTag::Finalized\nReturns true if this is BlockId::Hash\nReturns <code>true</code> if it’s “latest”\nReturns true if this is BlockNumberOrTag::Latest\nReturns <code>true</code> if a numeric block number is set\nReturns true if this is BlockNumberOrTag::Number\nReturns <code>true</code> if it’s “pending”\nReturns true if this is BlockNumberOrTag::Pending\nReturns <code>true</code> if it’s “safe”\nReturns true if this is BlockNumberOrTag::Safe\nCreates a new “latest” tag instance.\nReturns the blob schedule for the ethereum mainnet.\nReturns whether or not the block matches the given …\nConstants related to the beacon chain consensus.\nDecode an EIP-2718 transaction in the network format. The …\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nThe length of the 2718 encoded envelope in network format. …\nCreates a new <code>NumHash</code> from a number and hash.\nCreates a new block number instance.\nThe number\nThe number\nThe number\nReturns the configured Osaka <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Osaka …\nCreates a new “pending” tag instance.\nReturns the configured Prague <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Prague …\nWhether the block must be a canonical block\nCreates a new “safe” tag instance.\nTime-based scheduled updates to blob parameters.\nSeal the encodable, by encoding and hashing it.\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nCompute the hash as committed to in the MPT trie. This …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the EIP-2718 type flag.\nReturn the type flag (if any).\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBaseFeeParams contains the config parameters that control …\nBase fee max change denominator as defined in EIP-1559\nElasticity multiplier as defined in EIP-1559\nThe default Ethereum block gas limit: 30M\nThe default Ethereum block gas limit: 30M\nThe default Ethereum block gas limit: 36M\nReturn type of EIP1155 gas fee estimator.\nThe bound divisor of the gas limit, used in update …\nInitial base fee as defined in EIP-1559\nThe minimum tx fee below which the txpool will reject the …\nSame as MIN_PROTOCOL_BASE_FEE but as a U256.\nGet the base fee parameters for Base Sepolia\nGet the base fee parameters for Base Sepolia (post Canyon)\nCalculate the base fee for the next block based on the …\nCalculate the gas limit for the next block based on parent …\nThe elasticity multiplier from EIP-1559\nGet the base fee parameters for Ethereum mainnet\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base_fee_max_change_denominator from EIP-1559\nThe max fee per gas.\nThe max priority fee per gas.\nCreate a new BaseFeeParams\nCalculate the base fee for the next block based on the …\nGet the base fee parameters for Optimism Mainnet\nGet the base fee parameters for Optimism Mainnet (post …\nGet the base fee parameters for Optimism Sepolia\nGet the base fee parameters for Optimism Sepolia (post …\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nA helper struct to store the block number/hash and its …\nEarliest block (genesis)\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFailed to parse a block id as a hex string.\nThe hash\nA block hash and an optional bool that defines if it’s …\nThe hash\nEither a hash <em>or</em> a block number\nThrown when a 0x-prefixed hex string was expected\nLatest block\nThis is a helper type to allow for lenient parsing of …\nBlock numbers should be 0x-prefixed\nA number and a hash.\nThe number\nBlock by number from canonical chain\nA block number\nThe number\nError thrown when parsing a HashOrNumber from a string.\nError thrown when parsing a BlockId from a string.\nError thrown when parsing a BlockNumberOrTag from a string.\nFailed to parse hex value\nFailed to parse hex number\nFailed to parse hex value\nFailed to parse a block id from a number.\nPending block (not yet part of the blockchain)\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nBlock number/hash.\nA block hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash.\nThe hash.\nThe hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>BlockNumberOrTag</code>.\nA module that deserializes either a BlockNumberOrTag, or a …\nCreates a new <code>BlockWithParent</code> instance.\nCreates a new <code>LenientBlockNumberOrTag</code> from a …\nThe number\nThe number\nThe number\nParent hash.\nWhether the block must be a canonical block\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nFollowing the spec the block parameter is either:\nBy block number activation.\nRepresents a forward-compatible ENR entry for including …\nFilter that describes the state of blockchain and can be …\nHow to filter forks.\n<code>CRC32</code> hash of all previous forks starting from genesis …\nA fork identifier as defined by EIP-2124. Serves as the …\nRepresents a transition from one fork to another\nDescribes the current head block.\nLocal node is on an incompatible chain or needs a software …\nRemote node is outdated and needs a software update.\nBy timestamp activation.\nReason for rejecting provided <code>ForkId</code>.\nReturn current fork id\nThe new, active <code>ForkId</code>\nThe difficulty of the head block.\nThe inner forkid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the head block.\nCRC32 checksum of the all fork blocks and timestamps from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the head block is an empty block (i.e., has …\nCreates a new <code>Head</code> instance.\nCreate the filter from provided head, genesis block hash, …\nNext upcoming fork block number or timestamp, 0 if not yet …\nThe number of the head block.\nThe previously active <code>ForkId</code> before the transition\nManually set the current fork id.\nSet the current head.\nThe timestamp of the head block.\nThe total difficulty at the head block.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdates the head block with new information.\nCheck whether the provided <code>ForkId</code> is compatible based on …\nlocally configured forkId\nlocally configured forkId\n<code>ForkId</code> received from remote\n<code>ForkId</code> received from remote\nDecoding trait for EIP-2718 envelopes. These envelopes …\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nTrait for checking if a transaction envelope supports a …\nIdentifier for legacy transaction, however a legacy tx is …\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nA trait that helps to determine the type of the …\nGot an unexpected type flag while decoding.\nGeneric wrapper with encoded Bytes, such as transaction …\nDecode the transaction according to EIP-2718 rules. First …\nDecode a transaction according to EIP-2718, ensuring no …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nGet the encoded bytes\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps the value with the <code>Encodable2718::encoded_2718</code> bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA convenience function that encodes the value in the 2718 …\nReturns ownership of the encoded bytes.\nReturns ownership of the underlying value.\nReturns true if the given type ID corresponds to a …\nMaps the inner value to a new value using the given …\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nWraps the value with the bytes.\nSeal the encodable, by encoding and hashing it.\nSplit the wrapper into <code>Bytes</code> and value tuple\nTransform the value\nreturns <code>None</code> if the inner value is <code>None</code>, otherwise returns …\nCompute the hash as committed to in the MPT trie. This …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the EIP-2718 type flag.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nGet the underlying value\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nAccess list with gas used appended.\nList with accounts accessed during transaction.\nList with accounts accessed during transaction.\nAccount addresses that would be loaded at the start of …\nOptional error message if the transaction failed.\nReturns the argument unchanged.\nEstimated gas used with access list.\nEstimated gas used with access list.\nCalls <code>U::from(self)</code>.\nKeys of storage that would be loaded at the start of …\nEIP-2935: Serve historical block hashes from state\nThe address for the EIP-2935 history storage contract.\nThe code for the EIP-2935 history storage contract.\nThe address for the EIP-4788 beacon roots contract.\nThe code for the EIP-4788 beacon roots contract.\nThe caller to be used when calling the EIP-4788 beacon …\nDetermines the maximum rate of change for blob fee\nMinimum gas price for a data blob\nThe modulus of the BLS group used in the KZG commitment …\nThe modulus of the BLS group used in the KZG commitment …\nHow many bytes are in a blob Same as DATA_GAS_PER_BLOB, …\nHow many bytes are in a commitment\nHow many bytes are in a proof\nA Blob serialized as 0x-prefixed hex string\nBlob type returned in responses to <code>engine_getBlobsV1</code>: …\nBlob type returned in responses to <code>engine_getBlobsV2</code>: …\nThis represents a set of blobs, and its corresponding …\nA single blob sidecar.\nA commitment/proof serialized as 0x-prefixed hex string\nGas consumption of a single data blob.\nHow many field elements are stored in a single data blob.\nSize a single field element in bytes.\nSize a single field element in bytes.\nA heap allocated blob that serializes as 0x-prefixed hex …\nA Blob hash\nError indicating that the blob length is invalid.\nMaximum number of data blobs in a single block.\nMaximum number of data blobs in a single block.\nMaximum data gas for data blobs in a single block.\nMaximum data gas for data blobs in a single block.\nTarget number of data blobs in a single block.\nTarget number of data blobs in a single block.\nTarget data gas for data blobs in a single block.\nTarget data gas for data blobs in a single block.\nNumber of usable bits in a field element. The top two bits …\nThe number of usable bytes in a single data blob. This is …\nCommitment version of a KZG commitment\nIterator that returns versioned hashes from commitments.\nThe blob data.\nThe blob data.\nThe blob in this sidecar item.\nThe blob data.\nBuilder and utils for the EIP-4844 Blob Transaction\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nThe blob commitments.\nHelper function to deserialize boxed blobs.\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new heap blob from an array.\nCreate a new heap blob from <code>Bytes</code>.\nThe hash of the blob\nThe index of the blob\nThe index of this item within the BlobTransactionSidecar.\nGet the inner\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KZG commitment.\nThe KZG proof.\nCalculates the versioned hash for a KzgCommitment of 48 …\nCreates a new iterator over commitments to generate …\nCreate a new heap blob from a byte slice.\nThe KZG proof for the blob.\nThe cell proofs for the blob.\nThe blob proofs.\nGenerate a new heap blob with all bytes set to <code>byte</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nUtilities for working with EIP-4844 field elements and …\nA builder for creating a <code>BlobTransactionSidecar</code>.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nSimple coder that only uses the last 31 bytes of each …\nAllocate enough space for the required number of new field …\nGet a reference to the blobs currently in the builder.\nCode a slice of data into the builder.\nDecode all slices of data from the blobs.\nFinish the sidecar, and commit to the data. This method …\nReturns the argument unchanged.\nIngest a partial FE into the current blobs.\nIngest a field element into the current blobs.\nCalls <code>U::from(self)</code>.\nCheck if the builder is empty.\nCalculate the length of used field elements IN BYTES in …\nCreate a new builder, and push an empty blob to it. This …\nCalculate the number of field elements required to store …\nCreate a new builder, preallocating room for <code>capacity</code> …\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nMultiplier for converting gwei to wei.\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nTarget address for withdrawn ether.\nValue of the withdrawal in gwei.\nMonotonically increasing identifier issued by consensus …\nIndex of validator associated with withdrawal.\nThe EIP-7685 request type for deposit requests.\nThis structure maps onto the deposit object from EIP-6110.\nMainnet deposit contract address.\nThe EIP-6110 Consensus Specs defined maximum payload size.\nAmount of ether deposited in gwei\nReturns the argument unchanged.\nDeposit index\nCalls <code>U::from(self)</code>.\nValidator public key\nDeposit signature\nWithdrawal credentials\nThe EIP-7002 defined maximum withdrawal requests per block.\nThe caller to be used when calling the EIP-7002 withdrawal …\nThe address for the EIP-7002 withdrawal requests contract.\nThe code for the EIP-7002 withdrawal requests contract.\nThe EIP-7685 request type for withdrawal requests.\nRepresents an execution layer triggerable withdrawal …\nAmount of withdrawn ether in gwei.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress of the source of the exit.\nValidator public key.\nThe address for the EIP-7251 consolidation requests …\nThe code for the EIP-7251 consolidation requests contract.\nThe EIP-7685 request type for consolidation requests.\nThis structure maps onto the consolidation request object …\nThe EIP-7251 defined maximum number of consolidation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSource address\nSource public key\nTarget public key\nThe number of bytes in a cell.\nThis represents a set of blobs, and its corresponding …\nThis represents a set of blobs, and its corresponding …\nThe number of cells in an extended blob.\nA commitment/proof serialized as 0x-prefixed hex string\nA helper trait for decoding EIP-7594 sidecars.\nA wrapper version for EIP-7594 sidecar encoding.\nEIP-4844 style blob transaction sidecar.\nEIP-7594 style blob transaction sidecar with cell proofs.\nA helper trait for encoding EIP-7594 sidecars.\nNumber of field elements in a cell.\nNumber of field elements in a Reed-Solomon extended blob.\nMaximum number of blobs per transaction after Fusaka …\nReturns the EIP-4844 sidecar if it is <code>Self::Eip4844</code>.\nReturns the EIP-7594 sidecar if it is <code>Self::Eip7594</code>.\nReturns the blob corresponding to the versioned hash, if …\nReturns the blob corresponding to the versioned hash, if …\nThe blob data.\nList of cell proofs for all blobs in the sidecar, …\nReturns the commitments of the sidecar.\nThe blob commitments.\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDecodes the inner BlobTransactionSidecarEip7594 fields …\nDecode the sidecar according to EIP-7594 rules. First a …\nEncodes the BlobTransactionSidecar fields as RLP bytes, …\nEncodes the inner BlobTransactionSidecarEip7594 fields as …\nEncode the sidecar according to EIP-7594 rules. First a …\nThe length of the 7594 encoded envelope. This is the …\nEncode the sidecar according to [EIP-7594] rules. First a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into EIP-4844 sidecar if it is <code>Self::Eip4844</code>.\nConverts the EIP-7594 sidecar if it is <code>Self::Eip7594</code>.\nReturns true if this is a …\nReturns true if this is a …\nMatches versioned hashes and returns an iterator of …\nConstructs a new BlobTransactionSidecarEip7594 from a set …\nDecodes the BlobTransactionSidecarEip7594 from RLP bytes.\nEncodes the BlobTransactionSidecarEip7594 as RLP bytes.\nCalculates the length of the BlobTransactionSidecarEip7594 …\nCalculates a size heuristic for the in-memory size of the …\nCalculates a size heuristic for the in-memory size of the …\nReturns the index of the versioned hash in the commitments …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nReturns an iterator over the versioned hashes of the …\nThe cost of a non-zero byte in calldata.\nThe multiplier for a non zero byte in calldata.\nThe standard cost of calldata token.\nThe cost floor per token\nRetrieve the total number of tokens in calldata.\nCalculate the transaction cost floor as specified in …\nThe empty requests hash.\nStores a precomputed requests hash, used primarily for …\nA container of EIP-7685 requests.\nStores a list of requests, allowing for dynamic requests …\nA list of requests or a precomputed requests hash.\nReturns an instance with the <code>EMPTY_REQUESTS_HASH</code>.\nExtend this container with requests from another container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the variant is a precomputed hash.\nReturns <code>true</code> if the variant is a list of requests.\nGet an iterator over the requests.\nConstruct a new <code>Requests</code> container.\nAdd a new request into the container.\nAdds a new request with the given request type into the …\nReturns the requests, if any.\nCalculate the requests hash as defined in EIP-7685 for the …\nReturns the requests hash for the enum instance.\nConsumes <code>Requests</code> and returns the inner raw opaque …\nConstruct a new <code>Requests</code> container with the given capacity.\nDetermines the maximum rate of change for blob fee after …\nCL-enforced maximum blobs per block after Pectra hardfork …\nCL-enforced target blobs per block after Pectra hardfork …\nSame as <code>crate::eip4844::calc_blob_gasprice</code> but uses the …\nAn unsigned EIP-7702 authorization.\nEIP-7702 error.\nIndicates a failed recovery attempt where no valid address …\nInvalid signature <code>s</code> value.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nSignature error.\nA signed EIP-7702 authorization.\nIndicates a successfully recovered authority address.\nReturns an optional address if valid.\nThe address of the authorization.\nReturns an optional address based on the current state of …\nThe chain ID of the authorization.\nEIP-7702 constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the inner <code>Authorization</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the authorization into parts.\nRecover the authority and transform the signed …\nReturns true if the authority is invalid.\nReturns true if the authority is valid.\nCreates a new signed authorization from raw signature …\nInstantiate without performing recovery. This should be …\nThe nonce for the authorization.\nReturns the signature <code>r</code> value.\nRecover the authority for the authorization.\nReturns the signature <code>s</code> value.\nGets the <code>signature</code> for the authorization. Returns …\nReturns the inner <code>Authorization</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the signature parity value.\nThe EIP-7702 delegation designator for a cleared …\nThe EIP-7702 delegation designator.\nIdentifier for EIP7702’s set code transaction.\nMagic number used to calculate an EIP7702 authority.\nAn additional gas cost per EIP7702 authorization list item.\nA gas refund for EIP7702 transactions if the authority …\nThe order of the secp256k1 curve, divided by two. …\nConfiguration for the blob-related calculations.\nCalculates the blob fee for block based on its …\nReturns <code>BlobParams</code> configuration activated with Cancun …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax blob count for the block.\nReturns the maximum available blob gas in a block.\nMaximum number of blobs per transaction.\nMinimum gas price for a data blob.\nCalculates the <code>excess_blob_gas</code> value for the next block …\nReturns <code>BlobParams</code> configuration activated with Osaka …\nReturns <code>BlobParams</code> configuration activated with Prague …\nTarget blob count for the block.\nReturns the blob gas target per block.\nUpdate fraction for excess blob gas calculation.\nBlob parameters configuration for a chain, including …\nA scheduled blob parameter update entry.\nBlob parameters for the Cancun hardfork\nBlob parameters for the Prague hardfork\nBlob parameters that take effect at a specific timestamp\nConfiguration for blob-related calculations for the Cancun …\nConfiguration for blob-related calculations for the Osaka …\nConfiguration for blob-related calculations for the Prague …\nTime-based scheduled updates to blob parameters.\nMax seconds from current time allowed for blocks, before …\nThe default block nonce in the beacon consensus\nAn EPOCH is a series of 32 slots (~6.4min).\nAn EPOCH is a series of 32 slots (~6.4min).\nAn EPOCH is a series of 32 slots.\nThe duration of a slot in seconds.\nThe duration of a slot in seconds.\nA JSON ABI item.\nAddress payable.\nA JSON ABI constructor function.\nA JSON ABI <code>Constructor</code>.\nContract.\nRepresents a generic contract’s ABI, bytecode and …\nEnum. Possibly of the form <code>contract.enum</code>.\nA JSON ABI error.\nA JSON ABI <code>Error</code>.\nA JSON ABI event.\nA JSON ABI <code>Event</code>.\nA Solidity Event parameter.\nA JSON ABI fallback function.\nA JSON ABI <code>Fallback</code>.\nA JSON ABI function.\nA JSON ABI <code>Function</code>.\nThe contract internal type. This could be a regular …\nAn iterator over items in an ABI.\nAn iterator over immutable references of items in an ABI.\nThe JSON contract ABI, as specified in the Solidity ABI …\nNonpayable functions promise not to receive Ether.\nOther. Possible of the form <code>contract.other</code>.\nJSON specification of a parameter.\nPayable functions make no promises.\nPure functions promise not to read from or modify the …\nA JSON ABI receive function.\nA JSON ABI <code>Receive</code>.\nA JSON ABI function’s state mutability.\nStruct. Possibly of the form <code>contract.struct</code>.\nConfiguration for <code>JsonAbi::to_sol</code>.\nView functions promise not to modify the state.\nThe contract ABI.\nWhether the event is anonymous. Anonymous events do not …\nFallible conversion to a variant.\nFallible conversion to a variant.\nReturns the string representation of the state mutability …\nFallible conversion to a variant.\nReturns the string representation of the state mutability.\nFallible conversion to a variant.\nThe contract bytecode.\nIf the parameter is a compound type (a struct or tuple), a …\nIf the parameter is a compound type (a struct or tuple), a …\nReturns an immutable reference to the constructor.\nThe constructor function.\nReturns a mutable reference to the constructor.\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the contract if this …\nReturns the debug name of the item.\nDeduplicates all functions, errors, and events which have …\nThe contract deployed bytecode.\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nReturn a <code>TypeSpecifier</code> describing the enum if this type is …\nSets whether to print <code>enum</code>s as user-defined value types …\nReturns an immutable reference to the list of all the …\nReturns a mutable reference to the list of all the errors …\nReturns an iterator over immutable references to the …\nThe errors, indexed by the error name.\nReturns an iterator over mutable references to the errors.\nReturns an immutable reference to the list of all the …\nReturns an immutable reference to the event inputs of the …\nReturns a mutable reference to the event inputs of the …\nReturns a mutable reference to the list of all the events …\nReturns an iterator over immutable references to the …\nThe events, indexed by the event name.\nReturns an iterator over mutable references to the events.\nThe fallback function.\nSets whether to normalize the output for the <code>sol!</code> macro. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\nReturns this function’s full signature including names …\nReturns this event’s full signature …\nReturns an immutable reference to the list of all the …\nReturns the <em>first</em> <code>Function</code> with a matching selector.\nReturns a mutable reference to the list of all the …\nReturns an iterator over immutable references to the …\nThe functions, indexed by the function name.\nReturns an iterator over mutable references to the …\nWhether the parameter is indexed. Indexed parameters have …\nReturns an immutable reference to the inputs of the item.\nThe input types of the constructor. May be empty.\nThe input types of the function. May be empty.\nA list of the event’s inputs, in order.\nA list of the error’s components, in order.\nReturns a mutable reference to the inputs of the item.\nThe internal type of the parameter.\nThe internal type of the parameter.\nThe internal type of the parameter. This type represents …\nThe internal type of the parameter. This type represents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all of the items in the ABI.\nTrue if the instance is a <code>address payable</code> variant.\nTrue if the type is complex (tuple or struct)\nTrue if the type is complex (tuple or struct)\nTrue if the parameter is a contract.\nTrue if the parameter is a contract.\nTrue if the instance is a <code>contract</code> variant.\nReturns true if the ABI contains no items.\nTrue if the parameter is an enum.\nTrue if the parameter is an enum.\nTrue if the instance is a <code>enum</code> variant.\nTrue if the instance is a <code>other</code> variant.\nTrue if the type is simple\nTrue if the type is simple\nTrue if the parameter is a struct.\nTrue if the parameter is a struct.\nTrue if the instance is a <code>struct</code> variant.\nTrue if the parameter is a UDT (user-defined type).\nTrue if the parameter is a UDT (user-defined type).\nReturns an iterator over all of the items in the ABI.\nReturns the JSON type of the item as a string.\nReturns the total number of items (of any type).\nReturns an immutable reference to the name of the item.\nThe name of the parameter. This function always returns …\nThe name of the function.\nThe name of the event.\nThe name of the error.\nReturns a mutable reference to the name of the item.\nCreates an empty ABI object.\nValidate and create new instance of Param.\nValidate and create new instance of EventParam\nCreates a new configuration with default settings.\nComputes the number of this event’s indexed topics.\nIf set to <code>true</code>, any types part of some other …\nReturn a <code>TypeSpecifier</code> describing the other if this type …\nReturns an immutable reference to the outputs of the item.\nThe output types of the function. May be empty.\nReturns an immutable reference to the outputs of the item.\nParse a Human-Readable ABI string into a JSON object.\nParses a state mutability from a string.\nParses a Solidity constructor string: …\nParses a Solidity function signature string: …\nParses a Solidity event signature string: …\nParses a Solidity error signature string: …\nParses a single Human-Readable ABI string into an ABI item.\nParse a parameter from a Solidity parameter string.\nParse an event parameter from a Solidity parameter string.\nParse a string into an instance, taking ownership of data\nSets whether to print constructors. Default: <code>false</code>.\nThe receive function.\nComputes this error’s selector: …\nComputes this event’s selector: …\nComputes this error’s selector: …\nReturns the canonical type of this parameter.\nReturns the canonical type of this parameter.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\nReturns this function’s signature: <code>$name($($inputs),*)</code>.\nReturns this event’s signature: <code>$name($($inputs),*)</code>.\nComputes this error’s signature: <code>$name($($inputs),*)</code>.\nReturns this function’s full signature: …\nReturns the state mutability of the item.\nThe state mutability of the constructor.\nThe state mutability of the fallback function.\nThe state mutability of the receive function.\nThe state mutability of the function.\nReturns a mutable reference to the state mutability of the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the struct if this type …\nFormats this JSON ABI as a Solidity interface.\nFormats this JSON ABI as a Solidity interface into the …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nContract qualifier, if any\nContract qualifier, if any\nContract qualifier, if any\nEnum name\nStruct name\nStruct name\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nNonpayable functions promise not to receive Ether.\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nPayable functions make no promises.\nPure functions promise not to read from or modify the …\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nA JSON ABI function’s state mutability.\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nView functions promise not to modify the state.\nWhether the parameter indexed.\nInner input being wrapped in state\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nThe parameters.\n<code>serde</code> implementation for <code>StateMutability</code> for backwards …\nArray sizes, in innermost-to-outermost order. If the size …\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nUser-provided state\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nThe type of the parameter.\nThe internal types.\nDeserializes a <code>StateMutability</code>, compatible with older JSON …\nSerializes a <code>StateMutability</code> as a single-field struct (…\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA wrapper for <code>AnyRpcBlock</code> that allows for handling unknown …\nA catch-all header type for handling headers on multiple …\nA wrapper for <code>AnyRpcTransaction</code> that allows for handling …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA wallet capable of signing any transaction for the …\nA unifying trait for asynchronous Ethereum signers that …\nA unifying trait for synchronous Ethereum signers that …\nHeader type\nThe network header type.\nThe JSON body of a header response.\nA trait for converting a signer into a <code>NetworkWallet</code>.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nThe wallet type for the network.\nContains the success value\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nTypes for handling unknown network types.\nApply a function to the builder, returning the modified …\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxEip4844Variant</code> variant if the transaction is …\nReturns the <code>TxEip7702</code> variant if the transaction is an …\nReturns the inner Ethereum transaction envelope, if it is …\nReturns the inner transaction <code>TxEnvelope</code> if inner tx type …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nReturns the inner <code>UnknownTxEnvelope</code> if it is an unknown …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nBlob gas used\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nReturn the receipt’s bloom.\nReturn a reference to the receipt’s bloom.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nConverts the transaction type to the given alternative …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nDifficulty\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExcess blob gas\nExtra data\nAdditional fields.\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGas Limit\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nGas Used\nReturn true if the signer contains a credential for the …\nHash of the block\nTransaction hash.\nBlock header\nUtility to implement IntoWallet for signer over the …\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nTransaction type.\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nConverts this header into a <code>Header</code> with default values for …\nConsumes the type and returns the wrapped rpc block.\nConsumes the outer layer for this transaction and returns …\nSplit the transaction into its parts.\nConsumes the type and returns an iterator over the …\nConvert the error into an unbuilt transaction error.\nConvert the signer into a wallet.\nReturns true if this is the ethereum transaction variant\nReturns whether this is a legacy receipt (type 0)\nReturn true if the transaction was successful.\nReturns true if this is the unknown transaction variant\nGet the kind of transaction.\nReturn the receipt logs.\nLogs bloom\nApplies the given closure to the inner transaction type.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMemoization for deserialization.\nMix Hash\nCreate a new signer with the given signer as the default …\nCreate a new <code>AnyRpcBlock</code>.\nCreate a new <code>AnyRpcTransaction</code>.\nGet the nonce for the transaction.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nEIP-4788 parent beacon block root\nHash of the parent\nTrim any conflicting keys and populate any computed fields …\nTransactions receipts root hash\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nThe original request that failed to build.\nEIP-7685 requests hash.\nCalculate the length of the rlp payload of the network …\nSeal the header with a known hash.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nSets the default signer to the given address.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the input data for the transaction, respecting the …\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nInteger the size of this block in bytes.\nThe post-transaction state root (pre Byzantium)\nState root hash\nStatus of the transaction.\nReturns the success status of the receipt’s transaction.\nTakes the nonce out of the transaction, clearing it.\nTimestamp\nAddress of the receiver.\nGet the recipient for the transaction.\nTotal difficulty\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nTransactions root hash\nApply a fallible function to the builder, returning the …\nConverts the transaction to the given alternative that is …\nAttempts to convert the inner RPC <code>Block</code> into a consensus …\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\nAttempts to convert the <code>AnyRpcTransaction</code> into …\nReturns the inner Ethereum transaction envelope, if it is …\nReturns the inner Ethereum transaction envelope, if it is …\nAttempts to convert this header into a <code>Header</code>.\nTries to convert inner transactions into a vector of …\nReturns the inner <code>UnknownTxEnvelope</code>, if it is an unknown …\nApplies the given fallible closure to the inner …\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\nHash of the transaction\nTransaction type.\nThe transaction type.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data, …\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nTakes the nonce out of the transaction, clearing it.\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA wrapper for <code>AnyRpcBlock</code> that allows for handling unknown …\nA catch-all header type for handling headers on multiple …\nA wrapper for <code>AnyRpcTransaction</code> that allows for handling …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas used\nDifficulty\nError types for converting between <code>Any</code> types.\nExcess blob gas\nExtra data\nAdditional fields.\nGas Limit\nGas Used\nHash of the block\nTransaction hash.\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nTransaction type.\nLogs bloom\nMemoization for deserialization.\nMix Hash\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nEIP-4788 parent beacon block root\nHash of the parent\nTransactions receipts root hash\nEIP-7685 requests hash.\nInteger the size of this block in bytes.\nState root hash\nTimestamp\nTotal difficulty\nTransactions root hash\nTransaction type.\nThe transaction type.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nA ConversionError that can capture any error type that …\nReturns a reference to the underlying error value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnyConversionError</code> wrapping the given error …\n<code>ToString::to_string</code>, but without panic on OOM.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nTrait for checking if a transaction envelope supports a …\nIdentifier for legacy transaction, however a legacy tx is …\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nA trait that helps to determine the type of the …\nGot an unexpected type flag while decoding.\nGeneric wrapper with encoded Bytes, such as transaction …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nDecode the default variant.\nReturns true if the given type ID corresponds to a …\nReturns the EIP-2718 type flag.\nDecode the appropriate variant, based on the type flag.\nBlock JSON-RPC response.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nHeader type\nHeader JSON-RPC response.\nReceipt JSON-RPC response.\nTransaction type\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nTransaction JSON-RPC response. Aggregates transaction data …\nSpecial case for uncle response.\nGet the EIP-7702 authorization list for the transaction.\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nEffective gas price.\nAddress of the sender.\nSender of the transaction\nGas used by this transaction alone.\nBlock hash\nBlock header\nGet the max fee per blob gas for the transaction.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the max fee per blob gas  for the transaction.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nAddress of the receiver.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nThe chain id was not set.\nClique private key error\nCould not create the data directory.\nAn error occurred while deserializing a private key.\nThe default max priority fee per gas, used in case the …\nThe number of blocks from the past for which the fee …\nThe threshold for base fee below which we use the default …\nThe default percentile of gas premiums that are fetched …\nThe threshold max change/difference (in %) at which we …\nEncountered a fatal error.\nAn error occurred while parsing a hex string.\nGenesis error\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\nNode init error\nTimeout for waiting for the node to add a peer.\nHow long we will wait for the node to indicate that it is …\nNo keys available this node instance.\nNo stderr was captured from the child process.\nNo stdout was captured from the child process.\nErrors that can occur when working with the node instance.\nThe private key could not be parsed.\nA line could not be read from the node stderr.\nBuilder for launching <code>reth</code>.\nA Reth instance. Will close the instance when dropped.\nSpawn node error\nTimed out waiting for the node to start.\n1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei\nWait error\nReturns the addresses used to instantiate this instance\nAdds an argument to pass to the <code>anvil</code>.\nAdds an argument to pass to <code>geth</code>.\nAdds an argument to pass to <code>reth</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to <code>geth</code>.\nAdds multiple arguments to pass to <code>reth</code>.\nCreates an Anvil builder which will execute <code>anvil</code> at the …\nCreates a Geth builder which will execute <code>geth</code> at the …\nCreates a Reth builder which will execute <code>reth</code> at the …\nReturns the auth port of this instance\nReturns the auth port of this instance.\nSets the auth port for the Reth instance. Note: this …\nSets the port for authenticated RPC connections.\nSets the block-time in seconds which will be used when the …\nSets the block-time which will be used when the <code>geth-cli</code> …\nSets the block time for the Reth instance. Parses strings …\nSets the block-time in sub-seconds which will be used when …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Cancun</code>.\nReturns the chain of the anvil instance\nSets the chain_id the <code>anvil</code> instance will use.\nSets the chain id for the geth instance.\nSets the chain id for the Reth instance.\nReturns a reference to the child process.\nReturns a mutable reference to the child process.\nCalculates the address of the Clique consensus address.\nReturns the private key used to configure clique on this …\nReturns the path to this instances’ data directory\nSets the data directory for geth.\nReturns the path to this instances’ data directory.\nSets the data directory for reth.\nPuts the <code>geth</code> instance in <code>dev</code> mode.\nEnable <code>dev</code> mode for the Reth instance.\nDisable discovery for the geth instance.\nDisables discovery for the Reth instance.\nEnable IPC for the geth instance.\nEnable IPC for the Reth instance.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance.\nReturns the HTTP endpoint url of this instance\nReturns the HTTP endpoint url of this instance\nReturns the HTTP endpoint url of this instance.\nAdds an environment variable to pass to the <code>anvil</code>.\nAdds multiple environment variables to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>geth</code>.\nConvenience function that returns the first key.\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the geth instance.\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the Reth instance.\nSelect the <code>EthereumHardfork</code> to start anvil with.\nReturns the HTTP port of this instance.\nSets the HTTP port for the Reth instance. Note: this …\nAllow geth to unlock accounts when rpc apis are open.\nReturns the instance number of this instance.\nSets the instance number for the Reth instance. Set to 0 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPC endpoint of this instance\nReturns the IPC endpoint of this instance.\nReturns the IPC path\nSets the path for the ipc server\nSets the IPC path for the socket.\nSets the IPC path for the socket.\nReturns whether the node is launched in Clique consensus …\nKeep the handle to geth’s stderr in order to read from …\nKeep the handle to anvil’s stdout in order to read from …\nKeep the handle to reth’s stdout in order to read from …\nReturns the private keys used to instantiate this instance\nSets the mnemonic which will be used when the <code>anvil</code> …\nCreates an empty Anvil builder. The default port and the …\nCreates an empty Geth builder.\nCreates an empty Reth builder.\nBindings for various nodes.\nReturns the private key for the given index.\nInstantiate <code>anvil</code> with the <code>--odyssey</code> flag.\nReturns the p2p port of this instance\nSets the port which will be used for incoming p2p …\nReturns the p2p port of this instance. If discovery is …\nSets the p2p port for the Reth instance. Note: this resets …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Paris</code>.\nSets the <code>path</code> to the <code>anvil</code> cli\nSets the <code>path</code> to the <code>geth</code> executable\nSets the <code>path</code> to the <code>reth</code> executable\nReturns the port of this instance\nSets the port which will be used when the <code>anvil</code> instance …\nReturns the port of this instance\nSets the port which will be used when the <code>geth-cli</code> …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Prague</code>.\nAdds an argument to pass to the <code>anvil</code>.\nAdds an argument to pass to the <code>geth</code>.")