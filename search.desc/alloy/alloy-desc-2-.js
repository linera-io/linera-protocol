searchState.loadedDescShard("alloy", 2, "A block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nHelper type to represent a bloom filter used for matching …\nSupports both ‘input’ and ‘data’ fields\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nOnly supports ‘data’ field\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEmpty result.\nUser Operation\nPacked User Operation\nCallResponse for eth_callMany\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents errors that can occur when setting block …\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nIterator that yields logs from receipts that match a …\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nError indicating that the <code>from_block</code> is greater than the …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nThe hash\nA block hash and an optional bool that defines if it’s …\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nRPC representation of block header, wrapping a consensus …\nA hex encoded or decimal index that’s intended to be …\nTransaction index\nInfo when syncing\nOnly supports ‘input’ field\nA transaction failed sender recovery\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nNot syncing\nNumeric id\nThe number\nBlock by number from canonical chain\nA block number\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nA raw block failed to decode\nA block hash which may have a boolean <code>requireCanonical</code> …\nRepresents the <code>rpc_modules</code> response, which returns the …\nSafe head block\nSend User Operation\nResponse to sending a user operation.\nThe detail of the sync stages.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC.\nRepresents a transaction index where -1 means all …\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nRepresents how a <code>TransactionRequest</code> handles input/data …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nA single value\nUnion type for representing a single value or a vector of …\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nThe result of an <code>eth_getWork</code> request\nReturns the EIP-2930 <code>access_list</code> for the particular …\nSets the access list for the transaction.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nThe account proof.\nNumber of active peers\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nAdds an address to the access list and returns <code>true</code> if the …\nGet the <code>address</code> for the authorization.\nSets the address to query with this filter.\nGetter for the address field. Shortcut for …\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nA filter set for matching contract addresses in log …\nContract that emitted this log.\nCreate the <code>BloomFilter</code> for the addresses.\nReturns the BloomFilter for the given address\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nAdds a block hash override for a specific block number\nAppends logs matching the filter from a block’s receipts.\nApply a function to the block, returning the modified …\nGet the array if present.\nReturns the block hash if this is a block hash filter.\nFallibly cast to a slice of hashes.\nGet the hashes if present.\nGet the logs if present.\nReturns the range (<code>from_block</code>, <code>to_block</code>) if this is a …\nReturns a <code>Recovered&lt;&amp;T&gt;</code> with the transaction and the …\nFallibly cast to a slice of transactions.\nGet the transactions if present.\nGet the value if present.\nPins the block hash for the filter\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorization list for EIP-7702 transactions.\nAccount balance\nThe account balance.\nThe account’s balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nReturns the number of blobs of this transaction.\nReturns the number of blobs of this transaction.\nReturns the blob fee for <em>this</em> block according to the …\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nIndicates the progress of the sync stage.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nReturns a list of Bloom (BloomFilter) corresponding to the …\nGet a reference to the BloomFilter.\nCreates a new instance with the given input data and sets …\nBuild an EIP-1559 transaction.\nBuild an EIP-2930 transaction.\nBuild an EIP-4844 transaction variant - either with or …\nBuild an EIP-4844 transaction with sidecar.\nBuild an EIP-4844 transaction without sidecar.\nBuild an EIP-7702 transaction.\nBuild a <code>TypedTransaction</code>.\nBuild a legacy transaction.\nBuilds a signed typed transaction envelope for the …\nBuild a <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculates the address that will be created by the …\nCalculate the transaction root for the full transactions.\nCalculate the transaction root for the full transactions …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nCapabilities\nGet <code>chain_id</code>.\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nAccount code\nReturns the code hash of the account.\nThe hash of the code of the account.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nCreates a collection of RPC logs from transaction receipt …\nThe blob commitments.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a 7702 …\nCheck if all necessary keys are present to build a legacy …\nNumber of connected peers\nCheck if the filter contains the given value\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nContract address created, or None if not a deployment.\nConverts the transaction type to the given alternative …\nConverts <code>self</code> into <code>Hashes</code>.\nConverts <code>self</code> into <code>Hashes</code> if the given <code>condition</code> is true.\nConverts the block’s transaction type to the given …\nGas used\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nTransaction data\nAttempts to decode the logs to the provided log type.\nDeserializes a boolean value into …\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nReturns the effective tip for this transaction.\nCreates a new empty block (without transactions).\nEnsures the result is OK, returning <code>AccessListWithGasUsed</code> …\nReturns the value if present, otherwise returns the error.\nEnsure block range validity\nThe entry point address for the user operation.\nOptional error message if the transaction failed.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nExtends the topic with a value that can be converted into …\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nReturns the configured fee cap, if any.\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nCreates an iterator that filters receipts for matching …\nReturns <code>true</code> if the log matches the given topics\nBlock no this transaction was first seen.\nReturns the first transaction if the transactions are full.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>tx_request</code>s into a <code>Bundle</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSets the from block number\nConstructs block from a consensus block and …\nCreate a new <code>Header</code> from a sealed consensus header and …\nInitializes the <code>TransactionRequest</code> with the provided …\nCreate a new <code>Header</code> from a sealed consensus header.\nInitializes the <code>TransactionRequest</code> with the provided …\nConverts a consensus <code>tx</code> with an additional context <code>tx_info</code> …\nInitializes the <code>TransactionRequest</code> with the provided …\nReturns the first 4bytes of the calldata for a function …\nReturns the first 4bytes of the calldata for a function …\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nSets the gas limit for the transaction.\nOverrides the gas limit of the block.\nGet <code>gas_price</code>.\nSets the gas price for the transaction.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>to_block</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns the <code>from_block</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if <em>any</em> of the EIP-1559 fee fields are set:\nReturns true if <em>any</em> of the EIP-4844 fields are set:\nReturns <code>true</code> if at least one topic is set\nReturns the block’s hash as received from rpc.\nThe hash.\nThe hash.\nHash of the block\nHash of the transaction.\nReturns an iterator over references to the transaction …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nPublic node id\nReturns the index if this is the index variant\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nReturns the <code>TransactionInfo</code> for this transaction.\nCode used to deploy the account if not yet on-chain\nThe receipt envelope.\nInner consensus header.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nInsert a value into the filter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this block into a <code>BlockBody</code>\nConsumes the block and returns the ethereum …\nConsumes the type and returns the wrapped consensus header.\nConsumes the block and returns the <code>alloy_consensus::Block</code> …\nConsumes the type, strips away the rpc context from the …\nSame as <code>Self::into_consensus</code> but returns the block as …\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConverts <code>self</code> into <code>Hashes</code> if the given <code>condition</code> is true.\nConsumes the block and only returns the rpc header.\nConvert Self into raw vec of withdrawals.\nConsumes the type and returns the wrapped …\nConsumes the type and returns the wrapped receipt.\nConsumes the type and returns the wrapped transaction.\nConsumes the type and returns the optional input data.\nConsumes self and returns the inner hashmap mapping module …\nConverts the transaction receipt’s <code>ReceiptEnvelope</code> with …\nConsumes the type and returns a <code>Recovered</code> transaction with …\nConverts Transaction into TransactionRequest.\nConsumes the type and returns the <code>Sealed</code> header.\nConsumes the type and returns the sealed …\nConvert to a signed authorization by adding a signature.\nConsumes the transaction and returns it as <code>Signed</code> with …\nConsumes the transaction and returns it a <code>Recovered</code> signed …\nReturns an iterator over the transactions (if any). This …\nConsumes the type and returns the transactions as a vector.\nConsumes the type and returns the transactions as a vector.\nReturns true if this is the all variant\nCheck if the enum is an array.\nReturns true if this is a block hash filter.\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nWhether the block has no transactions.\nReturns if an account is empty.\nAfter <code>SpuriousDragon</code> empty account is defined as account …\nReturns true if all fields are None, false if any field is …\nReturns whether the filter is empty\nCheck if the filter changes are empty.\nReturns true if the code hash is the Keccak256 hash of the …\nChecks if there is an error in the result.\nReturns true if the enum variant is used for full …\nReturns true if this is <code>BlockTransactionsKind::Full</code>\nCheck if the enum variant is used for hashes.\nReturns true if this is <code>BlockTransactionsKind::Hashes</code>\nCheck if the filter changes contain hashes.\nReturns true if this is the index variant\nReturns true if the transaction is a legacy or 2930 …\nCheck if the filter changes contain logs.\nReturns true if this is a range filter and has a from block\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns true if this is a range filter.\nCheck if the filter changes contain transactions.\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nCheck if the enum is a single value.\nReturns an iterator over the transaction hashes.\nGet an iterator over the Withdrawals.\nReturns an iterator over the underlying HashSet. Values …\nGet a mutable iterator over the Withdrawals.\nStorage key.\nReturns the transaction kind.\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nReturns the number of values in the filter\nLocal endpoint address\nDecode the log data into a typed log.\nDecode the log data with validation into a typed log.\nLog Index in Block\nGet the receipt logs.\nLog send from contracts.\nThe logs generated by the user operation.\nCalculate receipt logs bloom.\nThe bloom filter.\nConverts the transaction type by applying a function to …\nApplies the given closure to the inner header.\nApplies the given closure to the inner transaction type.\nConverts the block’s header type by applying a function …\nMaps the inner receipt value of this receipt.\nConverts the receipt’s log type by applying a function …\nConverts the block’s transaction type by applying a …\nReturns whether the given value matches the filter. If the …\nCheck if a <code>Log</code> matches the filter. This will check topics …\nReturns whether the given bloom matches the list of Blooms …\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the filter matches the given block. Checks …\nReturns <code>true</code> if the filter matches the given block hash.\nReturns <code>true</code> if the block matches the filter.\nCheck whether the provided bloom contains all topics and …\nReturns <code>true</code> if either of the following is true:\nCheck if a parsed <code>Log&lt;T&gt;</code> matches the filter. This will …\nReturns <code>true</code> if the filter matches the given topics.\nReturns <code>true</code> if the bloom matches the topics\nReturns matching logs from a block’s receipts grouped by …\nMax number of peers\nMax fee per blob gas for EIP-4844 transaction.\nSets the maximum fee per blob gas for the transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nFor dynamic fee transactions returns the maximum fee per …\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nMaximum fee per gas\nThe maximum fee per gas.\nFor dynamic fee transactions returns the Priority fee the …\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nCreates a new instance with the given input data and sets …\nCreates a new instance with the given input data.\nAccount meta JSON\nReturns the minimal transaction type this request can be …\nCheck if all necessary keys are present to build a …\nAccount name\nThe name of the sync stage.\nNode client ID\nNetwork information\nCreate a new instance of <code>RPCModules</code>\nCreate a new <code>EIP1186StorageProof</code> instance.\nCreates a new <code>Block</code> with the given header and transactions.\nCreate a new <code>Header</code> from a consensus header.\nCreate a new Withdrawals instance.\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new instance with the given input data.\nCreates a new <code>BlockTransactions::Hashes</code> variant from the …\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nGet <code>nonce</code>.\nGet the <code>nonce</code> for the authorization.\nSets the nonce for the transaction.\nThe nonce for the authorization.\nAccount nonce\nThe account nonce.\nThe account’s nonce.\nThe nonce of the transaction.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nEnsures that if either <code>data</code> or <code>input</code> is set, the <code>data</code> …\nEnsures that if either <code>data</code> or <code>input</code> is set, the <code>data</code> …\nEnsures that if either <code>input</code> or <code>data</code> is set, the <code>input</code> …\nEnsures that if either <code>input</code> or <code>data</code> is set, the <code>input</code> …\nConsumes the type and returns it with <code>Self::normalize_data</code> …\nConsumes the type and returns it with <code>Self::normalize_data</code> …\nConsumes the type and returns it with <code>Self::normalize_input</code>…\nConsumes the type and returns it with <code>Self::normalize_input</code>…\nReturns the block’s number.\nThe number\nThe number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nDetailed information on peers\nPIP protocol information.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nThe proof-of-work hash.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nCheck this builder’s preferred type, based on the fields …\nReturn the max priority fee per gas if the transaction is …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nProtocols information\npublic key of the recovered account\nOverrides the prevrandao of the block.\nThe reason for failure, if any.\nThe receipt.\nThe transaction receipt of the user operation.\nRemote endpoint address\nRemove a value from the filter (if present)\nGeth Compatibility Field: whether this log was removed\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nCheck if a <code>crate::Log</code> matches the filter. This will check …\nCheck if a parsed rpc log <code>crate::Log&lt;T&gt;</code> matches the …\nReturns a sealed reference of the header: <code>Sealed&lt;&amp;Header&gt;</code>\nThe seed hash.\nSets the inner filter object\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nIf only one field is set, this also sets the other field …\nIf only one field is set, this also sets the other field …\nBlob sidecar for EIP-4844 transactions.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculate a heuristic for the in-memory size of the …\nInteger the size of this block in bytes.\nThe details of the sync stages as an hashmap where the key …\nStarting block\nReturns the status of the transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nReturns the total number of storage keys in this access …\nThe storage proof.\nThe hash of the storage account data.\nIndicates whether the user operation was successful.\nThe target.\nOverrides the timestamp of the block.\nSets the recipient address for the transaction.\nGet the transaction’s address of the contract that will …\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nSets the to block number\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nGetter for the topic0 field.\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nCreate a <code>BloomFilter</code> for each topic filter.\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nCalculate the total size, including capacity, of the …\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTrim field conflicts, based on the preferred type\nConverts the transaction to the given alternative that is …\nConverts the block’s header type to the given …\nConverts the block’s transaction to the given …\nConverts this block into a <code>BlockBody</code>.\nAttempts to unwrap the <code>Self::Full</code> variant.\nTries to convert inner transactions into a vector of full …\nConsumes the type and returns the optional input data.\nConverts the transaction type by applying a fallible …\nApplies the given fallible closure to the inner header.\nApplies the given fallible closure to the inner …\nConverts the block’s header type by applying a fallible …\nConverts the block’s transaction type by applying a …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns an iterator over the transactions (if any). This …\nThe transaction type.\nReturns an instance of BlockTransactions with the Uncle …\nConstructs an “uncle block” from the provided header.\nUncles’ hashes.\nReturns the optional input data.\nThe hash of the user operation.\nThe hash of the user operation.\nAccount UUID (<code>None</code> for address book entries)\nIndex of validator associated with withdrawal.\nGet <code>value</code>.\nSets the value (amount) for the transaction.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nSets the base fee override\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nPins the block hash this filter should target.\nAdds multiple block hash overrides from an iterator\nConsumes the type and returns it with <code>Self::set_both</code> …\nSets the coinbase (fee recipient) override\nSets the difficulty override\nSets the block number this range filter should start at.\nSets the gas limit override\nConsumes the type and returns it with …\nSets the block number override\nSets the randomness (prevRandao) override\nSet the size of the block.\nSets the timestamp override\nSets the block number this range filter should end at.\nSet the total difficulty of the block.\nSets the transactions for the block.\nSets the uncles for the block.\nSets the withdrawals for the block.\nWithdrawals in the block.\nThe starting block number, which is greater than <code>to</code>.\nThe ending block number, which is less than <code>from</code>.\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nRepresents an TrieAccount in the account trie.\nAccount information.\n-1 means all transactions\nReceipt envelope, as defined in EIP-2718.\nA vector of values\nThe hash of the block if the filter only targets a single …\nAn unsigned EIP-7702 authorization.\nBad block representation.\nThis represents a set of blobs, and its corresponding …\nBlock representation for RPC.\nError that can occur when converting other types to blocks\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nHelper type to represent a bloom filter used for matching …\nSupports both ‘input’ and ‘data’ fields\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nOnly supports ‘data’ field\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEmpty result.\nUser Operation\nPacked User Operation\nCallResponse for eth_callMany\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents errors that can occur when setting block …\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nIterator that yields logs from receipts that match a …\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nError indicating that the <code>from_block</code> is greater than the …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nThe hash\nA block hash and an optional bool that defines if it’s …\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nRPC representation of block header, wrapping a consensus …\nA hex encoded or decimal index that’s intended to be …\nTransaction index\nInfo when syncing\nOnly supports ‘input’ field\nA transaction failed sender recovery\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nNot syncing\nNumeric id\nThe number\nBlock by number from canonical chain\nA block number\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nA raw block failed to decode\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nSend User Operation\nResponse to sending a user operation.\nThe detail of the sync stages.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC.\nRepresents a transaction index where -1 means all …\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nRepresents how a <code>TransactionRequest</code> handles input/data …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nA single value\nUnion type for representing a single value or a vector of …\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nThe result of an <code>eth_getWork</code> request\nReturns the EIP-2930 <code>access_list</code> for the particular …\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nThe account proof.\nNumber of active peers\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nA filter set for matching contract addresses in log …\nContract that emitted this log.\nValue of the withdrawal in gwei.\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorization list for EIP-7702 transactions.\nAccount balance\nThe account balance.\nThe account’s balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nReturns the number of blobs of this transaction.\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nIndicates the progress of the sync stage.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nCapabilities\nGet <code>chain_id</code>.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nAccount code\nThe hash of the code of the account.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nNumber of connected peers\nContract address created, or None if not a deployment.\nGas used\nCurrent block\nArbitrary length data.\nTransaction data\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nThe entry point address for the user operation.\nThis module provides implementations for EIP-4337.\nCommonly used errors for the <code>eth_</code> namespace.\nOptional error message if the transaction failed.\neth_call output (if error)\nEthereum protocol information\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nThe original filter, if any\nBlock no this transaction was first seen.\nAddress of the sender\nThe address of the transaction author.\nReturns the first 4bytes of the calldata for a function …\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nOverrides the gas limit of the block.\nGet <code>gas_price</code>.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nThe hash.\nThe hash.\nHash of the block\nHash of the transaction.\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nCode used to deploy the account if not yet on-chain\nThe receipt envelope.\nInner consensus header.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nTransaction data.\nTransaction data\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nIf the signature contains chain replay protection, And the …\nStorage key.\nReturns the transaction kind.\nLocal endpoint address\nLog Index in Block\nLog send from contracts.\nThe logs generated by the user operation.\nCalculate receipt logs bloom.\nThe bloom filter.\nMax number of peers\nMax fee per blob gas for EIP-4844 transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nFor dynamic fee transactions returns the maximum fee per …\nThe max base fee per gas the sender is willing to pay.\nMaximum fee per gas\nThe maximum fee per gas.\nFor dynamic fee transactions returns the Priority fee the …\nThe max priority fee per gas the sender is willing to pay, …\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nAccount meta JSON\nAccount name\nThe name of the sync stage.\nNode client ID\nNetwork information\nGet <code>nonce</code>.\nThe nonce for the authorization.\nAccount nonce\nThe account nonce.\nThe account’s nonce.\nThe nonce of the transaction.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nThe number\nThe number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nDetailed information on peers\nPIP protocol information.\nThe proof-of-work hash.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nReturn the max priority fee per gas if the transaction is …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nOverrides the prevrandao of the block.\nThe reason for failure, if any.\nThe receipt.\nThe transaction receipt of the user operation.\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nWhether the block must be a canonical block\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nThe seed hash.\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nBlob sidecar for EIP-4844 transactions.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\n‘eth_simulateV1’ Request / Response types: …\nInteger the size of this block in bytes.\nThe details of the sync stages as an hashmap where the key …\nStarting block\nbindings for state overrides in eth_call\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe hash of the storage account data.\nIndicates whether the user operation was successful.\nThe target.\nOverrides the timestamp of the block.\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nThe transaction type.\nUncles’ hashes.\nThe hash of the user operation.\nThe hash of the user operation.\nAccount UUID (<code>None</code> for address book entries)\nIndex of validator associated with withdrawal.\nGet <code>value</code>.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nWithdrawals in the block.\nThe starting block number, which is greater than <code>to</code>.\nThe ending block number, which is less than <code>from</code>.\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents the expected state of an account for a …\nAlias for backwards compat\nUser Operation\nPacked User Operation\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nExpected storage root hash of the account.\nSend User Operation\nResponse to sending a user operation.\nExplicit storage slots and their expected values.\nOptions for conditional raw transaction submissions.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nReturns the slot values if the account storage is a slot …\nThe maximal block number at which the transaction can be …\nThe maximal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nComputes the aggregate cost of the preconditions; total …\nThe entry point address for the user operation.\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if any configured block parameter (…\nReturns true if the configured max block number is lower …\nReturns true if the configured max timestamp is lower or …\nCode used to deploy the account if not yet on-chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the account storage is a root hash.\nA map of account addresses to their expected storage …\nA map of account addresses to their expected storage …\nThe logs generated by the user operation.\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given …\nMaximum fee per gas\nThe maximum fee per gas.\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nThe reason for failure, if any.\nThe transaction receipt of the user operation.\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\nIndicates whether the user operation was successful.\nThe maximal timestamp at which the transaction can be …\nThe maximal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe hash of the user operation.\nThe hash of the user operation.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when historical data is not available. …\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nThe maximum number of blocks that can be simulated in a …\nRepresents a batch of calls to be simulated sequentially …\nCaptures the outcome of a transaction simulation. It …\nThe error response returned by the <code>eth_simulateV1</code> method.\nSimulation options for executing multiple blocks and …\nRepresents the result of simulating a block.\nReturns the block’s block number override if it exists.\nModifications to the default block characteristics.\nArray of block state calls to be executed at specific, …\nAdds a call to the block.\nA vector of transactions to be simulated.\nA vector of results for each call in the block.\nCode error -3200: Execution reverted -32015: VM execution …\nError in case the call failed\nAdds a block to the simulation payload.\nAdds multiple blocks to the simulation payload.\nAdds multiple calls to the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe amount of gas used by the transaction.\nThe simulated block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs generated during the execution of the transaction.\nMessage error\nThe raw bytes returned by the transaction.\nFlag to decide if full transactions should be returned …\nState modifications to apply before executing the …\nThe final status of the transaction, typically indicating …\nFlag to determine whether to trace ERC20/ERC721 token …\nFlag to enable or disable validation of the transaction …\nEnables block overrides\nEnables returning full transactions.\nEnables state overrides\nEnables tracing of token transfers.\nEnables validation of the transaction sequence.\nCustom account override used in call\nHelper type that bundles various overrides for EVM …\nA set of account overrides\nA builder type for <code>StateOverride</code>.\nAdds an account override for a specific address.\nHelper <code>append</code> function that appends an optional override.\nApply a function to the builder, returning the modified …\nFake balance to set for the account before executing the …\nCreates a new instance with the given block overrides.\nApplies overrides to the block before execution.\nGet the underlying <code>StateOverride</code>.\nFake EVM bytecode to inject into the account before …\nAdds multiple account overrides from an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the overrides contain block overrides.\nReturns <code>true</code> if the overrides contain state overrides.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves addresses precompile into the specified address. …\nCreate a new StateOverridesBuilder.\nCreates a new instance with the given overrides\nFake nonce to set for the account before executing the …\nSets the balance override in place.\nSets the bytecode override in place.\nSets the move precompile address in place.\nSets the nonce override in place.\nSets the state overrides in place.\nSets the state diffs in place.\nCreates a new instance with the given state overrides.\nFake key-value mapping to override all slots in the …\nApplies overrides to the state before execution.\nFake key-value mapping to override individual slots in the …\nConfigures an account override with a balance.\nConfigures the balance override\nConditionally sets the balance override and returns self.\nAdds block overrides to an existing instance.\nCreates a new <code>StateOverridesBuilder</code> with the given …\nConfigures an account override with bytecode.\nConfigures the bytecode override\nConditionally sets the bytecode override and returns self.\nConditionally sets the move precompile address and returns …\nConfigures an account override with a nonce.\nConfigures the nonce override\nConditionally sets the nonce override and returns self.\nConfigures an account override with state overrides.\nConfigures the state overrides\nAdds state overrides to an existing instance.\nConfigures an account override with state diffs.\nConfigures the state diffs\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nReceipt envelope, as defined in EIP-2718.\nAn unsigned EIP-7702 authorization.\nThis represents a set of blobs, and its corresponding …\nSupports both ‘input’ and ‘data’ fields\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nOnly supports ‘data’ field\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nOnly supports ‘input’ field\nReceipt envelope with no type flag.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nTransaction object used in RPC.\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nRepresents how a <code>TransactionRequest</code> handles input/data …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nReturns the EIP-2930 <code>access_list</code> for the particular …\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorization list for EIP-7702 transactions.\nBase fee of the block.\nReturns the number of blobs of this transaction.\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nGet <code>chain_id</code>.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nOptional error message if the transaction failed.\nAddress of the sender\nThe address of the transaction author.\nReturns the first 4bytes of the calldata for a function …\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nGet <code>gas_price</code>.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nIndex of the transaction in the block\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nTransaction data.\nTransaction data\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nReturns the transaction kind.\nLog send from contracts.\nThe bloom filter.\nMax fee per blob gas for EIP-4844 transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nFor dynamic fee transactions returns the maximum fee per …\nThe max base fee per gas the sender is willing to pay.\nFor dynamic fee transactions returns the Priority fee the …\nThe max priority fee per gas the sender is willing to pay, …\nGet <code>nonce</code>.\nThe nonce for the authorization.\nThe nonce of the transaction.\nReturn the max priority fee per gas if the transaction is …\nThe blob proofs.\nThe receipt.\nAlloy basic Transaction Request type.\nBlob sidecar for EIP-4844 transactions.\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe transaction type.\nGet <code>value</code>.\nThe value transferred in the transaction, in wei.\nSupports both ‘input’ and ‘data’ fields\nError thrown when a transaction request cannot be built …\nOnly supports ‘data’ field\nOnly supports ‘input’ field\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents how a <code>TransactionRequest</code> handles input/data …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nAuthorization list for EIP-7702 transactions.\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nError message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\n<code>ToString::to_string</code>, but without panic on OOM.\nTransaction request that failed to build into a …\nThe value transferred in the transaction, in wei.\nA full 32-byte key (tried first during deserialization)\nA storage key type that can be serialized to and from a …\nA number (fallback if B256 deserialization fails)\nGeneric type for capturing additional fields when …\nAn extension to a struct that allows to capture additional …\nDeserializes an optional TTD value from JSON number or …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nSerde functions for (de)serializing using FromStr and …\nThe inner struct.\nFor use with serde’s <code>deserialize_with</code> on a sequence that …\nAll fields not present in the inner struct.\nSerde functions for encoding primitive numbers using the …\nFor use with serde’s <code>deserialize_with</code> on a field that …\nSerializes an optional TTD as a JSON number.\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nSerde functions for encoding the TTD using a Geth …\nDeserialize a quoted string to a type <code>T</code> using FromStr.\nSerialize a type <code>T</code> that implements fmt::Display as a …\nSerde functions for encoding a <code>BTreeMap</code> of primitive …\nDeserializes a primitive number from a “quantity” hex …\nSerde functions for encoding a <code>HashMap</code> of primitive …\nSerde functions for encoding optional primitive numbers …\nSerializes a primitive number as a “quantity” hex …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nSerde functions for encoding a list of primitive numbers …\nDeserializes a <code>BTreeMap</code> of primitive numbers from a “…\nSerializes a <code>BTreeMap</code> of primitive numbers as a “quantity…\nDeserializes a <code>HashMap</code> of primitive numbers from a “…\nSerializes a <code>HashMap</code> of primitive numbers as a “quantity…\nDeserializes an optional primitive number from a “…\nSerializes an optional primitive number as a “quantity”…\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes a vector of primitive numbers from a “…\nSerializes a vector of primitive numbers as a “quantity…\nA full 32-byte key (tried first during deserialization)\nA storage key type that can be serialized to and from a …\nA number (fallback if B256 deserialization fails)\nDeserializes the input into a storage map, using …\nConverts a Bytes value into a B256, accepting inputs that …\nDeserializes an optional TTD value from JSON number or …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nSerializes an optional TTD as a JSON number.\nA full 32-byte key (tried first during deserialization)\nA storage key type that can be serialized to and from a …\nA number (fallback if B256 deserialization fails)\nGeneric type for capturing additional fields when …\nAn extension to a struct that allows to capture additional …\nGet the EIP-2930 access list for the transaction.\nReturns the key as a <code>B256</code> value.\nDeserializes an optional TTD value from JSON number or …\nDeserialized this type into another container type.\nDeserialized this type into another container type.\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nSerde functions for (de)serializing using FromStr and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nReturns the wrapped value.\nThe inner struct.\nInserts a given value as serialized <code>serde_json::Value</code> into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the wrapped value.\nCreates a new <code>OtherFields</code> instance.\nCreates a new <code>WithOtherFields</code> instance.\nFor use with serde’s <code>deserialize_with</code> on a sequence that …\nAll fields not present in the inner struct.\nSerde functions for encoding primitive numbers using the …\nFor use with serde’s <code>deserialize_with</code> on a field that …\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nSerializes an optional TTD as a JSON number.\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nSets the EIP-2930 access list.\nStorage related helpers.\nReturns the deserialized value of the field.\n<code>ToString::to_string</code>, but without panic on OOM.\nSerde functions for encoding the TTD using a Geth …\nInserts a given value as serialized <code>serde_json::Value</code> into …\nDeserialize a quoted string to a type <code>T</code> using FromStr.\nSerialize a type <code>T</code> that implements fmt::Display as a …\nSerde functions for encoding a <code>BTreeMap</code> of primitive …\nDeserializes a primitive number from a “quantity” hex …\nSerde functions for encoding a <code>HashMap</code> of primitive …\nSerde functions for encoding optional primitive numbers …\nSerializes a primitive number as a “quantity” hex …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nSerde functions for encoding a list of primitive numbers …\nDeserializes a <code>BTreeMap</code> of primitive numbers from a “…\nSerializes a <code>BTreeMap</code> of primitive numbers as a “quantity…\nDeserializes a <code>HashMap</code> of primitive numbers from a “…\nSerializes a <code>HashMap</code> of primitive numbers as a “quantity…\nDeserializes an optional primitive number from a “…\nSerializes an optional primitive number as a “quantity”…\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes a vector of primitive numbers from a “…\nSerializes a vector of primitive numbers as a “quantity…\nA full 32-byte key (tried first during deserialization)\nA storage key type that can be serialized to and from a …\nA number (fallback if B256 deserialization fails)\nDeserializes the input into a storage map, using …\nConverts a Bytes value into a B256, accepting inputs that …\nDeserializes an optional TTD value from JSON number or …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nSerializes an optional TTD as a JSON number.\n<code>ecdsa</code> error.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nContains the error value\nGeneric error type for <code>Signer</code> implementations.\n<code>hex</code> error.\nA value of type <code>L</code>.\nContains the success value\nGeneric error.\nResult type alias for <code>Error</code>.\nA value of type <code>R</code>.\n<code>sign_hash</code> is not supported by the signer.\n<code>sign_message</code> is not supported by the signer.\n<code>sign_transaction</code> is not supported by the signer.\n<code>sign_typed_data</code> is not supported by the signer.\nAn Ethereum ECDSA signature.\nSignature error.\nAsynchronous Ethereum signer.\nSynchronous Ethereum signer.\nMismatch between provided transaction chain ID and signer …\nThis operation is not supported by the signer.\nAn unsupported signer operation.\nReturns the signer’s Ethereum Address.\nReturns the byte-array representation of this signature.\nReturns the ERC-2098 compact representation of this …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns the string representation of the operation.\nReturns the signer’s chain ID.\nReturns the signer’s chain ID.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nDecode an RLP-encoded VRS signature. Accepts <code>decode_parity</code> …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a signature from a byte slice, with a v value\nDecode the signature from the ERC-2098 compact …\nParses a 65-byte long raw signature.\nParses a 65-byte long raw signature.\nCreates a <code>Signature</code> from the serialized <code>r</code> and <code>s</code> scalar …\nInstantiate from a signature and recovery id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nReturns the inner ECDSA signature.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nReturns <code>true</code> if the error is <code>UnsupportedOperation</code>.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nConstructs a new <code>Other</code> with an error message.\nInstantiate a new signature from <code>r</code>, <code>s</code>, and <code>v</code> values.\nNormalizes the signature into “low S” form as …\nNormalizes the signature into “low S” form as …\nConstructs a new <code>Other</code> error.\nReturns the <code>r</code> component of this signature.\nReturns the recovery ID.\nRecovers an <code>Address</code> from this signature and the given …\nRecovers an <code>Address</code> from this signature and the given …\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nLength of RLP RS field encoding\nReturns the <code>s</code> component of this signature.\nSets the signer’s chain ID.\nSigns the given hash.\nSigns the given hash.\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nUtility to get and set the chain ID on a transaction and …\nReturns the inner ECDSA signature.\nParses a 65-byte long raw signature.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the <code>UnsupportedSignerOperation</code> if the error is …\nReturns the left value\nReturns the right value\nUtility functions for working with Ethereum signatures.\nReturns the recovery ID as a <code>bool</code>.\nSets the signer’s chain ID and returns <code>self</code>.\nSets the recovery ID by normalizing a <code>v</code> value.\nWrite R and S to an RLP buffer in progress.\nWrite the VRS to the output.\nThe signer’s chain ID.\nThe chain ID provided by the transaction.\nsecp256k1 curve point expressed in affine coordinates.\nCompressed SEC1-encoded secp256k1 (K-256) curve point.\nSEC1-encoded secp256k1 (K-256) curve point.\nsecp256k1 (K-256) field element serialized as bytes.\nBase point of secp256k1.\nBase point of secp256k1.\nAdditive identity of the group: the point at infinity.\nAdditive identity of the group: the point at infinity.\nNon-zero secp256k1 (K-256) scalar field element.\nMultiplicative identity.\nA point on the secp256k1 curve in projective coordinates.\nsecp256k1 (K-256) public key.\nScalars are elements in the finite field modulo n.\nsecp256k1 (K-256) elliptic curve.\nsecp256k1 (K-256) secret key.\n256-bit unsigned big integer.\nBytes used by a wide reduction: twice the width of …\nZero scalar.\nReturns self + rhs mod n.\nDoubles this point.\nElliptic Curve Digital Signature Algorithm (ECDSA).\nCalculates SECP256k1 endomorphism: <code>self * lambda</code>.\nCheck whether <code>self</code> is equal to an affine point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns a (nearly) uniformly-random scalar, generated in …\nReturns a uniformly-random scalar, generated using …\nReturns the base point of secp256k1.\nReturns the base point of SECP256k1.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of SECP256k1, also known as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the scalar.\nFast variable-time inversion using Stein’s algorithm.\nIs this point the identity point?\nChecks if the scalar is zero.\nModulo multiplies two scalars.\nCalculates <code>k * G</code>, where <code>G</code> is the generator.\nNegates the scalar.\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nModulo squares the scalar.\nReturns self - rhs mod n.\nReturns the affine representation of this point.\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. “recid”.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nCreate a new error with an associated source.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nCreate a new error with no associated source\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …\n<code>ToString::to_string</code>, but without panic on OOM.\nPreferred digest to use when computing ECDSA signatures …\nBind a preferred <code>Digest</code> algorithm to an elliptic curve …\nTry to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined …\nSign a prehashed message digest using the provided secret …\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically …\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA …\nVerify the prehashed message against the provided ECDSA …\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nVerify the provided signature for the given prehashed …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …\nCompress remaining data after padding it with <code>delim</code>, zeros …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\n<code>ToString::to_string</code>, but without panic on OOM.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts slice to a generic array reference with inferred …\nConverts mutable slice to a mutable generic array reference\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that gives the sum of all elements of an …\nA <strong>type operator</strong> that gives the product of all elements of …\nAlias for the associated type of <code>FoldMul</code>: …\nAlias for the associated type of <code>FoldAdd</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the sum\nThe type of the result of the product\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned …\nInstantiates a singleton representing this unsigned …\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>FoldMul</code>: …\nAlias for the associated type of <code>FoldAdd</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that gives the sum of all elements of an …\nA <strong>type operator</strong> that gives the product of all elements of …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the sum\nThe type of the result of the product\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the OID associated with this value.\n<code>ToString::to_string</code>, but without panic on OOM.\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive …\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\n<code>ToString::to_string</code>, but without panic on OOM.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAlgorithm <code>ObjectIdentifier</code> for elliptic curve public key …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nHow many bits of information can be reliably stored in the …\nElliptic curve.\nElliptic curve with an arithmetic implementation.\nPrime order elliptic curve group.\nGenerator of the <code>t-order</code> multiplicative subgroup.\nContains the error value\nElliptic curve errors.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a …\nTrait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …\nSize of serialized field elements of this elliptic curve.\nSize of a serialized field element in bytes.\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nScalar modulus.\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nNon-zero scalar type.\nThe one element of the field, the multiplicative identity.\nMultiplicative identity.\nOrder of this elliptic curve, i.e. number of elements in …\nContains the success value\nThe output of the batch normalization; a container of …\nMarker trait for elliptic curves with prime order.\nPrime order elliptic curve with projective arithmetic …\nThis represents an element of a non-binary prime field.\nDerive the <code>PrimeField</code> trait.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nElliptic curve public keys.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nResult type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalar field element for a particular elliptic curve.\nScalars modulo the order of this group’s scalar field.\nScalar field modulo this curve’s order.\nGeneric scalar type with primitive functionality.\nElliptic curve secret keys.\nInverse of $2$ in the field.\nInteger type used to represent field elements of this …\nThe zero element of the field, the additive identity.\nZero scalar.\nBorrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.\nBorrow the inner limbs as a slice.\nBorrow the inner secret <code>ScalarPrimitive</code> value.\nBorrow the inner <code>C::Uint</code>.\nPerform a batched conversion to affine representation on a …\nCubes this element.\nDecode unsigned integer from serialized field element.\nDoubles this element.\nDoubles this element.\nEncode unsigned integer into serialized field element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>AffinePoint</code> into a <code>PublicKey</code>\nDecode <code>ScalarPrimitive</code> from a serialized field element\nDeserialize secret key from an encoded secret scalar.\nInitialize <code>PublicKey</code> from an <code>EncodedPoint</code>\nAttempts to convert a byte representation of a field …\nDecode a <code>NonZeroScalar</code> from a big endian-serialized field …\nAttempts to convert a byte representation of a field …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDeserialize secret key encoded in the SEC1 ASN.1 DER …\nParse <code>SecretKey</code> from PEM-encoded SEC1 <code>ECPrivateKey</code> format.\nCompute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …\nDecode <code>ScalarPrimitive</code> from a big endian byte slice.\nDeserialize secret key from an encoded secret scalar …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nCreate a <code>NonZeroScalar</code> from a <code>C::Uint</code>.\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nIs this <code>ScalarPrimitive</code> value even?\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nIs this <code>ScalarPrimitive</code> value odd?\nReturns true iff this element is zero.\nIs this <code>ScalarPrimitive</code> value equal to zero?\nReturns true iff this element is zero.\nCreate a <code>NonZeroScalar</code> from a scalar.\nCreate a new scalar from <code>Curve::Uint</code>.\nCreate a new secret key from a scalar value.\nTraits for arithmetic operations on elliptic curve field …\nTraits for elliptic curve points.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nGet the <code>PublicKey</code> which corresponds to this secret key\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nGenerate a random <code>NonZeroScalar</code>.\nGenerate a random <code>ScalarPrimitive</code>.\nGenerate a random <code>SecretKey</code>.\nScalar types.\nSupport for SEC1 elliptic curve encoding formats.\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nEncode <code>ScalarPrimitive</code> as a serialized field element.\nSerialize raw secret scalar as a big endian integer.\nSerialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …\nConvert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …\nGet the secret <code>NonZeroScalar</code> value for this key.\nConvert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …\nConverts an element of the prime field into the standard …\nConvert this <code>PublicKey</code> into the …\nSerialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …\nSerialize private key as self-zeroizing PEM-encoded SEC1 …\nConvert to a <code>C::Uint</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nComplete projective formulas for prime order elliptic …\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nSize of the inner integer in bits.\nTotal size of the represented integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nSize of the inner integer in bytes.\nTotal size of the represented integer in bytes.\nIntegers whose representation takes a bounded amount of …\nAlias for a byte array whose size is defined by …\nSize of a byte array which encodes a big integer.\nProvides intentionally-checked arithmetic on <code>T</code>.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nA boolean value returned by constant-time <code>const fn</code>s.\nEncoding support.\nThe falsy value.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nThe number of limbs used on this platform.\nBig integers are represented as an array of smaller CPU …\nMaximum value this integer can express.\nMaximum value this <code>Limb</code> can express.\nMaximum value this integer can express.\nMaximum value this <code>Uint</code> can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nWrapper type for non-zero integers.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nA pre-calculated reciprocal for division by a single limb.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe truthy value.\n1024-bit unsigned big integer.\n128-bit unsigned big integer.\n1280-bit unsigned big integer.\n1536-bit unsigned big integer.\n16384-bit unsigned big integer.\n1792-bit unsigned big integer.\n192-bit unsigned big integer.\n2048-bit unsigned big integer.\n256-bit unsigned big integer.\n3072-bit unsigned big integer.\n320-bit unsigned big integer.\n32768-bit unsigned big integer.\n3584-bit unsigned big integer.\n384-bit unsigned big integer.\n4096-bit unsigned big integer.\n4224-bit unsigned big integer.\n4352-bit unsigned big integer.\n448-bit unsigned big integer.\n512-bit unsigned big integer.\n576-bit unsigned big integer.\n6144-bit unsigned big integer.\n64-bit unsigned big integer.\n640-bit unsigned big integer.\n704-bit unsigned big integer.\n768-bit unsigned big integer.\n8192-bit unsigned big integer.\n832-bit unsigned big integer.\n896-bit unsigned big integer.\n960-bit unsigned big integer.\nStack-allocated big unsigned integer.\nWide integer type: double the width of <code>Word</code>.\nUnsigned integer type that the <code>Limb</code> newtype wraps.\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nZero values.\nComputes <code>self + rhs + carry</code>, returning the result along …\nComputes <code>a + b + carry</code>, returning the result along with …\nCompute <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code> for the special modulus …\nBorrow the limbs of this <code>Uint</code>.\nBorrow the limbs of this <code>Uint</code> mutably.\nBorrow the inner limbs as an array of <code>Word</code>s.\nBorrow the inner limbs as a mutable array of <code>Word</code>s.\nGet the value of the bit at position <code>index</code>, as a truthy or …\nReturns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …\nCalculates <code>a &amp; b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculates <code>a | b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculates <code>a ^ b</code>.\nComputes bitwise <code>a ^ b</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …\nPerform checked division, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …\nPerform checked reduction, returning a <code>CtOption</code> which …\nSee <code>Self::checked_sqrt_vartime</code>.\nPerform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …\nPerform a comparison of the inner value in variable-time.\nReturns the Ordering between <code>self</code> and <code>rhs</code> in variable time.\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConst-friendly assertion that two values are equal.\nConst-friendly assertion that two values are NOT equal.\nCreates a new non-zero integer in a const context. The …\nCreates a new non-zero limb in a const context. The second …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …")