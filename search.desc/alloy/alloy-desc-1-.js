searchState.loadedDescShard("alloy", 1, "Sets the Clique Private Key to the <code>geth</code> executable, which …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Shanghai</code>.\nConsumes the builder and spawns <code>anvil</code>.\nConsumes the builder and spawns <code>geth</code>.\nConsumes the builder and spawns <code>reth</code>.\nTakes the stderr contained in the child process.\nTakes the stdout contained in the child process.\nSets the timeout which will be used when the <code>anvil</code> …\nConsumes the builder and spawns <code>anvil</code>. If spawning fails, …\nConsumes the builder and spawns <code>geth</code>. If spawning fails, …\nConsumes the builder and spawns <code>reth</code>. If spawning fails, …\n<code>ToString::to_string</code>, but without panic on OOM.\nUtility functions for the node bindings.\nBlocks until geth adds the specified peer, using 20s as …\nReturns the <code>EthereumWallet</code> of this instance generated from …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance.\nReturns the Websocket endpoint url of this instance\nReturns the Websocket endpoint url of this instance\nReturns the Websocket endpoint url of this instance.\nReturns the WS port of this instance.\nSets the WS port for the Reth instance. Note: this resets …\nUtilities for launching an Anvil instance.\nUtilities for launching a Geth dev-mode instance.\nUtilities for launching a Reth dev-mode instance.\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nanvil’s default ipc path\nOptions that can be set in dev mode\nConfiguration options that can be set in dev mode.\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\nWhether or not node is in <code>dev</code> mode and configuration …\nOptions that cannot be set in dev mode\nConfiguration options that cannot be set in dev mode.\nThe interval at which the dev chain will mine new blocks.\nWhether or not peer discovery is enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe p2p port to use.\nBuilder for launching <code>reth</code>.\nA Reth instance. Will close the instance when dropped.\nRuns the given async closure with a temporary directory.\nRuns the given closure with a temporary directory.\nAn Ethereum address, 20 bytes in length.\nStack-allocated buffer for efficiently computing address …\nError type for address checksum validation.\n16-byte fixed byte-array type.\n20-byte fixed byte-array type.\n32-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\nThe size of this integer type in bits.\nNumber of bits.\nNumber of bits to set per input in Ethereum bloom filter.\nSize of the bloom filter in bits\nSize of the bloom filter in bytes.\nThe size of this integer type in bytes. Note that some …\nThe size of this integer type in bytes. Note that some …\nThe error type that is returned when conversion to or from …\nA block hash.\nA block number.\nA block timestamp.\nEthereum 256 byte bloom filter.\nInput to the <code>Bloom::accrue</code> method.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nChain identifier type (introduced in EIP-155).\nA transaction that creates a contract.\nA byte array of fixed length (<code>[u8; N]</code>).\nError converting from bytes.\nError converting hex to bytes.\nAn Ethereum ABI function pointer, 24 bytes in length.\nAlready hashed input.\nError while decoding hex.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nError that occurs when the number is too large or too …\nTrait for an object that can be converted into a log data …\nInvalid ERC-55 checksum.\nInvalid parity.\nk256 error\nThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.\nSimple <code>Keccak-256</code> hasher.\nThe size of this integer type in 64-bit limbs.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nBit mask for the last limb.\nThe largest value that can be represented by this integer …\nThe maximum value.\nThe smallest value that can be represented by this integer …\nThe minimum value.\nMinus one (multiplicative inverse) of this type.\nLess than zero.\nThe value one. This is useful to have as a constant for …\nOne (multiplicative identity) of this type.\nThe error type that is returned when parsing a signed …\nGreater than or equal to zero.\nDeprecated alias for <code>Signature</code>.\nRaw input to be hashed.\nError that occurs when an invalid digit is encountered …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nSolidity contract functions are addressed using the first …\nEnum to represent the sign of a 256-bit signed integer.\nAn Ethereum ECDSA signature.\nErrors in signature parsing or verification.\nSigned integer wrapping a <code>ruint::Uint</code>.\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe <code>to</code> field of a transaction. Either a target address, or …\nThe nonce of a transaction.\nThe sequence number of all existing transactions.\n128-bit unsigned integer type, consisting of 2, 64-bit …\n16-bit unsigned integer type, consisting of 1, 64-bit …\n160-bit unsigned integer type, consisting of 3, 64-bit …\n256-bit unsigned integer type, consisting of 4, 64-bit …\n32-bit unsigned integer type, consisting of 1, 64-bit …\n512-bit unsigned integer type, consisting of 8, 64-bit …\n64-bit unsigned integer type, consisting of 1, 64-bit …\n8-bit unsigned integer type, consisting of 1, 64-bit limbs.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\nArray of Zero bytes.\nArray of Zero bytes.\nThe value zero. This is the only value that exists in all …\nArray of Zero bytes.\nArray of Zero bytes.\nZero (additive identity) of this type.\nComputes the absolute value of <code>self</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nAccrues the input into the bloom filter.\nAccrues the input into the bloom filter.\nIngests a log into the bloom filter.\nIngests a raw log into the bloom filter.\nCompute $\\mod{\\mathtt{self} + \\mathtt{rhs}}_…\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nType aliases for common primitive types.\nDouble precision logarithm.\nDouble precision decimal logarithm.\nDouble precision binary logarithm.\nConstruct from double precision binary logarithm.\nArithmetic shift right by <code>rhs</code> bits.\nReturns references to the address and selector of the …\nReturns the sign character.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nAccess the underlying store as a little-endian bytes.\nAccess the underlying store as a little-endian bytes with …\nAccess the underlying store as a little-endian slice of …\nAccess the underlying store as a mutable little-endian …\nView the array of limbs.\nView the array of limbs.\nAccess the array of limbs.\nReturns a mutable slice containing the entire array. …\nReturns the checksum of a formatted address.\nConverts from <code>&amp;Sealed&lt;T&gt;</code> to <code>Sealed&lt;&amp;T&gt;</code>.\nReturns a slice containing the entire array. Equivalent to …\nReturns the checksum of a formatted address.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nReturns whether a specific bit is set.\nReturns whether a specific bit is set.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nReturns the dynamic length of this number in bits, …\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nReturns the bitwise <code>&amp;</code> of the two numbers.\nReturns the bitwise <code>|</code> of the two numbers.\nReturn the least number of bits needed to represent the …\nReturns the bitwise <code>^</code> of the two numbers.\nConverts a sequence of string literals containing …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nReturns the dynamic length of this number in bytes, …\nConverts a sequence of string literals containing …\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nComputes <code>self + rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nReturns a specific byte, or <code>None</code> if <code>index</code> is out of range. …\nWrites the big-endian representation of the <code>Uint</code> to the …\nWrites the little-endian representation of the <code>Uint</code> to the …\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nConstruct a new integer from little-endian a slice of …\nCreates a <code>Signed</code> from an absolute value and a negative …\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nComputes <code>self * rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nRaises self to the power of <code>exp</code>.\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nComputes <code>self % rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked left shift by <code>rhs</code> bits.\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked right shift by <code>rhs</code> bits.\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nComputes <code>self - rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nClone the inner item.\nMaps a <code>Sealed&lt;&amp;T&gt;</code> to a <code>Sealed&lt;T&gt;</code> by cloning the inner …\nConcatenate two <code>FixedBytes</code>.\nCompile-time version of <code>contains</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nReturns <code>true</code> if <code>self</code> equals <code>other</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nEquality at compile-time.\nReturns <code>true</code> if the value is zero.\nReturns <code>true</code> if no bits are set.\nReturns true if this bloom filter is a possible superset …\nReturns true if this bloom filter is a possible superset …\nTrue if the bloom filter contains a log with given address …\nTrue if the bloom filter contains a log with given address …\nWrites the big-endian representation of the <code>Uint</code> to the …\nCreates a new <code>Bytes</code> instance from a slice by copying it.\nWrites the little-endian representation of the <code>Uint</code> to the …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nComputes the <code>create</code> address for this address and nonce:\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the address created by the <code>EOFCREATE</code> opcode, …\nReturns a reference to the underlying data.\nThe plain data.\nThe log data.\nReturns a mutable reference to the underlying data.\nComputes <code>self / rhs</code> rounding up.\nCalculates the quotient of Euclidean division of <code>self</code> by …\nComputes <code>self / rhs</code> and <code>self % rhs</code>.\nHash a message according to EIP-191 (version <code>0x01</code>).\nCreates a new empty log.\nCreates a new empty log.\nCreate <code>10**n</code> as this type.\nPad and squeeze the state.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nConverts a sequence of string literals containing …\nCalculates the checksum of an address into the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConstruct a new <code>Uint</code> from the value.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> …\nCreates a <code>TxKind::Call</code> with the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConstruct a new <code>Signed</code> from the value.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Ethereum function from an address and selector.\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConstructs the <code>Signed</code> from digits in the base <code>base</code> in …\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConverts a big-endian byte array of size exactly …\nConverts a big-endian byte array of size exactly …\nCreates a new integer from a big endian slice of bytes.\nConvert from a decimal string.\nConvert from a hex string.\nConverts a little-endian byte array of size exactly …\nConvert from an array in LE format\nCreates a new integer from a little endian slice of bytes.\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a slice of …\nConverts an ECDSA signing key to its corresponding …\nConverts an ECDSA verifying key to its corresponding …\nCoerces an unsigned integer into a signed one. If the …\nInstantiate by hashing public key bytes.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreates a new <code>Bytes</code> from a static slice.\nParse a string into a <code>Uint</code>.\nCreates an Ethereum address from an EVM word’s upper 20 …\nCreates an Ethereum function from an EVM word’s lower 24 …\nCompute the greatest common divisor of two <code>Uint</code>s.\n⚠️ Compute the greatest common divisor and the Bézout …\nGet the hash.\nGet the hash.\nCalculate the seal hash, this may be slow.\nMacro for converting sequence of string literals …\nGet the inner item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConsume the input, converting it to the hash.\nReturns the backing buffer.\nUnseal the inner item, discarding the hash.\nConvert to a array of limbs.\nConvert to a array of limbs.\nConsume and convert into a <code>LogData</code> object.\nDecompose into parts.\nReturns the signed integer as a unsigned integer. If the …\nSplits a Signed into its absolute value and negative flag.\nConsumes the type and returns the address of the contract …\nLeft-pads the address to 32 bytes (EVM word size).\nRight-pads the function to 32 bytes (EVM word size).\nCompute $\\mod{\\mathtt{self}^{-1}}_{\\mathtt{modulus}}$.\nComputes the inverse modulo $2^{\\mathtt{BITS}}$ of <code>self</code>, …\nReturns true if the transaction is a contract call.\nReturns true if the transaction is a contract creation.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns whether the sign is negative.\nDetermines if the integer is odd.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns whether the sign is positive.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nTrue if valid, false otherwise.\nReturns <code>true</code> if the value is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nSimple interface to the <code>Keccak-256</code> hash function.\nCompute the least common multiple of two <code>Uint</code>s or <code>None</code> if …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nReturns the size of this array in bytes.\nReturns the size of this array in bytes.\nReturns the size of this byte array (<code>N</code>).\nReturns the size of this array in bytes.\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nCompute the logs bloom filter for the given logs.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nSpecialised Bloom filter that sets three bits out of 2048, …\n<code>m3_2048</code> but with a pre-hashed input.\nRe-exports of map types and utilities.\nReturns the most significant 64 bits of the number and the …\nCompute $\\mod{\\mathtt{self} ⋅ \\mathtt{rhs}}_…\nMontgomery multiplication.\nWraps the given byte array in this type.\nCreates a new buffer.\nWraps the given byte array in this type.\nWraps the given byte array in <code>FixedBytes</code>.\nWraps the given byte array in this type.\nCreates a new empty <code>Bytes</code>.\nCreates a new log.\nCreates a new log.\nSeal the inner item.\nCreates a new <code>Keccak256</code> hasher.\nCreates a new log from an deserialized event.\nCreates a new log.\nSeal the inner item, by reference.\nSeal a reference to the inner item with some function.\nCreates a new log, without length-checking. This allows …\nCreates a new log.\nInstantiate without performing the hash. This should be …\nSeal the inner item with some function.\nCalculates the smallest value greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nAttempts to normalize the v value to a boolean parity …\nInverts all the bits in the integer.\nComputes the absolute value of <code>self</code>.\nCalculates $\\mod{\\mathtt{self} + \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nCreates a <code>Signed</code> from a sign and an absolute value. …\nCalculates the multiplication of self and rhs.\nCalculates <code>self</code> * <code>rhs</code>\nCalculates $\\mod{-\\mathtt{self}}_{2^{BITS}}$.\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code> and if the result would …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nLeft shift by <code>rhs</code> bits with overflow detection.\nShifts self left by <code>rhs</code> bits.\nRight shift by <code>rhs</code> bits with underflow detection.\nShifts self right by <code>rhs</code> bits.\nCalculates $\\mod{\\mathtt{self} - \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> - <code>rhs</code>\nParse an Ethereum address, verifying its EIP-55 checksum.\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCompute $\\mod{\\mathtt{self}^{\\mathtt{rhs}}}_…\n⚠️ Compute $\\mod{\\mathtt{self}}_{\\mathtt{modulus}}$.\nCalculates the least nonnegative remainder of …\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nReserialize the data.\nReverses the order of bits in the integer. The least …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nComputes the floor of the <code>degree</code>-th root of the number.\nShifts the bits to the left by a specified amount, <code>rhs</code>, …\nShifts the bits to the right by a specified amount, <code>rhs</code>, …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes <code>self + rhs</code>, saturating at the numeric bounds …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, saturating at the numeric bounds …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nRaises self to the power of <code>exp</code>, saturating on overflow.\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating left shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, saturating at the numeric bounds …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nExamples\nGet the hash.\nSeal a borrowed object by calculating the hash. This may …\nSeal a borrowed object by calculating the hash. This may …\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nSeal the object by calculating the hash. This may be slow.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nSets a specific bit to a value.\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nReturns the sign of self.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nMontgomery squaring.\nPanics\nReturns the address of the contract that will be called or …\nPanics\nReturns the address and selector of the function.\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nConverts the <code>Uint</code> to a big-endian byte array of size …\nConverts <code>self</code> to a big-endian byte array of size exactly …\nConverts the <code>Uint</code> to a big-endian byte vector with leading …\nConverts the <code>Uint</code> to a big-endian byte vector of size …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nConvert to a decimal string.\nApplies EIP-155.\nConvert to a hex string.\nConverts the <code>Uint</code> to a little-endian byte array of size …\nConverts <code>self</code> to a little-endian byte array of size exactly\nConverts the <code>Uint</code> to a little-endian byte vector with …\nConverts the <code>Uint</code> to a little-endian byte vector of size …\nConvert into a <code>LogData</code> object.\nReturns the checksum of a formatted address.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nReturns the number of trailing ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nTries to create a <code>Vec</code> containing the arguments.\nCompute the two’s complement of this number.\nShortcut for <code>val.try_into().unwrap()</code>.\nShortcut for <code>self.try_into().unwrap()</code>.\nUnseal the inner item, discarding the hash. Alias for …\nComputes the absolute value of <code>self</code> without any wrapping …\nAbsorbs additional input. Can be called multiple times.\nCommon Ethereum utilities.\nCalculates the complete product <code>self * rhs</code> without the …\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nWrap a fixed-size byte array in a newtype, delegating all …\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nComputes <code>self + rhs</code>, wrapping around at the boundary of …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nComputes <code>self / rhs</code> rounding down.\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, wrapping around at the boundary of …\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, wrapping around at the boundary of the …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nComputes <code>self % rhs</code>.\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nLeft shift by <code>rhs</code> bits.\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nRight shift by <code>rhs</code> bits.\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nComputes <code>self - rhs</code>, wrapping around at the boundary of …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nExamples\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nA block timestamp.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n104-bit signed integer type, consisting of 2, 64-bit limbs.\n112-bit signed integer type, consisting of 2, 64-bit limbs.\n120-bit signed integer type, consisting of 2, 64-bit limbs.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n136-bit signed integer type, consisting of 3, 64-bit limbs.\n144-bit signed integer type, consisting of 3, 64-bit limbs.\n152-bit signed integer type, consisting of 3, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n168-bit signed integer type, consisting of 3, 64-bit limbs.\n176-bit signed integer type, consisting of 3, 64-bit limbs.\n184-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n200-bit signed integer type, consisting of 4, 64-bit limbs.\n208-bit signed integer type, consisting of 4, 64-bit limbs.\n216-bit signed integer type, consisting of 4, 64-bit limbs.\n224-bit signed integer type, consisting of 4, 64-bit limbs.\n232-bit signed integer type, consisting of 4, 64-bit limbs.\n24-bit signed integer type, consisting of 1, 64-bit limbs.\n240-bit signed integer type, consisting of 4, 64-bit limbs.\n248-bit signed integer type, consisting of 4, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n40-bit signed integer type, consisting of 1, 64-bit limbs.\n48-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n56-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n72-bit signed integer type, consisting of 2, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\n80-bit signed integer type, consisting of 2, 64-bit limbs.\n88-bit signed integer type, consisting of 2, 64-bit limbs.\n96-bit signed integer type, consisting of 2, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe nonce of a transaction.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n104-bit unsigned integer type, consisting of 2, 64-bit …\n112-bit unsigned integer type, consisting of 2, 64-bit …\n120-bit unsigned integer type, consisting of 2, 64-bit …\n128-bit unsigned integer type, consisting of 2, 64-bit …\n136-bit unsigned integer type, consisting of 3, 64-bit …\n144-bit unsigned integer type, consisting of 3, 64-bit …\n152-bit unsigned integer type, consisting of 3, 64-bit …\n16-bit unsigned integer type, consisting of 1, 64-bit …\n160-bit unsigned integer type, consisting of 3, 64-bit …\n168-bit unsigned integer type, consisting of 3, 64-bit …\n176-bit unsigned integer type, consisting of 3, 64-bit …\n184-bit unsigned integer type, consisting of 3, 64-bit …\n192-bit unsigned integer type, consisting of 3, 64-bit …\n200-bit unsigned integer type, consisting of 4, 64-bit …\n<code>Uint</code> for <code>2048</code> bits.\n208-bit unsigned integer type, consisting of 4, 64-bit …\n216-bit unsigned integer type, consisting of 4, 64-bit …\n224-bit unsigned integer type, consisting of 4, 64-bit …\n232-bit unsigned integer type, consisting of 4, 64-bit …\n24-bit unsigned integer type, consisting of 1, 64-bit …\n240-bit unsigned integer type, consisting of 4, 64-bit …\n248-bit unsigned integer type, consisting of 4, 64-bit …\n256-bit unsigned integer type, consisting of 4, 64-bit …\n32-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n40-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n48-bit unsigned integer type, consisting of 1, 64-bit …\n512-bit unsigned integer type, consisting of 8, 64-bit …\n56-bit unsigned integer type, consisting of 1, 64-bit …\n64-bit unsigned integer type, consisting of 1, 64-bit …\n72-bit unsigned integer type, consisting of 2, 64-bit …\n8-bit unsigned integer type, consisting of 1, 64-bit limbs.\n80-bit unsigned integer type, consisting of 2, 64-bit …\n88-bit unsigned integer type, consisting of 2, 64-bit …\n96-bit unsigned integer type, consisting of 2, 64-bit …\n<code>HashMap</code> optimized for hashing <code>Address</code>.\n<code>HashSet</code> optimized for hashing <code>Address</code>.\n<code>HashMap</code> optimized for hashing <code>B256</code>.\n<code>HashSet</code> optimized for hashing <code>B256</code>.\nThe default <code>BuildHasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nThe default <code>Hasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nA view into a single entry in a map, which may either be …\n<code>BuildHasher</code> optimized for hashing fixed-size byte arrays.\n<code>Hasher</code> optimized for hashing fixed-size byte arrays.\n<code>HashMap</code> optimized for hashing fixed-size byte arrays.\n<code>HashSet</code> optimized for hashing fixed-size byte arrays.\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nAn occupied entry.\n<code>HashMap</code> optimized for hashing <code>Selector</code>.\n<code>HashSet</code> optimized for hashing <code>Selector</code>.\nA vacant entry.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to this entry’s key.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nThe entry in the map that was already occupied.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash.\nAccess an entry by hash.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an entry by a key and its hash.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns the key-value pair corresponding to the supplied …\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the keys in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nCreates a raw immutable entry builder for the <code>HashMap</code>.\nCreates a raw entry builder for the <code>HashMap</code>.\nRemoves a key from the map, returning the value at the key …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the stored key and …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map.\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\n<code>ToString::to_string</code>, but without panic on OOM.\nThe value which was not inserted, because the entry was …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the set can hold without …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains a value.\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the set, returning all elements as an iterator. …\nGets the given value’s corresponding entry in the set …\nCreates an iterator which uses a closure to determine if a …\nConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value in the set, if any, that …\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the set’s <code>BuildHasher</code>.\nAdds a value to the set.\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nTake ownership of the value.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all elements in arbitrary order. The …\nReturns the number of elements in the set.\nCreates an empty <code>HashSet</code>.\nEnsures a value is in the entry by inserting if it was …\nRemoves a value from the set. Returns whether the value was\nTakes the value out of the entry, and returns it. Keeps …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates a new empty hash set which will use the given …\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\nThe size of this integer type in 64-bit limbs.\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\nThe value zero. This is the only value that exists in all …\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nSee <code>Uint::as_le_bytes</code> for documentation.\nSee <code>Uint::as_limbs</code> for documentation.\nSee <code>Uint::as_limbs_mut</code> for documentation.\nReturns a reference to the inner Uint.\nReturns a mutable reference to the inner Uint.\nSee <code>Uint::checked_shl</code> for documentation.\nSee <code>Uint::checked_shr</code> for documentation.\nCompile time for loops with a <code>const</code> variable for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Uint::from_be_bytes</code> for documentation.\nSee <code>Uint::from_le_bytes</code> for documentation.\nSee <code>Uint::from_limbs</code> for documentation.\nSee <code>Uint::from_str_radix</code> for documentation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner Uint.\nSee <code>Uint::leading_ones</code> for documentation.\nSee <code>Uint::leading_zeros</code> for documentation.\nMask to apply to the highest limb to get the correct …\nNumber of bytes required to represent the given number of …\nNumber of <code>u64</code> limbs required to represent the given number …\nSee <code>Uint::overflowing_shl</code> for documentation.\nSee <code>Uint::overflowing_shr</code> for documentation.\nSee <code>Uint::reverse_bits</code> for documentation.\nSee <code>Uint::rotate_left</code> for documentation.\nSee <code>Uint::rotate_right</code> for documentation.\nSupport for external crates.\nSee <code>Uint::to_be_bytes</code> for documentation.\nSee <code>Uint::to_be_bytes_vec</code> for documentation.\nSee <code>Uint::to_le_bytes</code> for documentation.\nSee <code>Uint::trailing_ones</code> for documentation.\nSee <code>Uint::trailing_zeros</code> for documentation.\nSee <code>Uint::try_from_be_slice</code> for documentation.\nSee <code>Uint::try_from_le_slice</code> for documentation.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nSee <code>Uint::wrapping_shl</code> for documentation.\nSee <code>Uint::wrapping_shr</code> for documentation.\n⚠️ Lehmer update matrix\n⚠️ Computes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\n⚠️ Computes wrapping <code>result += a * b</code>, with a fast-path …\n⚠️ Computes <code>lhs += a * b</code> and returns the carry.\n⚠️ Applies the matrix to a <code>Uint</code>.\n⚠️ Applies the matrix to a <code>u128</code>.\n⚠️ Sub with borrow.\n⚠️ <code>lhs -= rhs - borrow</code>\n⚠️ Add with carry.\n⚠️ <code>lhs += rhs + carry</code>\n⚠️ Compare two limb slices in reverse order.\n⚠️ Returns the matrix product <code>self * other</code>.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\nReturns the argument unchanged.\n⚠️ Compute a Lehmer update matrix from two <code>Uint</code>s.\n⚠️ Compute the Lehmer update matrix in full 64 bit …\n⚠️ Compute the Lehmer update matrix for small values.\n⚠️ Compute the largest valid Lehmer update matrix for …\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\nCalls <code>U::from(self)</code>.\n⚠️ Modular inversion using extended GCD.\n⚠️ Computes <code>lhs *= a</code> and returns the carry.\n⚠️ Computes a * b * 2^(-BITS) mod modulus\n⚠️ Shift left small.\n⚠️ Shift right small.\n⚠️ Computes a^2 * 2^(-BITS) mod modulus\n⚠️ Computes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Compute single limb division.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Reference implementation for <code>div_2x1</code>.\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Reference implementation for <code>div_3x2</code>.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nUse comma as decimal separator\nDecimal separator for number formatting\nThe prefix used for hashing messages according to EIP-191.\nEther is equivalent to 1e18 wei.\nGwei is equivalent to 1e9 wei.\nSigned 256-bit integer.\nThe provided units are not recognized.\nThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.\nKwei is equivalent to 1e3 wei.\nSimple <code>Keccak-256</code> hasher.\nThe largest unit.\nThe smallest unit.\nMwei is equivalent to 1e6 wei.\nPwei is equivalent to 1e15 wei.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nUse period as decimal separator\nTwei is equivalent to 1e12 wei.\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nWei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit with a …\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nReturns the character used as decimal separator\nTries to collect the elements of an iterator into a <code>Vec</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nThe JSON body of a block response.\nBoxed future type used in <code>ProviderCall</code> for non-wasm …\nA boxed future.\nA transaction that is not yet signed.\nCall failed.\nA trait for converting CallItem into relevant call types.\nA singular call type that is mapped into aggregate, …\nHelper type to build a <code>CallItem</code>\nTrait that helpes convert <code>EthCall</code> into a <code>ProviderCall</code>.\nError decoding return data.\nDecoder for the return data of the call.\nA wrapper struct around a type erased <code>Provider</code>.\nMarker for Dynamic Calls i.e where in SolCall type is …\nType indicating that the <code>MulticallBuilder</code> is empty.\nA transaction that is signed and fully constructed.\nContains the error value\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nA builder for an <code>&quot;eth_callMany&quot;</code> RPC request.\nThe parameters for an <code>&quot;eth_callMany&quot;</code> RPC request.\nThe parameters for an <code>&quot;eth_call&quot;</code> RPC request.\nA builder for an <code>&quot;eth_getBlockByHash&quot;</code> request. This type …\nThe parameters for an <code>eth_getBlockBy{Hash, Number}</code> RPC …\nFailed to register pending transaction in heartbeat.\nA struct representing a failure in a multicall\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nThe network header type.\nThe JSON body of a header response.\nAn identity layer that does nothing.\nDefault address for the Multicall3 contract on most …\nA Multicall3 builder\nMulticall errors.\nA trait that is to be implemented by a type that can be …\nCaptures type info for network-specific RPC …\nNo return data was found.\nContains the success value\nHelper struct that houses the params along with the …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nErrors which may occur when watching a pending transaction.\nEthereum JSON-RPC interface.\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nThe primary future type for the <code>Provider</code>.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe output, produces synchronously.\nThe network receipt envelope type.\nThe JSON body of a transaction receipt.\nError occurred while getting response from the heartbeat.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nResult type for multicall operations.\nThe root provider manages the RPC client and the …\nAn underlying call to an RPC server.\nA struct that takes an optional <code>BlockId</code> parameter.\nA transaction that can be sent. This is either a builder …\nError when converting a <code>SendableTx</code>.\nA stack of two providers.\nTransaction was not confirmed after configured timeout.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nUnderlying transport error.\nEncountered when a transport error occurs while calling a …\nThe network transaction envelope type.\nThe network transaction type enum.\nErrors that may occur when watching a transaction.\nAn enum over the various transaction types.\nEncountered when an <code>aggregate/aggregate3</code> batch contains a …\nA waiter for a batched call to a remote RPC server.\nThe underlying <code>NetworkWallet</code> type contained in this stack.\nTrait for Providers, Fill stacks, etc, which contain …\nA builder type for polling new blocks using the …\nErrors which may occur in heartbeat when watching a …\nA remote signer that leverages the underlying provider to …\nAppends a single AccountOverride to the state override.\nExtends the given AccountOverride to the state override.\nAppends a <code>SolCall</code> to the stack.\nAppends a <code>CallItem</code> to the stack.\nAdd a dynamic <code>CallItem</code> to the builder\nAdd a dynamic call to the builder\nSet the address of the multicall3 contract\nCalls the <code>aggregate</code> function\nCall the <code>aggregate3</code> function\nCall the <code>aggregate3Value</code> function\nSet whether the call should be allowed to fail or not.\nFallible cast to a boxed future.\nFallible cast to an unbuilt transaction request.\nFallible cast to a built transaction envelope.\nFallible cast to an unbuilt transaction request.\nFallible cast to mutable <code>RpcCall</code>\nFallible cast to mutable <code>Waiter</code>\nFallible cast to a ready value.\nFallible cast to <code>RpcCall</code>\nFallible cast to <code>Waiter</code>\nMulticall bindings\nReturns the block.\nSet the <code>BlockId</code> in the <code>StateContext</code>.\nSet the block to use for this call.\nSets the block to be used for the call.\nCall the <code>blockAndAggregate</code> function\nSet the block id.\nThe block id to be used for the RPC call.\nReturns a reference to the block overrides if set.\nBoxes the inner client.\nHelper function to directly access <code>ProviderBuilder</code> with …\nReturns the <code>ProviderBuilder</code> to build on.\nReturns a reference to the bundles.\nReturns a mutable reference to the bundles.\nCreate a new <code>EthGetBlock</code> request to get the block by hash …\nCreate a new <code>EthGetBlock</code> request to get the block by …\nMethod that needs to be implemented to convert to a …\nCreate a new <code>EthCall</code> with method set to <code>&quot;eth_call&quot;</code>.\nExecute a smart contract call with a transaction request …\nMethod that needs to be implemented for <code>&quot;eth_callMany&quot;</code> RPC …\nExecute a list of <code>Bundle</code> against the provided <code>StateContext</code> …\nReturns an <code>Empty</code> builder\nReturns the RPC client used to send requests.\nCreates a new root provider from the provided string.\nFinish the layer stack by providing a connection string …\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a <code>RpcClient</code> that mocks …\nFinish the layer stack by providing a root <code>Provider</code>, …\nBuild this provider with a pre-built Reqwest client.\nConnects to a transport with the given connector.\nFinish the layer stack by providing a <code>TransportConnect</code> …\nReturns a reference to the state context if set.\nSet the <code>StateContext</code> for the call.\nCreate an EIP-2930 access list.\nReturns a reference to the transaction data.\nDecode the <code>Bytes</code> returned by an <code>&quot;eth_call&quot;</code> into a …\nGet the default signer address.\nOpt-out of the recommended fillers by resetting the …\nConverts an empty <code>MulticallBuilder</code> into a dynamic one\nSet the block id to “earliest”.\nReturns a type erased provider wrapped in Arc. See …\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nMethod that needs to be implemented for estimating gas …\nCreate an <code>EthCall</code> future to estimate the gas required for a\nExtended APIs for the provider module.\nExtend the builder with a sequence of calls\nExtend the bundles for the call.\nExtend the builder with a sequence of <code>CallItem</code>s\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>MulticallItem</code> into a <code>CallItem</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nSet the <code>BlockTransactionsKind</code> to …\nPoll for blocks with full transactions i.e …\nCreate a new <code>EthCall</code> with method set to <code>&quot;eth_estimateGas&quot;</code>.\nRetrieves account information (Account) for the given …\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account.\nAdd a call to get the base fee\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number\nGets a block by its BlockHash\nGets a block by its BlockNumberOrTag\nAdd a call to get the block hash from a block number\nGet the last block number available.\nAdd a call to get the current block number\nGet the block number for a given block identifier.\nGets the selected block BlockId receipts.\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block matching the …\nGets the chain ID.\nAdd a call to get the chain id\nGets the client version.\nGets the bytecode located at the corresponding Address.\nAdd a call to get the coinbase of the current block\nAdd a call to get the current block difficulty\nAdd a call to get the current block gas limit\nAdd a call to get the current block timestamp\nAdd a call to get the eth balance of an address\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nGets the current gas price in wei.\nAdd a call to get the last block hash\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block number and transaction …\nReturns the EIP-2718 encoded transaction if it exists, see …\nWaits for the transaction to confirm with the given number …\nGets the <code>Keccak-256</code> hash of the given data.\nGets the specified storage value from Address.\nGets a transaction by block hash and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by its TxHash.\nGets a transaction by its sender and nonce.\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nSet the <code>BlockTransactionsKind</code> to …\nPoll for blocks with just transactions hashes i.e …\nThe index-position of the call that failed\nReturns the inner configuration.\nABI-encoded input data for the call.\nGet the input kind for this builder\nCalls a function with a reference to the value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> to a <code>CallItem</code> while specifying whether it …\nConsumes the <code>EthCallParams</code> and returns the transaction …\nConsumes this builder, returning the inner configuration.\nUnwrap the error and return the original value.\nClones the bundles, context, and overrides into owned data.\nConvert this call into one with owned params, by cloning …\nConsumes the stream of block hashes from the inner …\nTrue if this is a boxed future.\nChecks if the transaction is a builder.\nCheck if the builder is empty\nCheck if the transaction is an envelope.\nTrue if this is a ready value.\nTrue if this is an RPC call.\nTrue if this is a waiter.\nSet the <code>BlockTransactionsKind</code> for the request.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider.\nGet the number of calls in the builder\nSet a mapping function to transform the response.\nMap the response to a different type. This is usable for …\nSet a function to map the response into a different type. …\nMock transport and utility types.\nExecute a multicall by leveraging the <code>MulticallBuilder</code>.\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code> with the recommended filler …\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nInstantiates a new <code>EthCallParams</code> with the given data …\nInstantiates a new <code>EthCallManyParams</code> with the given …\nInstantiates a new <code>EthCallMany</code> with the given parameters.\nCreate a new <code>EthCall</code>.\nInstantiate <code>EthGetBlockParams</code> with the given block and …\nCreate a new error.\nCreate a new instance of <code>ParamsWithBlock</code>.\nCreate a new <code>CallItem</code> instance.\nCreate a new <code>CallItem</code> instance.\nInstantiate a new <code>MulticallBuilder</code>\nCreates a new <code>DynProvider</code> by erasing the type.\nInstantiates a new <code>Web3Signer</code> with the given <code>Provider</code> and …\nNotify the provider that we are interested in new blocks.\nInstantiate a new <code>MulticallBuilder</code> that restricts the …\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nCreate a new <code>EthGetBlock</code> request with the given <code>RpcCall</code> …\nNotify the provider that we are interested in new pending …\nCreate a new <code>EthGetBlock</code> request with a closure that …\nCreate a new <code>RpcWithBlock</code> from a closure producing a …\nCreate a new <code>EthGetBlock</code> request with the given <code>RpcCall</code>.\nCreate a new <code>RpcWithBlock</code> from a <code>RpcCall</code>.\nCreate a new <code>ProviderBuilder</code> with the <code>RecommendedFillers</code> …\nSet the block id to a specific height.\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a <code>RpcClient</code> that mocks …\nFinish the layer stack by providing a root <code>Provider</code>, …\nReturns a reference to the state overrides if set.\nReturns a reference to the state overrides if set.\nSet the <code>StateOverride</code> for the call.\nSet the state overrides for this call.\nSet the state overrides for the call.\nSet the state overrides for this call, if any.\nThe params to be sent to the RPC call.\nSet the block id to “pending”.\nReturns the provider.\nReturns the underlying <code>Provider</code> used by the <code>Web3Signer</code>.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nCreates a ready pending transaction.\nInstantiate a new <code>ProviderCall</code> from the output.\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nThe return data of the call that failed\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a raw transaction RLP bytes with a conditional …\nBroadcasts a transaction to the network.\nBroadcasts a transaction envelope to the network.\nSets the channel size for the poller task.\nSets a limit on the number of successful polls.\nSets the duration between polls.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nSigns a transaction request using …\nSigns a transaction that can be submitted to the network …\nSigns a transaction request and return the raw signed …\nGet an iterator of all signer addresses. Note that because …\nExecutes an arbitrary number of transactions on top of the …\nConsumes this builder, returning the provider and the …\nGets syncing info.\nThe target address of the call.\nReturns the timeout.\nReturns the timeout.\nEncodes the calls for the <code>aggregate3</code> function and returns …\nEncodes the calls for the <code>aggregate</code> function and returns …\nConverts the <code>CallItem</code> into a <code>Call</code> struct for <code>aggregateCall</code>\nConverts the <code>CallItem</code> into a <code>Call3</code> struct for …\nConverts the <code>CallItem</code> into a <code>Call3Value</code> struct for …\nEncodes the calls for the <code>tryAggregateCall</code> function and …\nSet the <code>TransactionIndex</code> in the <code>StateContext</code>.\nCreates a new <code>TransactionRequest</code>.\nCall the <code>tryAggregate</code> function\nCall the <code>tryBlockAndAggregate</code> function\nReturns the envelope if this variant is an …\nReturns the envelope if this variant is an …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nRequest provider to uninstall the filter with the given ID.\nProvider-related utilities.\nReturns the value to send with the call.\nSet the value to send with the call.\nGet a reference to the underlying wallet.\nAdd a wallet layer to the stack being built.\nGet a mutable reference to the underlying wallet.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nSets the block to use for this call.\nSets the block in the <code>StateContext</code> for this call.\nSets the block overrides for this call.\nSets the block overrides for this call.\nSets the block overrides for this call, if any.\nSets the block overrides for this call, if any.\nAdd cached nonce management to the stack being built.\nAggregate multiple <code>eth_call</code> requests into a single batch …\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nClones the underlying provider and returns a new …\nSets the state context for this call.\nConvenience function for <code>allow_failure(true)</code>\nAdd gas estimation to the stack being built.\nSet the input kind for this builder\nAdd nonce management to the stack being built.\nSets the state overrides for this call.\nSets the state overrides for this call.\nSets the state overrides for this call, if any.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nBuild this provider with a provided Reqwest client builder.\nAdd simple nonce management to the stack being built.\nSets the timeout.\nSets the timeout.\nSets the transaction index in the <code>StateContext</code> for this …\nSets the transaction hash.\nSets the transaction hash.\n<code>Multicall3</code> bindings.\nThe creation / init bytecode of the contract.\nContainer for all the <code>IMulticall3</code> function calls.\nAll the selectors of this enum.\nFunction with signature <code>aggregate3((address,bool,bytes)[])</code> …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nFunction with signature <code>aggregate((address,bytes)[])</code> and …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction with signature <code>getBasefee()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getBlockHash(uint256)</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getBlockNumber()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getChainId()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockCoinbase()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockDifficulty()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockGasLimit()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockTimestamp()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getEthBalance(address)</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getLastBlockHash()</code> and selector …\nContainer type for the return parameters of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction with signature …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nAnvil namespace rpc interface that gives access to several …\nConfiguration for impersonated transactions, including …\nIf set to true will make every account impersonated.\nModifies the ERC20 balance of an account.\nRemoves all transactions from the pool.\nRemoves transactions from the pool.\nCreate a buffer that represents all state on the chain, …\nReturns true if auto mining is enabled, and false.\nRetrieves a blob by its versioned hash.\nRetrieves blobs by transaction hash.\nSend transactions impersonating specific account and …\nJump forward in time by the given amount of time, in …\nAppend chain state buffer to current chain. Will overwrite …\nRetrieves metadata about the Anvil instance.\nMines a series of blocks.\nMine blocks, instantly and return the mined blocks. This …\nRetrieves the Anvil node configuration params.\nUnsets the interval for the block timestamp.\nRemoves all transactions from the pool for a specific …\nReorg the chain\nReset the fork to a fresh forked state, and optionally …\nRevert the state of the blockchain to a previous snapshot. …\nRollback the chain\nSets impersonated transaction\nImpersonates the <code>from</code> address in the given transaction …\nEnables or disables, based on the single boolean argument, …\nModifies the balance of an account.\nSet the next block gas limit.\nSets an interval for the block timestamp.\nSets the chain ID.\nSets the code of a contract.\nSets the coinbase address.\nModifies the ERC20 allowance of an account.\nSets the mining behavior to interval with the given …\nEnable or disable logging.\nSet the minimum gas price for the node.\nSets the base fee of the next block.\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp …\nSets the nonce of an address.\nSets the backend rpc url.\nWrites a single slot of the account’s storage.\nSets the specific timestamp and returns the number of …\nSnapshot the state of the blockchain at the current block.\nStops impersonating an account if previously set with …\nSends a raw transaction and waits for it to be mined, …\nExecutes a transaction and waits for it to be mined, …\nExecute a transaction regardless of signature status.\nMine blocks, instantly. This will mine the blocks …\nReturns the argument unchanged.\nSet the funding amount for the impersonated account.\nOptional amount of ETH to fund the impersonated account.\nCalls <code>U::from(self)</code>.\nSet the impersonation to continue after the transaction.\nClear the funding amount.\nSet the impersonation to stop after the transaction.\nWhether to stop impersonating after the transaction is …\nFiller for the <code>max_fee_per_blob_gas</code> field in EIP-4844 …\nCached nonce manager\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nError type for failures in the <code>fill_envelope</code> function.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions. The behavior …\nA trait that determines the behavior of filling nonces.\nThe transaction is not ready to be converted to an …\nThe filler is ready to fill in the transaction request.\nThe recommended filler, a preconfigured set of layers …\nA trait which may be used to configure default fillers for …\nRecommended fillers for this network.\nThis <code>NonceManager</code> implementation will fetch the …\nA transport error occurred during the filling process.\nA layer that can fill in a <code>TransactionRequest</code> with …\nA layer that signs transactions locally.\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nCreates a new <code>NonceFiller</code> with the <code>CachedNonceManager</code>.\nReturns <code>true</code> if the filler should continue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nFills in the transaction request and try to convert it to …\nPerforms any synchronous filling. This should be called …\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next nonce for the given account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new wallet layer with the given wallet.\nCreates a new <code>NonceFiller</code> with the specified <code>NonceManager</code>.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nPrepares transaction request with necessary fillers …\nPrepares a transaction request for eth_call operations …\nPrepares transaction request with necessary fillers …\nReturns <code>true</code> if the filler is ready to fill in the …\nReturns the recommended filler for this provider.\nGet a reference to the right filler.\nCreates a new <code>NonceFiller</code> with the <code>SimpleNonceManager</code>.\nReturn a control-flow enum indicating whether the filler …\n<code>ToString::to_string</code>, but without panic on OOM.\nA layer that wraps an <code>Anvil</code> config.\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA provider layer that caches RPC responses and serves them …\nThe <code>CacheProvider</code> holds the underlying in-memory LRU cache …\nProvider layer that aggregates contract calls (<code>eth_call</code>) …\nA provider that batches multiple requests into a single …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nShareable cache.\nExpose inner anvil instance.\nGet the chain’s average blocktime, if applicable.\nReturns the shared cache.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a value from the cache, if it exists.\nGet deserialized value from the cache.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the cache from a file specified by the path. If the …\nReturns the maximum number of items that can be stored in …\nMaximum number of items that can be stored in the cache.\nSet the multicall3 address.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nCreate a new <code>CallBatchLayer</code> with a default wait of 1ms.\nCreate a new <code>ChainLayer</code> from the given chain.\nInstantiate a new cache layer with the maximum number of …\nInstantiate a new cache provider.\nInstantiate a new shared cache.\nPuts a value into the cache, and returns the old value if …\nSaves the cache to a file specified by the path. If the …\nSet the amount of time to wait before sending the batch.\nGet the instance ws endpoint.\nContainer for pushing responses into a <code>MockTransport</code>.\nAn error response payload.\nA mock response that can be pushed into an <code>Asserter</code>.\nA transport that returns responses from an associated …\nA successful response payload.\nReturn a reference to the associated <code>Asserter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new asserter.\nCreate a new <code>MockTransport</code> with the given <code>Asserter</code>.\nPops the next mock response.\nPush a response into the queue.\nPush an error payload into the queue.\nPush an internal error message into the queue.\nInsert a successful response into the queue.\nReturns a read lock guard to the responses queue.\nReturns a write lock guard to the responses queue.\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA wrapper for <code>AnyRpcBlock</code> that allows for handling unknown …\nA catch-all header type for handling headers on multiple …\nA wrapper for <code>AnyRpcTransaction</code> that allows for handling …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA wallet capable of signing any transaction for the …\nA unifying trait for asynchronous Ethereum signers that …\nA unifying trait for synchronous Ethereum signers that …\nHeader type\nThe network header type.\nThe JSON body of a header response.\nA trait for converting a signer into a <code>NetworkWallet</code>.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nThe wallet type for the network.\nContains the success value\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nTypes for handling unknown network types.\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nBlob gas used\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nGet the default signer address. This address should be used\nDifficulty\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExcess blob gas\nExtra data\nAdditional fields.\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nGet the gas limit for the transaction.\nGas Limit\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nGas Used\nReturn true if the signer contains a credential for the …\nHash of the block\nTransaction hash.\nBlock header\nUtility to implement IntoWallet for signer over the …\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nTransaction type.\nGet the input data for the transaction.\nSet the <code>to</code> field to a create call.\nConvert the signer into a wallet.\nGet the kind of transaction.\nLogs bloom\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMemoization for deserialization.\nMix Hash\nGet the nonce for the transaction.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nEIP-4788 parent beacon block root\nHash of the parent\nTrim any conflicting keys and populate any computed fields …\nTransactions receipts root hash\nThe original request that failed to build.\nEIP-7685 requests hash.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the input data for the transaction, respecting the …\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nInteger the size of this block in bytes.\nThe post-transaction state root (pre Byzantium)\nState root hash\nStatus of the transaction.\nTakes the nonce out of the transaction, clearing it.\nTimestamp\nAddress of the receiver.\nGet the recipient for the transaction.\nTotal difficulty\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nTransactions root hash\nApply a fallible function to the builder, returning the …\nHash of the transaction\nTransaction type.\nThe transaction type.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data, …\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nTakes the nonce out of the transaction, clearing it.\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA wrapper for <code>AnyRpcBlock</code> that allows for handling unknown …\nA catch-all header type for handling headers on multiple …\nA wrapper for <code>AnyRpcTransaction</code> that allows for handling …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas used\nDifficulty\nError types for converting between <code>Any</code> types.\nExcess blob gas\nExtra data\nAdditional fields.\nGas Limit\nGas Used\nHash of the block\nTransaction hash.\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nTransaction type.\nLogs bloom\nMemoization for deserialization.\nMix Hash\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nEIP-4788 parent beacon block root\nHash of the parent\nTransactions receipts root hash\nEIP-7685 requests hash.\nInteger the size of this block in bytes.\nState root hash\nTimestamp\nTotal difficulty\nTransactions root hash\nTransaction type.\nThe transaction type.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nA ConversionError that can capture any error type that …\nDecoding trait for EIP-2718 envelopes. These envelopes …\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nTrait for checking if a transaction envelope supports a …\nIdentifier for legacy transaction, however a legacy tx is …\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nA trait that helps to determine the type of the …\nGot an unexpected type flag while decoding.\nGeneric wrapper with encoded Bytes, such as transaction …\nDecode the transaction according to EIP-2718 rules. First …\nDecode a transaction according to EIP-2718, ensuring no …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nA convenience function that encodes the value in the 2718 …\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the given type ID corresponds to a …\nReturns true if the type matches the given type.\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nReturns the EIP-2718 type flag.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBlock JSON-RPC response.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nHeader type\nHeader JSON-RPC response.\nReceipt JSON-RPC response.\nTransaction type\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nTransaction JSON-RPC response. Aggregates transaction data …\nSpecial case for uncle response.\nGet the EIP-7702 authorization list for the transaction.\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nEffective gas price.\nAddress of the sender.\nSender of the transaction\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nBlock hash\nBlock header\nGet the max fee per blob gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the max fee per blob gas  for the transaction.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nAddress of the receiver.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nUses a custom estimator\nUses the builtin estimator\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nThe minimum priority fee to provide.\nReturn type of EIP1155 gas fee estimator.\nEIP-1559 estimator variants\nA trait responsible for estimating EIP-1559 values\nAn estimator function for EIP1559 fees.\nHelper type representing the joined recommended fillers …\nThe default EIP-1559 fee estimator.\nEstimates the EIP-1559 values given the latest basefee and …\nEstimates the EIP-1559 values given the latest basefee and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max fee per gas.\nThe max priority fee per gas.\nCreates a new estimator from a closure\nCreates a new estimate fn\nA batch JSON-RPC request, used to bundle requests into a …\nConnection string for built-in transports.\nA builder for the transport  <code>RpcClient</code>.\nA borrowed <code>RpcClient</code>.\nHTTP transport.\nParameter type of a JSON-RPC request with no parameters.\nA channel yielding responses from a poller task.\nA poller task builder.\nA stream of responses from polling an RPC method.\nA client using a <code>reqwest</code> HTTP transport.\nA prepared, but unsent, RPC call.\nA JSON-RPC client.\nA JSON-RPC client.\nAwaits a single response for a request that has been …\nAn <code>RpcClient</code> in a <code>Weak</code> reference.\nAdd a call to the batch.\nConvert this future into a boxed, pinned future, erasing …\nBoxes the transport.\nType erase the service in the transport, allowing it to be …\nCreate a new <code>ClientBuilder</code>.\nReturns the channel size for the poller task.\nGet a reference to the <code>WeakClient</code> used by this poller.\nReturns the <code>WeakClient</code> associated with the poller.\nConnect a transport specified by the given string, …\nConnect a transport, producing an <code>RpcClient</code> with a …\nConnect with the given connection string.\nConnect a transport, producing an <code>RpcClient</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RpcClient</code> with the given inner client.\nBorrow the client.\nGet a <code>Weak</code> reference to the client.\nConvenience function to create a new <code>RpcClient</code> with a …\nConvenience function to create a new <code>RpcClient</code> with a …\nGet a reference to the client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the client into its inner type.\nConvert this call into one with owned params, by cloning …\nStarts the poller and returns the stream of responses.\nConverts the poll channel into a stream.\nConverts the poll channel into a stream that also yields …\nConsumes the client and returns the underlying transport.\n<code>true</code> if the client believes the transport is local.\nReturns <code>true</code> if the request is a subscription.\nAdd a middleware layer to the stack.\nReturns the limit on the number of successful polls.\nBuild a <code>JsonRpcRequest</code> with the given method and params.\nMaps the responses using the provided function.\nMaps the metadata of the request using the provided …\nMap the params of the request into a new type.\nMap the response to a different type. This is usable for …\nMap the response to a different type. This is usable for …\nReturns the RPC method\nCreate a new <code>RpcClient</code> with a transport that returns …\nCreate a new batch request.\nCreates a new <code>RpcClient</code> with the given transport.\nCreate a new <code>RpcClient</code> with the given transport.\nCreate a new poller task.\nCreate a new <code>BatchRequest</code> builder.\nCreate a new <code>RpcClient</code> with an HTTP transport.\nCreate a new <code>RpcClient</code> with an HTTP transport using a …\nReserve a request ID u64.\nGet a mutable reference to the params of the request.\nPauses the poller until it’s unpaused.\nReturns the default poll interval (milliseconds) for the …\nReturns the duration between polls.\nBuild a poller that polls a method with the given …\nReturns a reference to the request.\nPrepares an <code>RpcCall</code>.\nReturns a mutable reference to the request.\nPrepares an <code>RpcCall</code> with no parameters.\nResubscribe to the poller task.\nSend the batch future via its connection.\nSets the channel size for the poller task.\nSet the request to be a non-standard subscription (i.e. not\nSets a limit on the number of successful polls.\nSet the <code>is_local</code> flag.\nSet the poll interval for the client in milliseconds. …\nSets the duration between polls.\nSet the subscription status of the request.\nStarts the poller in a new task, returning a channel to …\nCreate a new <code>RpcClient</code> with the given transport and the …\nReturns a reference to the underlying transport.\nReturns a mutable reference to the underlying transport.\nTries to parse the given string as an HTTP URL.\nUnpauses the poller.\nSets the channel size for the poller task.\nSets the starting ID for the client.\nSets a limit on the number of successful polls.\nSets the poll interval for the client in milliseconds.\nSets the duration between polls.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nAn object that can be both sent and received over RPC, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSON-RPC 2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized.\nAn item received over an Ethereum pubsub transport.\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSON-RPC 2.0 response object containing a <code>ResponsePayload</code>…\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSON-RPC 2.0 response payload.\nAn object that can be received over RPC, borrowing from the\nAn RPC error.\nAn object that can be both sent and received over RPC.\nAn object that can be received over RPC.\nThe result of a JSON-RPC request.\nAn object that can be sent over RPC.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA string.\nA subscription ID.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nReturns the batch of <code>SerializedRequest</code> if this packet is …\nReturns the batch of <code>Response</code> if this packet is …\nExtracts revert data and tries decoding it into custom …\nExtracts revert data and tries decoding it into given …\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nReturns the ID as a number, if it is one.\nAttempt to extract revert data from the JsonRpcError be …\nReturns the <code>SerializedRequest</code> if this packet is …\nReturns the <code>Response</code> if this packet is …\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the error code if this a <code>ResponsePayload::Failure</code>\nReturns the error code if the payload of this response is …\nReturns the error data if this a <code>ResponsePayload::Failure</code>\nReturns a reference to the request extensions.\nReturns a mutable reference to the request extensions.\nReturns the first error code in this packet if it contains …\nReturns the first error data in this packet if it contains …\nReturns the first error message in this packet if it …\nReturns the first <code>ResponsePayload</code> in this packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>HeaderMap</code> from the request metadata if …\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCreate a new error payload for an internal error.\nCreate a new error payload for an internal error.\nCreate a new response with an internal error payload.\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCreate a new error payload for an invalid params error.\nCreate a new error payload for an invalid params error.\nCreate a new response with an invalid params error payload.\nCreate a new error payload for an invalid request.\nCreate a new error payload for an invalid request.\nCreate a new response with an invalid request error …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nAnalyzes the ErrorPayload and decides if the request …\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nChange the metadata of the request.\nChange type of the request parameters.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns a mutable reference to the request metadata (ID …\nReturns the request method.\nThe method name.\nReturns an iterator over the requests’ method names\nCreate a new error payload for a method not found error.\nCreate a new error payload for a method not found error.\nCreate a new response with a method not found error …\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nCreate a new error payload for a parse error.\nCreate a new error payload for a parse error.\nCreate a new response with a parsed error payload.\nReturns the payload of this response\nThe response payload.\nThe response payload.\nReturns an iterator over the responses’ payloads.\nPush a request into the packet.\nReturns all <code>SerializedRequest</code>.\nReturns a mutable reference to all <code>SerializedRequest</code>.\nReturns an iterator over the responses’ identifiers.\nReturns a all <code>Response</code>.\nFind responses by a list of IDs.\nThe notification payload.\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nSerialize the inner data into a <code>RawValue</code>.\nConvert the inner types into a <code>RawValue</code> by serializing …\nSerialize the payload of this response.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nReturns the <code>ResponsePayload</code> if this packet is …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nConverts this type into a <code>Result</code> returning the <code>ErrorPayload</code>…\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nRepresents an TrieAccount in the account trie.\nAccount information.\n-1 means all transactions\nReceipt envelope, as defined in EIP-2718.\nA vector of values\nThe hash of the block if the filter only targets a single …\nAn unsigned EIP-7702 authorization.\nBad block representation.\nThis represents a set of blobs, and its corresponding …\nBlock representation for RPC.\nError that can occur when converting other types to blocks\nA block hash <em>or</em> a block number\nA Block Identifier. …")