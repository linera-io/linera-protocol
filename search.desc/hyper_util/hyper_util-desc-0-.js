searchState.loadedDescShard("hyper_util", 0, "Utilities for working with hyper.\nHTTP client utilities\nRuntime utilities\nServer utilities.\nService utilities.\nLegacy implementations of <code>connect</code> module and <code>Client</code>\nProxy utilities\nA builder to configure a new <code>Client</code>.\nA Client to make outgoing HTTP requests.\nClient errors\nA <code>Future</code> that will resolve to an HTTP Response.\nCombine the configuration of this builder with a connector …\nBuild a client with this configuration and the default …\nCreate a builder to configure a new <code>Client</code>.\nConnectors used by the <code>Client</code>.\nReturns the info of the client connection on which this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSend a <code>GET</code> request to the supplied <code>Uri</code>.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nSets whether invalid header lines should be silently …\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nSet whether to support preserving original header cases.\nSets the exact size of the read buffer to <em>always</em> use.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nSets the max connection-level flow control for HTTP2\nSets the initial maximum of locally initiated (send) …\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames for HTTP2.\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSet whether the connection <strong>must</strong> use HTTP/2.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this was an error from <code>Connect</code>.\nConstruct a new Builder.\nSet an optional timeout for idle sockets being kept-alive. …\nSets the maximum idle connection per host allowed in the …\nProvide a timer to be used for timeouts and intervals in …\nSend a constructed <code>Request</code> using this <code>Client</code>.\nSet whether to retry requests that get disrupted before …\nSet whether to automatically add the <code>Host</code> header to …\nProvide a timer to be used for h2\n<code>CaptureConnection</code> allows callers to capture <code>Connected</code> …\nConnect to a destination, returning an IO transport.\nExtra information about the connected transport.\nDescribes a type returned by a connector.\nA connector for the <code>http</code> scheme.\nExtra information about the transport when an …\nCapture the connection for a given request\nReturn metadata describing the connection.\nRetrieve the connection metadata, if available\nDNS Resolution used by the <code>HttpConnector</code>.\nOption to enforce all <code>Uri</code>s have the <code>http</code> scheme.\nSet extra connection information to be set in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies the extra connection information into an <code>Extensions</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the connected transport negotiated HTTP/2 as …\nDetermines if the connected transport is to an HTTP proxy.\nGet the local address of the transport used.\nSet that the connected transport negotiated HTTP/2 as its …\nConstruct a new HttpConnector.\nCreate new <code>Connected</code> type with empty metadata.\nConstruct a new HttpConnector.\nPoison this connection\nProxy helpers\nSet whether the connected transport is to an HTTP proxy.\nGet the remote address of the transport used.\nSet the connect timeout.\nSet timeout for RFC 6555 (Happy Eyeballs) algorithm.\nSets the name of the interface to bind sockets produced by …\nSet that all sockets have <code>SO_KEEPALIVE</code> set with the …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet that all sockets are bound to the configured address …\nSet that all sockets are bound to the configured IPv4 or …\nSet that all sockets have <code>SO_NODELAY</code> set to the supplied …\nSets the value of the SO_RCVBUF option on the socket.\nSet that all socket have <code>SO_REUSEADDR</code> set to the supplied …\nSets the value of the SO_SNDBUF option on the socket.\nSets the value of the TCP_USER_TIMEOUT option on the …\nWait for the connection to be established\nAn iterator of IP addresses returned from <code>getaddrinfo</code>.\nA future to resolve a name returned by <code>GaiResolver</code>.\nA resolver using blocking <code>getaddrinfo</code> calls in a …\nError indicating a given string was not a valid domain …\nA domain name to resolve into IP addresses.\nView the hostname as a string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>GaiResolver</code>.\nTunnel Proxy via SOCKSv4\nTunnel Proxy via SOCKSv5\nTunnel Proxy via HTTP CONNECT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolve domain names locally on the client, rather than on …\nResolve domain names locally on the client, rather than on …\nCreate a new SOCKSv5 handshake service.\nCreate a new SOCKSv4 handshake service\nCreate a new Tunnel service.\nSend all messages of the handshake optmistically (without …\nUse User/Pass authentication method during handshake.\nAdd <code>proxy-authorization</code> header value to the CONNECT …\nAdd extra headers to be sent with the CONNECT request.\nProxy matchers\nA builder to create a <code>Matcher</code>.\nA matched proxy,\nA proxy matcher, usually built from environment variables.\nSet the target proxy for all destinations.\nGet any configured basic authorization.\nConstruct a <code>Matcher</code> using the configured values.\nStart a builder to configure a matcher.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a matcher reading the current environment variables.\nCreate a matcher from the environment or system.\nSet the target proxy for HTTP destinations.\nSet the target proxy for HTTPS destinations.\nCheck if the destination should be intercepted by a proxy.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the “no” proxy filter.\nGet any configured raw authorization.\nGet the <code>http::Uri</code> for the target proxy.\n<code>tokio</code> runtime components integration for <code>hyper</code>.\nFuture executor that utilises <code>tokio</code> threads.\nA wrapper that implements Tokio’s IO traits for an inner …\nA Timer that uses the tokio runtime.\nExtends an underlying <code>tokio</code> I/O with <code>hyper</code> I/O …\nExtends an underlying <code>hyper</code> I/O with <code>tokio</code> I/O …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the inner type.\nReturns a reference to the inner type.\nBorrow the inner type.\nReturns a mutable reference to the inner type.\nReturns a mutable reference to the inner type.\nMut borrow the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this wrapper and returns the inner type.\nConsumes this wrapper and returns the inner type.\nConsume this wrapper and get the inner type.\nWraps the inner I/O in an <code>WithHyperIo&lt;I&gt;</code>\nWraps the inner I/O in an <code>WithTokioIo&lt;I&gt;</code>\nCreate new executor that relies on <code>tokio::spawn</code> to execute …\nWrap a type implementing Tokio’s or hyper’s IO traits.\nCreate a new TokioTimer\nConnection utilities.\nHttp1 or Http2 connection.\nHttp1 or Http2 connection builder.\nA <code>Future</code> representing an HTTP/1 connection, returned from …\nHttp1 part of builder.\nHttp2 part of builder.\nExactly equivalent to <code>Http2ServerConnExec</code>.\nAn upgradable <code>Connection</code>, returned by …\nSets whether to use an adaptive flow control.\nSet whether the <code>date</code> header should be included in HTTP …\nSet whether the <code>date</code> header should be included in HTTP …\nEnables the extended CONNECT protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nHttp1 configuration.\nHttp1 configuration.\nOnly accepts HTTP/1\nHttp2 configuration.\nHttp2 configuration.\nOnly accepts HTTP/2\nSet whether HTTP/1 connections will silently ignored …\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake this Connection static, instead of borrowing from …\nMake this Connection static, instead of borrowing from …\nReturns <code>true</code> if this builder can serve an HTTP/1.1-based …\nReturns <code>true</code> if this builder can serve an HTTP/2-based …\nEnables or disables HTTP/1 keep-alive.\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSet the maximum buffer size for the connection.\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nSet the maximum number of headers.\nConfigures the maximum number of local reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreate a new auto connection builder.\nAggregates flushes to better support pipelined responses.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will preserve the original …\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>, with the …\nBind a connection together with a <code>Service</code>, with the …\nBind a connection together with a <code>Service</code>, with the …\nSet the timer used in background tasks.\nSet the timer used in background tasks.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections will write header names as …\nUpgrade utilities.\nSet whether HTTP/1 connections should try to use vectored …\nThe deconstructed parts of an <code>Upgraded</code> type.\nTries to downcast the internal trait object to the type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe original IO object used before the upgrade.\nA buffer of bytes that have been read but not processed as …\nA tower <code>Service</code> converted into a hyper <code>Service</code>.\nResponse future for <code>TowerToHyperService</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TowerToHyperService</code> from a tower service.")