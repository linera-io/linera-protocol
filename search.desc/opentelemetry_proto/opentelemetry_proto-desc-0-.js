searchState.loadedDescShard("opentelemetry_proto", 0, "This crate contains generated files from …\nGenerated files using <code>tonic</code> and <code>prost</code>\nService stub and clients\nCommon types used across all signals\nGenerated types used in logging.\nGenerated types used in metrics.\nGenerated types used in resources.\nGenerated types used in traces.\nA developer-facing human-readable message in English. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nThe details of a partially successful export request.\nThe number of rejected log records.\nAn array of ResourceLogs. For data coming from a single …\nService that can be used to push logs between one …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nService that can be used to push logs between one …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nA developer-facing human-readable message in English. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nThe details of a partially successful export request.\nThe number of rejected data points.\nAn array of ResourceMetrics. For data coming from a single …\nService that can be used to push metrics between one …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nService that can be used to push metrics between one …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nA developer-facing human-readable message in English. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe details of a partially successful export request.\nThe number of rejected spans.\nAn array of ResourceSpans. For data coming from a single …\nGenerated client implementations.\nGenerated server implementations.\nService that can be used to push spans between one …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nService that can be used to push spans between one …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nAnyValue is used to represent any type of attribute value. …\nArrayValue is a list of AnyValue messages. We need …\nA reference to an Entity. Entity represents an object of …\nInstrumentationScope is a message representing the …\nKeyValue is a key-value pair that is used to store Span …\nKeyValueList is a list of KeyValue messages. We need …\nNested message and enum types in <code>AnyValue</code>.\nAdditional attributes that describe the scope. [Optional]. …\nDescriptive (non-identifying) attribute keys of the entity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttribute Keys that identify the entity. MUST not change …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn empty instrumentation scope name means the name is …\nThe Schema URL, if known. This is the identifier of the …\nDefines the type of the entity. MUST not change during the …\nThe value is one of the listed fields. It is valid for all …\nArray of values. The array may be empty (contain 0 …\nA collection of key/value pairs of key-value pairs. The …\nThe value is one of the listed fields. It is valid for all …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe zero value for the enum. Should not be used for …\nA log record according to OpenTelemetry Log Data Model: …\nLogRecordFlags represents constants used to interpret the …\nLogsData represents the logs data that can be stored in a …\nA collection of ScopeLogs from a Resource.\nA collection of Logs produced by a Scope.\nPossible values for LogRecord.SeverityNumber.\nBits 0-7 are used for trace flags.\nUNSPECIFIED is the default SeverityNumber, it MUST NOT be …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nAdditional attributes that describe the specific event …\nA value containing the body of the log record. Can be for …\nA unique identifier of event category/type. All events …\nFlags, a bit field. 8 least significant bits are the trace …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SeverityNumber</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>LogRecordFlags</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SeverityNumber</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>LogRecordFlags</code>.\nA list of log records.\nTime when the event was observed by the collection system. …\nThe resource for the logs in this message. If this field …\nAn array of ResourceLogs. For data coming from a single …\nThe Schema URL, if known. This is the identifier of the …\nThe Schema URL, if known. This is the identifier of the …\nThe instrumentation scope information for the logs in this …\nA list of ScopeLogs that originate from a resource.\nSets <code>severity_number</code> to the provided enum value.\nReturns the enum value of <code>severity_number</code>, or the default …\nNumerical value of the severity, normalized to values …\nThe severity text (also known as log level). The original …\nA unique identifier for a span within a trace, assigned …\ntime_unix_nano is the time when the event occurred. Value …\nA unique identifier for a trace. All logs from the same …\nAggregationTemporality defines how a metric aggregator …\nCUMULATIVE is an AggregationTemporality for a metric …\nDataPointFlags is defined as a protobuf ‘uint32’ type …\nDELTA is an AggregationTemporality for a metric aggregator …\nThe zero value for the enum. Should not be used for …\nA representation of an exemplar, which is a sample input …\nExponentialHistogram represents the type of a metric that …\nExponentialHistogramDataPoint is a single data point in a …\nGauge represents the type of a scalar metric that always …\nHistogram represents the type of a metric that is …\nHistogramDataPoint is a single data point in a timeseries …\nDefines a Metric which has one or more timeseries.  The …\nMetricsData represents the metrics data that can be stored …\nThis DataPoint is valid but has no recorded value.  This …\nNumberDataPoint is a single data point in a timeseries …\nA collection of ScopeMetrics from a Resource.\nA collection of Metrics produced by an Scope.\nSum represents the type of a scalar metric that is …\nSummary metric data are used to convey quantile summaries, …\nSummaryDataPoint is a single data point in a timeseries …\nUNSPECIFIED is the default AggregationTemporality, it MUST …\nReturns the enum value of <code>aggregation_temporality</code>, or the …\nReturns the enum value of <code>aggregation_temporality</code>, or the …\nReturns the enum value of <code>aggregation_temporality</code>, or the …\naggregation_temporality describes if the aggregator …\naggregation_temporality describes if the aggregator …\naggregation_temporality describes if the aggregator …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nThe set of key/value pairs that uniquely identify the …\nThe set of key/value pairs that uniquely identify the …\nThe set of key/value pairs that uniquely identify the …\nThe set of key/value pairs that uniquely identify the …\nbucket_counts is an optional field contains the count …\ncount is the number of values in the population. Must be …\ncount is the number of values in the population. Must be …\ncount is the number of values in the population. Must be …\nData determines the aggregation type (if any) of the …\ndescription of the metric, which can be used in …\nNested message and enum types in <code>Exemplar</code>.\n(Optional) List of exemplars collected from measurements …\n(Optional) List of exemplars collected from measurements …\n(Optional) List of exemplars collected from measurements …\nexplicit_bounds specifies buckets with explicitly defined …\nNested message and enum types in …\nThe set of key/value pairs that were filtered out by the …\nFlags that apply to this specific data point.  See …\nFlags that apply to this specific data point.  See …\nFlags that apply to this specific data point.  See …\nFlags that apply to this specific data point.  See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>AggregationTemporality</code>, or <code>None</code> if …\nConverts an <code>i32</code> to a <code>DataPointFlags</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf “true” means that the sum is monotonic.\nReturns <code>true</code> if <code>value</code> is a variant of …\nReturns <code>true</code> if <code>value</code> is a variant of <code>DataPointFlags</code>.\nReturns the value of <code>max</code>, or the default value if <code>max</code> is …\nReturns the value of <code>max</code>, or the default value if <code>max</code> is …\nmax is the maximum value over (start_time, end_time].\nmax is the maximum value over (start_time, end_time].\nAdditional metadata attributes that describe the metric. …\nNested message and enum types in <code>Metric</code>.\nA list of metrics that originate from an instrumentation …\nReturns the value of <code>min</code>, or the default value if <code>min</code> is …\nReturns the value of <code>min</code>, or the default value if <code>min</code> is …\nmin is the minimum value over (start_time, end_time].\nmin is the minimum value over (start_time, end_time].\nname of the metric.\nnegative carries the negative range of exponential bucket …\nNested message and enum types in <code>NumberDataPoint</code>.\npositive carries the positive range of exponential bucket …\n(Optional) list of values at different quantiles of the …\nThe resource for the metrics in this message. If this …\nAn array of ResourceMetrics. For data coming from a single …\nscale describes the resolution of the histogram.  …\nThe Schema URL, if known. This is the identifier of the …\nThe Schema URL, if known. This is the identifier of the …\nThe instrumentation scope information for the metrics in …\nA list of metrics that originate from a resource.\nSets <code>aggregation_temporality</code> to the provided enum value.\nSets <code>aggregation_temporality</code> to the provided enum value.\nSets <code>aggregation_temporality</code> to the provided enum value.\n(Optional) Span ID of the exemplar trace. span_id may be …\nStartTimeUnixNano is optional but strongly encouraged, see …\nStartTimeUnixNano is optional but strongly encouraged, see …\nStartTimeUnixNano is optional but strongly encouraged, see …\nStartTimeUnixNano is optional but strongly encouraged, see …\nReturns the value of <code>sum</code>, or the default value if <code>sum</code> is …\nReturns the value of <code>sum</code>, or the default value if <code>sum</code> is …\nsum of the values in the population. If count is zero then …\nsum of the values in the population. If count is zero then …\nsum of the values in the population. If count is zero then …\nNested message and enum types in <code>SummaryDataPoint</code>.\nTimeUnixNano is required, see the detailed comments above …\nTimeUnixNano is required, see the detailed comments above …\nTimeUnixNano is required, see the detailed comments above …\nTimeUnixNano is required, see the detailed comments above …\ntime_unix_nano is the exact time when this exemplar was …\n(Optional) Trace ID of the exemplar trace. trace_id may be …\nunit in which the metric value is reported. Follows the …\nThe value itself.  A point is considered invalid when one …\nThe value of the measurement that was recorded. An …\nzero_count is the count of values that are either exactly …\nZeroThreshold may be optionally set to convey the width of …\nThe value of the measurement that was recorded. An …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nBuckets are a set of bucket counts, encoded in a …\nbucket_counts is an array of count values, where …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOffset is the bucket index of the first entry in the …\nData determines the aggregation type (if any) of the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe value itself.  A point is considered invalid when one …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nRepresents the value at a given quantile of a distribution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe quantile of a distribution. Must be in the interval …\nThe value at the given quantile of a distribution.\nResource information.\nSet of attributes that describe the resource. Attribute …\ndropped_attributes_count is the number of dropped …\nSet of entities that participate in this Resource.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 8 and 9 are used to indicate that the parent span or …\nThe zero value for the enum. Should not be used for …\nA collection of ScopeSpans from a Resource.\nA collection of Spans produced by an InstrumentationScope.\nA Span represents a single operation performed by a single …\nSpanFlags represents constants used to interpret the …\nThe Status type defines a logical error model that is …\nBits 0-7 are used for trace flags.\nTracesData represents the traces data that can be stored …\nString value of the enum field names used in the ProtoBuf …\nattributes is a collection of key/value pairs. Note, …\nReturns the enum value of <code>code</code>, or the default if the …\nThe status code.\ndropped_attributes_count is the number of attributes that …\ndropped_events_count is the number of dropped events. If …\ndropped_links_count is the number of dropped links after …\nend_time_unix_nano is the end time of the span. On the …\nevents is a collection of Event items.\nFlags, a bit field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SpanFlags</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SpanFlags</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nDistinguishes between spans generated in a particular …\nlinks is a collection of Links, which are references from …\nA developer-facing human readable error message.\nA description of the span’s operation.\nThe <code>span_id</code> of this span’s parent span. If this is a …\nThe resource for the spans in this message. If this field …\nAn array of ResourceSpans. For data coming from a single …\nThe Schema URL, if known. This is the identifier of the …\nThe Schema URL, if known. This is the identifier of the …\nThe instrumentation scope information for the spans in …\nA list of ScopeSpans that originate from a resource.\nSets <code>code</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nNested message and enum types in <code>Span</code>.\nA unique identifier for a span within a trace, assigned …\nA list of Spans that originate from an instrumentation …\nstart_time_unix_nano is the start time of the span. On the …\nNested message and enum types in <code>Status</code>.\nAn optional final status for this span. Semantically when …\nA unique identifier for a trace. All spans from the same …\ntrace_state conveys information about request position in …\nIndicates that the span describes a request to some remote …\nIndicates that the span describes consumer receiving a …\nEvent is a time-stamped annotation of the span, consisting …\nIndicates that the span represents an internal operation …\nA pointer from the current span to another span in the …\nIndicates that the span describes a producer sending a …\nIndicates that the span covers server-side handling of an …\nSpanKind is the type of span. Can be used to specify …\nUnspecified. Do NOT use as default. Implementations MAY …\nString value of the enum field names used in the ProtoBuf …\nattributes is a collection of attribute key/value pairs on …\nattributes is a collection of attribute key/value pairs on …\ndropped_attributes_count is the number of dropped …\ndropped_attributes_count is the number of dropped …\nFlags, a bit field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SpanKind</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SpanKind</code>.\nname of the event. This field is semantically required to …\nA unique identifier for the linked span. The ID is an …\ntime_unix_nano is the time the event occurred.\nA unique identifier of a trace that this linked span is …\nThe trace_state associated with the link.\nThe Span contains an error.\nThe Span has been validated by an Application developer or …\nFor the semantics of status codes see …\nThe default status.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>StatusCode</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StatusCode</code>.\nWrapper type for Vec&lt;<code>KeyValue</code>&gt;\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")