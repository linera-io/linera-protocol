searchState.loadedDescShard("alloy_serde", 0, "alloy-serde\nGeneric type for capturing additional fields when …\nAn extension to a struct that allows to capture additional …\nDeserialized this type into another container type.\nDeserialized this type into another container type.\nSerde functions for (de)serializing using FromStr and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nReturns the wrapped value.\nThe inner struct.\nInserts a given value as serialized <code>serde_json::Value</code> into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the wrapped value.\nCreates a new <code>OtherFields</code> instance.\nCreates a new <code>WithOtherFields</code> instance.\nFor use with serde’s <code>deserialize_with</code> on a sequence that …\nAll fields not present in the inner struct.\nSerde functions for encoding primitive numbers using the …\nFor use with serde’s <code>deserialize_with</code> on a field that …\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nReturns the deserialized value of the field.\nSerde functions for encoding the TTD using a Geth …\nInserts a given value as serialized <code>serde_json::Value</code> into …\nDeserialize a quoted string to a type <code>T</code> using FromStr.\nSerialize a type <code>T</code> that implements fmt::Display as a …\nSerde functions for encoding a <code>BTreeMap</code> of primitive …\nDeserializes a primitive number from a “quantity” hex …\nSerde functions for encoding a <code>HashMap</code> of primitive …\nSerde functions for encoding optional primitive numbers …\nSerializes a primitive number as a “quantity” hex …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nSerde functions for encoding a list of primitive numbers …\nDeserializes a <code>BTreeMap</code> of primitive numbers from a “…\nSerializes a <code>BTreeMap</code> of primitive numbers as a “quantity…\nDeserializes a <code>HashMap</code> of primitive numbers from a “…\nSerializes a <code>HashMap</code> of primitive numbers as a “quantity…\nDeserializes an optional primitive number from a “…\nSerializes an optional primitive number as a “quantity”…\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes a vector of primitive numbers from a “…\nSerializes a vector of primitive numbers as a “quantity…\nA full 32-byte key (tried first during deserialization)\nA storage key type that can be serialized to and from a …\nA number (fallback if B256 deserialization fails)\nReturns the key as a <code>B256</code> value.\nDeserializes the input into a storage map, using …\nReturns the argument unchanged.\nConverts a Bytes value into a B256, accepting inputs that …\nCalls <code>U::from(self)</code>.\nDeserializes an optional TTD value from JSON number or …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nSerializes an optional TTD as a JSON number.")