searchState.loadedDescShard("cranelift_frontend", 0, "Cranelift IR builder library.\nImplementation of the <code>InstBuilder</code> that has one convenience …\nTemporary object used to build a single Cranelift IR …\nStructure used for translating a series of functions into …\nUnlike with <code>br_table</code>, <code>Switch</code> cases may be sparse or …\nVersion number of this crate.\nAn opaque reference to a variable.\nCreates a parameter for a specific <code>Block</code> by appending it …\nAppend parameters to the given <code>Block</code> corresponding to the …\nAppend parameters to the given <code>Block</code> corresponding to the …\nReturn the raw bit encoding for this instance.\nReturn the underlying index value as a <code>u32</code>.\nRetrieves all the parameters for a <code>Block</code> currently …\nCalls libc.memcmp\nCalls libc.memcpy\nCalls libc.memmove\nCalls libc.memset\nChanges the destination of a jump instruction after …\nCreates a new <code>Block</code> and returns its reference.\nCreates a dynamic stack slot in the function, to be used by\nDeclares a global value accessible to the function.\nCreates a jump table in the function, to be used by …\nCreates a sized stack slot in the function, to be used by …\nGet the block that this builder is currently at.\nReturns a <code>FuncCursor</code> pointed at the current position ready …\nDeclare that the given value is a GC reference that …\nDeclares the type of a variable, panicking if it is …\nDeclare that all uses of the given variable must be …\nRegister a new definition of a user variable. The type of …\nBuild the switch\nOptimised <code>Self::call_memcmp</code> for small copies.\nOptimised memcpy or memmove for small copies.\nCalls libc.memset\nMake sure that the current block is inserted in the layout.\nGet a reference to all existing entries\nDeclare that translation of the current function is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from a <code>u32</code>.\nThe function currently being built. This field is public …\nDeclare an external function import.\nAdds a signature which can later be used to declare an …\nReturns an object with the <code>InstBuilder</code> trait that allows …\nInsert <code>block</code> in the layout <em>after</em> the existing block <code>after</code>.\nReturns the result values of an instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if and only if the current <code>Block</code> is sealed …\nCreates a new <code>FunctionBuilder</code> structure that will operate …\nCreates a <code>FunctionBuilderContext</code> structure. The structure …\nCreate a new empty switch\nEffectively calls seal_block on all unsealed blocks in the …\nDeclares that all the predecessors of this block are known.\nMark a block as “cold”.\nSet a switch entry\nSet the source location that should be assigned to all new …\nSet label for <code>Value</code>\nRetrieves the signature with reference <code>sigref</code> previously …\nAfter the call to this function, new instructions will be …\nDeclares the type of a variable.\nRegisters a new definition of a user variable. This …\nReturns the Cranelift IR necessary to use a previously …\nReturns the Cranelift IR value corresponding to the …")