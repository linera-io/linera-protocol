searchState.loadedDescShard("dynasmrt", 0, "This crate provides runtime support for dynasm-rs. It …\nA full assembler implementation. Supports labels, all …\nA struct representing an offset into the assembling buffer …\nThis targets a local label with the specified name that …\nA check (like <code>Modifier::check</code> or <code>Modifier::check_exact</code>) …\nA duplicate label dynamic/global label was defined\nA dynamic label, like <code>=&gt;value:</code>\nThis targets the specified dynamic label.\nA dynamic label\nThis trait represents the interface that must be …\nThe various error types generated by dynasm functions.\nThis trait extends DynasmApi to not only allow assembling, …\nA read-only shared reference to the executable buffer …\nThis targets the specified address.\nThis targets a local label with the specified name that …\nA global label, like <code>-&gt;label:</code>\nThis targets a global label with the specified name.\nThe user tried to declare a relocation too far away from …\nA description of a label. Used for error reporting.\nA local label, like <code>label:</code>\nAn already resolved relocation that needs to be adjusted …\nAllows modification of already committed assembly code. …\nPreforms the same action as the <code>Pointer!</code> macro, but casts …\nThis macro takes a *const pointer from the source operand, …\nA trait abstracting over architectural register families. …\nThe relocation info type this assembler uses.\nAn assembler that is purely a <code>Vec&lt;u8&gt;</code>. It doesn’t …\nA description of a relocation target. Used for error …\nThis struct is a wrapper around an <code>Assembler</code> normally …\nAn unknown label\nAn assembler that assembles into a <code>Vec&lt;u8&gt;</code>, while …\nRuntime support for the aarch64 architecture assembling …\nPush filler until the assembling target end is aligned to …\nUse an <code>UncommittedModifier</code> to alter uncommitted code.\nUse an <code>UncommittedModifier</code> to alter uncommitted code. This …\nUse a <code>Modifier</code> to alter committed code directly. While …\nUse an <code>UncommittedModifier</code> to alter uncommitted code. This …\nRecord a relocation spot for a backward reference to a …\nEquivalent of backward_reloc, but takes a non-encoded …\nRecord a relocation spot to an arbitrary target.\nEquivalent of bare_reloc, but takes a non-encoded …\nCheck that the modifier cursor has not moved past the …\nChecks that the current modification offset is not larger …\nCheck that the modifier cursor is exactly at the specified …\nChecks that the current modification offset is exactly the …\nReturns the integer ID of the register. Usually equivalent …\nResolves any relocations emitted to the assembler before …\nCommit code, flushing the temporary internal assembling …\nThis module provides several reusable compoments for …\nRecord the definition of a dynamic label\nRecord a relocation spot for a reference to a dynamic label\nEquivalent of dynamic_reloc, but takes a non-encoded …\nThe whole point. This macro compiles given assembly/rust …\nSimilar to <code>dynasm!</code>, but the calls to the assembler are …\nDestroys this assembler, returning the <code>Vec&lt;u8&gt;</code> contained …\nFinalizes the <code>VecAssembler</code>, returning the resulting <code>Vec&lt;u8&gt;</code>…\nFinalize this assembler, returning the internal …\nRecord a relocation spot for a forward reference to a …\nEquivalent of forward_reloc, but takes a non-encoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the internal ID of this dynamic label. This is only …\nRecord the definition of a global label\nRecord a relocation spot for a reference to a global label\nEquivalent of global_reloc, but takes a non-encoded …\nMove the modifier cursor to the selected location.\nSets the current modification offset to the given value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides access to the assemblers internal labels registry\nProvides access to the assemblers internal labels registry\nProvides mutable access to the assemblers internal labels …\nProvides mutable access to the assemblers internal labels …\nRecord the definition of a local label\nGain read-access to the internal <code>ExecutableBuffer</code>. While …\nThis module implements some wrappers around Mmap/MmapMut …\nCreates a new <code>SimpleAssembler</code>, containing an empty <code>Vec</code>.\nCreates a new VecAssembler, with the specified base …\nCreate a new, empty assembler, with initial allocation …\ncreate a new uncommittedmodifier\nCreate a new dynamic label ID\nCreate a new dynamic label ID\nReport the current offset into the assembling target\nThe assembling buffer.\nPush a byte into the assembling target\nPush a signed word into the assembling target\nPush a signed doubleword into the assembling target\nPush a signed quadword into the assembling target\nPush a signed byte into the assembling target\nPush an usigned word into the assembling target\nPush an usigned doubleword into the assembling target\nPush an usigned quadword into the assembling target\nCreate an executor which can be used to execute code while …\nThis module defines the <code>Relocation</code> trait and several …\nThis function is called in when a runtime error has to be …\nRuntime support for the x64 architecture assembling target.\nRuntime support for the x86 architecture assembling target.\nRelocation implementation for the aarch64 architecture.\nAn aarch64 Assembler. This is aliased here for backwards …\nAn aarch64 AssemblyModifier. This is aliased here for …\n1, 2, 4, 8 or 16-bytes scalar FP / vector SIMD registers.\n4 or 8-byte general purpopse registers, where X31 is the …\n0x1F addresses both XZR and SP (disambiguated by context). …\nAn aarch64 UncommittedModifier. This is aliased here for …\nHelper function for validating that a given value can be …\nHelper function for validating that a given value can be …\nHelper function for validating that a given value can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA registry of labels. Contains all necessessities for …\nLiteral pool implementation. One can programmatically push …\nA registry of relocations that have been encoded …\nThis struct implements a protection-swapping assembling …\nAn abstraction of a relocation of type <code>R</code>, located at …\nA registry of relocations and the respective labels they …\nAdd a relocation to this registry.\nAdd a new patch targetting the dynamic label <code>id</code>.\nAdd a new patch targetting the global label <code>name</code>.\nAdd a new patch targetting the next local label <code>name</code>. As …\nPatch <code>buffer</code> so that this relocation will still point to …\nAdd extra alignment for the next value in the literal pool\nTake all items from another registry and add them to this …\nCommits the data from <code>new</code> into the managed memory, calling …\nReturns the amount of bytes already committed to the …\nDefine a the dynamic label <code>id</code> to be located at <code>offset</code>.\nDefine a the global label <code>name</code> to be located at <code>offset</code>.\nDefine a the local label <code>name</code> to be located at <code>offset</code>.\nEmit this literal pool into the specified assembler\nReturns the current start address of the managed …\nThe offset, backwards, from location that the actual field …\nfinalizes the currently committed part of the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all defined managed relocations.\nThe AssemblyOffset at which this relocation was emitted\nReturns if this patch requires adjustment when the address …\nCreate a new memory manager, with <code>initial_mmap_size</code> data …\nCreate a new, empty label registry\ncreate a new <code>PatchLoc</code>\nCreate a new, empty relocation registry.\nCreate a new, empty managed relocation registry.\nCreate a new, empty literal pool\nCreate a new dynamic label id\nPatch <code>buffer</code> so that this relocation patch will point to …\nEncode the relative address of a label into the literal …\nEncode the relative address of a label into the literal …\nEncode the relative address of a label into the literal …\nEncode the relative address of a label into the literal …\nEncode <code>value</code> into the literal pool.\nEncode <code>value</code> into the literal pool.\nEncode <code>value</code> into the literal pool.\nEncode <code>value</code> into the literal pool.\nReturns a range that covers the entire relocation in its …\nCreate an atomically refcounted reference to the internal …\nThe offset, backwards, to be subtracted from location to …\nThe type of relocation to be emitted.\nRemove all managed relocations whose byte fields start in …\nReturns the offset at which the dynamic label <code>id</code> was …\nReturns the offset at which the global label <code>name</code> was …\nReturns the offset at which the last local label named <code>id</code> …\nReturn an iterator through all defined relocations …\nReturn an iterator through all defined relocations …\nReturn an iterator through all defined relocations …\nReturn an iterator through all defined relocations …\nA constant offset added to the destination address of this …\nReturns the actual value that should be inserted at the …\nBorrow the internal memory buffer mutably\nA structure holding a buffer of executable memory. It also …\nExecutableBuffer equivalent that holds a buffer of mutable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange this mutable buffer into an executable buffer.\nChange this executable buffer into a mutable buffer.\nCreate a new executable buffer, backed by a buffer of size …\nCreate a new mutable buffer, backed by a buffer of size …\nObtain a pointer into the executable memory from an offset …\nSet the length of the usable part of this mutable buffer. …\nQuery the backing size of this executable buffer\nQuery the backing size of this mutable buffer\nAn absolute relocation to a relative address, i.e. trying …\nA byte-sized relocation\nA four-byte sized relocation\nThe encoded representation for this relocation that is …\nError returned when encoding a relocation failed\nAn 8-byte sized relocation\nA relative relocation to an absolute address, i.e. trying …\nA simple, PC-relative relocation. These can be encoded …\nUsed to inform assemblers on how to implement relocations …\nSpecifies what kind of relocation a relocation is.\nA descriptor for the size of a relocation. This also …\nA two-byte relocation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconstruct this relocation from an encoded representation.\nConverts back from numeric value to RelocationKind\nconstruct this relocation from a simple size. This is used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies what kind of relocation this relocation instance …\nSpecifies the default page size on this platform.\nRead a value from a buffer of size <code>self.size()</code> in the …\nThe size of the slice of bytes affected by this relocation\nWrite a value into a buffer of size <code>self.size()</code> in the …\nAn x64 Assembler. This is aliased here for backwards …\nAn x64 AssemblyModifier. This is aliased here for …\n8-byte control registers.\n1, 2, 4 or 8-byte general purpose “quad-word” …\n16 or 32-byte SSE registers.\nAn x64 UncommittedModifier. This is aliased here for …\nRelocation implementation for the x64 architecture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn x86 Assembler. This is aliased here for backwards …\nAn x86 AssemblyModifier. This is aliased here for …\n16-byte bound registers.\n4-byte control registers.\n4-byte debug registers.\n1, 2 or 4-byte general purpose “double-word” registers.\n10-byte floating point registers.\nHigh-byte general purpose registers.\n8-byte MMX registers.\n2-byte segment registers.\n16 or 32-byte SSE registers.\nAn x86 UncommittedModifier. This is aliased here for …\nRelocation implementation for the x86 architecture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")