searchState.loadedDescShard("nybbles", 0, "nybbles\nStructure representing a sequence of nibbles.\nIterator over individual nibbles within a <code>Nibbles</code> …\nReturns a mutable reference to the underlying <code>U256</code>.\nClears the current nibbles.\nReturns the length of the common prefix between this …\nReturns <code>true</code> if this nibble sequence ends with the given …\nExtend the current nibbles with another nibbles.\nExtend the current nibbles with another byte slice.\nExtend the current nibbles with another byte slice.\nReturns the first nibble of this nibble sequence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Nibbles</code> instance from the given iterator …\nCreates a new <code>Nibbles</code> instance from the given nibbles.\nCreates a new <code>Nibbles</code> instance from the given nibbles.\nReturns the nibble at the given index.\nGets the byte at the given index by combining two …\nGets the byte at the given index by combining two …\nReturns the nibble at the given index.\nIncrements the nibble sequence by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>Nibbles</code> is empty.\nThe last element of the hex vector is used to determine …\nReturns an iterator over the nibbles.\nJoin two nibble sequences together.\nReturns the last nibble of this nibble sequence.\nReturns the total number of nibbles in this <code>Nibbles</code>.\nCreates a new empty <code>Nibbles</code> instance.\nPacks the nibbles into the given slice.\nPacks the nibbles into the given slice.\nPacks the nibbles into the given slice without checking …\nPacks the nibbles into the given pointer.\nPops a nibble from the end of the current nibbles.\nPushes a nibble to the end of the current nibbles.\nPushes a nibble to the end of the current nibbles without …\nSets the nibble at the given index.\nSets the nibble at the given index, without checking its …\nCreates new nibbles containing the nibbles in the …\nCreates new nibbles containing the nibbles in the …\nInitializes a smallvec with the given length and a closure …\nReturns <code>true</code> if this nibble sequence starts with the given …\nConverts the nibbles into a vector of nibbles.\nTruncates the current nibbles to the given length.\nConverts a byte slice into a <code>Nibbles</code> instance containing …\nConverts a byte slice into a <code>Nibbles</code> instance containing …")