searchState.loadedDescShard("wasm_thread", 0, "An error returned by <code>LocalKey::try_with</code>.\nThread factory, which can be used in order to configure …\nContains the error value\nContains the error value\nAn owned permission to join on a thread (block on its …\nA thread local storage (TLS) key which owns its contents.\nContains the success value\nContains the success value\nA specialized <code>Result</code> type for threads.\nA specialized <code>Result</code> type for threads.\nA scope to spawn scoped threads in.\nAn owned permission to join on a scoped thread (block on …\nA handle to a thread.\nA handle to a thread.\nA unique identifier for a running thread.\nA unique identifier for a running thread.\nRegisters a function to run for every newly thread spawned.\nThis returns a numeric identifier for the thread …\nReturns an estimate of the default amount of parallelism a …\nGets a handle to the thread that invokes it.\nGets a handle to the thread that invokes it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Thread</code> from a raw pointer.\nReturns a copy of the contained value.\nGets the thread’s unique identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Thread</code>, returning a raw pointer.\nChecks if the associated thread has finished running its …\nChecks if the associated thread has finished running its …\nWaits for the associated thread to finish.\nWaits for the associated thread to finish.\nNames the thread-to-be. Currently the name is used for …\nGets the thread’s name.\nGenerates the base configuration for spawning a thread, …\nDisables running and inheriting spawn hooks.\nDetermines whether the current thread is unwinding because …\nBlocks unless or until the current thread’s token is …\nBlocks unless or until the current thread’s token is …\nUses <code>park_timeout</code>.\nReplaces the contained value, returning the old value.\nReplaces the contained value, returning the old value.\nCreates a scope for spawning scoped threads.\nSets or initializes the contained value.\nSets or initializes the contained value.\nPuts the current thread to sleep for at least the …\nPuts the current thread to sleep for at least the …\nUses <code>sleep</code>.\nPuts the current thread to sleep until the specified …\nSpawns a new thread, returning a <code>JoinHandle</code> for it.\nSpawns a new thread within a scope, returning a …\nSpawns a new thread by taking ownership of the <code>Builder</code>, …\nSpawns a new scoped thread using the settings set through …\nSpawns a new thread without any lifetime restrictions by …\nSets the size of the stack (in bytes) for the new thread.\nTakes the contained value, leaving <code>Default::default()</code> in …\nTakes the contained value, leaving <code>Default::default()</code> in …\nExtracts a handle to the underlying thread.\nExtracts a handle to the underlying thread.\nAcquires a reference to the value in this TLS key.\nAtomically makes the handle’s token available if it is …\nAcquires a reference to the value in this TLS key.\nAcquires a reference to the contained value.\nAcquires a mutable reference to the contained value.\nCooperatively gives up a timeslice to the OS scheduler.")