searchState.loadedDescShard("flume", 0, "Flume\nAll channel receivers were dropped and so the message has …\nAll channel receivers were dropped and so the message has …\nAll senders were dropped and no messages are waiting in …\nAll senders were dropped and no messages are waiting in …\nAll senders were dropped and no messages are waiting in …\nAn fixed-sized iterator over the msgs drained from a …\nThe channel was empty when the receive was attempted.\nThe channel the message is sent on has a finite capacity …\nAn owned iterator over the msgs received from a channel.\nAn iterator over the msgs received from a channel.\nThe receiving end of a channel.\nAn error that may be emitted when attempting to wait for a …\nAn error that may be emitted when attempting to wait for a …\nAn error that may be emitted when attempting to send a …\nAn error that may be emitted when sending a value into a …\nA transmitting end of a channel.\nA timeout occurred when attempting to send the message.\nA timeout occurred when attempting to receive a message.\nAn non-blocking iterator over the msgs received from a …\nAn error that may be emitted when attempting to fetch a …\nAn error that may be emitted when attempting to send a …\nA sender that does not prevent the channel from being …\nFutures and other types that allow asynchronous …\nCreate a channel with a maximum capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nClone this sender. <code>Sender</code> acts as a handle to the ending a …\nClones this <code>WeakSender</code>.\nClone this receiver. <code>Receiver</code> acts as a handle to the …\nCreates a <code>WeakSender</code> that does not keep the channel open.\nTake all msgs currently sitting in the channel and produce …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, yielding the message that failed to …\nConsume the error, yielding the message that failed to …\nConsume the error, yielding the message that failed to …\nCreates a self-owned but semantically equivalent …\nConvert this receiver into a future that asynchronously …\nConvert this sender into a future that asynchronously …\nConvert this sender into a sink that allows asynchronously …\nConvert this receiver into a stream that allows …\nReturns true if all receivers for this channel have been …\nReturns true if all senders for this channel have been …\nReturns true if the channel is empty. Note: Zero-capacity …\nReturns true if the channel is empty. Note: Zero-capacity …\nReturns true if the channel is full. Note: Zero-capacity …\nReturns true if the channel is full. Note: Zero-capacity …\nCreate a blocking iterator over the values received on the …\nReturns the number of messages in the channel\nReturns the number of messages in the channel.\nGet the number of receivers that currently exist.\nGet the number of receivers that currently exist, …\nWait for an incoming value from the channel associated …\nAsynchronously receive a value from the channel, returning …\nWait for an incoming value from the channel associated …\nWait for an incoming value from the channel associated …\nReturns whether the senders are belong to the same channel.\nReturns whether the receivers are belong to the same …\nSend a value into the channel, returning an error if all …\nAsynchronously send a value into the channel, returning an …\nSend a value into the channel, returning an error if all …\nSend a value into the channel, returning an error if all …\nGet the number of senders that currently exist, including …\nGet the number of senders that currently exist.\nCreate an asynchronous sink that uses this sender to …\nCreate an asynchronous stream that uses this receiver to …\nA non-blocking iterator over the values received on the …\nAttempt to fetch an incoming value from the channel …\nAttempt to send a value into the channel. If the channel …\nCreate a channel with no maximum capacity.\nTries to upgrade the <code>WeakSender</code> to a <code>Sender</code>, in order to …\nA future which allows asynchronously receiving a message.\nA stream which allows asynchronously receiving messages.\nA future that sends a value into a channel.\nA sink that allows sending values into a channel.\nSee <code>Sender::capacity</code>.\nSee <code>Sender::capacity</code>.\nSee <code>Receiver::capacity</code>.\nSee <code>Receiver::capacity</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Sender::is_disconnected</code>.\nSee <code>Sender::is_disconnected</code>.\nSee <code>Receiver::is_disconnected</code>.\nSee <code>Receiver::is_disconnected</code>.\nSee <code>Sender::is_empty</code>.\nSee <code>Sender::is_empty</code>.\nSee <code>Receiver::is_empty</code>.\nSee <code>Receiver::is_empty</code>.\nSee <code>Sender::is_full</code>.\nSee <code>Sender::is_full</code>.\nSee <code>Receiver::is_full</code>.\nSee <code>Receiver::is_full</code>.\nSee <code>Sender::len</code>.\nSee <code>Sender::len</code>.\nSee <code>Receiver::len</code>.\nSee <code>Receiver::len</code>.\nReturns whether the SendSinks are belong to the same …\nReturns whether the SendSinks are belong to the same …\nReturns a clone of a sending half of the channel of this …")