searchState.loadedDescShard("pem_rfc7468", 0, "RustCrypto: PEM Encoding (RFC 7468)\nWidth at which the Base64 body of RFC7468-compliant PEM is …\nBase64-related errors.\nBuffered Base64 decoder type.\nBuffered Base64 encoder type.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nCharacter encoding-related errors.\nBuffered PEM decoder.\nErrors in the encapsulated text (which aren’t …\nBuffered PEM encoder.\nContains the error value\nPEM errors.\nHeader detected in the encapsulated text.\nLine feed: <code>\\n</code> (Unix OSes)\nInvalid label.\nInvalid length.\nLine endings: variants of newline characters that can be …\nContains the success value\nExpected PEM type label for a given document, e.g. …\nMarker trait for types with an associated PEM type label.\nErrors in the post-encapsulation boundary.\nErrors in the pre-encapsulation boundary.\n“Preamble” (text before pre-encapsulation boundary) …\nResult type with the <code>pem-rfc7468</code> crate’s <code>Error</code> type.\nUnexpected PEM type label.\nGet the byte serialization of this <code>LineEnding</code>.\nBorrow the inner <code>Base64Encoder</code>.\nDecode a PEM document according to RFC 7468’s “Strict…\nDecode data into the provided output buffer.\nDecode the encapsulation boundaries of a PEM document …\nDecode all of the remaining data in the input buffer into …\nDecode a PEM document according to RFC 7468’s “Strict…\nCompute the length of a PEM encoded document which …\nCompute the length of a PEM encoded document with the …\nEncode a PEM document according to RFC 7468’s “Strict…\nEncode the provided input data.\nEncode a PEM document according to RFC 7468’s “Strict…\nGet the length of a PEM encoded document with the given …\nFinish encoding PEM, writing the post-encapsulation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we finished decoding the PEM input?\nGet the encoded length of this <code>LineEnding</code>.\nCreate a new PEM <code>Encoder</code> with the default options which …\nCreate a new PEM <code>Decoder</code> with the default options.\nCreate a new PEM <code>Encoder</code> which wraps at the given line …\nCreate a new PEM <code>Decoder</code> which wraps at the given line …\nGet the decoded length of the remaining PEM data after …\nGet the PEM type label used for this document.\nGet the PEM type label for the input document.\nValidate that a given label matches the expected label.\nType label that was expected.")