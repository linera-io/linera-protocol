searchState.loadedDescShard("aws_smithy_observability", 0, "Smithy Observability\nThe valid types of values accepted by Attributes.\nStructured telemetry metadata.\nHolds a bool\nA cross cutting concern for carrying execution-scoped …\nKeeps track of the current Context.\nThe types of errors associated with ObservabilityError\nHolds an f64\nAn simple error to represent issues with the global …\nHolds an i64\nAn error in the SDKs Observability providers\nA custom error that does not fall under any other error …\nDelineates a logical scope that has some beginning and end …\nHolds a String\nA struct to hold the various types of telemetry providers.\nA builder for TelemetryProvider.\nGet all of the attribute key value pairs.\nBuild the TelemetryProvider.\nReturns a builder struct for TelemetryProvider\nGet the currently active context.\ninvoke when the scope has ended.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an attribute.\nUtilities for interacting with the currently set …\nInstruments are used to record values for metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an owned Iterator of (String, AttributeValue).\nReturns the corresponding <code>ErrorKind</code> for this error.\nMake this context the currently active context. The …\nMetrics are used to gain insight into the operational …\nGet the set ProvideMeter\nSet the ProvideMeter.\nCreate a new empty instance of Attributes.\nCreate a new <code>ObservabilityError</code> from an ErrorKind and a …\nCreate a new GlobalTelemetryProviderError with a given …\nReturns a noop TelemetryProvider\nSet an attribute.\nGet an Arc reference to the current global …\nSet the current global TelemetryProvider.\nConfiguration for building an async instrument.\nA measurement that can be taken asynchronously.\nCollects a set of events with an event count and sum for …\nConfiguration for building a sync instrument.\nA counter that monotonically increases.\nThe entry point to creating instruments. A grouping of …\nA counter that can increase or decrease.\nThe type recorded by the measurement.\nIncrement a counter by a fixed amount.\nIncrement or decrement a counter by a fixed amount.\nCreate a new <code>Arc&lt;dyn UpDownCounter&gt;</code>.\nCreate a new <code>Arc&lt;dyn Histogram&gt;</code>.\nCreate a new <code>Arc&lt;dyn MonotonicCounter&gt;</code>.\nCreate a new <code>Arc&lt;dyn AsyncMeasure&lt;Value = f64&gt;&gt;</code>.\nCreate a new <code>Arc&lt;dyn AsyncMeasure&lt;Value = i64&gt;&gt;</code>.\nCreate a new <code>Arc&lt;dyn AsyncMeasure&lt;Value = u64&gt;&gt;</code>.\nThe callback function for this AsyncInstrumentBuilder.\nCreate a new AsyncMonotonicCounter.\nCreate a new AsyncUpDownCounter.\nCreate a new Gauge.\nCreate a new Histogram.\nCreate a new MonotonicCounter.\nCreate a new UpDownCounter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the callback function.\nGet the description.\nGet the description.\nGet the name.\nGet the name.\nGet the units.\nGet the units.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecord a value.\nRecord a value\nSet the description.\nSet the description.\nSet the units.\nSet the units.\nStop recording, unregister callback.\nThe entry point to creating instruments. A grouping of …\nProvides named instances of Meter.\nCreate a new AsyncMonotonicCounter.\nCreate a new AsyncUpDownCounter.\nCreate a new Gauge.\nCreate a new Histogram.\nCreate a new MonotonicCounter.\nCreate a new UpDownCounter.\nReturns the argument unchanged.\nGet or create a named Meter.\nCalls <code>U::from(self)</code>.\nCreate a new Meter from an ProvideInstrument")