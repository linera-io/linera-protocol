searchState.loadedDescShard("slab", 0, "Pre-allocated storage for a uniform data type.\nA draining iterator for <code>Slab</code>\nThe error type returned by <code>Slab::get_disjoint_mut</code>.\nAn index provided was out-of-bounds for the slab.\nAn index provided was not associated with a value.\nA consuming iterator over the values stored in a <code>Slab</code>\nAn iterator over the values stored in the <code>Slab</code>\nA mutable iterator over the values stored in the <code>Slab</code>\nTwo indices provided were overlapping.\nPre-allocated storage for a uniform data type\nA handle to a vacant entry in a <code>Slab</code>.\nReturn the number of values the slab can store without …\nClear the slab of all values.\nReduce the capacity as much as possible, changing the key …\nReturn <code>true</code> if a value is associated with the given key.\nReturn a draining iterator that removes all elements from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the value associated with the given …\nReturn two mutable references to the values associated …\nReturn two mutable references to the values associated …\nReturns mutable references to many indices at once.\nReturn a mutable reference to the value associated with …\nReturn a reference to the value associated with the given …\nReturn a mutable reference to the value associated with …\nInsert a value in the slab, returning key assigned to the …\nInsert a value in the entry, returning a mutable reference …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if there are no values stored in the slab.\nReturn an iterator over the slab.\nReturn an iterator that allows modifying each value.\nReturn the key associated with this entry.\nGet the key for an element in the slab.\nReturn the number of stored values.\nConstruct a new, empty <code>Slab</code>.\nRemove and return the value associated with the given key.\nReserve capacity for at least <code>additional</code> more values to be …\nReserve the minimum capacity required to store exactly …\nRetain only the elements specified by the predicate.\nShrink the capacity of the slab as much as possible …\nTries to remove the value associated with the given key, …\nReturn a handle to a vacant entry allowing for further …\nReturns the key of the next vacant entry.\nConstruct a new, empty <code>Slab</code> with the specified capacity.")