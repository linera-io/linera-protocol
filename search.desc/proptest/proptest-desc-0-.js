searchState.loadedDescShard("proptest", 0, "Proptest Reference Documentation\nDefines the <code>Arbitrary</code> trait and related free functions and …\nSupport for strategies producing fixed-length arrays.\nStrategies for working with bit sets.\nStrategies for generating <code>bool</code> values.\nStrategies for generating <code>char</code> values.\nStrategies for generating <code>std::collections</code> of values.\nStrategies to generate numeric values (as opposed to …\nStrategies for generating <code>std::Option</code> values.\nRe-exports the most commonly-needed APIs of proptest.\nSimilar to <code>assert!</code> from std, but returns a test failure …\nSimilar to <code>assert_eq!</code> from std, but returns a test failure …\nSimilar to <code>assert_ne!</code> from std, but returns a test failure …\nRejects the test input if assumptions are not met.\nConvenience to define functions which produce new …\nProduce a strategy which picks one of the listed choices.\nEasily define <code>proptest</code> tests.\nStrategies for combining delegate strategies into …\nStrategies for generating values by taking samples of …\nDefines the core traits used by Proptest.\nState and functions for running proptest tests.\nSupport for combining strategies into tuples.\nArbitrary determines a canonical <code>Strategy</code> for the …\nA normal map from a strategy of <code>I</code> to <code>O</code>.\nThe type of parameters that <code>arbitrary_with</code> accepts for …\n<code>ParamsFor</code> allows you to mention the type of <code>Parameters</code> for …\nA static map from a strategy of <code>I</code> to <code>O</code>.\nThe type of <code>Strategy</code> used to generate values of type <code>Self</code>.\n<code>StrategyFor</code> allows you to mention the type of <code>Strategy</code> for …\nGenerates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code>. …\nGenerates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code> with …\nGenerates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code>. …\nGenerates a <code>Strategy</code> for producing arbitrary values of …\nGenerates a <code>Strategy</code> for producing arbitrary values of …\nGenerates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code> with …\nGenerates a <code>Strategy</code> for producing arbitrary values of …\nProvides higher order <code>Arbitrary</code> traits. This is mainly for …\n<code>ArbitraryF1</code> lets you lift a <code>Strategy</code> to unary type …\n<code>ArbitraryF2</code> lets you lift <code>Strategy</code> to binary type …\nThe type of parameters that <code>lift1_with</code> accepts for …\nThe type of parameters that <code>lift2_with</code> accepts for …\nLifts a given <code>Strategy</code> to a new <code>Strategy</code> for the …\nLifts a given <code>Strategy</code> to a new <code>Strategy</code> for the …\nLifts two given strategies to a new <code>Strategy</code> for the …\nLifts two given strategies to a new <code>Strategy</code> for the …\nA <code>ValueTree</code> operating over a fixed-size array.\nA <code>Strategy</code> which generates fixed-size arrays containing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirectly create a <code>UniformArrayStrategy</code>.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nCreate a strategy to generate fixed-length arrays.\nTrait for types which can be handled with <code>BitSetStrategy</code>.\nGenerates values as a set of bits between the two bounds.\nValue tree produced by <code>BitSetStrategy</code> and …\nGenerates bit sets with a particular number of bits set.\nA bit set is a set of bit flags.\nClear the given bit.\nReturn the number of bits set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an upper bound on the greatest bit set <em>plus one</em>.\nCreate a strategy which generates values where any bits …\nCreate a strategy which generates values where bits …\nCreate a strategy which generates values where bits within …\nCreate a new value of <code>Self</code> with space for up to <code>max</code> bits, …\nCreate a bit set of <code>len</code> set values.\nSet the given bit.\nTest whether the given bit is set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates integers where all bits may be set.\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates values where bits between the given bounds may be\nGenerates values where any bits set in <code>mask</code> (and no others)\nCreate a strategy which generates values where bits within …\nGenerates boolean values by picking <code>true</code> or <code>false</code> …\nThe type of the <code>ANY</code> constant.\nThe <code>ValueTree</code> to shrink booleans to false.\nThe return type from <code>weighted()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates boolean values by picking <code>true</code> with the given …\nStrategy for generating <code>char</code>s.\nThe <code>ValueTree</code> corresponding to <code>CharStrategy</code>.\nA default sequence of ranges used preferentially when …\nA default set of characters to consider as “special” …\nCreates a <code>CharStrategy</code> which picks from literally any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>CharStrategy</code> with the parameters it will …\nSame as <code>CharStrategy::new()</code> but using <code>Cow::Borrowed</code> for …\nCreates a <code>CharStrategy</code> which selects characters within the …\nCreates a <code>CharStrategy</code> which selects characters within the …\nSelects a random character the way <code>CharStrategy</code> does.\nStrategy to create <code>BTreeMap</code>s with a length in a certain …\n<code>ValueTree</code> corresponding to <code>BTreeMapStrategy</code>.\nStrategy to create <code>BTreeSet</code>s with a length in a certain …\n<code>ValueTree</code> corresponding to <code>BTreeSetStrategy</code>.\nStrategy to create <code>BinaryHeap</code>s with a length in a certain …\n<code>ValueTree</code> corresponding to <code>BinaryHeapStrategy</code>.\nStrategy to create <code>LinkedList</code>s with a length in a certain …\n<code>ValueTree</code> corresponding to <code>LinkedListStrategy</code>.\nThe minimum and maximum range/bounds on the size of a …\nStrategy to create <code>VecDeque</code>s with a length in a certain …\n<code>ValueTree</code> corresponding to <code>VecDequeStrategy</code>.\nStrategy to create <code>Vec</code>s with a length in a certain range.\n<code>ValueTree</code> corresponding to <code>VecStrategy</code>.\nCreate a strategy to generate <code>BinaryHeap</code>s containing …\nCreate a strategy to generate <code>BTreeMap</code>s containing keys …\nCreate a strategy to generate <code>BTreeSet</code>s containing …\nConstructs a <code>SizeRange</code> equivalent to …\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerges self together with some other argument generated …\nCreate a strategy to generate <code>LinkedList</code>s containing …\nCreates a <code>SizeBounds</code> from a <code>RangeInclusive&lt;usize&gt;</code>.\nCreates a <code>SizeRange</code> from some value that is convertible …\nThe lower bound of the range (inclusive).\nExtract the ends <code>[low, high]</code> of a <code>SizeRange</code>.\nCreate a strategy to generate <code>Vec</code>s containing elements …\nCreate a strategy to generate <code>VecDeque</code>s containing …\nMerges self together with some other argument producing a …\nGenerate a random value of <code>X</code>, sampled uniformly from the …\nGenerates literally arbitrary floating-point values, …\nStrategies which produce floating-point values from …\nShrinks a float towards 0, using binary search to find …\nGenerates infinity floats.\nGenerates negative floats.\nGenerates “normal” floats.\nGenerates positive floats\nGenerates “Quiet NaN” floats.\nGenerates “Signaling NaN” floats if allowed by the …\nGenerates subnormal floats.\nGenerates zero-valued floats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates literally arbitrary floating-point values, …\nStrategies which produce floating-point values from …\nShrinks a float towards 0, using binary search to find …\nGenerates infinity floats.\nGenerates negative floats.\nGenerates “normal” floats.\nGenerates positive floats\nGenerates “Quiet NaN” floats.\nGenerates “Signaling NaN” floats if allowed by the …\nGenerates subnormal floats.\nGenerates zero-valued floats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nGenerates integers with completely arbitrary values, …\nType of the <code>ANY</code> constant.\nShrinks an integer towards 0, using binary search to find …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new binary searcher starting at the given value.\nCreates a new binary searcher which will not search below …\nStrategy which generates <code>Option</code> values whose inner <code>Some</code> …\n<code>ValueTree</code> type corresponding to <code>OptionStrategy</code>.\nA probability in the range <code>[0.0, 1.0]</code> with a default of <code>0.5</code>…\nThe default probability is 0.5, or 50% chance.\nReturns the argument unchanged.\nCreates a <code>Probability</code> from a <code>f64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerges self together with some other argument generated …\nCreates a <code>Probability</code> from a <code>f64</code>.\nReturn a strategy producing <code>Optional</code> values wrapping …\nCreates a <code>Probability</code> from some value that is convertible …\nReturn a strategy producing <code>Optional</code> values wrapping …\nMerges self together with some other argument producing a …\nUser-level interface for RNGs\nImplementation-level interface for RNGs\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nAlias for <code>Rng::random</code>.\nAlias for <code>Rng::random_bool</code>.\nAlias for <code>Rng::random_range</code>.\nAlias for <code>Rng::random_ratio</code>.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nRe-exports the entire public API of proptest so that an …\nSimilar to <code>assert!</code> from std, but returns a test failure …\nSimilar to <code>assert_eq!</code> from std, but returns a test failure …\nSimilar to <code>assert_ne!</code> from std, but returns a test failure …\nRejects the test input if assumptions are not met.\nConvenience to define functions which produce new …\nProduce a strategy which picks one of the listed choices.\nEasily define <code>proptest</code> tests.\nReturn a random value via the <code>StandardUniform</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nReturn an iterator over <code>random</code> variates\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nStrategy which generates <code>Result</code>s using <code>Ok</code> and <code>Err</code> values …\n<code>ValueTree</code> type corresponding to <code>MaybeErr</code>.\nStrategy which generates <code>Result</code>s using <code>Ok</code> and <code>Err</code> values …\n<code>ValueTree</code> type corresponding to <code>MaybeOk</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a strategy for <code>Result</code>s where <code>Ok</code> values are taken …\nCreate a strategy for <code>Result</code>s where <code>Ok</code> values are taken …\nCreate a strategy for <code>Result</code>s where <code>Ok</code> values are taken …\nCreate a strategy for <code>Result</code>s where <code>Ok</code> values are taken …\nA stand-in for an index into a slice or similar collection …\nStrategy to create <code>Index</code>es.\n<code>ValueTree</code> corresponding to <code>IndexStrategy</code>.\nStrategy to produce one value from a fixed collection of …\n<code>ValueTree</code> corresponding to <code>Select</code>.\nA value for picking random values out of iterators.\nStrategy to create <code>Selector</code>s.\n<code>ValueTree</code> corresponding to <code>SelectorStrategy</code>.\nRe-exported to make usage more ergonomic.\nStrategy to generate <code>Vec</code>s by sampling a subsequence from …\n<code>ValueTree</code> type for <code>Subsequence</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the element in <code>slice</code> that this <code>Index</code> …\nReturn a mutable reference to the element in <code>slice</code> that …\nReturn the real index that would be used to index a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a strategy which uniformly selects one value from …\nPick a random element from iterable <code>it</code>.\nRe-exported to make usage more ergonomic.\nSample subsequences whose size are within <code>size</code> from the …\nPick a random element from iterable <code>it</code>.\nA boxed <code>Strategy</code> trait object as produced by …\nOptions passed to <code>check_strategy_sanity()</code>.\nContains the error value\n<code>Strategy</code> and <code>ValueTree</code> filter adaptor.\n<code>Strategy</code> and <code>ValueTree</code> filter_map adaptor.\n<code>ValueTree</code> corresponding to <code>FilterMap</code>.\nAdaptor that flattens a <code>Strategy</code> which produces other …\nThe <code>ValueTree</code> produced by <code>Flatten</code>.\nAdaptor for <code>Strategy</code> and <code>ValueTree</code> which guards <code>simplify()</code> …\nSimilar to <code>Flatten</code>, but does not shrink the input strategy.\nSimilar to <code>Map</code> plus <code>Flatten</code>, but does not shrink the input …\nA <code>Strategy</code> which always produces a single value value and …\nA <code>Strategy</code> which always produces a single value value and …\nShorthand for <code>LazyJust&lt;T, fn () -&gt; T&gt;</code>.\nRepresents a value tree that is initialized on the first …\n<code>Strategy</code> and <code>ValueTree</code> map adaptor.\n<code>Strategy</code> and <code>ValueTree</code> map into adaptor.\nA new <code>ValueTree</code> from a <code>Strategy</code> when <code>Ok</code> or otherwise <code>Err</code> …\nWraps a <code>Strategy</code> or <code>ValueTree</code> to suppress shrinking of …\nContains the success value\n<code>Strategy</code> perturbation adaptor.\n<code>ValueTree</code> perturbation adaptor.\nReturn type from <code>Strategy::prop_recursive()</code>.\nA boxed <code>Strategy</code> trait object which is also <code>Sync</code> and <code>Send</code>, …\n<code>Strategy</code> shuffle adaptor.\n<code>ValueTree</code> shuffling adaptor.\nA value which can be used with the <code>prop_shuffle</code> combinator.\nA strategy for producing arbitrary values of a given type.\nThe value tree generated by this <code>Strategy</code>.\nSimilar to <code>Union</code>, but internally uses a tuple to hold the …\n<code>ValueTree</code> type produced by <code>TupleUnion</code>.\nA <code>Strategy</code> which picks from one of several delegate …\n<code>ValueTree</code> corresponding to <code>Union</code>.\nThe type of value used by functions under test generated …\nThe type of the value produced by this <code>ValueTree</code>.\nA generated value and its associated shrinker.\nA <strong>relative</strong> <code>weight</code> of a particular <code>Strategy</code> corresponding …\nA <strong>relative</strong> <code>weight</code> of a particular <code>Strategy</code> corresponding …\nErases the type of this <code>Strategy</code> so it can be passed …\nErases the type of this <code>Strategy</code> so it can be passed …\nRun some tests on the given <code>Strategy</code> to ensure that it …\nAttempts to partially undo the last simplification. …\nReturns the current value.\nDisallow any further calls to <code>complicate()</code> until a call to …\nDisallow any further calls to <code>simplify()</code> until a call to …\nIf true, cause local rejects to return an error instead of …\nConvert a floating-point weight in the range (0.0,1.0) to …\nPrevent any further shrinking operations from occurring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether a call to <code>complicate()</code> may be productive.\nReturn whether a call to <code>simplify()</code> may be productive.\nConstructs a <code>LazyJust</code> strategy given the function/closure …\nWrap <code>source</code> to flatten it.\nWrap the given <code>T</code> in <code>Fuse</code>.\nCreate a strategy which selects uniformly from the given …\nWrap <code>tuple</code> in a <code>TupleUnion</code>.\nGenerate a new value tree from the given runner.\nCreate a strategy which selects from the given delegate …\nWraps this strategy to prevent values from being subject …\nWraps this strategy to prevent values from being subject …\nAdd <code>other</code> as an additional alternate strategy with weight …\nReturns a strategy which only produces values accepted by …\nReturns a strategy which only produces values accepted by …\nReturns a strategy which only produces transformed values …\nReturns a strategy which only produces transformed values …\nMaps values produced by this strategy into new strategies …\nMaps values produced by this strategy into new strategies …\nMaps values produced by this strategy into new strategies …\nMaps values produced by this strategy into new strategies …\nSimilar to <code>prop_ind_flat_map()</code>, but produces 2-tuples with …\nSimilar to <code>prop_ind_flat_map()</code>, but produces 2-tuples with …\nReturns a strategy which produces values transformed by …\nReturns a strategy which produces values transformed by …\nReturns a strategy which produces values of type <code>O</code> by …\nReturns a strategy which produces values of type <code>O</code> by …\nReturns a strategy which produces values transformed by …\nReturns a strategy which produces values transformed by …\nGenerate a recursive structure with <code>self</code> items as leaves.\nGenerate a recursive structure with <code>self</code> items as leaves.\nShuffle the contents of the values produced by this …\nShuffle the contents of the values produced by this …\nReturns a strategy which picks uniformly from <code>self</code> and …\nReturns a strategy which picks uniformly from <code>self</code> and …\nErases the type of this <code>Strategy</code> so it can be passed …\nErases the type of this <code>Strategy</code> so it can be passed …\nReturn the length of this collection.\nSwap the elements at the given indices.\nAttempts to simplify the current value. Notionally, this …\nModified versions of the normal strategy combinators which …\nIf true (the default), require that <code>complicate()</code> return …\nStatic version of <code>strategy::Filter</code>.\nEssentially <code>Fn (&amp;T) -&gt; bool</code>.\nStatic version of <code>strategy::Map</code>.\nEssentially <code>Fn (T) -&gt; Output</code>.\nTest whether <code>t</code> passes the filter.\nMap <code>T</code> to <code>Output</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdapt strategy <code>source</code> to reject values which do not pass …\nAdapt strategy <code>source</code> by applying <code>fun</code> to values it …\nThe test was aborted for the given reason, for example, …\nThe ChaCha algorithm. This became the default with …\nConfiguration for how a proptest test should be run.\nContains the error value\nThe code under test failed the test.\nA failing test case was found. The string indicates where …\nProvides external persistence for historical test failures …\nUse a specific value to generate a seed\nVerbose level 1 to show failures. In state machine tests …\nFailure persistence option that loads and saves seeds in …\nContains the success value\nThis is not an actual RNG algorithm, but instead returns …\nOpaque struct representing a seed which can be persisted.\nDefault case, use a random value\nThe reason for why something, such as a generated value, …\nThis is equivalent to the <code>ChaCha</code> RNG, with the addition …\nThe input was not valid for the test case. This does not …\nAn object which can cache the outcomes of tests.\nA key used for the result cache.\nIdentifies a particular RNG algorithm supported by …\nThe seed for the RNG, can either be random or specified as …\nErrors which can be returned from test cases to indicate …\nConvenience for the type returned by test cases.\nA failure state from running test cases for a single test.\nProptest’s random number generator.\nState used when running a proptest test.\nThe XorShift algorithm. This was the default up through …\nAssistant method for trait object comparison.\nDelegate method for producing a trait object usable with …\nDumps the bytes obtained from the RNG so far (only works …\nDumps the bytes obtained from the RNG so far (only works …\nThe number of successful test cases that must execute for …\nConstructs a <code>Config</code> only differing from the provided …\nReturns the configuration of this runner.\nWithout the <code>std</code> feature this function returns config …\nCreate a fresh <code>TestRunner</code> with the standard deterministic …\nReturns a <code>TestRng</code> with a particular hard-coded seed.\nEquality testing delegate required due to constraints of …\nThe code under test failed the test.\nIndicates whether and how to persist failed test results.\nIncrement the counter of flat map regenerations and return …\nReturn whether this configuration implies forking.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new RNG with the given algorithm and seed.\nIf <code>put()</code> has been called with a semantically equivalent <code>key</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the given cache key into a <code>u64</code> representing that …\nUse <code>load_persisted_failures2</code> instead.\nUse <code>load_persisted_failures2</code> instead.\nSupply seeds associated with the given <code>source_file</code> that …\nSupply seeds associated with the given <code>source_file</code> that …\nBacking map, keyed by source_file.\nThe default maximum size to <code>proptest::collection::SizeRange</code>…\nThe maximum number of times all <code>Flatten</code> combinators will …\nThe maximum number of combined inputs that may be rejected …\nThe maximum number of individual inputs that may be …\nReturns the configured limit on shrinking iterations.\nGive up on shrinking if more than this number of …\nReturn the message for this <code>Reason</code>.\nCreate a fresh <code>TestRunner</code> with the given configuration.\nCreate a new, independent but deterministic RNG from the …\nCreate a fresh <code>TestRunner</code> with the given configuration and …\nA result cache that does nothing.\nSave <code>result</code> as the outcome associated with the test input …\nRejects the generated test input as invalid for this test …\nUpdate the state to account for a local rejection from …\nA function to create new result caches.\nReturns the RNG for this test run.\nThe RNG algorithm to use when not using a user-provided …\nSeed used for the RNG. Set by using the PROPTEST_RNG_SEED …\nRun test cases against <code>f</code>, choosing inputs via <code>strategy</code>.\nRun one specific test case against this runner.\nUse <code>save_persisted_failures2</code> instead.\nUse <code>save_persisted_failures2</code> instead.\nStore a new failure-generating seed associated with the …\nStore a new failure-generating seed associated with the …\nFile location of the current test, relevant for persistence\nThe fully-qualified name of the test being run, as would …\nReturns the configured timeout.\nReturn the test input value as an <code>&amp;dyn Debug</code>.\nConstructs a <code>Config</code> only differing from the <code>default()</code> in …\nConstructs a <code>Config</code> only differing from the <code>default()</code> in …\nConstructs a <code>Config</code> only differing from the <code>default()</code> in …\nCommon <code>ValueTree</code> implementation for all tuple strategies.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TupleValueTree</code> wrapping <code>inner</code>.")