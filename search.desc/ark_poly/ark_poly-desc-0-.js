searchState.loadedDescShard("ark_poly", 0, "This crate implements functions for manipulating …\nThis module contains an <code>EvaluationDomain</code> abstraction for …\nModules for working with univariate or multivariate …\nTypes that can be FFT-ed must implement this trait.\nThe type of the elements iterator.\nDefines a domain over which finite field (I)FFTs can be …\nReturn the size of a domain that is large enough for …\nReturn the group offset that defines this domain.\nReturn the inverse of <code>self.offset()</code>.\nReturn <code>offset^size</code>.\nMultiply the <code>i</code>-th element of <code>coeffs</code> with <code>g^i</code>.\nMultiply the <code>i</code>-th element of <code>coeffs</code> with <code>c*g^i</code>.\nReturns the <code>i</code>-th element of the domain.\nReturn an iterator over the elements of the domain.\nEvaluate all the lagrange polynomials defined by this …\nThis evaluates at <code>tau</code> the filter polynomial for <code>self</code> with …\nThis evaluates the vanishing polynomial for this domain at …\nCompute a FFT.\nCompute a FFT, modifying the vector in place.\nReturn the filter polynomial of <code>self</code> with respect to the …\nThis module contains a <code>GeneralEvaluationDomain</code> for …\nConstruct a coset domain from a subgroup domain\nReturn the generator for the multiplicative subgroup that …\nReturn the group inverse of <code>self.group_gen()</code>.\nCompute a IFFT.\nCompute a IFFT, modifying the vector in place.\nReturn log_2(size) of <code>self</code>.\nThis module contains a <code>MixedRadixEvaluationDomain</code> for …\nPerform O(n) multiplication of two polynomials that are …\nConstruct a domain that is large enough for evaluations of …\nConstruct a coset domain that is large enough for …\nThis module defines <code>Radix2EvaluationDomain</code>, an …\nGiven an index which assumes the first elements of this …\nSample an element that is <em>not</em> in the domain.\nReturn the size of <code>self</code>.\nReturn the size of <code>self</code> as a field element.\nReturn the inverse of <code>self.size_as_field_element()</code>.\nReturn the sparse vanishing polynomial.\nAn iterator over the elements of a domain.\nA generalized version of an iterator over the elements of …\nDefines a domain over which finite field (I)FFTs can be …\nMixed-radix domain\nRadix-2 domain\nReturn an iterator over the elements of the domain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a domain that is large enough for evaluations of …\nAn iterator over the elements of a domain.\nDefines a domain over which finite field (I)FFTs can be …\nReturn an iterator over the elements of the domain.\nReturns the argument unchanged.\nA generator of the subgroup.\nInverse of the generator of the subgroup.\nCalls <code>U::from(self)</code>.\n<code>log_2(self.size)</code>.\nConstruct a domain that is large enough for evaluations of …\nOffset that specifies the coset.\nInverse of the offset that specifies the coset.\nConstant coefficient for the vanishing polynomial. Equals …\nThe size of the domain.\nSize of the domain as a field element.\nInverse of the size in the field.\nAn iterator over the elements of a domain.\nDefines a domain over which finite field (I)FFTs can be …\nReturn an iterator over the elements of the domain.\nReturns the argument unchanged.\nA generator of the subgroup.\nInverse of the generator of the subgroup.\nCalls <code>U::from(self)</code>.\n<code>log_2(self.size)</code>.\nConstruct a domain that is large enough for evaluations of …\nOffset that specifies the coset.\nInverse of the offset that specifies the coset.\nConstant coefficient for the vanishing polynomial. Equals …\nThe size of the domain.\nSize of the domain as a field element.\nInverse of the size in the field.\nA univariate polynomial represented in evaluations form.\nStores a multilinear polynomial in dense evaluation form.\nThis trait describes an interface for the multilinear …\nStores a multilinear polynomial in sparse evaluation form.\nConcatenate the evaluation tables of multiple polynomials. …\nEvaluate the dense MLE at the given point\nThe evaluation over {0,1}^<code>num_vars</code>\ntuples of index and value\nReduce the number of variables of <code>self</code> by fixing the …\nReturn the MLE resulting from binding the first variables …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new polynomial from a list of evaluations …\nConstruct a new polynomial from a list of evaluations …\nReturns the evaluation of the polynomial at a point …\nReturns the evaluation of the polynomial at a point …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that iterates over the evaluations …\nReturns a mutable iterator that iterates over the …\nReturns the number of variables in <code>self</code>\nNumber of variables\nnumber of variables\nOutputs an <code>l</code>-variate multilinear extension where value of …\nOutputs an <code>l</code>-variate multilinear extension where value of …\nOutputs an <code>l</code>-variate multilinear extension where value of …\nRelabel the point by swapping <code>k</code> scalars from positions …\nRelabel the point in place by switching <code>k</code> scalars from …\nConvert the sparse multilinear polynomial to dense form.\nReturns a list of evaluations over the domain, which is …\nStores a UV polynomial in evaluation form.\nReturn the domain <code>self</code> is defined over\nThe evaluations of a polynomial over the domain <code>D</code>\nReturns the argument unchanged.\nConstruct <code>Self</code> from evaluations and a domain.\nInterpolate a polynomial from a list of evaluations\nInterpolate a polynomial from a list of evaluations\nCalls <code>U::from(self)</code>.\nEvaluations of the zero polynomial over <code>domain</code>.\nDescribes the interface for multivariate polynomials\nDescribes the interface for univariate polynomials\nThe type of evaluation points for this polynomial.\nDescribes the common interface for univariate and …\nThe type of the terms of <code>self</code>\nReturns the coefficients of <code>self</code>\nReturns the total degree of the polynomial\nEvaluates <code>self</code> at the given <code>point</code> in <code>Self::Point</code>.\nConstructs a new polynomial from a list of coefficients.\nConstructs a new polynomial from a list of tuples of the …\nConstructs a new polynomial from a list of coefficients.\nConstructs a new polynomial from a list of tuples of the …\nWork with sparse multivariate polynomials.\nReturns the number of variables in <code>self</code>\nReturns a univariate polynomial of degree <code>d</code> where each …\nOutputs an <code>l</code>-variate polynomial which is the sum of <code>l</code> <code>d</code>…\nReturns the terms of a <code>self</code> as a list of tuples of the …\nWork with sparse and dense polynomials.\nStores a sparse multivariate polynomial in coefficient …\nStores a term (monomial) in a multivariate polynomial. …\nDescribes the interface for a term (monomial) of a …\nReturns the total degree of <code>self</code>. This is the sum of all …\nReturns the total degree of the polynomial\nReturns the sum of all variable powers in <code>self</code>\nEvaluates <code>self</code> at the point <code>p</code>.\nEvaluates <code>self</code> at the given <code>point</code> in <code>Self::Point</code>.\nEvaluates <code>self</code> at the given <code>point</code> in the field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new polynomial from a list of tuples of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether <code>self</code> is a constant\nReturns whether <code>self</code> is a constant\nChecks if the given polynomial is zero.\nCreate a new <code>Term</code> from a list of tuples of the form …\nCreate a new <code>Term</code> from a list of tuples of the form …\nReturns the number of variables in <code>self</code>\nThe number of variables the polynomial supports\nSort by total degree. If total degree is equal then …\nReturns a list of the powers of each variable in <code>self</code>\nReturns a list of variable powers in <code>self</code>\nOutputs an <code>l</code>-variate polynomial which is the sum of <code>l</code> <code>d</code>…\nReturns the terms of a <code>self</code> as a list of tuples of the …\nList of each term along with its coefficient\nReturns a list of variables in <code>self</code>\nReturns a list of variables in <code>self</code>\nReturns the zero polynomial.\nRepresents the case where <code>self</code> is a dense polynomial\nRepresents either a sparse polynomial or a dense one.\nStores a polynomial in coefficient form.\nRepresents the case where <code>self</code> is a sparse polynomial\nStores a sparse polynomial in coefficient form.\nReturns the coefficients of <code>self</code>\nThe coefficient of <code>x^i</code> is stored at location <code>i</code> in …\nReturns the total degree of the polynomial\nReturns the degree of the polynomial.\nReturn the degree of `self.\nDivide <code>self</code> by the vanishing polynomial for the domain …\nDivide self by another (sparse or dense) polynomial, and …\nEvaluates <code>self</code> at the given <code>point</code> in <code>Self::Point</code>.\nEvaluates <code>self</code> at the given <code>point</code> in the field.\nEvaluate <code>self</code> over <code>domain</code>.\nEvaluate <code>self</code> over <code>domain</code>.\nConstruct <code>Evaluations</code> by evaluating a polynomial over the …\nEvaluate <code>self</code> over <code>domain</code>.\nEvaluate <code>self</code> over <code>domain</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new polynomial from a list of coefficients.\nConstructs a new polynomial from a list of coefficients.\nConstructs a new polynomial from a list of coefficients.\nConstructs a new polynomial from a list of coefficients. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the given polynomial is zero.\nChecks if the given polynomial is zero.\nChecks if the given polynomial is zero.\nPerform a naive n^2 multiplication of <code>self</code> by <code>other</code>.\nMultiply <code>self</code> by the vanishing polynomial for the domain …\nPerform a naive n^2 multiplication of <code>self</code> by <code>other</code>.\nOutputs a univariate polynomial of degree <code>d</code> where each …\nReturns the zero polynomial.\nReturns the zero polynomial.")