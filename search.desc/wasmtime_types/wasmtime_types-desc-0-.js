searchState.loadedDescShard("wasmtime_types", 0, "Internal dependency of Wasmtime and Cranelift that defines …\nThe common supertype of all internal references.\nA constant expression.\nThe subset of Wasm opcodes that are constant.\nWebAssembly page sizes are 64KiB by default.\nWebAssembly page sizes are 64KiB (or <code>2**16</code>) by default.\nIndex type of a passive data segment inside the …\nIndex type of a defined function inside the WebAssembly …\nIndex type of a defined global inside the WebAssembly …\nIndex type of a defined memory inside the WebAssembly …\nIndex type of a defined table inside the WebAssembly …\nIndex type of a passive element segment inside the …\nAn index within an engine, canonicalized among all modules …\nIndex type of a canonicalized recursive type group inside …\nAn interned type index, either at the module or engine …\nAn index of an entity.\nA type of an item in a wasm module where an item is …\nContains the error value\nThe common supertype of all external references.\nF32 type\nF64 type\nThe common supertype of all function references.\nIndex type of a function (imported or defined) inside the …\nFunction index.\nA function type where the index points to the type section …\nA WebAssembly global.\nGlobal index.\nA global variable with the specified content type\nIndex type of a global variable (imported or defined) …\nThe storage type is i16.\nI32 type\nI64 type\nThe storage type is i8.\nAn implementation limit was exceeded.\nThe input WebAssembly code is invalid.\nWebAssembly linear memory.\nMemory index.\nA linear memory with the specified limits\nIndex type of a linear memory (imported or defined) inside …\nAn index within the current Wasm module, canonicalized …\nIndex type of a canonicalized recursive type group inside …\nA canonicalized type index for a type within a single …\nContains the success value\nIndex type of a defined memory inside the WebAssembly …\nAn index within the containing type’s rec group. This is …\nA canonicalized type index referencing a type within a …\nReference type\nIndex into the global list of modules found within an …\nWebAssembly table.\nTable index.\nA table with the specified element type and limits\nIndex type of a table (imported or defined) inside the …\nWebAssembly event.\nAn event definition.\nIndex type of an event inside the WebAssembly module.\nHelpers used to convert a <code>wasmparser</code> type to a type in …\nIndex type of a type (imported or defined) inside the …\nA trait for things that can trace all type-to-type edges, …\nA feature used by the WebAssembly code is not supported by …\nAny user-defined error.\nV128 type\nA canonicalized type index into an engine’s shared type …\nThe storage type is a value type.\nMaximum size, in bytes, of 32-bit memories (4G)\nA concrete array type.\nA function, array, or struct type.\nA WebAssembly translation error.\nThe type of a struct field or array element.\nWebAssembly function type – equivalent of <code>wasmparser</code>’s …\nA top heap type.\nWebAssembly heap type – equivalent of <code>wasmparser</code>’s …\nA recursive type group.\nWebAssembly reference type – equivalent of <code>wasmparser</code>’…\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nRepresents storage types introduced in the GC spec for …\nA concrete struct type.\nA concrete, user-defined (or host-defined) Wasm type.\nWebAssembly value type – equivalent of …\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nGet the underlying engine-level type index, if any.\nGet the underlying module-level type index, if any.\nGet the underlying recgroup-level type index, if any.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturns the underlying bits of the index.\nCanonicalize <code>self</code> by rewriting all type references inside …\nCanonicalize <code>self</code> by rewriting all type references inside …\nThe array, function, or struct that is defined.\nConverts a wasmparser function type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser heap type to a wasmtime type\nConverts a wasmparser reference type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser value type to a wasmtime type\nThe field’s element type.\nConvert from a <code>BinaryReaderError</code> to a <code>WasmError</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new const expression from a <code>wasmparser</code> const …\nConvert a <code>wasmparser::Operator</code> to a <code>ConstOp</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this type canonicalized for hash consing?\nIs this type canonicalized for runtime usage?\nIs this an engine-level type index?\nWhether this type is forbidden from being the supertype of …\nIs this an module-level type index?\nIs this an recgroup-level type index?\nIs this function type compatible with trampoline usage in …\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nConverts the specified type index from a heap type into a …\nConverts the specified type index from a heap type into a …\nReturns the maximum size memory is allowed to be only …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nReturns the maximum size, in bytes, that this memory is …\nWhether or not this is a 64-bit memory\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nReturns the minimum size, in bytes, that this memory must …\nA flag indicating whether the value may change at runtime.\nWhether this field can be mutated or not.\nCreate a new <code>VMSharedTypeIndex</code>.\nCreate a new const expression from the given opcodes.\nHow many <code>externref</code>s are in this function’s params?\nHow many <code>externref</code>s are in this function’s returns?\nGet the opcodes that make up this const expression.\nGet the size of this memory’s pages, in bytes.\nThe log2 of this memory’s page size, in bytes.\nFunction params types.\nRust module prelude for Wasmtime crates.\nIs this ConstExpr a provably nonzero integer value?\nReturns params types.\nWhether the memory may be shared between multiple threads.\nThis type’s supertype, if any.\nGet this type’s top type.\nVisit each edge.\nTrace all <code>VMSharedTypeIndex</code> edges, ignoring other edges.\nVisit each edge, mutably.\nGet the version of this function type that is suitable for …\nThe event signature type.\nThe types inside of this recgroup.\nGet the underlying engine-level type index, or panic.\nAssert that this entity is a function\nAssert that this entity is a global\nAssert that this entity is a memory\nGet the underlying module-level type index, or panic.\nGet the underlying module-level type index, or panic.\nAssert that this entity is a table\nAssert that this entity is a tag\nThe Wasm type of the value stored in the global.\nThe table elements’ Wasm type.\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nA pointer type that uniquely owns a heap allocation of …\nConvenience trait for converting <code>Result&lt;T, E&gt;</code> into …\nA hash table where the iteration order of the key-value …\nA default set of values.\nConvenience trait to convert a value into <code>anyhow::Error</code>\nThe resulting type after obtaining ownership.\nA UTF-8–encoded, growable string.\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw mutable pointer to the vector’s buffer, or …\nExtracts a mutable slice of the entire vector.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nExtracts a string slice containing the entire <code>String</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns the total number of elements the vector can hold …\nReturns this <code>String</code>’s capacity, in bytes.\nClears the vector, removing all values.\nTruncates this <code>String</code>, removing all contents.\nClears the <code>IndexMap</code>, removing all elements.\nClears the <code>IndexSet</code>, removing all elements.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nOverwrites the contents of <code>self</code> with a clone of the …\nClones the contents of <code>source</code> into <code>self</code>.\nUses borrowed data to replace owned data, usually by …\nReturns true if the <code>IndexSet</code> contains an element equal to …\nReturns true if <code>key</code> is contains in the <code>IndexMap</code>.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty <code>String</code>.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nRemoves the subslice indicated by the given range from the …\nRemoves the specified range from the string in bulk, …\nGets the given key’s corresponding entry in the <code>IndexMap</code> …\nConvert <code>self</code> to <code>anyhow::Result&lt;T&gt;</code>.\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCopies elements from <code>src</code> range to the end of the string.\nCreates an iterator which uses a closure to determine if …\nCreates a <code>String</code> using interpolation of runtime …\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nReturns the argument unchanged.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nCreates a boxed <code>Path</code> from a reference.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nCreates a boxed <code>Path</code> from a reference.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a vector into a boxed slice.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a boxed slice into a vector by transferring …\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a clone-on-write slice into a vector.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts a clone-on-write string to an owned instance of …\nReturns the argument unchanged.\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nAllocates an owned <code>String</code> from a single character.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a new <code>String</code> from a pointer, a length and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nDecode a native endian UTF-16–encoded vector <code>v</code> into a …\nDecode a native endian UTF-16–encoded slice <code>v</code> into a …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nReturns a reference to the value corresponding to the <code>key</code>.\nReturns a reference to the element in the <code>IndexSet</code>, if …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value entry at the given <code>index</code> if any.\nReturns the mutable key-value entry at the given <code>index</code> if …\nReturn the index of the item provided, if it exists.\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturns a mutable reference to the value corresponding to …\nInserts an element at position <code>index</code> within the vector, …\nInserts a character into this <code>String</code> at a byte position.\nInserts a key-value pair into the <code>IndexMap</code>.\nAdds <code>value</code> to the <code>IndexSet</code>.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an <code>anyhow::Error</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nConverts a <code>String</code> into an iterator over the <code>char</code>s of the …\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates a consuming iterator, that is, one that moves each …\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>String</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nReturns <code>true</code> if the <code>IndexMap</code> contains no elements.\nReturns <code>true</code> if the <code>IndexSet</code> contains no elements.\nReturns <code>true</code> if the <code>IndexSet</code> is a subset of another, i.e., …\nReturns <code>true</code> if the <code>IndexSet</code> is a superset of another, …\nReturns an iterator that yields the items in the <code>IndexMap</code>.\nReturns an iterator that yields the items in the <code>IndexSet</code>.\nReturns an iterator that yields the mutable items in the …\nReturns an iterator that yields the keys in the <code>IndexMap</code>.\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the vector, also …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nReturns the number of elements in the <code>IndexMap</code>.\nReturns the number of elements in the <code>IndexSet</code>.\nAllocates memory on the heap and then places <code>x</code> into it.\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nCreates a new empty <code>String</code>.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nRemoves and returns the last element from a vector if the …\nAppends an element to the back of a collection.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nAdds a value to the <code>IndexSet</code>, replacing the existing …\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nReserves the minimum capacity for at least <code>additional</code> …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of this <code>String</code> to match its length.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nSplits the string into two at the given byte index.\nRemoves an element from the vector and returns it.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove the value from the <code>IndexSet</code>, and return <code>true</code> if it …\nRemove and return the key-value pair equivalent to <code>key</code>.\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>String</code> to the specified length.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nConverts a <code>CString</code> into a <code>String</code> if it contains valid …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nReturns an iterator that yields the values in the <code>IndexMap</code>.\nReturns a mutable iterator that yields the values in the …\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nCreates an empty <code>vec::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep unyielded elements in the source <code>Vec</code>.")