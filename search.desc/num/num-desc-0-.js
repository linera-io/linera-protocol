searchState.loadedDescShard("num", 0, "A collection of numeric types and traits for Rust.\nA big signed integer type.\nAlias for arbitrary precision rationals.\nA big unsigned integer type.\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nA complex number in Cartesian form.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nA constant <code>Complex</code> <em>i</em>, the imaginary unit.\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nAn interface for casting between machine scalars.\nA constant <code>Complex</code> 1.\nDefines a multiplicative identity element for <code>Self</code>.\nGeneric trait for primitive integers.\nAlias for a <code>Ratio</code> of machine-sized integers.\nAlias for a <code>Ratio</code> of 32-bit-sized integers.\nAlias for a <code>Ratio</code> of 64-bit-sized integers.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nUseful functions for signed numbers (i.e. numbers that can …\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nA constant <code>BigInt</code> with value 0, useful for static …\nA constant <code>Complex</code> 0.\nA constant <code>BigUint</code> with value 0, useful for static …\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nComputes the principal value of the inverse cosine of <code>self</code>.\nInverse hyperbolic cosine function.\nComputes the principal value of inverse hyperbolic cosine …\nCalculate the principal Arg of self.\nComputes the arcsine of a number. Return value is in …\nComputes the principal value of the inverse sine of <code>self</code>.\nInverse hyperbolic sine function.\nComputes the principal value of inverse hyperbolic sine of …\nReinitializes a <code>BigInt</code>.\nAssign a value to a <code>BigUint</code>.\nComputes the arctangent of a number. Return value is in …\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nComputes the principal value of inverse hyperbolic tangent …\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns whether the bit in position <code>bit</code> is set, using the …\nReturns whether the bit in the given position is set\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nDetermines the fewest bits necessary to express the <code>BigUint</code>…\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the truncated principal cube root of <code>self</code> – see …\nComputes the principal value of the cube root of <code>self</code>.\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nRaises a value to the power of exp, returning <code>None</code> if an …\nSubtracts two numbers, checking for underflow. If …\nCreate a new Complex with a given phase: <code>exp(i * phase)</code>. …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the complex conjugate. i.e. <code>re - i im</code>\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nComputes the cosine of <code>self</code>.\nHyperbolic cosine function.\nComputes the hyperbolic cosine of <code>self</code>.\nReturns the number of ones in the binary representation of …\nReturns the number of one bits.\nReturns the number of zeros in the binary representation …\nDecrements self by one.\nCeiled integer division.\nFloored integer division.\nSimultaneous floored integer division and modulus. Returns …\nSimultaneous truncated integer division and modulus. …\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nReturns <code>2^(self)</code>.\nComputes <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nRaises a floating point number to the complex power <code>self</code>.\nGreatest common divisor and Bézout coefficients.\nGreatest common divisor, least common multiple, and …\nGreatest common divisor, least common multiple, and …\nReturns <code>self/other</code> using floating-point operations.\nReturns <code>1/self</code> using floating-point operations.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nConvert a polar representation into a complex number.\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nConvert from a string and radix (typically <code>2..=36</code>).\nCreates and initializes a <code>BigInt</code>.\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nCreates and initializes a <code>BigUint</code>.\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nGreatest Common Divisor (GCD).\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) of the number …\nGreatest Common Divisor (GCD) and Lowest Common Multiple …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the imaginary unit.\nImaginary portion of the complex number\nIncrements self by one.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nReturns <code>1/self</code>\nReturns <code>true</code> if the number is even.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nChecks if the given complex number is finite\nReturns <code>true</code> if this value is positive infinity or …\nChecks if the given complex number is infinite\nReturns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nChecks if the given complex number is NaN\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nChecks if the given complex number is normal\nReturns <code>true</code> if the number is odd.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nLowest Common Multiple (LCM).\nCalculates the Lowest Common Multiple (LCM) of the number …\nCalculates the Lowest Common Multiple (LCM) of the number …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nComputes the principal value of natural logarithm of <code>self</code>.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the base 10 logarithm of the number.\nComputes the principal value of log base 10 of <code>self</code>.\nReturns the base 2 logarithm of the number.\nComputes the principal value of log base 2 of <code>self</code>.\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFloored integer modulo, satisfying:\nReturns the modular multiplicative inverse if it exists, …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nReturns <code>(self ^ exponent) % modulus</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nCreates and initializes a <code>BigInt</code>.\nCreate a new <code>Complex</code>\nCreates and initializes a <code>BigUint</code>.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nCalculate |self|\nReturns the square of the norm (since <code>T</code> doesn’t …\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nReturns the truncated principal <code>n</code>th root of <code>self</code> – see …\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>. The input slice must …\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self ^ exponent</code>.\nReturns <code>self ^ exponent</code>.\nRaises <code>self</code> to a complex power.\nRaise a number to a floating point power.\nRaises <code>self</code> to a floating point power.\nRaise a number to an integer power.\nRaises <code>self</code> to a signed integer power.\nRaises <code>self</code> to an unsigned integer power.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nReturns an iterator over the given range [start, stop) …\nReturn an iterator over the range [start, stop]\nReturn an iterator over the range [start, stop) by <code>step</code>. …\nReturn an iterator over the range [start, stop] by <code>step</code>. …\nReal portion of the complex number\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating subtraction operator. Returns a-b, saturating …\nMultiplies <code>self</code> by the scalar <code>t</code>.\nSets or clears the bit in the given position, using the two…\nSets or clears the bit in the given position\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nComputes the sine of <code>self</code>.\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nComputes the hyperbolic sine of <code>self</code>.\nTake the square root of a number.\nReturns the truncated principal square root of <code>self</code> – …\nComputes the principal value of the square root of <code>self</code>.\nReturns the truncated principal square root of <code>self</code> – …\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nComputes the tangent of <code>self</code>.\nHyperbolic tangent function.\nComputes the hyperbolic tangent of <code>self</code>.\nConvert <code>self</code> to big endian from the target’s endianness.\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nConvert to polar form (r, theta), such that …\nConverts degrees to radians.\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nReturns the integer in the requested base in little-endian …\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the integer formatted as a string in the given …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the <code>u32</code> digits representation of the <code>BigUint</code> …\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nReturns the sign and the <code>u64</code> digits representation of the …\nReturns the <code>u64</code> digits representation of the <code>BigUint</code> …\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of least-significant bits that are ones.\nReturns the number of trailing zeros in the binary …\nReturns the number of least-significant bits that are zero,\nReturns the number of least-significant bits that are zero,\nReturn the integer part of a number.\nDivides <code>self</code> by the scalar <code>t</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nA big signed integer type.\nA big unsigned integer type.\nA <code>Sign</code> is a <code>BigInt</code>’s composing element.\nA generic trait for converting a value to a <code>BigInt</code>. This …\nA generic trait for converting a value to a <code>BigUint</code>.\nThe error type returned when a checked conversion …\nAn iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …\nAn iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the original value, if available. The value will …\nNegate <code>Sign</code> value.\nConverts the value of <code>self</code> to a <code>BigInt</code>.\nConverts the value of <code>self</code> to a <code>BigUint</code>.\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nA complex number in Cartesian form.\nAlias for a <code>Complex&lt;f32&gt;</code>\nAlias for a <code>Complex&lt;f64&gt;</code>\nGeneric trait for floating point complex numbers.\nThe type used to represent the real coefficients of this …\nReturns the absolute value of the number. See also …\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the argument of the number.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nInverse hyperbolic tangent function.\nCreate a new <code>Complex&lt;f32&gt;</code> with arguments that can convert …\nCreate a new <code>Complex&lt;f64&gt;</code> with arguments that can convert …\nTake the cubic root of a number.\nComputes the complex conjugate of the number.\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>base^(self)</code>.\nReturns the argument unchanged.\nReturns the imaginary part of the number.\nImaginary portion of the complex number\nImaginary portion of the complex number\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nReturns the natural logarithm of the number.\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a real power.\nRaises <code>self</code> to a signed integer power.\nReturns the real part of the number.\nReal portion of the complex number\nReal portion of the complex number\nReal portion of the complex number\nTake the reciprocal (inverse) of a number, <code>1/x</code>. See also …\nComputes the sine of a number (in radians).\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nProvides methods to compute the average of two integers, …\nGreatest common divisor and Bézout coefficients\nAn iterator over binomial coefficients.\nProvides methods to compute an integer’s square root, …\nReturns the ceiling value of the average of <code>x</code> and <code>y</code> – …\nReturns the ceiling value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>x</code> and <code>y</code> – see …\nReturns the floor value of the average of <code>self</code> and <code>other</code>. …\nCalculate the binomial coefficient.\nReturns the truncated principal cube root of an integer –\nReturns the truncated principal cube root of an integer –\nDecrements self by one.\nCeiled integer division\nCeiled integer division.\nFloored integer division\nFloored integer division.\nSimultaneous floored integer division and modulus\nSimultaneous floored integer division and modulus. Returns …\nSimultaneous integer division and modulus\nSimultaneous truncated integer division and modulus. …\nDeprecated, use <code>is_multiple_of</code> instead.\nGreatest common divisor and Bézout coefficients.\nGreatest common divisor, least common multiple, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the Greatest Common Divisor (GCD) of the number …\nGreatest Common Divisor (GCD).\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nGreatest Common Divisor (GCD) and Lowest Common Multiple …\nIncrements self by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is even.\nReturns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is odd.\nCalculates the Lowest Common Multiple (LCM) of the number …\nLowest Common Multiple (LCM).\nFloored integer modulus\nFloored integer modulo, satisfying:\nCalculate the multinomial coefficient.\nFor a given n, iterate over all binomial coefficients …\nRounds up to nearest multiple of argument.\nReturns the truncated principal <code>n</code>th root of an integer – …\nReturns the truncated principal <code>n</code>th root of an integer – …\nRounds down to nearest multiple of argument.\nReturns the truncated principal square root of an integer …\nReturns the truncated principal square root of an integer …\nAn iterator over the range [start, stop)\nAn iterator over the infinite range starting at <code>start</code>\nAn iterator over the range [start, stop]\nAn iterator over the range [start, stop) by <code>step</code>. It …\nAn iterator over the infinite range starting at <code>start</code> by …\nAn iterator over the range [start, stop] by <code>step</code>. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the given range [start, stop) …\nReturn an iterator over the infinite range starting at …\nReturn an iterator over the range [start, stop]\nReturn an iterator over the range [start, stop) by <code>step</code>. …\nReturn an iterator over the infinite range starting at …\nReturn an iterator over the range [start, stop] by <code>step</code>. …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nAlias for arbitrary precision rationals.\nA constant <code>Ratio</code> 1/1.\nRepresents the ratio between two numbers.\nAlias for a <code>Ratio</code> of machine-sized integers.\nAlias for a <code>Ratio</code> of 32-bit-sized integers.\nAlias for a <code>Ratio</code> of 64-bit-sized integers.\nA constant <code>Ratio</code> 0/1.\nRounds towards plus infinity.\nReturns zero\nGets an immutable reference to the denominator.\nRounds towards minus infinity.\nReturns the fractional part of a number, with division …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a float into a rational number.\nCreates a <code>Ratio</code> representing the integer <code>t</code>.\nParses <code>numer/denom</code> or just <code>numer</code>.\nParses <code>numer/denom</code> where the numbers are in base <code>radix</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs a <code>Ratio</code> into its numerator and denominator.\nReturns true if the rational number is an integer …\nCreates a new <code>Ratio</code>.\nCreates a <code>Ratio</code> without checking for <code>denom == 0</code> or …\nGets an immutable reference to the numerator.\nRaises the <code>Ratio</code> to the power of an exponent.\nReturns the reciprocal.\nReturns a reduced copy of self.\nRounds to the nearest integer. Rounds half-way cases away …\nConverts to an integer, rounding towards zero.\nRounds towards zero.\nA generic interface for casting between machine scalars …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nUnary operator for retrieving the multiplicative inverse, …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nThe trait for <code>Num</code> types which also implement assignment …\nGeneric trait for types implementing numeric assignment …\nThe trait for <code>NumAssign</code> types which also implement …\nAn interface for casting between machine scalars.\nGeneric trait for types implementing basic numeric …\nThe trait for <code>Num</code> types which also implement numeric …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nThe resulting type after applying the fused multiply-add.\nThe result after applying the operator.\nReturn Archimedes’ constant <code>π</code>.\nBinary operator for raising a value to a power.\nGeneric trait for primitive integers.\nThe trait for <code>Num</code> references which implement numeric …\nReturn <code>sqrt(2.0)</code>.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nUseful functions for signed numbers (i.e. numbers that can …\nReturn the full circle constant <code>τ</code>.\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConvert a value to another, using the <code>as</code> operator.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nFinds the euclid remainder of dividing two numbers, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nA value bounded by a maximum value\nA value bounded by a minimum value\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreate a number from its representation as a byte array in …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nConvert from a string and radix (typically <code>2..=36</code>).\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of <code>self</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConvert <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this number as a byte …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nConverts degrees to radians.\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturn the integer part of a number.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nNumbers which have upper and lower bounds\nNumbers which have lower bounds\nNumbers which have upper bounds\nReturns the largest finite number this type can represent\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the smallest finite number this type can represent\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nReturn Archimedes’ constant <code>π</code>.\nReturn <code>sqrt(2.0)</code>.\nReturn the full circle constant <code>τ</code>.\nTrait for floating point numbers that provide an …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the integer part of a number.\nReturn the integer part of a number.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nGeneric trait for primitive integers.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nConvert an integer from big endian to the target’s …\nConvert an integer from little endian to the target’s …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReverses the byte order of the integer.\nConvert <code>self</code> to big endian from the target’s endianness.\nConvert <code>self</code> to little endian from the target’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nCreate a number from its representation as a byte array in …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nFinds the euclid remainder of dividing two numbers, …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nUnary operator for retrieving the multiplicative inverse, …\nThe result after applying the operator.\nReturns the multiplicative inverse of <code>self</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe resulting type after applying the fused multiply-add.\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nPerforms addition with a flag for overflow.\nPerforms multiplication with a flag for overflow.\nPerforms substraction with a flag for overflow.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the product along with a boolean …\nReturns a tuple of the difference along with a boolean …\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nA trait for real number types that do not necessarily have …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nRaise a number to a real number power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nUseful functions for signed numbers (i.e. numbers that can …\nA trait for values which cannot be negative\nComputes the absolute value.\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns the sign of the number.\nReturns the sign of the number.")