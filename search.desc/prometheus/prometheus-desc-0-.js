searchState.loadedDescShard("prometheus", 0, "The Rust client library for Prometheus.\nA duplicate metric collector has already been registered.\nA <code>Metric</code> represents a single numerical value that only …\nA <code>Collector</code> that bundles a set of <code>Counter</code>s that all share …\nThe default <code>Histogram</code> buckets. The default buckets are …\nAn interface for encoding metric families into an …\nContains the error value\nThe error types for prometheus.\nA <code>Metric</code> represents a single numerical value that can …\nA <code>Collector</code> that bundles a set of <code>Gauge</code>s that all share …\nA <code>Metric</code> counts individual observations from an event or …\nA struct that bundles the options for creating a <code>Histogram</code> …\nTimer to measure and record the duration of an event.\nA <code>Collector</code> that bundles a set of Histograms that all …\nThe label cardinality was inconsistent.\nThe integer version of <code>Counter</code>. Provides better …\nThe integer version of <code>CounterVec</code>. Provides better …\nThe integer version of <code>Gauge</code>. Provides better performance …\nThe integer version of <code>GaugeVec</code>. Provides better …\nAn error containing a <code>std::io::Error</code>.\nAn error message which is only a string.\nContains the success value\nA struct that bundles the options for creating most <code>Metric</code> …\nThe protocol buffer format of metric family.\nAn error containing a <code>protobuf::error::ProtobufError</code>.\nAn implementation of an <code>Encoder</code> that converts a …\nA Gauge that returns the value from a provided function on …\nA struct for registering Prometheus collectors, collecting …\nA specialized Result type for prometheus.\nThe text format of metric family.\nAn implementation of an <code>Encoder</code> that converts a …\n<code>buckets</code> set the buckets.\nDefines the buckets into which observations are counted. …\nA container holding various options.\n<code>const_label</code> adds a const label.\n<code>const_label</code> adds a const label.\n<code>const_labels</code> sets the const labels.\n<code>const_labels</code> sets the const labels.\nconst_labels are used to attach fixed labels to this …\nCore traits and types.\nDefault registry (global static).\n<code>encode</code> converts a slice of MetricFamily proto messages …\nConverts metrics to <code>String</code>.\nAppends metrics to a given <code>String</code> buffer.\nCreate <code>count</code> buckets, where the lowest bucket has an upper …\n<code>format_type</code> returns target format.\n<code>fq_name</code> returns the fq_name.\n<code>fq_name</code> returns the fq_name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all <code>MetricFamily</code> of <code>DEFAULT_REGISTRY</code>.\n<code>gather</code> calls the Collect method of the registered …\nReturn count of all samples.\nReturn accumulated sum of all samples.\nhelp provides information about this metric. Mandatory!\nCreate a <code>HistogramOpts</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate labels with specified name-value pairs.\nCreate <code>count</code> buckets, each <code>width</code> wide, where the lowest …\nUnsync local metrics, provides better performance.\nReturn a <code>LocalHistogramVec</code> for single thread usage.\nReturn a <code>LocalHistogram</code> for single thread usage.\nnamespace, subsystem, and name are components of the …\n<code>namespace</code> sets the namespace.\n<code>namespace</code> sets the namespace.\nnamespace, subsystem, and name are components of the …\nCreate a new <code>HistogramVec</code> based on the provided …\nCreate a new protobuf encoder.\nCreate a new text encoder.\nCreate a <code>HistogramOpts</code> with the <code>name</code> and <code>help</code> arguments.\n<code>new</code> creates the Opts with the <code>name</code> and <code>help</code> arguments.\nCreate a new <code>PullingGauge</code>.\n<code>new</code> creates a Registry.\nCreate a new registry, with optional custom prefix and …\nAdd a single observation to the <code>Histogram</code>.\nObserve execution time of a closure, in second.\nObserve and record timer duration (in seconds).\nCreate an <code>Opts</code>.\nProtocol buffers format of metrics.\nRegisters a new <code>Collector</code> to be included in metrics …\n<code>register</code> registers a new <code>Collector</code> to be included in …\nCreate a <code>Counter</code> and registers to default registry.\nCreate a <code>CounterVec</code> and registers to default registry.\nCreate a <code>CounterVec</code> and registers to a custom registry.\nCreate a <code>Counter</code> and registers to a custom registry.\nCreate a <code>Gauge</code> and registers to default registry.\nCreate a <code>GaugeVec</code> and registers to default registry.\nCreate a <code>GaugeVec</code> and registers to a custom registry.\nCreate a <code>Gauge</code> and registers to a custom registry.\nCreate a <code>Histogram</code> and registers to default registry.\nCreate a <code>HistogramVec</code> and registers to default registry.\nCreate a <code>HistogramVec</code> and registers to default registry.\nCreate a <code>Histogram</code> and registers to a custom registry.\nCreate an <code>IntCounter</code> and registers to default registry.\nCreate an <code>IntCounterVec</code> and registers to default registry.\nCreate an <code>IntCounterVec</code> and registers to a custom registry.\nCreate an <code>IntCounter</code> and registers to a custom registry.\nCreate an <code>IntGauge</code> and registers to default registry.\nCreate an <code>IntGaugeVec</code> and registers to default registry.\nCreate an <code>IntGaugeVec</code> and registers to a custom registry.\nCreate an <code>IntGauge</code> and registers to a custom registry.\nReturn a <code>HistogramTimer</code> to track a duration.\nObserve and return timer duration (in seconds).\nObserve, record and return timer duration (in seconds).\n<code>subsystem</code> sets the sub system.\n<code>subsystem</code> sets the sub system.\nnamespace, subsystem, and name are components of the …\nUnregisters the <code>Collector</code> that equals the <code>Collector</code> passed …\n<code>unregister</code> unregisters the <code>Collector</code> that equals the …\n<code>variable_label</code> adds a variable label.\n<code>variable_label</code> adds a variable label.\n<code>variable_labels</code> sets the variable labels.\n<code>variable_labels</code> sets the variable labels.\nvariable_labels contains names of labels for which the …\n<code>with_opts</code> creates a <code>Histogram</code> with the <code>opts</code> options.\nThe expected number of labels.\nThe actual number of labels.\nAn interface for atomics. Used to generically model float …\nA atomic float.\nA atomic signed integer.\nA atomic unsigned integer.\nAn interface for collecting metrics.\nThe descriptor used by every Prometheus <code>Metric</code>. It is …\nAn interface for describing the immutable meta-data of a …\nThe underlying implementation for <code>Counter</code> and <code>IntCounter</code>.\nThe underlying implementation for <code>CounterVec</code> and …\nThe underlying implementation for <code>Gauge</code> and <code>IntGauge</code>.\nThe underlying implementation for <code>GaugeVec</code> and <code>IntGaugeVec</code>.\nThe underlying implementation for <code>LocalCounter</code> and …\nThe underlying implementation for <code>LocalCounterVec</code> and …\nThe associated Metric collected.\nAn interface models a single sample value with its meta …\nA <code>Collector</code> to bundle metrics of the same name that differ …\nAn interface for building a metric vector.\nAn interface for numbers. Used to generically model float …\nA struct that bundles the options for creating most <code>Metric</code> …\nThe associated describer.\nThe numeric type associated with this atomic.\nAdd the given value to the gauge. (The value can be …\n<code>build</code> builds a <code>Metric</code> with option and corresponding label …\nCollect metrics.\nconst_label_pairs contains precalculated DTO label pairs …\nconst_labels are used to attach fixed labels to this …\n<code>create</code> creates a MetricVec with description <code>desc</code>, a metric …\nDecrease the gauge by 1.\nDecrement the value by a given amount.\nReturn descriptors for metrics.\n<code>describe</code> returns a <code>Desc</code>.\ndim_hash is a hash of the label names (preset and …\nFlush the local metrics to the <code>CounterVec</code> metric.\nFlush the local metrics to the <code>CounterVec</code> metric.\nFlush the local metrics to the <code>Counter</code>.\nFlush the local metrics to the <code>Counter</code>.\nfq_name has been built from Namespace, Subsystem, and Name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>std::convert::From&lt;i64&gt; for f64</code> is not implemented, so …\nGet the value.\nReturn the counter value.\nReturn the local counter value.\nReturn the gauge value.\n<code>get_metric_with</code> returns the <code>Metric</code> for the given Labels …\n<code>get_metric_with_label_values</code> returns the <code>Metric</code> for the …\nhelp provides some helpful information about this metric.\nhelp provides information about this metric. Mandatory!\nid is a hash of the values of the ConstLabels and fqName. …\nIncrease the counter by 1.\nIncrease the local counter by 1.\nIncrease the gauge by 1.\nIncrement the value by a given amount.\nIncrease the given value to the counter.\nIncrease the given value to the local counter.\nIncrement the value by a given amount with the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a f64.\nReturn a <code>GenericLocalCounterVec</code> for single thread usage.\nReturn a <code>GenericLocalCounter</code> for single thread usage.\nReturn a <code>LocalHistogramVec</code> for single thread usage.\nReturn a <code>GenericLocalCounterVec</code> for single thread usage.\nReturn the protocol Metric.\nnamespace, subsystem, and name are components of the …\nnamespace, subsystem, and name are components of the …\nCreate a new atomic value.\nCreate a new <code>GenericCounterVec</code> based on the provided <code>Opts</code> …\nCreate a new <code>GenericGaugeVec</code> based on the provided <code>Opts</code> …\nCreate a <code>GenericCounter</code> with the <code>name</code> and <code>help</code> arguments.\nInitializes a new <code>Desc</code>. Errors are recorded in the Desc …\nCreate a <code>GenericGauge</code> with the <code>name</code> and <code>help</code> arguments.\nCreate a new <code>GenericGaugeVec</code> based on the provided <code>Opts</code> …\nCreate a new <code>GenericCounterVec</code> based on the provided <code>Opts</code> …\nCreate a new <code>HistogramVec</code> based on the provided …\n<code>remove</code> removes the metric where the variable labels are …\nRemove a <code>GenericLocalCounter</code> by label values. See more …\n<code>remove_label_values</code> removes the metric where the variable …\nRestart the counter, resetting its value back to 0.\nRestart the counter, resetting its value back to 0.\n<code>reset</code> deletes all metrics in this vector.\nSet the value to the provided value.\nSet the gauge to an arbitrary value.\nSubtract the given value from the gauge. (The value can be …\nnamespace, subsystem, and name are components of the …\nStore the value, returning the previous value.\nStores a value into the atomic integer, returning the …\nvariable_labels contains names of labels for which the …\nvariable_labels contains names of labels for which the …\n<code>with</code> works as <code>get_metric_with</code>, but panics if an error …\nGet a <code>GenericLocalCounter</code> by label values. See more …\n<code>with_label_values</code> works as <code>get_metric_with_label_values</code>, …\nCreate a <code>GenericCounter</code> with the <code>opts</code> options.\nCreate a <code>GenericGauge</code> with the <code>opts</code> options.\nAuto flush-able local counter\nAuto flush-able local counter\nDelegator for auto flush-able local counter\nFor auto_flush::AFLocalCounter to use to make type …\nDelegator for auto flush-able local counter\nAn unsync <code>Counter</code>.\nAn unsync <code>CounterVec</code>.\nAn unsync <code>Histogram</code>.\nAn unsync <code>HistogramTimer</code>.\nAn unsync <code>HistogramVec</code>.\nThe integer version of <code>LocalCounter</code>. Provides better …\nThe integer version of <code>LocalCounterVec</code>. Provides better …\nAn interface models a Metric only usable in single thread …\nAn interface models a LocalMetric with try to flush …\nthe exact type which implements Atomic\nClear the local metric.\nClear the local metric.\nFlush the local metrics to the global one.\ntrigger flush of LocalKey\nFlush the local metrics to the <code>Histogram</code> metric.\nFlush the local metrics to the <code>Histogram</code> metric.\nFlush the local metrics to the <code>Histogram</code> metric.\nFlush the local metrics to the <code>HistogramVec</code> metric.\nFlush the local metrics to the <code>HistogramVec</code> metric.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the local counter value.\nGet the final counter for delegate\nGet the final counter for delegate\nGet the root local metric for delegate\nGet the root local metric for delegate\nReturn count of local samples.\nReturn count of local samples.\nReturn accumulated sum of local samples.\nReturn accumulated sum of local samples.\nIncrease the local counter by 1, and try to flush to …\nIncrease the given value to the local counter, and try to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen to implementation to fill try_flush parameters\nConstruct a new AFLocalCounter from delegator.\nConstruct a new AFLocalHistogram from delegator\nAdd a single observation to the <code>Histogram</code>.\nAdd a single observation to the <code>Histogram</code>.\nObserve execution time of a closure, in second.\nObserve execution time of a closure, in second.\nObserve and record timer duration (in seconds).\nRemove a <code>LocalHistogram</code> by label values. See more …\nRestart the counter, resetting its value back to 0.\nReturn a <code>LocalHistogramTimer</code> to track a duration.\nObserve and return timer duration (in seconds).\nObserve, record and return timer duration (in seconds).\nIf the LocalMetric is already flushed in last …\nIf the LocalMetric is already flushed in last …\nGet a <code>LocalHistogram</code> by label values. See more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")