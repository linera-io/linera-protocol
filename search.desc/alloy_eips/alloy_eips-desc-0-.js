searchState.loadedDescShard("alloy_eips", 0, "alloy-eips\nEIP-1559 constants, helpers, and types.\nRe-export the EIP-2124 types.\nEIP-2718 traits.\nRe-export the EIP-2930 types.\nContains the history storage contract, first introduced in …\nEIP-4788 constants.\nEIP-4844 constants and helpers.\nEIP-4895 Withdrawal type and serde helpers.\nContains Deposit request types, first introduced in the …\nContains the system contract and WithdrawalRequest types, …\nContains consolidation types, first introduced in the …\nTypes and constants for PeerDAS.\nConstants and utils for calldata cost.\nEIP-7685: General purpose execution layer requests\nContains constants and utility functions for EIP-7691\nRe-export the EIP-7702 types.\nContains constants and utility functions for EIP-7840\nContains constants and helper functions for EIP-7892\nConstants related to the beacon chain consensus.\nBaseFeeParams contains the config parameters that control …\nBase fee max change denominator as defined in EIP-1559\nElasticity multiplier as defined in EIP-1559\nThe default Ethereum block gas limit: 30M\nThe default Ethereum block gas limit: 30M\nThe default Ethereum block gas limit: 36M\nReturn type of EIP1155 gas fee estimator.\nThe bound divisor of the gas limit, used in update …\nInitial base fee as defined in EIP-1559\nThe minimum tx fee below which the txpool will reject the …\nSame as MIN_PROTOCOL_BASE_FEE but as a U256.\nGet the base fee parameters for Base Sepolia\nGet the base fee parameters for Base Sepolia (post Canyon)\nCalculate the base fee for the next block based on the …\nCalculate the gas limit for the next block based on parent …\nThe elasticity multiplier from EIP-1559\nGet the base fee parameters for Ethereum mainnet\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe base_fee_max_change_denominator from EIP-1559\nThe max fee per gas.\nThe max priority fee per gas.\nCreate a new BaseFeeParams\nCalculate the base fee for the next block based on the …\nGet the base fee parameters for Optimism Mainnet\nGet the base fee parameters for Optimism Mainnet (post …\nGet the base fee parameters for Optimism Sepolia\nGet the base fee parameters for Optimism Sepolia (post …\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nA helper struct to store the block number/hash and its …\nEarliest block (genesis)\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFailed to parse a block id as a hex string.\nThe hash\nA block hash and an optional bool that defines if it’s …\nThe hash\nEither a hash <em>or</em> a block number\nThrown when a 0x-prefixed hex string was expected\nLatest block\nThis is a helper type to allow for lenient parsing of …\nBlock numbers should be 0x-prefixed\nA number and a hash.\nThe number\nBlock by number from canonical chain\nA block number\nThe number\nError thrown when parsing a HashOrNumber from a string.\nError thrown when parsing a BlockId from a string.\nError thrown when parsing a BlockNumberOrTag from a string.\nFailed to parse hex value\nFailed to parse hex number\nFailed to parse hex value\nFailed to parse a block id from a number.\nPending block (not yet part of the blockchain)\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nReturns the block hash if it is BlockId::Hash\nReturns the block hash if it is a <code>HashOrNumber::Hash</code>.\nReturns the numeric block number if explicitly set\nReturns the block number if it is a <code>HashOrNumber::Number</code>.\nReturns the block number if it is <code>BlockId::Number</code> and not …\nBlock number/hash.\nA block hash\nCreates a new “earliest” tag instance.\nCreates a new “finalized” tag instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>RpcBlockHash</code> from a <code>B256</code>.\nCreate a new block hash instance.\nThe hash.\nThe hash.\nThe hash.\nCreate a new block hash instance that requires the block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Self</code> and returns the number and hash\nReturns the inner <code>BlockNumberOrTag</code>.\nReturns <code>true</code> if it’s “earliest”\nReturns true if this is BlockNumberOrTag::Earliest\nReturns <code>true</code> if it’s “finalized”\nReturns true if this is BlockNumberOrTag::Finalized\nReturns true if this is BlockId::Hash\nReturns <code>true</code> if it’s “latest”\nReturns true if this is BlockNumberOrTag::Latest\nReturns <code>true</code> if a numeric block number is set\nReturns true if this is BlockNumberOrTag::Number\nReturns <code>true</code> if it’s “pending”\nReturns true if this is BlockNumberOrTag::Pending\nReturns <code>true</code> if it’s “safe”\nReturns true if this is BlockNumberOrTag::Safe\nCreates a new “latest” tag instance.\nA module that deserializes either a BlockNumberOrTag, or a …\nReturns whether or not the block matches the given …\nCreates a new <code>BlockWithParent</code> instance.\nCreates a new <code>LenientBlockNumberOrTag</code> from a …\nCreates a new <code>NumHash</code> from a number and hash.\nCreates a new block number instance.\nThe number\nThe number\nThe number\nParent hash.\nCreates a new “pending” tag instance.\nWhether the block must be a canonical block\nCreates a new “safe” tag instance.\nFollowing the spec the block parameter is either:\nBy block number activation.\nRepresents a forward-compatible ENR entry for including …\nFilter that describes the state of blockchain and can be …\nHow to filter forks.\n<code>CRC32</code> hash of all previous forks starting from genesis …\nA fork identifier as defined by EIP-2124. Serves as the …\nRepresents a transition from one fork to another\nDescribes the current head block.\nLocal node is on an incompatible chain or needs a software …\nRemote node is outdated and needs a software update.\nBy timestamp activation.\nReason for rejecting provided <code>ForkId</code>.\nReturn current fork id\nThe new, active <code>ForkId</code>\nThe difficulty of the head block.\nThe inner forkid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the head block.\nCRC32 checksum of the all fork blocks and timestamps from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the head block is an empty block (i.e., has …\nCreates a new <code>Head</code> instance.\nCreate the filter from provided head, genesis block hash, …\nNext upcoming fork block number or timestamp, 0 if not yet …\nThe number of the head block.\nThe previously active <code>ForkId</code> before the transition\nManually set the current fork id.\nSet the current head.\nThe timestamp of the head block.\nThe total difficulty at the head block.\nUpdates the head block with new information.\nCheck whether the provided <code>ForkId</code> is compatible based on …\nlocally configured forkId\nlocally configured forkId\n<code>ForkId</code> received from remote\n<code>ForkId</code> received from remote\nDecoding trait for EIP-2718 envelopes. These envelopes …\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nTrait for checking if a transaction envelope supports a …\nIdentifier for legacy transaction, however a legacy tx is …\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nA trait that helps to determine the type of the …\nGot an unexpected type flag while decoding.\nGeneric wrapper with encoded Bytes, such as transaction …\nDecode the transaction according to EIP-2718 rules. First …\nDecode a transaction according to EIP-2718, ensuring no …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nGet the encoded bytes\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps the value with the <code>Encodable2718::encoded_2718</code> bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA convenience function that encodes the value in the 2718 …\nReturns ownership of the encoded bytes.\nReturns ownership of the underlying value.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the given type ID corresponds to a …\nReturns true if the type matches the given type.\nMaps the inner value to a new value using the given …\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nWraps the value with the bytes.\nSeal the encodable, by encoding and hashing it.\nSplit the wrapper into <code>Bytes</code> and value tuple\nTransform the value\nreturns <code>None</code> if the inner value is <code>None</code>, otherwise returns …\nCompute the hash as committed to in the MPT trie. This …\nReturns the EIP-2718 type flag.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nGet the underlying value\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nAccess list with gas used appended.\nList with accounts accessed during transaction.\nList with accounts accessed during transaction.\nAdds an address to the access list and returns <code>true</code> if the …\nAccount addresses that would be loaded at the start of …\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nEnsures the result is OK, returning <code>AccessListWithGasUsed</code> …\nOptional error message if the transaction failed.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEstimated gas used with access list.\nEstimated gas used with access list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nChecks if there is an error in the result.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nKeys of storage that would be loaded at the start of …\nReturns the total number of storage keys in this access …\nEIP-2935: Serve historical block hashes from state\nThe address for the EIP-2935 history storage contract.\nThe code for the EIP-2935 history storage contract.\nThe address for the EIP-4788 beacon roots contract.\nThe code for the EIP-4788 beacon roots contract.\nThe caller to be used when calling the EIP-4788 beacon …\nDetermines the maximum rate of change for blob fee\nMinimum gas price for a data blob\nThe modulus of the BLS group used in the KZG commitment …\nThe modulus of the BLS group used in the KZG commitment …\nHow many bytes are in a blob Same as DATA_GAS_PER_BLOB, …\nHow many bytes are in a commitment\nHow many bytes are in a proof\nA Blob serialized as 0x-prefixed hex string\nBlob type returned in responses to <code>engine_getBlobsV1</code>: …\nBlob type returned in responses to <code>engine_getBlobsV2</code>: …\nThis represents a set of blobs, and its corresponding …\nA single blob sidecar.\nA commitment/proof serialized as 0x-prefixed hex string\nGas consumption of a single data blob.\nHow many field elements are stored in a single data blob.\nSize a single field element in bytes.\nSize a single field element in bytes.\nA heap allocated blob that serializes as 0x-prefixed hex …\nA Blob hash\nError indicating that the blob length is invalid.\nMaximum number of data blobs in a single block.\nMaximum number of data blobs in a single block.\nMaximum data gas for data blobs in a single block.\nMaximum data gas for data blobs in a single block.\nTarget number of data blobs in a single block.\nTarget number of data blobs in a single block.\nTarget data gas for data blobs in a single block.\nTarget data gas for data blobs in a single block.\nNumber of usable bits in a field element. The top two bits …\nThe number of usable bytes in a single data blob. This is …\nCommitment version of a KZG commitment\nIterator that returns versioned hashes from commitments.\nThe blob data.\nThe blob data.\nThe blob in this sidecar item.\nReturns the blob corresponding to the versioned hash, if …\nThe blob data.\nBuilder and utils for the EIP-4844 Blob Transaction\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nThe blob commitments.\nDecodes the inner BlobTransactionSidecar fields from RLP …\nHelper function to deserialize boxed blobs.\nEncodes the inner BlobTransactionSidecar fields as RLP …\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new heap blob from an array.\nCreate a new heap blob from <code>Bytes</code>.\nThe hash of the blob\nThe index of the blob\nThe index of this item within the BlobTransactionSidecar.\nGet the inner\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KZG commitment.\nThe KZG proof.\nCalculates the versioned hash for a KzgCommitment of 48 …\nMatches versioned hashes and returns an iterator of …\nConstructs a new BlobTransactionSidecar from a set of …\nCreates a new iterator over commitments to generate …\nCreate a new heap blob from a byte slice.\nThe KZG proof for the blob.\nThe cell proofs for the blob.\nThe blob proofs.\nGenerate a new heap blob with all bytes set to <code>byte</code>.\nDecodes the BlobTransactionSidecar from RLP bytes.\nEncodes the BlobTransactionSidecar as RLP bytes.\nCalculates the length of the BlobTransactionSidecar when …\nCalculates a size heuristic for the in-memory size of the …\nUtilities for working with EIP-4844 field elements and …\nReturns the versioned hash for the blob at the given …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nA builder for creating a <code>BlobTransactionSidecar</code>.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nSimple coder that only uses the last 31 bytes of each …\nAllocate enough space for the required number of new field …\nGet a reference to the blobs currently in the builder.\nCode a slice of data into the builder.\nDecode all slices of data from the blobs.\nFinish the sidecar, and commit to the data. This method …\nNo-op\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder and …\nCreate a new builder from a slice of data.\nCreate a new builder from a slice of data by calling …\nIngest a slice of data into the builder.\nIngest a partial FE into the current blobs.\nIngest a field element into the current blobs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the builder is empty.\nCheck if the builder is empty.\nCalculate the length of used field elements IN BYTES in …\nCalculate the length of bytes used by field elements in …\nCreate a new builder, and push an empty blob to it. This …\nInstantiate a new builder and new coder instance.\nCalculate the number of field elements required to store …\nTake the blobs from the builder, without committing them …\nCreate a new builder, preallocating room for <code>capacity</code> …\nCreate a new builder with a pre-allocated capacity. This …\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nInstantiate a new <code>WholeFe</code> from a slice of bytes, if it is …\nMultiplier for converting gwei to wei.\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nTarget address for withdrawn ether.\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMonotonically increasing identifier issued by consensus …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert Self into raw vec of withdrawals.\nGet an iterator over the Withdrawals.\nGet a mutable iterator over the Withdrawals.\nCreate a new Withdrawals instance.\nCalculate a heuristic for the in-memory size of the …\nCalculate the total size, including capacity, of the …\nIndex of validator associated with withdrawal.\nThe EIP-7685 request type for deposit requests.\nThis structure maps onto the deposit object from EIP-6110.\nMainnet deposit contract address.\nThe EIP-6110 Consensus Specs defined maximum payload size.\nAmount of ether deposited in gwei\nReturns the argument unchanged.\nDeposit index\nCalls <code>U::from(self)</code>.\nValidator public key\nDeposit signature\nWithdrawal credentials\nThe EIP-7002 defined maximum withdrawal requests per block.\nThe caller to be used when calling the EIP-7002 withdrawal …\nThe address for the EIP-7002 withdrawal requests contract.\nThe code for the EIP-7002 withdrawal requests contract.\nThe EIP-7685 request type for withdrawal requests.\nRepresents an execution layer triggerable withdrawal …\nAmount of withdrawn ether in gwei.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress of the source of the exit.\nValidator public key.\nThe address for the EIP-7251 consolidation requests …\nThe code for the EIP-7251 consolidation requests contract.\nThe EIP-7685 request type for consolidation requests.\nThis structure maps onto the consolidation request object …\nThe EIP-7251 defined maximum number of consolidation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSource address\nSource public key\nTarget public key\nThe number of bytes in a cell.\nThis represents a set of blobs, and its corresponding …\nThis represents a set of blobs, and its corresponding …\nThe number of cells in an extended blob.\nA commitment/proof serialized as 0x-prefixed hex string\nA helper trait for decoding EIP-7594 sidecars.\nA wrapper version for EIP-7594 sidecar encoding.\nEIP-4844 style blob transaction sidecar.\nEIP-7594 style blob transaction sidecar with cell proofs.\nA helper trait for encoding EIP-7594 sidecars.\nNumber of field elements in a cell.\nNumber of field elements in a Reed-Solomon extended blob.\nMaximum number of blobs per transaction after Fusaka …\nReturns the EIP-4844 sidecar if it is <code>Self::Eip4844</code>.\nReturns the EIP-7594 sidecar if it is <code>Self::Eip7594</code>.\nReturns the blob corresponding to the versioned hash, if …\nReturns the blob corresponding to the versioned hash, if …\nThe blob data.\nList of cell proofs for all blobs in the sidecar, …\nReturns the commitments of the sidecar.\nThe blob commitments.\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDecodes the inner BlobTransactionSidecarEip7594 fields …\nDecode the sidecar according to EIP-7594 rules. First a …\nEncodes the BlobTransactionSidecar fields as RLP bytes, …\nEncodes the inner BlobTransactionSidecarEip7594 fields as …\nEncode the sidecar according to EIP-7594 rules. First a …\nThe length of the 7594 encoded envelope. This is the …\nEncode the sidecar according to [EIP-7594] rules. First a …\nEncode the sidecar according to [EIP-7594] rules. First a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into EIP-4844 sidecar if it is <code>Self::Eip4844</code>.\nConverts the EIP-7594 sidecar if it is <code>Self::Eip7594</code>.\nReturns true if this is a …\nReturns true if this is a …\nMatches versioned hashes and returns an iterator of …\nConstructs a new BlobTransactionSidecarEip7594 from a set …\nDecodes the BlobTransactionSidecarEip7594 from RLP bytes.\nEncodes the BlobTransactionSidecarEip7594 as RLP bytes.\nCalculates the length of the BlobTransactionSidecarEip7594 …\nCalculates a size heuristic for the in-memory size of the …\nCalculates a size heuristic for the in-memory size of the …\nReturns the index of the versioned hash in the commitments …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nReturns an iterator over the versioned hashes of the …\nThe cost of a non-zero byte in calldata.\nThe multiplier for a non zero byte in calldata.\nThe standard cost of calldata token.\nThe cost floor per token\nRetrieve the total number of tokens in calldata.\nCalculate the transaction cost floor as specified in …\nThe empty requests hash.\nStores a precomputed requests hash, used primarily for …\nA container of EIP-7685 requests.\nStores a list of requests, allowing for dynamic requests …\nA list of requests or a precomputed requests hash.\nReturns an instance with the <code>EMPTY_REQUESTS_HASH</code>.\nExtend this container with requests from another container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the variant is a precomputed hash.\nReturns <code>true</code> if the variant is a list of requests.\nGet an iterator over the requests.\nConstruct a new <code>Requests</code> container.\nAdd a new request into the container.\nAdds a new request with the given request type into the …\nReturns the requests, if any.\nCalculate the requests hash as defined in EIP-7685 for the …\nReturns the requests hash for the enum instance.\nConsumes <code>Requests</code> and returns the inner raw opaque …\nConstruct a new <code>Requests</code> container with the given capacity.\nDetermines the maximum rate of change for blob fee after …\nCL-enforced maximum blobs per block after Pectra hardfork …\nCL-enforced target blobs per block after Pectra hardfork …\nSame as <code>crate::eip4844::calc_blob_gasprice</code> but uses the …\nAn unsigned EIP-7702 authorization.\nEIP-7702 error.\nIndicates a failed recovery attempt where no valid address …\nInvalid signature <code>s</code> value.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nSignature error.\nA signed EIP-7702 authorization.\nIndicates a successfully recovered authority address.\nReturns an optional address if valid.\nGet the <code>address</code> for the authorization.\nThe address of the authorization.\nReturns an optional address based on the current state of …\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nEIP-7702 constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the inner <code>Authorization</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the authorization into parts.\nRecover the authority and transform the signed …\nConvert to a signed authorization by adding a signature.\nReturns true if the authority is invalid.\nReturns true if the authority is valid.\nCreates a new signed authorization from raw signature …\nInstantiate without performing recovery. This should be …\nGet the <code>nonce</code> for the authorization.\nThe nonce for the authorization.\nReturns the signature <code>r</code> value.\nRecover the authority for the authorization.\nReturns the signature <code>s</code> value.\nGets the <code>signature</code> for the authorization. Returns …\nComputes the signature hash used to sign the …\nReturns the inner <code>Authorization</code>.\nReturns the signature parity value.\nThe EIP-7702 delegation designator for a cleared …\nThe EIP-7702 delegation designator.\nIdentifier for EIP7702’s set code transaction.\nMagic number used to calculate an EIP7702 authority.\nAn additional gas cost per EIP7702 authorization list item.\nA gas refund for EIP7702 transactions if the authority …\nThe order of the secp256k1 curve, divided by two. …\nConfiguration for the blob-related calculations.\nCalculates the blob fee for block based on its …\nReturns <code>BlobParams</code> configuration activated with Cancun …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax blob count for the block.\nReturns the maximum available blob gas in a block.\nMaximum number of blobs per transaction.\nMinimum gas price for a data blob.\nCalculates the <code>excess_blob_gas</code> value for the next block …\nReturns <code>BlobParams</code> configuration activated with Osaka …\nReturns <code>BlobParams</code> configuration activated with Prague …\nTarget blob count for the block.\nReturns the blob gas target per block.\nUpdate fraction for excess blob gas calculation.\nBlob parameters configuration for a chain, including …\nA scheduled blob parameter update entry.\nBlob parameters for the Cancun hardfork\nBlob parameters for the Prague hardfork\nBlob parameters that take effect at a specific timestamp\nReturns the highest active blob parameters at the given …\nReturns the configured Cancun <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Cancun …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the blob schedule for the ethereum mainnet.\nReturns the configured Osaka <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Osaka …\nReturns the configured Prague <code>BlobParams</code>.\nConfiguration for blob-related calculations for the Prague …\nTime-based scheduled updates to blob parameters.\nMax seconds from current time allowed for blocks, before …\nThe default block nonce in the beacon consensus\nAn EPOCH is a series of 32 slots (~6.4min).\nAn EPOCH is a series of 32 slots (~6.4min).\nAn EPOCH is a series of 32 slots.\nThe duration of a slot in seconds.\nThe duration of a slot in seconds.")