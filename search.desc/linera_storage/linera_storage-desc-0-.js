searchState.loadedDescShard("linera_storage", 0, "This module defines the storage abstractions for …\nThe low-level storage implementation in use by the block …\nAn implementation of <code>ExecutionRuntimeContext</code> suitable for …\nAn implementation of <code>DualStoreRootKeyAssignment</code> that …\nA clock that can be used to get the current <code>Timestamp</code>.\nThe clock type being used.\nThe low-level storage implementation in use by the core …\nThe default namespace to be used when none is specified\nMain implementation of the <code>Storage</code> trait.\nThe result of processing the obtained read certificates.\nCommunicate with a persistent storage using the “views”…\nA clock implementation that uses a stored number of …\nA <code>Clock</code> implementation using the system clock.\nAdvances the current time by the specified delta.\nReturns the current wall clock time.\nReturns a map of the committees for the given epochs.\nTests the existence of a blob with the given blob ID.\nTests existence of a blob state with the given blob ID.\nTests existence of the certificate with the given hash.\nTests existence of the event with the given ID.\nInitializes a chain in a simple way (used for testing and …\nReturns the current time according to the test clock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists the blob IDs of the storage.\nLists the chain IDs of the storage.\nLoads the view of a chain state.\nCreates a <code>UserContractCode</code> instance using the bytecode in …\nCreates a [<code>linera-sdk::UserContract</code>] instance using the …\nAttempts to write the given blob state. Returns the latest …\nWrites the given blobs, but only if they already have a …\nReturns what blobs from the input are missing from storage.\nCreating the processed read certificates.\nCreates a new clock with its time set to 0, i.e. the Unix …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the blob with the given blob ID.\nReads the blob state with the given blob ID.\nReads the blob states with the given blob IDs.\nReads the blobs with the given blob IDs.\nReads the certificate with the given hash.\nReads a number of certificates\nReads certificates by hashes.\nReads certificates by hashes.\nReads the hashed certificate value with the given hash.\nReads the event with the given ID.\nLists all the events from a starting index\nReads the network description.\nSets the current time.\nSelects the WebAssembly runtime to use for applications …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the given blob.\nWrites several blobs.\nWrites blobs and certificate\nWrites a vector of events.\nWrites the network description.")