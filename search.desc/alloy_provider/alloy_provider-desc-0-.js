searchState.loadedDescShard("alloy_provider", 0, "alloy-provider\nBoxed future type used in <code>ProviderCall</code> for non-wasm …\nA boxed future.\nA transaction that is not yet signed.\nCall failed.\nA trait for converting CallItem into relevant call types.\nA singular call type that is mapped into aggregate, …\nHelper type to build a <code>CallItem</code>\nTrait that helpes convert <code>EthCall</code> into a <code>ProviderCall</code>.\nError decoding return data.\nDecoder for the return data of the call.\nA wrapper struct around a type erased <code>Provider</code>.\nMarker for Dynamic Calls i.e where in SolCall type is …\nType indicating that the <code>MulticallBuilder</code> is empty.\nA transaction that is signed and fully constructed.\nContains the error value\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nA builder for an <code>&quot;eth_callMany&quot;</code> RPC request.\nThe parameters for an <code>&quot;eth_callMany&quot;</code> RPC request.\nThe parameters for an <code>&quot;eth_call&quot;</code> RPC request.\nA builder for an <code>&quot;eth_getBlockByHash&quot;</code> request. This type …\nThe parameters for an <code>eth_getBlockBy{Hash, Number}</code> RPC …\nFailed to register pending transaction in heartbeat.\nA struct representing a failure in a multicall\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nAn identity layer that does nothing.\nDefault address for the Multicall3 contract on most …\nA Multicall3 builder\nMulticall errors.\nA trait that is to be implemented by a type that can be …\nNo return data was found.\nContains the success value\nHelper struct that houses the params along with the …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nErrors which may occur when watching a pending transaction.\nEthereum JSON-RPC interface.\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nThe primary future type for the <code>Provider</code>.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe output, produces synchronously.\nError occurred while getting response from the heartbeat.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nResult type for multicall operations.\nThe root provider manages the RPC client and the …\nAn underlying call to an RPC server.\nA struct that takes an optional <code>BlockId</code> parameter.\nA transaction that can be sent. This is either a builder …\nError when converting a <code>SendableTx</code>.\nA stack of two providers.\nTransaction was not confirmed after configured timeout.\nUnderlying transport error.\nEncountered when a transport error occurs while calling a …\nErrors that may occur when watching a transaction.\nEncountered when an <code>aggregate/aggregate3</code> batch contains a …\nA waiter for a batched call to a remote RPC server.\nThe underlying <code>NetworkWallet</code> type contained in this stack.\nTrait for Providers, Fill stacks, etc, which contain …\nA builder type for polling new blocks using the …\nErrors which may occur in heartbeat when watching a …\nA remote signer that leverages the underlying provider to …\nAppends a single AccountOverride to the state override.\nExtends the given AccountOverride to the state override.\nAppends a <code>SolCall</code> to the stack.\nAppends a <code>CallItem</code> to the stack.\nAdd a dynamic <code>CallItem</code> to the builder\nAdd a dynamic call to the builder\nSet the address of the multicall3 contract\nCalls the <code>aggregate</code> function\nCall the <code>aggregate3</code> function\nCall the <code>aggregate3Value</code> function\nSet whether the call should be allowed to fail or not.\nFallible cast to a boxed future.\nFallible cast to an unbuilt transaction request.\nFallible cast to a built transaction envelope.\nFallible cast to an unbuilt transaction request.\nFallible cast to mutable <code>RpcCall</code>\nFallible cast to mutable <code>Waiter</code>\nFallible cast to a ready value.\nFallible cast to <code>RpcCall</code>\nFallible cast to <code>Waiter</code>\nMulticall bindings\nReturns the block.\nSet the <code>BlockId</code> in the <code>StateContext</code>.\nSet the block to use for this call.\nSets the block to be used for the call.\nCall the <code>blockAndAggregate</code> function\nSet the block id.\nThe block id to be used for the RPC call.\nReturns a reference to the block overrides if set.\nBoxes the inner client.\nHelper function to directly access <code>ProviderBuilder</code> with …\nReturns the <code>ProviderBuilder</code> to build on.\nReturns the <code>ProviderBuilder</code> to build on.\nReturns a reference to the bundles.\nReturns a mutable reference to the bundles.\nCreate a new <code>EthGetBlock</code> request to get the block by hash …\nCreate a new <code>EthGetBlock</code> request to get the block by …\nMethod that needs to be implemented to convert to a …\nCreate a new <code>EthCall</code> with method set to <code>&quot;eth_call&quot;</code>.\nExecute a smart contract call with a transaction request …\nExecute a smart contract call with a transaction request …\nMethod that needs to be implemented for <code>&quot;eth_callMany&quot;</code> RPC …\nExecute a list of <code>Bundle</code> against the provided <code>StateContext</code> …\nExecute a list of <code>Bundle</code> against the provided <code>StateContext</code> …\nReturns an <code>Empty</code> builder\nReturns the RPC client used to send requests.\nReturns the RPC client used to send requests.\nCreates a new root provider from the provided string.\nFinish the layer stack by providing a connection string …\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a <code>RpcClient</code> that mocks …\nFinish the layer stack by providing a root <code>Provider</code>, …\nBuild this provider with a pre-built Reqwest client.\nConnects to a transport with the given connector.\nFinish the layer stack by providing a <code>TransportConnect</code> …\nReturns a reference to the state context if set.\nSet the <code>StateContext</code> for the call.\nCreate an EIP-2930 access list.\nCreate an EIP-2930 access list.\nReturns a reference to the transaction data.\nDecode the <code>Bytes</code> returned by an <code>&quot;eth_call&quot;</code> into a …\nGet the default signer address.\nGet the default signer address.\nOpt-out of the recommended fillers by resetting the …\nConverts an empty <code>MulticallBuilder</code> into a dynamic one\nSet the block id to “earliest”.\nReturns a type erased provider wrapped in Arc. See …\nReturns a type erased provider wrapped in Arc. See …\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nMethod that needs to be implemented for estimating gas …\nCreate an <code>EthCall</code> future to estimate the gas required for a\nCreate an <code>EthCall</code> future to estimate the gas required for a\nExtended APIs for the provider module.\nExtend the builder with a sequence of calls\nExtend the bundles for the call.\nExtend the builder with a sequence of <code>CallItem</code>s\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>MulticallItem</code> into a <code>CallItem</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nSet the <code>BlockTransactionsKind</code> to …\nPoll for blocks with full transactions i.e …\nCreate a new <code>EthCall</code> with method set to <code>&quot;eth_estimateGas&quot;</code>.\nRetrieves account information (Account) for the given …\nRetrieves account information (Account) for the given …\nRetrieves account information (Account) for the given …\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account.\nGets the balance of the account.\nAdd a call to get the base fee\nReturns the base fee per blob gas (blob gas price) in wei.\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number\nGets a block by either its hash, tag, or number\nGets a block by its BlockHash\nGets a block by its BlockHash\nGets a block by its BlockNumberOrTag\nGets a block by its BlockNumberOrTag\nAdd a call to get the block hash from a block number\nGet the last block number available.\nGet the last block number available.\nAdd a call to get the current block number\nGet the block number for a given block identifier.\nGet the block number for a given block identifier.\nGets the selected block BlockId receipts.\nGets the selected block BlockId receipts.\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block matching the …\nReturns the number of transactions in a block matching the …\nGets the chain ID.\nGets the chain ID.\nAdd a call to get the chain id\nGets the client version.\nGets the client version.\nGets the bytecode located at the corresponding Address.\nGets the bytecode located at the corresponding Address.\nAdd a call to get the coinbase of the current block\nAdd a call to get the current block difficulty\nAdd a call to get the current block gas limit\nAdd a call to get the current block timestamp\nAdd a call to get the eth balance of an address\nReturns a collection of historical gas information …\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nGets the current gas price in wei.\nGets the current gas price in wei.\nAdd a call to get the last block hash\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nGet the account and storage values of the specified …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block number and transaction …\nGets a raw transaction by block number and transaction …\nReturns the EIP-2718 encoded transaction if it exists, see …\nReturns the EIP-2718 encoded transaction if it exists, see …\nWaits for the transaction to confirm with the given number …\nGets the <code>Keccak-256</code> hash of the given data.\nGets the <code>Keccak-256</code> hash of the given data.\nGets the specified storage value from Address.\nGets the specified storage value from Address.\nGets a transaction by block hash and transaction index …\nGets a transaction by block hash and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by its TxHash.\nGets a transaction by its TxHash.\nGets a transaction by its sender and nonce.\nGets a transaction by its sender and nonce.\nGets the transaction count (AKA “nonce”) of the …\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nSet the <code>BlockTransactionsKind</code> to …\nPoll for blocks with just transactions hashes i.e …\nThe index-position of the call that failed\nReturns the inner configuration.\nABI-encoded input data for the call.\nGet the input kind for this builder\nCalls a function with a reference to the value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> to a <code>CallItem</code> while specifying whether it …\nConverts <code>self</code> to a <code>CallItem</code> while specifying whether it …\nConsumes the <code>EthCallParams</code> and returns the transaction …\nConsumes this builder, returning the inner configuration.\nUnwrap the error and return the original value.\nClones the bundles, context, and overrides into owned data.\nConvert this call into one with owned params, by cloning …\nConsumes the stream of block hashes from the inner …\nTrue if this is a boxed future.\nChecks if the transaction is a builder.\nCheck if the builder is empty\nCheck if the transaction is an envelope.\nTrue if this is a ready value.\nTrue if this is an RPC call.\nTrue if this is a waiter.\nSet the <code>BlockTransactionsKind</code> for the request.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider.\nGet the number of calls in the builder\nSet a mapping function to transform the response.\nMap the response to a different type. This is usable for …\nSet a function to map the response into a different type. …\nExecute a multicall by leveraging the <code>MulticallBuilder</code>.\nExecute a multicall by leveraging the <code>MulticallBuilder</code>.\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code> with the recommended filler …\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nInstantiates a new <code>EthCallParams</code> with the given data …\nInstantiates a new <code>EthCallManyParams</code> with the given …\nInstantiates a new <code>EthCallMany</code> with the given parameters.\nCreate a new <code>EthCall</code>.\nInstantiate <code>EthGetBlockParams</code> with the given block and …\nCreate a new error.\nCreate a new instance of <code>ParamsWithBlock</code>.\nCreate a new <code>CallItem</code> instance.\nCreate a new <code>CallItem</code> instance.\nInstantiate a new <code>MulticallBuilder</code>\nCreates a new <code>DynProvider</code> by erasing the type.\nInstantiates a new <code>Web3Signer</code> with the given <code>Provider</code> and …\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in new blocks.\nInstantiate a new <code>MulticallBuilder</code> that restricts the …\nNotify the provider that we are interested in logs that …\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nCreate a new <code>EthGetBlock</code> request with the given <code>RpcCall</code> …\nNotify the provider that we are interested in new pending …\nNotify the provider that we are interested in new pending …\nCreate a new <code>EthGetBlock</code> request with a closure that …\nCreate a new <code>RpcWithBlock</code> from a closure producing a …\nCreate a new <code>EthGetBlock</code> request with the given <code>RpcCall</code>.\nCreate a new <code>RpcWithBlock</code> from a <code>RpcCall</code>.\nCreate a new <code>ProviderBuilder</code> with the <code>RecommendedFillers</code> …\nSet the block id to a specific height.\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a <code>RpcClient</code> that mocks …\nFinish the layer stack by providing a root <code>Provider</code>, …\nReturns a reference to the state overrides if set.\nReturns a reference to the state overrides if set.\nSet the <code>StateOverride</code> for the call.\nSet the state overrides for this call.\nSet the state overrides for the call.\nSet the state overrides for this call, if any.\nThe params to be sent to the RPC call.\nSet the block id to “pending”.\nReturns the provider.\nReturns the underlying <code>Provider</code> used by the <code>Web3Signer</code>.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nSends a raw JSON-RPC request with type-erased parameters …\nCreates a ready pending transaction.\nInstantiate a new <code>ProviderCall</code> from the output.\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nThe return data of the call that failed\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a raw transaction RLP bytes with a conditional …\nBroadcasts a raw transaction RLP bytes with a conditional …\nBroadcasts a transaction to the network.\nBroadcasts a transaction to the network.\nBroadcasts a transaction envelope to the network.\nBroadcasts a transaction envelope to the network.\nSets the channel size for the poller task.\nSets a limit on the number of successful polls.\nSets the duration between polls.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nSigns a transaction request using …\nSigns a transaction that can be submitted to the network …\nSigns a transaction that can be submitted to the network …\nSigns a transaction request and return the raw signed …\nGet an iterator of all signer addresses. Note that because …\nGet an iterator of all signer addresses. Note that because …\nExecutes an arbitrary number of transactions on top of the …\nExecutes an arbitrary number of transactions on top of the …\nConsumes this builder, returning the provider and the …\nGets syncing info.\nGets syncing info.\nThe target address of the call.\nReturns the timeout.\nReturns the timeout.\nEncodes the calls for the <code>aggregate3</code> function and returns …\nEncodes the calls for the <code>aggregate</code> function and returns …\nConverts the <code>CallItem</code> into a <code>Call</code> struct for <code>aggregateCall</code>\nConverts the <code>CallItem</code> into a <code>Call3</code> struct for …\nConverts the <code>CallItem</code> into a <code>Call3Value</code> struct for …\nEncodes the calls for the <code>tryAggregateCall</code> function and …\nSet the <code>TransactionIndex</code> in the <code>StateContext</code>.\nCreates a new <code>TransactionRequest</code>.\nCreates a new <code>TransactionRequest</code>.\nCall the <code>tryAggregate</code> function\nCall the <code>tryBlockAndAggregate</code> function\nReturns the envelope if this variant is an …\nReturns the envelope if this variant is an …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nRequest provider to uninstall the filter with the given ID.\nRequest provider to uninstall the filter with the given ID.\nProvider-related utilities.\nReturns the value to send with the call.\nSet the value to send with the call.\nGet a reference to the underlying wallet.\nAdd a wallet layer to the stack being built.\nGet a mutable reference to the underlying wallet.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new blocks by polling the provider with …\nWatch for new blocks by polling the provider with …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nReturns a <code>Weak</code> RPC client used to send requests.\nSets the block to use for this call.\nSets the block in the <code>StateContext</code> for this call.\nSets the block overrides for this call.\nSets the block overrides for this call.\nSets the block overrides for this call, if any.\nSets the block overrides for this call, if any.\nAdd cached nonce management to the stack being built.\nAggregate multiple <code>eth_call</code> requests into a single batch …\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nClones the underlying provider and returns a new …\nSets the state context for this call.\nConvenience function for <code>allow_failure(true)</code>\nAdd gas estimation to the stack being built.\nSet the input kind for this builder\nAdd nonce management to the stack being built.\nSets the state overrides for this call.\nSets the state overrides for this call.\nSets the state overrides for this call, if any.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nBuild this provider with a provided Reqwest client builder.\nAdd simple nonce management to the stack being built.\nSets the timeout.\nSets the timeout.\nSets the transaction index in the <code>StateContext</code> for this …\nSets the transaction hash.\nSets the transaction hash.\n<code>Multicall3</code> bindings.\nThe creation / init bytecode of the contract.\nContainer for all the <code>IMulticall3</code> function calls.\nAll the selectors of this enum.\nFunction with signature <code>aggregate3((address,bool,bytes)[])</code> …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nFunction with signature <code>aggregate((address,bytes)[])</code> and …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction with signature <code>getBasefee()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getBlockHash(uint256)</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getBlockNumber()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getChainId()</code> and selector …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockCoinbase()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockDifficulty()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockGasLimit()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getCurrentBlockTimestamp()</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getEthBalance(address)</code> and …\nContainer type for the return parameters of the …\nFunction with signature <code>getLastBlockHash()</code> and selector …\nContainer type for the return parameters of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction with signature …\nContainer type for the return parameters of the …\nFunction with signature …\nContainer type for the return parameters of the …\nAnvil namespace rpc interface that gives access to several …\nConfiguration for impersonated transactions, including …\nIf set to true will make every account impersonated.\nModifies the ERC20 balance of an account.\nRemoves all transactions from the pool.\nRemoves transactions from the pool.\nCreate a buffer that represents all state on the chain, …\nReturns true if auto mining is enabled, and false.\nRetrieves a blob by its versioned hash.\nRetrieves blobs by transaction hash.\nSend transactions impersonating specific account and …\nJump forward in time by the given amount of time, in …\nAppend chain state buffer to current chain. Will overwrite …\nRetrieves metadata about the Anvil instance.\nMines a series of blocks.\nMine blocks, instantly and return the mined blocks. This …\nRetrieves the Anvil node configuration params.\nUnsets the interval for the block timestamp.\nRemoves all transactions from the pool for a specific …\nReorg the chain\nReset the fork to a fresh forked state, and optionally …\nRevert the state of the blockchain to a previous snapshot. …\nRollback the chain\nSets impersonated transaction\nImpersonates the <code>from</code> address in the given transaction …\nEnables or disables, based on the single boolean argument, …\nModifies the balance of an account.\nSet the next block gas limit.\nSets an interval for the block timestamp.\nSets the chain ID.\nSets the code of a contract.\nSets the coinbase address.\nModifies the ERC20 allowance of an account.\nSets the mining behavior to interval with the given …\nEnable or disable logging.\nSet the minimum gas price for the node.\nSets the base fee of the next block.\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp …\nSets the nonce of an address.\nSets the backend rpc url.\nWrites a single slot of the account’s storage.\nSets the specific timestamp and returns the number of …\nSnapshot the state of the blockchain at the current block.\nStops impersonating an account if previously set with …\nSends a raw transaction and waits for it to be mined, …\nExecutes a transaction and waits for it to be mined, …\nExecute a transaction regardless of signature status.\nMine blocks, instantly. This will mine the blocks …\nReturns the argument unchanged.\nSet the funding amount for the impersonated account.\nOptional amount of ETH to fund the impersonated account.\nCalls <code>U::from(self)</code>.\nSet the impersonation to continue after the transaction.\nClear the funding amount.\nSet the impersonation to stop after the transaction.\nWhether to stop impersonating after the transaction is …\nFiller for the <code>max_fee_per_blob_gas</code> field in EIP-4844 …\nCached nonce manager\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nError type for failures in the <code>fill_envelope</code> function.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions. The behavior …\nA trait that determines the behavior of filling nonces.\nThe transaction is not ready to be converted to an …\nThe filler is ready to fill in the transaction request.\nThe recommended filler, a preconfigured set of layers …\nA trait which may be used to configure default fillers for …\nRecommended fillers for this network.\nThis <code>NonceManager</code> implementation will fetch the …\nA transport error occurred during the filling process.\nA layer that can fill in a <code>TransactionRequest</code> with …\nA layer that signs transactions locally.\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nCreates a new <code>NonceFiller</code> with the <code>CachedNonceManager</code>.\nReturns <code>true</code> if the filler should continue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nFills in the transaction request and try to convert it to …\nPerforms any synchronous filling. This should be called …\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next nonce for the given account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new wallet layer with the given wallet.\nCreates a new <code>NonceFiller</code> with the specified <code>NonceManager</code>.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nPrepares transaction request with necessary fillers …\nPrepares a transaction request for eth_call operations …\nPrepares transaction request with necessary fillers …\nReturns <code>true</code> if the filler is ready to fill in the …\nReturns the recommended filler for this provider.\nGet a reference to the right filler.\nCreates a new <code>NonceFiller</code> with the <code>SimpleNonceManager</code>.\nReturn a control-flow enum indicating whether the filler …\n<code>ToString::to_string</code>, but without panic on OOM.\nA layer that wraps an <code>Anvil</code> config.\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA provider layer that caches RPC responses and serves them …\nThe <code>CacheProvider</code> holds the underlying in-memory LRU cache …\nProvider layer that aggregates contract calls (<code>eth_call</code>) …\nA provider that batches multiple requests into a single …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nShareable cache.\nExpose inner anvil instance.\nGet the chain’s average blocktime, if applicable.\nReturns the shared cache.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a value from the cache, if it exists.\nGet deserialized value from the cache.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the cache from a file specified by the path. If the …\nReturns the maximum number of items that can be stored in …\nMaximum number of items that can be stored in the cache.\nSet the multicall3 address.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nCreate a new <code>CallBatchLayer</code> with a default wait of 1ms.\nCreate a new <code>ChainLayer</code> from the given chain.\nInstantiate a new cache layer with the maximum number of …\nInstantiate a new cache provider.\nInstantiate a new shared cache.\nPuts a value into the cache, and returns the old value if …\nSaves the cache to a file specified by the path. If the …\nSet the amount of time to wait before sending the batch.\nGet the instance ws endpoint.\nUses a custom estimator\nUses the builtin estimator\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nThe minimum priority fee to provide.\nReturn type of EIP1155 gas fee estimator.\nEIP-1559 estimator variants\nA trait responsible for estimating EIP-1559 values\nAn estimator function for EIP1559 fees.\nHelper type representing the joined recommended fillers …\nThe default EIP-1559 fee estimator.\nEstimates the EIP-1559 values given the latest basefee and …\nEstimates the EIP-1559 values given the latest basefee and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max fee per gas.\nThe max priority fee per gas.\nCreates a new estimator from a closure\nCreates a new estimate fn")