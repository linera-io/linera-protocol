searchState.loadedDescShard("revm_bytecode", 0, "Crate that contains bytecode types and opcode constants.\nEOF decode errors\nIterator over opcodes in a bytecode, skipping immediates.\nEIP-7702 decode error\nEOF decode error\nReturns the remaining bytes in the bytecode as a slice.\nRe-export of bitvec crate, used to store legacy bytecode …\nModule that contains the bytecode enum with all variants …\nEIP-7702 bytecode.\nEOF bytecode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLegacy bytecode.\nCreates a new iterator from a bytecode reference.\nEVM opcode definitions and utilities. It contains opcode …\nReturns the current opcode without advancing the iterator.\nReturns the current opcode wrapped in OpCode without …\nReturns the current position in the bytecode.\nSkips to the next opcode, taking into account PUSH …\nVarious utilities for the bytecode\nMain bytecode structure with all variants.\nEIP-7702 delegated bytecode\nEthereum Object Format\nThe bytecode has been analyzed for valid jump destinations.\nReturns a reference to the bytecode.\nPointer to the executable bytecode.\nReturns bytes.\nReturns raw bytes reference.\nReturns raw bytes slice.\nReturns reference to the EOF if bytecode is EOF.\nReturns the argument unchanged.\nCalculates hash of the bytecode.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if bytecode is EIP-7702.\nReturns whether the bytecode is empty.\nReturns <code>true</code> if bytecode is EOF.\nReturns an iterator over the opcodes in this bytecode, …\nReturns jump table if bytecode is analyzed.\nReturns the length of the original bytes.\nCreates a new legacy analyzed <code>Bytecode</code> with exactly one …\nCreate new checked bytecode.\nCreates a new EIP-7702 <code>Bytecode</code> from <code>Address</code>.\nCreates a new legacy <code>Bytecode</code>.\nCreates a new raw <code>Bytecode</code>.\nCreates a new raw <code>Bytecode</code>.\nReturns the original bytecode as a byte slice.\nReturns the original bytecode.\nEIP-7702 Version Magic in u16 form\nEIP-7702 magic number in array form\nHash of EF01 bytes that is used for EXTCODEHASH when …\nEIP-7702 first version of bytecode\nBytecode of delegated account, specified in EIP-7702\nBytecode errors\nInvalid length of the raw bytecode\nInvalid magic number\nUnsupported version\nReturns the address of the delegated contract.\nAddress of the delegated account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new EIP-7702 bytecode with the given address.\nCreates a new EIP-7702 bytecode or returns None if the raw …\nReturns the raw bytecode with version MAGIC number.\nRaw bytecode.\nVersion of the EIP-7702 bytecode. Currently only version 0 …\nEOF header code section size length.\nEOF header container section size length.\nTypes section that contains stack information for matching …\nBody size is more than specified in the header\nEOF Magic in u16 form\nEOF magic number in array form\nHash of EF00 bytes that is used for EXTCODEHASH when …\nEVM Object Format (EOF) container\nEOF container body\nEOF decode errors\nEOF header structure that contains section sizes and …\nInvalid code info data\nInvalid code info input value\nInvalid code info input value\nInvalid code info input value\nInvalid code info size\nInvalid code info input value can’t be greater than …\nInvalid number for code kind\nInvalid data kind\nInvalid EOF magic number\nInvalid initcode size\nInvalid EOF version\nInvalid kind after code\nInvalid terminal code\nInvalid number for types kind\nEOF header code kind, marking code section.\nEOF header code info kind, marking code info section.\nEOF header container kind, marking container section.\nEOF header data kind, marking data section.\nEOF header terminal kind, marking end of header.\nMismatch of code and info sizes\nShort body while processing EOF\nShort input while processing EOF\nThere should be at least one size\nMissing size\nInvalid code number\nInvalid container number\nInvalid number of code sections\nSize cant be zero\nBody of the EOF container\nReturns body size.\nReturns the code section at the given index.\nCode byte, it is a concatenation of all code sections. …\nCode information\nOffset of the code section in the bytecode.\nIndex of the last byte of each code section\nSizes of EOF code section\nContainer sections\nEOF Container size\nReturns a slice of the data section.\nData section\nEOF data size\nReturns index where data size starts.\nReturns a slice of the raw bytes. If offset is greater …\nDecodes an EOF container body from the given buffer and …\nDecodes the section from the input.\nDecodes EOF header from binary form. Format of the code …\nDecodes EOF from raw bytes.\nDecodes EOF that have additional dangling bytes.\nEncodes this body into the given buffer.\nEncodes the section into the buffer.\nEncodes EOF header into binary form.\nSlow encodes EOF bytes.\nReturns offset of the start of indexed code section.\nReturns raw size of the EOF.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeader of the EOF container\n<code>inputs</code> - 1 byte - <code>0x00-0x7F</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an EOF container from this body.\nCalculates the difference between the number of input and …\nIndicates if the data section is filled.\nReturns <code>true</code> if section is non-returning.\n<code>max_stack_increase</code> - 2 bytes - <code>0x0000-0x03FF</code>\nReturns new <code>CodeInfo</code> with the given inputs, outputs, and …\nCreates a new EOF container from the given body.\n<code>outputs</code> - 1 byte - <code>0x00-0x80</code>\nPritty printer for the EOF bytecode. Enabled by <code>std</code> …\nReturns raw EOF bytes.\nRaw bytes of the EOF container. Chunks of raw Bytes are …\nGets the length of the header in bytes.\nReturns len of the header and body in bytes.\nSum of code sizes\nSum of container sizes\nReturns number of types.\nSize of EOF types section\nValidates the section.\nValidates the EOF container.\nValidates the EOF container with the given code type.\nValidates the raw EOF bytes.\nVerification logic for the EOF bytecode. Module that …\nNumber of inputs\nInvalid unexpected kind type.\nMax stack increment\nNumber of inputs\nNumber of outputs\nMaxIncrementValue\nPretty print the EOF bytecode in human readable format.\nTracker status of verification of code sections and …\nBackward jump should have same smallest and biggest stack …\nBackward jump should have same smallest and biggest stack …\nInvalid jump into immediate bytes\nCALLF to non returning function is not allowed\nCode section not accessed\nCALLF section out of bounds\nTypes of code sections in EOF container\nDATA load out of bounds\nData size needs to be filled for ReturnContract type\nDecoding error.\nEOFCREATE points to container out of bounds\nEOF Error\nEOF Validation Error\nUsed in testing to indicate that the bytecode validation …\nCode that initializes and returns a contract.\nEvery instruction inside bytecode should be forward …\nTypes section invalid\nFirst types section is invalid It should have inputs 0 and …\nJUMPF needs to have enough outputs\nJUMPF Stack\nJump to out of bounds\nInvalid jump into immediate bytes\nJump out of bounds\nJump with zero offset would make a jump to next opcode, it …\nLast instruction should be terminating\nMax stack element mismatch\nBytecode is too small and is missing immediate bytes for …\nBytecode is too small and is missing immediate bytes for …\nNo code sections present\nSection is marked as non-returning but has either RETF or …\nOpcode is disabled in EOF. For example JUMP, JUMPI, etc\nRETF biggest stack num more then outputs\nMaxIndex in RJUMPV can’t be zero. Zero max index makes …\nRuntime code that ends with RETURN or STOP opcodes.\nCALLF stack overflow\nStack requirement is more than smallest stack items\nSub container called in two different modes\nSub container not accessed\nOpcode is not known. It is not defined in the opcode table.\nValidation Error.\nMarks a code section as accessed and adds it to the …\nVector of accessed codes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> of the code is initcode.\nCreates a new instance with the given container type and …\nStack of codes section that needs to be processed.\nSets the code type for a subcontainer. If code type is …\nCode accessed by subcontainer and expected subcontainer …\nThis code type\nFully validates an <code>Eof</code> container.\nValidates that:\nValidates an <code>Eof</code> structure, without recursing into …\nFully validates an <code>Eof</code> container. If first_code_type is …\nDecodes <code>raw</code> into an <code>Eof</code> container and validates it.\nDecodes <code>raw</code> into an <code>Eof</code> container and validates it.\nA table of valid <code>jump</code> destinations. Cheap to clone and …\nLegacy analyzed bytecode represents the original bytecode …\nUsed only as intermediate representation for legacy …\nAnalyze the bytecode to find the jumpdests. Used to create …\nGets the raw bytes of the jump map.\nReturns a reference to the bytecode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a jump map from raw bytes and length.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the raw bytecode into an analyzed bytecode.\nChecks if <code>pc</code> is a valid jump destination.\nReturns JumpTable of analyzed bytes.\nCreates new analyzed bytecode.\nReturns original bytes without padding.\nReturns original bytes without padding.\nReturns original bytes length.\nThe <code>0x01</code> (“ADD”) opcode.\nThe <code>0x01</code> (“ADD”) opcode.\nThe <code>0x08</code> (“ADDMOD”) opcode.\nThe <code>0x08</code> (“ADDMOD”) opcode.\nThe <code>0x30</code> (“ADDRESS”) opcode.\nThe <code>0x30</code> (“ADDRESS”) opcode.\nThe <code>0x16</code> (“AND”) opcode.\nThe <code>0x16</code> (“AND”) opcode.\nThe <code>0x31</code> (“BALANCE”) opcode.\nThe <code>0x31</code> (“BALANCE”) opcode.\nThe <code>0x48</code> (“BASEFEE”) opcode.\nThe <code>0x48</code> (“BASEFEE”) opcode.\nThe <code>0x4A</code> (“BLOBBASEFEE”) opcode.\nThe <code>0x4A</code> (“BLOBBASEFEE”) opcode.\nThe <code>0x49</code> (“BLOBHASH”) opcode.\nThe <code>0x49</code> (“BLOBHASH”) opcode.\nThe <code>0x40</code> (“BLOCKHASH”) opcode.\nThe <code>0x40</code> (“BLOCKHASH”) opcode.\nThe <code>0x1A</code> (“BYTE”) opcode.\nThe <code>0x1A</code> (“BYTE”) opcode.\nThe <code>0xF1</code> (“CALL”) opcode.\nThe <code>0xF1</code> (“CALL”) opcode.\nThe <code>0xF2</code> (“CALLCODE”) opcode.\nThe <code>0xF2</code> (“CALLCODE”) opcode.\nThe <code>0x37</code> (“CALLDATACOPY”) opcode.\nThe <code>0x37</code> (“CALLDATACOPY”) opcode.\nThe <code>0x35</code> (“CALLDATALOAD”) opcode.\nThe <code>0x35</code> (“CALLDATALOAD”) opcode.\nThe <code>0x36</code> (“CALLDATASIZE”) opcode.\nThe <code>0x36</code> (“CALLDATASIZE”) opcode.\nThe <code>0x33</code> (“CALLER”) opcode.\nThe <code>0x33</code> (“CALLER”) opcode.\nThe <code>0xE3</code> (“CALLF”) opcode.\nThe <code>0xE3</code> (“CALLF”) opcode.\nThe <code>0x34</code> (“CALLVALUE”) opcode.\nThe <code>0x34</code> (“CALLVALUE”) opcode.\nThe <code>0x46</code> (“CHAINID”) opcode.\nThe <code>0x46</code> (“CHAINID”) opcode.\nThe <code>0x39</code> (“CODECOPY”) opcode.\nThe <code>0x39</code> (“CODECOPY”) opcode.\nThe <code>0x38</code> (“CODESIZE”) opcode.\nThe <code>0x38</code> (“CODESIZE”) opcode.\nThe <code>0x41</code> (“COINBASE”) opcode.\nThe <code>0x41</code> (“COINBASE”) opcode.\nThe <code>0xF0</code> (“CREATE”) opcode.\nThe <code>0xF0</code> (“CREATE”) opcode.\nThe <code>0xF5</code> (“CREATE2”) opcode.\nThe <code>0xF5</code> (“CREATE2”) opcode.\nThe <code>0xD3</code> (“DATACOPY”) opcode.\nThe <code>0xD3</code> (“DATACOPY”) opcode.\nThe <code>0xD0</code> (“DATALOAD”) opcode.\nThe <code>0xD0</code> (“DATALOAD”) opcode.\nThe <code>0xD1</code> (“DATALOADN”) opcode.\nThe <code>0xD1</code> (“DATALOADN”) opcode.\nThe <code>0xD2</code> (“DATASIZE”) opcode.\nThe <code>0xD2</code> (“DATASIZE”) opcode.\nThe <code>0xF4</code> (“DELEGATECALL”) opcode.\nThe <code>0xF4</code> (“DELEGATECALL”) opcode.\nThe <code>0x44</code> (“DIFFICULTY”) opcode.\nThe <code>0x44</code> (“DIFFICULTY”) opcode.\nThe <code>0x04</code> (“DIV”) opcode.\nThe <code>0x04</code> (“DIV”) opcode.\nThe <code>0x80</code> (“DUP1”) opcode.\nThe <code>0x80</code> (“DUP1”) opcode.\nThe <code>0x89</code> (“DUP10”) opcode.\nThe <code>0x89</code> (“DUP10”) opcode.\nThe <code>0x8A</code> (“DUP11”) opcode.\nThe <code>0x8A</code> (“DUP11”) opcode.\nThe <code>0x8B</code> (“DUP12”) opcode.\nThe <code>0x8B</code> (“DUP12”) opcode.\nThe <code>0x8C</code> (“DUP13”) opcode.\nThe <code>0x8C</code> (“DUP13”) opcode.\nThe <code>0x8D</code> (“DUP14”) opcode.\nThe <code>0x8D</code> (“DUP14”) opcode.\nThe <code>0x8E</code> (“DUP15”) opcode.\nThe <code>0x8E</code> (“DUP15”) opcode.\nThe <code>0x8F</code> (“DUP16”) opcode.\nThe <code>0x8F</code> (“DUP16”) opcode.\nThe <code>0x81</code> (“DUP2”) opcode.\nThe <code>0x81</code> (“DUP2”) opcode.\nThe <code>0x82</code> (“DUP3”) opcode.\nThe <code>0x82</code> (“DUP3”) opcode.\nThe <code>0x83</code> (“DUP4”) opcode.\nThe <code>0x83</code> (“DUP4”) opcode.\nThe <code>0x84</code> (“DUP5”) opcode.\nThe <code>0x84</code> (“DUP5”) opcode.\nThe <code>0x85</code> (“DUP6”) opcode.\nThe <code>0x85</code> (“DUP6”) opcode.\nThe <code>0x86</code> (“DUP7”) opcode.\nThe <code>0x86</code> (“DUP7”) opcode.\nThe <code>0x87</code> (“DUP8”) opcode.\nThe <code>0x87</code> (“DUP8”) opcode.\nThe <code>0x88</code> (“DUP9”) opcode.\nThe <code>0x88</code> (“DUP9”) opcode.\nThe <code>0xE6</code> (“DUPN”) opcode.\nThe <code>0xE6</code> (“DUPN”) opcode.\nThe <code>0xEC</code> (“EOFCREATE”) opcode.\nThe <code>0xEC</code> (“EOFCREATE”) opcode.\nThe <code>0x14</code> (“EQ”) opcode.\nThe <code>0x14</code> (“EQ”) opcode.\nThe <code>0xE8</code> (“EXCHANGE”) opcode.\nThe <code>0xE8</code> (“EXCHANGE”) opcode.\nThe <code>0x0A</code> (“EXP”) opcode.\nThe <code>0x0A</code> (“EXP”) opcode.\nThe <code>0xF8</code> (“EXTCALL”) opcode.\nThe <code>0xF8</code> (“EXTCALL”) opcode.\nThe <code>0x3C</code> (“EXTCODECOPY”) opcode.\nThe <code>0x3C</code> (“EXTCODECOPY”) opcode.\nThe <code>0x3F</code> (“EXTCODEHASH”) opcode.\nThe <code>0x3F</code> (“EXTCODEHASH”) opcode.\nThe <code>0x3B</code> (“EXTCODESIZE”) opcode.\nThe <code>0x3B</code> (“EXTCODESIZE”) opcode.\nThe <code>0xF9</code> (“EXTDELEGATECALL”) opcode.\nThe <code>0xF9</code> (“EXTDELEGATECALL”) opcode.\nThe <code>0xFB</code> (“EXTSTATICCALL”) opcode.\nThe <code>0xFB</code> (“EXTSTATICCALL”) opcode.\nThe <code>0x5A</code> (“GAS”) opcode.\nThe <code>0x5A</code> (“GAS”) opcode.\nThe <code>0x45</code> (“GASLIMIT”) opcode.\nThe <code>0x45</code> (“GASLIMIT”) opcode.\nThe <code>0x3A</code> (“GASPRICE”) opcode.\nThe <code>0x3A</code> (“GASPRICE”) opcode.\nThe <code>0x11</code> (“GT”) opcode.\nThe <code>0x11</code> (“GT”) opcode.\nThe <code>0xFE</code> (“INVALID”) opcode.\nThe <code>0xFE</code> (“INVALID”) opcode.\nThe <code>0x15</code> (“ISZERO”) opcode.\nThe <code>0x15</code> (“ISZERO”) opcode.\nThe <code>0x56</code> (“JUMP”) opcode.\nThe <code>0x56</code> (“JUMP”) opcode.\nThe <code>0x5B</code> (“JUMPDEST”) opcode.\nThe <code>0x5B</code> (“JUMPDEST”) opcode.\nThe <code>0xE5</code> (“JUMPF”) opcode.\nThe <code>0xE5</code> (“JUMPF”) opcode.\nThe <code>0x57</code> (“JUMPI”) opcode.\nThe <code>0x57</code> (“JUMPI”) opcode.\nThe <code>0x20</code> (“KECCAK256”) opcode.\nThe <code>0x20</code> (“KECCAK256”) opcode.\nThe <code>0xA0</code> (“LOG0”) opcode.\nThe <code>0xA0</code> (“LOG0”) opcode.\nThe <code>0xA1</code> (“LOG1”) opcode.\nThe <code>0xA1</code> (“LOG1”) opcode.\nThe <code>0xA2</code> (“LOG2”) opcode.\nThe <code>0xA2</code> (“LOG2”) opcode.\nThe <code>0xA3</code> (“LOG3”) opcode.\nThe <code>0xA3</code> (“LOG3”) opcode.\nThe <code>0xA4</code> (“LOG4”) opcode.\nThe <code>0xA4</code> (“LOG4”) opcode.\nThe <code>0x10</code> (“LT”) opcode.\nThe <code>0x10</code> (“LT”) opcode.\nThe <code>0x5E</code> (“MCOPY”) opcode.\nThe <code>0x5E</code> (“MCOPY”) opcode.\nThe <code>0x51</code> (“MLOAD”) opcode.\nThe <code>0x51</code> (“MLOAD”) opcode.\nThe <code>0x06</code> (“MOD”) opcode.\nThe <code>0x06</code> (“MOD”) opcode.\nThe <code>0x59</code> (“MSIZE”) opcode.\nThe <code>0x59</code> (“MSIZE”) opcode.\nThe <code>0x52</code> (“MSTORE”) opcode.\nThe <code>0x52</code> (“MSTORE”) opcode.\nThe <code>0x53</code> (“MSTORE8”) opcode.\nThe <code>0x53</code> (“MSTORE8”) opcode.\nThe <code>0x02</code> (“MUL”) opcode.\nThe <code>0x02</code> (“MUL”) opcode.\nThe <code>0x09</code> (“MULMOD”) opcode.\nThe <code>0x09</code> (“MULMOD”) opcode.\nAlias for the <code>JUMPDEST</code> opcode\nThe <code>0x19</code> (“NOT”) opcode.\nThe <code>0x19</code> (“NOT”) opcode.\nThe <code>0x43</code> (“NUMBER”) opcode.\nThe <code>0x43</code> (“NUMBER”) opcode.\nMaps each opcode to its info.\nThe <code>0x17</code> (“OR”) opcode.\nThe <code>0x17</code> (“OR”) opcode.\nThe <code>0x32</code> (“ORIGIN”) opcode.\nThe <code>0x32</code> (“ORIGIN”) opcode.\nAn EVM opcode\nInformation about opcode, such as name, and stack inputs …\nThe <code>0x58</code> (“PC”) opcode.\nThe <code>0x58</code> (“PC”) opcode.\nThe <code>0x50</code> (“POP”) opcode.\nThe <code>0x50</code> (“POP”) opcode.\nThe <code>0x5F</code> (“PUSH0”) opcode.\nThe <code>0x5F</code> (“PUSH0”) opcode.\nThe <code>0x60</code> (“PUSH1”) opcode.\nThe <code>0x60</code> (“PUSH1”) opcode.\nThe <code>0x69</code> (“PUSH10”) opcode.\nThe <code>0x69</code> (“PUSH10”) opcode.\nThe <code>0x6A</code> (“PUSH11”) opcode.\nThe <code>0x6A</code> (“PUSH11”) opcode.\nThe <code>0x6B</code> (“PUSH12”) opcode.\nThe <code>0x6B</code> (“PUSH12”) opcode.\nThe <code>0x6C</code> (“PUSH13”) opcode.\nThe <code>0x6C</code> (“PUSH13”) opcode.\nThe <code>0x6D</code> (“PUSH14”) opcode.\nThe <code>0x6D</code> (“PUSH14”) opcode.\nThe <code>0x6E</code> (“PUSH15”) opcode.\nThe <code>0x6E</code> (“PUSH15”) opcode.\nThe <code>0x6F</code> (“PUSH16”) opcode.\nThe <code>0x6F</code> (“PUSH16”) opcode.\nThe <code>0x70</code> (“PUSH17”) opcode.\nThe <code>0x70</code> (“PUSH17”) opcode.\nThe <code>0x71</code> (“PUSH18”) opcode.\nThe <code>0x71</code> (“PUSH18”) opcode.\nThe <code>0x72</code> (“PUSH19”) opcode.\nThe <code>0x72</code> (“PUSH19”) opcode.\nThe <code>0x61</code> (“PUSH2”) opcode.\nThe <code>0x61</code> (“PUSH2”) opcode.\nThe <code>0x73</code> (“PUSH20”) opcode.\nThe <code>0x73</code> (“PUSH20”) opcode.\nThe <code>0x74</code> (“PUSH21”) opcode.\nThe <code>0x74</code> (“PUSH21”) opcode.\nThe <code>0x75</code> (“PUSH22”) opcode.\nThe <code>0x75</code> (“PUSH22”) opcode.\nThe <code>0x76</code> (“PUSH23”) opcode.\nThe <code>0x76</code> (“PUSH23”) opcode.\nThe <code>0x77</code> (“PUSH24”) opcode.\nThe <code>0x77</code> (“PUSH24”) opcode.\nThe <code>0x78</code> (“PUSH25”) opcode.\nThe <code>0x78</code> (“PUSH25”) opcode.\nThe <code>0x79</code> (“PUSH26”) opcode.\nThe <code>0x79</code> (“PUSH26”) opcode.\nThe <code>0x7A</code> (“PUSH27”) opcode.\nThe <code>0x7A</code> (“PUSH27”) opcode.\nThe <code>0x7B</code> (“PUSH28”) opcode.\nThe <code>0x7B</code> (“PUSH28”) opcode.\nThe <code>0x7C</code> (“PUSH29”) opcode.\nThe <code>0x7C</code> (“PUSH29”) opcode.\nThe <code>0x62</code> (“PUSH3”) opcode.\nThe <code>0x62</code> (“PUSH3”) opcode.\nThe <code>0x7D</code> (“PUSH30”) opcode.\nThe <code>0x7D</code> (“PUSH30”) opcode.\nThe <code>0x7E</code> (“PUSH31”) opcode.\nThe <code>0x7E</code> (“PUSH31”) opcode.\nThe <code>0x7F</code> (“PUSH32”) opcode.\nThe <code>0x7F</code> (“PUSH32”) opcode.\nThe <code>0x63</code> (“PUSH4”) opcode.\nThe <code>0x63</code> (“PUSH4”) opcode.\nThe <code>0x64</code> (“PUSH5”) opcode.\nThe <code>0x64</code> (“PUSH5”) opcode.\nThe <code>0x65</code> (“PUSH6”) opcode.\nThe <code>0x65</code> (“PUSH6”) opcode.\nThe <code>0x66</code> (“PUSH7”) opcode.\nThe <code>0x66</code> (“PUSH7”) opcode.\nThe <code>0x67</code> (“PUSH8”) opcode.\nThe <code>0x67</code> (“PUSH8”) opcode.\nThe <code>0x68</code> (“PUSH9”) opcode.\nThe <code>0x68</code> (“PUSH9”) opcode.\nThe <code>0xE4</code> (“RETF”) opcode.\nThe <code>0xE4</code> (“RETF”) opcode.\nThe <code>0xF3</code> (“RETURN”) opcode.\nThe <code>0xF3</code> (“RETURN”) opcode.\nThe <code>0xEE</code> (“RETURNCONTRACT”) opcode.\nThe <code>0xEE</code> (“RETURNCONTRACT”) opcode.\nThe <code>0x3E</code> (“RETURNDATACOPY”) opcode.\nThe <code>0x3E</code> (“RETURNDATACOPY”) opcode.\nThe <code>0xF7</code> (“RETURNDATALOAD”) opcode.\nThe <code>0xF7</code> (“RETURNDATALOAD”) opcode.\nThe <code>0x3D</code> (“RETURNDATASIZE”) opcode.\nThe <code>0x3D</code> (“RETURNDATASIZE”) opcode.\nThe <code>0xFD</code> (“REVERT”) opcode.\nThe <code>0xFD</code> (“REVERT”) opcode.\nThe <code>0xE0</code> (“RJUMP”) opcode.\nThe <code>0xE0</code> (“RJUMP”) opcode.\nThe <code>0xE1</code> (“RJUMPI”) opcode.\nThe <code>0xE1</code> (“RJUMPI”) opcode.\nThe <code>0xE2</code> (“RJUMPV”) opcode.\nThe <code>0xE2</code> (“RJUMPV”) opcode.\nThe <code>0x1D</code> (“SAR”) opcode.\nThe <code>0x1D</code> (“SAR”) opcode.\nThe <code>0x05</code> (“SDIV”) opcode.\nThe <code>0x05</code> (“SDIV”) opcode.\nThe <code>0x47</code> (“SELFBALANCE”) opcode.\nThe <code>0x47</code> (“SELFBALANCE”) opcode.\nThe <code>0xFF</code> (“SELFDESTRUCT”) opcode.\nThe <code>0xFF</code> (“SELFDESTRUCT”) opcode.\nThe <code>0x13</code> (“SGT”) opcode.\nThe <code>0x13</code> (“SGT”) opcode.\nThe <code>0x1B</code> (“SHL”) opcode.\nThe <code>0x1B</code> (“SHL”) opcode.\nThe <code>0x1C</code> (“SHR”) opcode.\nThe <code>0x1C</code> (“SHR”) opcode.\nThe <code>0x0B</code> (“SIGNEXTEND”) opcode.\nThe <code>0x0B</code> (“SIGNEXTEND”) opcode.\nThe <code>0x54</code> (“SLOAD”) opcode.\nThe <code>0x54</code> (“SLOAD”) opcode.\nThe <code>0x12</code> (“SLT”) opcode.\nThe <code>0x12</code> (“SLT”) opcode.\nThe <code>0x07</code> (“SMOD”) opcode.\nThe <code>0x07</code> (“SMOD”) opcode.\nThe <code>0x55</code> (“SSTORE”) opcode.\nThe <code>0x55</code> (“SSTORE”) opcode.\nThe <code>0xFA</code> (“STATICCALL”) opcode.\nThe <code>0xFA</code> (“STATICCALL”) opcode.\nThe <code>0x00</code> (“STOP”) opcode.\nThe <code>0x00</code> (“STOP”) opcode.\nThe <code>0x03</code> (“SUB”) opcode.\nThe <code>0x03</code> (“SUB”) opcode.\nThe <code>0x90</code> (“SWAP1”) opcode.\nThe <code>0x90</code> (“SWAP1”) opcode.\nThe <code>0x99</code> (“SWAP10”) opcode.\nThe <code>0x99</code> (“SWAP10”) opcode.\nThe <code>0x9A</code> (“SWAP11”) opcode.\nThe <code>0x9A</code> (“SWAP11”) opcode.\nThe <code>0x9B</code> (“SWAP12”) opcode.\nThe <code>0x9B</code> (“SWAP12”) opcode.\nThe <code>0x9C</code> (“SWAP13”) opcode.\nThe <code>0x9C</code> (“SWAP13”) opcode.\nThe <code>0x9D</code> (“SWAP14”) opcode.\nThe <code>0x9D</code> (“SWAP14”) opcode.\nThe <code>0x9E</code> (“SWAP15”) opcode.\nThe <code>0x9E</code> (“SWAP15”) opcode.\nThe <code>0x9F</code> (“SWAP16”) opcode.\nThe <code>0x9F</code> (“SWAP16”) opcode.\nThe <code>0x91</code> (“SWAP2”) opcode.\nThe <code>0x91</code> (“SWAP2”) opcode.\nThe <code>0x92</code> (“SWAP3”) opcode.\nThe <code>0x92</code> (“SWAP3”) opcode.\nThe <code>0x93</code> (“SWAP4”) opcode.\nThe <code>0x93</code> (“SWAP4”) opcode.\nThe <code>0x94</code> (“SWAP5”) opcode.\nThe <code>0x94</code> (“SWAP5”) opcode.\nThe <code>0x95</code> (“SWAP6”) opcode.\nThe <code>0x95</code> (“SWAP6”) opcode.\nThe <code>0x96</code> (“SWAP7”) opcode.\nThe <code>0x96</code> (“SWAP7”) opcode.\nThe <code>0x97</code> (“SWAP8”) opcode.\nThe <code>0x97</code> (“SWAP8”) opcode.\nThe <code>0x98</code> (“SWAP9”) opcode.\nThe <code>0x98</code> (“SWAP9”) opcode.\nThe <code>0xE7</code> (“SWAPN”) opcode.\nThe <code>0xE7</code> (“SWAPN”) opcode.\nThe <code>0x42</code> (“TIMESTAMP”) opcode.\nThe <code>0x42</code> (“TIMESTAMP”) opcode.\nThe <code>0x5C</code> (“TLOAD”) opcode.\nThe <code>0x5C</code> (“TLOAD”) opcode.\nThe <code>0x5D</code> (“TSTORE”) opcode.\nThe <code>0x5D</code> (“TSTORE”) opcode.\nThe <code>0xED</code> (“TXCREATE”) opcode.\nThe <code>0xED</code> (“TXCREATE”) opcode.\nThe <code>0x18</code> (“XOR”) opcode.\nThe <code>0x18</code> (“XOR”) opcode.\nReturns the opcode as a string. This is the inverse of …\nReturns the opcode as a usize.\nFormats the opcode as a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the opcode as a u8.\nUsed for <code>OPCODE_INFO</code> to set the immediate bytes number in …\nReturns the size of the immediate value in bytes.\nReturns the opcode information.\nReturns the opcode information for the given opcode. Check …\nReturns the number of both input and output stack elements.\nReturns the number of input stack elements.\nReturns the number of input stack elements.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the difference between the number of input and …\nCalculates the difference between the number of input and …\nReturns whether this opcode is disabled in EOF bytecode.\nReturns true if the opcode is a legacy jump instruction.\nTakes a u8 and returns true if it is a jump instruction.\nReturns true if the opcode is a jump destination.\nTakes a u8 and returns true if it is a jump destination.\nReturns true if the opcode is a <code>PUSH</code> instruction.\nTakes a u8 and returns true if it is a push instruction.\nReturns whether this opcode terminates execution, e.g. <code>STOP</code>…\nReturns true if the opcode modifies memory.\nReturns the opcode name.\nReturns the opcode name.\nInstantiates a new opcode from a u8.\nCreates a new opcode info with the given name and default …\nInstantiates a new opcode from a u8 without checking if it …\nSets the EOF flag to false.\nReturns the number of output stack elements.\nReturns the number of output stack elements.\nUse for <code>OPCODE_INFO</code> to sets the number of stack inputs and …\nUse for <code>OPCODE_INFO</code> to set the terminating flag to true in …\nReads a big-endian <code>i16</code> from a <code>u8</code> pointer.\nReads a big-endian <code>u16</code> from a <code>u8</code> pointer.")