searchState.loadedDescShard("alloy_rpc_types_eth", 0, "alloy-rpc-types-eth\nRepresents an TrieAccount in the account trie.\nAccount information.\n-1 means all transactions\nA vector of values\nThe hash of the block if the filter only targets a single …\nBad block representation.\nBlock representation for RPC.\nError that can occur when converting other types to blocks\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nEmpty result.\nCallResponse for eth_callMany\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents errors that can occur when setting block …\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nIterator that yields logs from receipts that match a …\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nError indicating that the <code>from_block</code> is greater than the …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nThe hash\nA block hash and an optional bool that defines if it’s …\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nRPC representation of block header, wrapping a consensus …\nA hex encoded or decimal index that’s intended to be …\nTransaction index\nInfo when syncing\nA transaction failed sender recovery\nLatest block\nEthereum Log emitted by a transaction\nNew logs.\nNot syncing\nNumeric id\nThe number\nBlock by number from canonical chain\nA block number\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\naccount derived from a signature as well as information …\nA raw block failed to decode\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nThe detail of the sync stages.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nRepresents a transaction index where -1 means all …\nPropagation statistics for pending transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\nA single value\nUnion type for representing a single value or a vector of …\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nThe result of an <code>eth_getWork</code> request\nThe account proof.\nNumber of active peers\nSets the address to query with this filter.\nGetter for the address field. Shortcut for …\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nA filter set for matching contract addresses in log …\nContract that emitted this log.\nCreate the <code>BloomFilter</code> for the addresses.\nReturns the BloomFilter for the given address\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nAdds a block hash override for a specific block number\nAppends logs matching the filter from a block’s receipts.\nApply a function to the block, returning the modified …\nGet the array if present.\nReturns the block hash if it is BlockId::Hash\nReturns the block hash if this is a block hash filter.\nFallibly cast to a slice of hashes.\nGet the hashes if present.\nGet the logs if present.\nReturns the numeric block number if explicitly set\nReturns the range (<code>from_block</code>, <code>to_block</code>) if this is a …\nFallibly cast to a slice of transactions.\nGet the transactions if present.\nReturns the block number if it is <code>BlockId::Number</code> and not …\nGet the value if present.\nPins the block hash for the filter\nAccount balance\nThe account balance.\nThe account’s balance.\nOverrides the basefee of the block.\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nReturns the blob fee for <em>this</em> block according to the …\nAn array of block blob gas used ratios. These are …\nIndicates the progress of the sync stage.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nBlock Number\nNumber of the block the transaction that emitted this log …\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nReturns a list of Bloom (BloomFilter) corresponding to the …\nGet a reference to the BloomFilter.\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculate the transaction root for the full transactions.\nCalculate the transaction root for the full transactions …\nCapabilities\nAccount code\nReturns the code hash of the account.\nThe hash of the code of the account.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nCreates a collection of RPC logs from transaction receipt …\nNumber of connected peers\nCheck if the filter contains the given value\nConverts <code>self</code> into <code>Hashes</code>.\nConverts <code>self</code> into <code>Hashes</code> if the given <code>condition</code> is true.\nConverts the block’s transaction type to the given …\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nDeserializes a boolean value into …\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nCreates a new “earliest” tag instance.\nCreates a new empty block (without transactions).\nReturns the value if present, otherwise returns the error.\nEnsure block range validity\nThis module provides implementations for EIP-4337.\nCommonly used errors for the <code>eth_</code> namespace.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nExtends the topic with a value that can be converted into …\nExtends the topic with a value that can be converted into …\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nCreates an iterator that filters receipts for matching …\nReturns <code>true</code> if the log matches the given topics\nCreates a new “finalized” tag instance.\nBlock no this transaction was first seen.\nReturns the first transaction if the transactions are full.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>tx_request</code>s into a <code>Bundle</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the from block number\nConstructs block from a consensus block and …\nCreate a new <code>Header</code> from a sealed consensus header and …\nReturns a <code>RpcBlockHash</code> from a <code>B256</code>.\nCreate a new <code>Header</code> from a sealed consensus header.\nOverrides the gas limit of the block.\nGas used by the transaction\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>to_block</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>from_block</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns <code>true</code> if at least one topic is set\nCreate a new block hash instance.\nReturns the block’s hash as received from rpc.\nThe hash.\nThe hash.\nHash of the block\nCreate a new block hash instance that requires the block …\nReturns an iterator over references to the transaction …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nPublic node id\nReturns the index if this is the index variant\nMonotonically increasing identifier issued by consensus …\nInner consensus header.\nConsensus log object\nInsert a value into the filter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this block into a <code>BlockBody</code>\nConsumes the block and returns the ethereum …\nConsumes the type and returns the wrapped consensus header.\nConsumes the block and returns the <code>alloy_consensus::Block</code> …\nConsumes the type, strips away the rpc context from the …\nSame as <code>Self::into_consensus</code> but returns the block as …\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConverts <code>self</code> into <code>Hashes</code> if the given <code>condition</code> is true.\nConsumes the block and only returns the rpc header.\nConvert Self into raw vec of withdrawals.\nConsumes the type and returns the wrapped …\nConsumes the type and returns the <code>Sealed</code> header.\nConsumes the type and returns the sealed …\nReturns an iterator over the transactions (if any). This …\nConsumes the type and returns the transactions as a vector.\nConsumes the type and returns the transactions as a vector.\nReturns true if this is the all variant\nCheck if the enum is an array.\nReturns true if this is a block hash filter.\nReturns <code>true</code> if it’s “earliest”\nReturns true if this is BlockNumberOrTag::Earliest\nWhether the block has no transactions.\nReturns if an account is empty.\nAfter <code>SpuriousDragon</code> empty account is defined as account …\nReturns true if all fields are None, false if any field is …\nReturns whether the filter is empty\nCheck if the filter changes are empty.\nReturns true if the code hash is the Keccak256 hash of the …\nReturns <code>true</code> if it’s “finalized”\nReturns true if this is BlockNumberOrTag::Finalized\nReturns true if the enum variant is used for full …\nReturns true if this is <code>BlockTransactionsKind::Full</code>\nReturns true if this is BlockId::Hash\nCheck if the enum variant is used for hashes.\nReturns true if this is <code>BlockTransactionsKind::Hashes</code>\nCheck if the filter changes contain hashes.\nReturns true if this is the index variant\nReturns <code>true</code> if it’s “latest”\nReturns true if this is BlockNumberOrTag::Latest\nCheck if the filter changes contain logs.\nReturns <code>true</code> if a numeric block number is set\nReturns true if this is BlockNumberOrTag::Number\nReturns true if this is a range filter and has a from block\nReturns <code>true</code> if it’s “pending”\nReturns true if this is BlockNumberOrTag::Pending\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns true if this is a range filter.\nReturns <code>true</code> if it’s “safe”\nReturns true if this is BlockNumberOrTag::Safe\nCheck if the filter changes contain transactions.\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nCheck if the enum is a single value.\nReturns an iterator over the transaction hashes.\nGet an iterator over the Withdrawals.\nReturns an iterator over the underlying HashSet. Values …\nGet a mutable iterator over the Withdrawals.\nStorage key.\nCreates a new “latest” tag instance.\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nReturns the number of values in the filter\nLocal endpoint address\nDecode the log data into a typed log.\nDecode the log data with validation into a typed log.\nLog Index in Block\nCalculate receipt logs bloom.\nConverts the transaction type by applying a function to …\nApplies the given closure to the inner header.\nConverts the block’s header type by applying a function …\nConverts the block’s transaction type by applying a …\nReturns whether the given value matches the filter. If the …\nCheck if a <code>Log</code> matches the filter. This will check topics …\nReturns whether the given bloom matches the list of Blooms …\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the filter matches the given block. Checks …\nReturns <code>true</code> if the filter matches the given block hash.\nReturns <code>true</code> if the block matches the filter.\nCheck whether the provided bloom contains all topics and …\nReturns <code>true</code> if either of the following is true:\nCheck if a parsed <code>Log&lt;T&gt;</code> matches the filter. This will …\nReturns <code>true</code> if the filter matches the given topics.\nReturns <code>true</code> if the bloom matches the topics\nReturns matching logs from a block’s receipts grouped by …\nMax number of peers\nAccount meta JSON\nAccount name\nThe name of the sync stage.\nNode client ID\nNetwork information\nCreate a new <code>EIP1186StorageProof</code> instance.\nCreates a new <code>Block</code> with the given header and transactions.\nCreate a new <code>Header</code> from a consensus header.\nCreate a new Withdrawals instance.\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new <code>BlockTransactions::Hashes</code> variant from the …\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nAccount nonce\nThe account nonce.\nThe account’s nonce.\nCreates a new block number instance.\nReturns the block’s number.\nThe number\nThe number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nDetailed information on peers\nCreates a new “pending” tag instance.\nPIP protocol information.\nThe proof-of-work hash.\nproof for the pair\nPeers this transaction was propagated to with count.\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nOverrides the prevrandao of the block.\nRemote endpoint address\nRemove a value from the filter (if present)\nGeth Compatibility Field: whether this log was removed\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nCheck if a <code>crate::Log</code> matches the filter. This will check …\nCheck if a parsed rpc log <code>crate::Log&lt;T&gt;</code> matches the …\nCreates a new “safe” tag instance.\nReturns a sealed reference of the header: <code>Sealed&lt;&amp;Header&gt;</code>\nThe seed hash.\nSets the inner filter object\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\n‘eth_simulateV1’ Request / Response types: …\nCalculate a heuristic for the in-memory size of the …\nInteger the size of this block in bytes.\nThe details of the sync stages as an hashmap where the key …\nStarting block\nbindings for state overrides in eth_call\nThe hash of the storage of the account.\nThe storage proof.\nThe hash of the storage account data.\nThe target.\nOverrides the timestamp of the block.\nSets the to block number\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nGetter for the topic0 field.\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nCreate a <code>BloomFilter</code> for each topic filter.\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nCalculate the total size, including capacity, of the …\nRPC types for transactions\nTransaction Hash\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nCompute  hash as committed to in the MPT trie without …\nConverts the block’s header type to the given …\nConverts the block’s transaction to the given …\nConverts this block into a <code>BlockBody</code>.\nAttempts to unwrap the <code>Self::Full</code> variant.\nTries to convert inner transactions into a vector of full …\nConverts the transaction type by applying a fallible …\nApplies the given fallible closure to the inner header.\nConverts the block’s header type by applying a fallible …\nConverts the block’s transaction type by applying a …\nReturns an iterator over the transactions (if any). This …\nReturns an instance of BlockTransactions with the Uncle …\nConstructs an “uncle block” from the provided header.\nUncles’ hashes.\nAccount UUID (<code>None</code> for address book entries)\nIndex of validator associated with withdrawal.\nValue that the key holds\neth_call output (if no error)\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nSets the base fee override\nPins the block hash this filter should target.\nAdds multiple block hash overrides from an iterator\nSets the coinbase (fee recipient) override\nSets the difficulty override\nSets the block number this range filter should start at.\nSets the gas limit override\nSets the block number override\nSets the randomness (prevRandao) override\nSet the size of the block.\nSets the timestamp override\nSets the block number this range filter should end at.\nSet the total difficulty of the block.\nSets the transactions for the block.\nSets the uncles for the block.\nSets the withdrawals for the block.\nWithdrawals in the block.\nThe starting block number, which is greater than <code>to</code>.\nThe ending block number, which is less than <code>from</code>.\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents the expected state of an account for a …\nAlias for backwards compat\nUser Operation\nPacked User Operation\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nExpected storage root hash of the account.\nSend User Operation\nResponse to sending a user operation.\nExplicit storage slots and their expected values.\nOptions for conditional raw transaction submissions.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nReturns the slot values if the account storage is a slot …\nThe maximal block number at which the transaction can be …\nThe maximal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nComputes the aggregate cost of the preconditions; total …\nThe entry point address for the user operation.\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if any configured block parameter (…\nReturns true if the configured max block number is lower …\nReturns true if the configured max timestamp is lower or …\nCode used to deploy the account if not yet on-chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the account storage is a root hash.\nA map of account addresses to their expected storage …\nA map of account addresses to their expected storage …\nThe logs generated by the user operation.\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given …\nMaximum fee per gas\nThe maximum fee per gas.\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nThe reason for failure, if any.\nThe transaction receipt of the user operation.\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\nIndicates whether the user operation was successful.\nThe maximal timestamp at which the transaction can be …\nThe maximal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe hash of the user operation.\nThe hash of the user operation.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when historical data is not available. …\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nThe maximum number of blocks that can be simulated in a …\nRepresents a batch of calls to be simulated sequentially …\nCaptures the outcome of a transaction simulation. It …\nThe error response returned by the <code>eth_simulateV1</code> method.\nSimulation options for executing multiple blocks and …\nRepresents the result of simulating a block.\nReturns the block’s block number override if it exists.\nModifications to the default block characteristics.\nArray of block state calls to be executed at specific, …\nAdds a call to the block.\nA vector of transactions to be simulated.\nA vector of results for each call in the block.\nCode error -3200: Execution reverted -32015: VM execution …\nError in case the call failed\nAdds a block to the simulation payload.\nAdds multiple blocks to the simulation payload.\nAdds multiple calls to the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe amount of gas used by the transaction.\nThe simulated block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs generated during the execution of the transaction.\nMessage error\nThe raw bytes returned by the transaction.\nFlag to decide if full transactions should be returned …\nState modifications to apply before executing the …\nThe final status of the transaction, typically indicating …\nFlag to determine whether to trace ERC20/ERC721 token …\nFlag to enable or disable validation of the transaction …\nEnables block overrides\nEnables returning full transactions.\nEnables state overrides\nEnables tracing of token transfers.\nEnables validation of the transaction sequence.\nCustom account override used in call\nHelper type that bundles various overrides for EVM …\nA set of account overrides\nA builder type for <code>StateOverride</code>.\nAdds an account override for a specific address.\nHelper <code>append</code> function that appends an optional override.\nApply a function to the builder, returning the modified …\nFake balance to set for the account before executing the …\nCreates a new instance with the given block overrides.\nApplies overrides to the block before execution.\nGet the underlying <code>StateOverride</code>.\nFake EVM bytecode to inject into the account before …\nAdds multiple account overrides from an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the overrides contain block overrides.\nReturns <code>true</code> if the overrides contain state overrides.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves addresses precompile into the specified address. …\nCreate a new StateOverridesBuilder.\nCreates a new instance with the given overrides\nFake nonce to set for the account before executing the …\nSets the balance override in place.\nSets the bytecode override in place.\nSets the move precompile address in place.\nSets the nonce override in place.\nSets the state overrides in place.\nSets the state diffs in place.\nCreates a new instance with the given state overrides.\nFake key-value mapping to override all slots in the …\nApplies overrides to the state before execution.\nFake key-value mapping to override individual slots in the …\nConfigures an account override with a balance.\nConfigures the balance override\nConditionally sets the balance override and returns self.\nAdds block overrides to an existing instance.\nCreates a new <code>StateOverridesBuilder</code> with the given …\nConfigures an account override with bytecode.\nConfigures the bytecode override\nConditionally sets the bytecode override and returns self.\nConditionally sets the move precompile address and returns …\nConfigures an account override with a nonce.\nConfigures the nonce override\nConditionally sets the nonce override and returns self.\nConfigures an account override with state overrides.\nConfigures the state overrides\nAdds state overrides to an existing instance.\nConfigures an account override with state diffs.\nConfigures the state diffs\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nReceipt envelope, as defined in EIP-2718.\nAn unsigned EIP-7702 authorization.\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nReceipt envelope with no type flag.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nTransaction object used in RPC.\nAdditional fields in the context of a (maybe) pending …\nTransaction receipt\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nReturns the EIP-2930 <code>access_list</code> for the particular …\nList with accounts accessed during transaction.\nAdds an address to the access list and returns <code>true</code> if the …\nGet the <code>address</code> for the authorization.\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nReturn the mutable inner receipt with bloom. Currently …\nReturns a <code>Recovered&lt;&amp;T&gt;</code> with the transaction and the …\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nBase fee of the block.\nReturns the blob corresponding to the versioned hash, if …\nReturns the number of blobs of this transaction.\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for eip4844 transaction. For …\nThe blob data.\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nReturn a reference to the receipt’s bloom.\nReturns a reference to the bloom.\nCalculates <code>Log</code>’s bloom filter. This is slow operation and\nCalculates the address that will be created by the …\nGet <code>chain_id</code>.\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nThe blob commitments.\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nContract address created, or None if not a deployment.\nConverts the transaction type to the given alternative …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nDecodes the inner BlobTransactionSidecar fields from RLP …\nAttempts to decode the logs to the provided log type.\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nEncodes the inner BlobTransactionSidecar fields as RLP …\nEnsures the result is OK, returning <code>AccessListWithGasUsed</code> …\nOptional error message if the transaction failed.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nConverts a consensus <code>tx</code> with an additional context <code>tx_info</code> …\nCreates the envelope for a given type and receipt.\nReturns the first 4bytes of the calldata for a function …\nGet <code>gas_limit</code>.\nGet <code>gas_price</code>.\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nIndex of the transaction in the block\nReturns the <code>TransactionInfo</code> for this transaction.\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet the length of the inner receipt in the 2718 encoding.\nGet <code>data</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the structure, returning the receipt and the bloom …\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nConsumes the type and returns the wrapped receipt.\nConsumes the type and returns the wrapped transaction.\nConsumes the type and returns the logs.\nConverts a <code>ReceiptEnvelope</code> with a custom log type into a …\nConverts a <code>Receipt</code> with a custom log type into a <code>Receipt</code> …\nConverts a <code>ReceiptWithBloom</code> with a custom log type into a …\nConverts the transaction receipt’s <code>ReceiptEnvelope</code> with …\nConsumes the type and returns the underlying <code>Receipt</code>.\nConsumes the type and returns a <code>Recovered</code> transaction with …\nConverts Transaction into TransactionRequest.\nConvert to a signed authorization by adding a signature.\nConsumes the transaction and returns it as <code>Signed</code> with …\nConsumes the transaction and returns it a <code>Recovered</code> signed …\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nChecks if there is an error in the result.\nReturns whether this is a legacy receipt (type 0)\nReturns true if the transaction is a legacy or 2930 …\nReturn true if the transaction was successful.\nReturn true if the transaction was successful.\nReturns the transaction kind.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nGet the receipt logs.\nLog send from contracts.\nReturn the receipt’s bloom.\nThe bloom filter.\nApplies the given closure to the inner transaction type.\nMaps the inner receipt value of this receipt.\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt type by applying the given closure to …\nMatches versioned hashes and returns an iterator of …\nMax fee per blob gas for EIP-4844 transaction.\nFor dynamic fee transactions returns the maximum fee per …\nFor dynamic fee transactions returns the Priority fee the …\nConstructs a new BlobTransactionSidecar from a set of …\nCreate new ReceiptWithBloom\nGet <code>nonce</code>.\nGet the <code>nonce</code> for the authorization.\nThe nonce for the authorization.\nReturn the max priority fee per gas if the transaction is …\nThe blob proofs.\nThe receipt.\nAlloy basic Transaction Request type.\nDecodes the BlobTransactionSidecar from RLP bytes.\nRLP-decodes receipt’s field with a <code>Bloom</code>.\nEncodes the BlobTransactionSidecar as RLP bytes.\nRLP-encodes receipt fields with the given <code>Bloom</code> without an …\nReturns length of RLP-encoded receipt fields with the …\nCalculates the length of the BlobTransactionSidecar when …\nReturns RLP header for this receipt encoding with the …\nCalculate the length of the rlp payload of the network …\nCalculate the length of the rlp payload of the network …\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a size heuristic for the in-memory size of the …\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nReturns the status of the transaction.\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nReturns the total number of storage keys in this access …\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nTransaction Hash.\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nConverts the transaction to the given alternative that is …\nApplies the given fallible closure to the inner …\nReturn the <code>TxType</code> of the inner receipt.\nThe transaction type.\nGet <code>value</code>.\nReturns the versioned hash for the blob at the given …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nCalculates the bloom filter for the receipt and returns the\nSupports both ‘input’ and ‘data’ fields\nError thrown when a transaction request cannot be built …\nOnly supports ‘data’ field\nOnly supports ‘input’ field\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents how a <code>TransactionRequest</code> handles input/data …\nRepresents <em>all</em> transaction requests to/from RPC.\nSets the access list for the transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nAuthorization list for EIP-7702 transactions.\nBlob versioned hashes for EIP-4844 transactions.\nCreates a new instance with the given input data and sets …\nBuild an EIP-1559 transaction.\nBuild an EIP-2930 transaction.\nBuild an EIP-4844 transaction variant - either with or …\nBuild an EIP-4844 transaction with sidecar.\nBuild an EIP-4844 transaction without sidecar.\nBuild an EIP-7702 transaction.\nBuild a <code>TypedTransaction</code>.\nBuild a legacy transaction.\nBuilds a signed typed transaction envelope for the …\nBuild a <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nThe chain ID for the transaction.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a 7702 …\nCheck if all necessary keys are present to build a legacy …\nTransaction data\nError message.\nReturns the configured fee cap, if any.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of the transaction author.\nInitializes the <code>TransactionRequest</code> with the provided …\nInitializes the <code>TransactionRequest</code> with the provided …\nInitializes the <code>TransactionRequest</code> with the provided …\nThe gas limit for the transaction.\nSets the gas limit for the transaction.\nSets the gas price for the transaction.\nThe legacy gas price.\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns true if <em>any</em> of the EIP-1559 fee fields are set:\nReturns true if <em>any</em> of the EIP-4844 fields are set:\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the optional input data.\nSets the maximum fee per blob gas for the transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nCreates a new instance with the given input data and sets …\nCreates a new instance with the given input data.\nReturns the minimal transaction type this request can be …\nCheck if all necessary keys are present to build a …\nCreates a new instance with the given input data.\nSets the nonce for the transaction.\nThe nonce of the transaction.\nEnsures that if either <code>data</code> or <code>input</code> is set, the <code>data</code> …\nEnsures that if either <code>data</code> or <code>input</code> is set, the <code>data</code> …\nEnsures that if either <code>input</code> or <code>data</code> is set, the <code>input</code> …\nEnsures that if either <code>input</code> or <code>data</code> is set, the <code>input</code> …\nConsumes the type and returns it with <code>Self::normalize_data</code> …\nConsumes the type and returns it with <code>Self::normalize_data</code> …\nConsumes the type and returns it with <code>Self::normalize_input</code>…\nConsumes the type and returns it with <code>Self::normalize_input</code>…\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nCheck this builder’s preferred type, based on the fields …\nIf only one field is set, this also sets the other field …\nIf only one field is set, this also sets the other field …\nBlob sidecar for EIP-4844 transactions.\nSets the recipient address for the transaction.\nThe destination address of the transaction.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nTransaction request that failed to build into a …\nReturns the optional input data.\nSets the value (amount) for the transaction.\nThe value transferred in the transaction, in wei.\nConsumes the type and returns it with <code>Self::set_both</code> …\nConsumes the type and returns it with …")