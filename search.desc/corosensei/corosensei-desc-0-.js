searchState.loadedDescShard("corosensei", 0, "Overview\nAlias for a <code>ScopedCoroutine</code> with a <code>&#39;static</code> lifetime.\nValue returned from resuming a coroutine.\nValue returned by a coroutine returning from its main …\nA coroutine wraps a closure and allows suspending its …\nValue returned by a coroutine suspending itself with a …\n<code>Yielder</code> is an interface provided to a coroutine which …\nReturns the <code>Return</code> value as an <code>Option&lt;Return&gt;</code>.\nReturns the <code>Yield</code> value as an <code>Option&lt;Yield&gt;</code>.\nReturns whether this coroutine has finished executing.\nForcibly marks the coroutine as having completed, even if …\nUnwinds the coroutine stack, dropping any live objects …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the stack from a coroutine that has finished …\nCreates a new coroutine which will execute <code>func</code> on a new …\nExecutes some code on the stack of the parent context (the …\nExecutes some code on the given stack.\nResumes execution of this coroutine.\nDetails about stacks used by coroutines.\nReturns whether this coroutine has been resumed at least …\nSuspends the execution of a currently running coroutine.\nUtilities for working with <code>ScopedCoroutine::trap_handler</code>.\nReturns a <code>CoroutineTrapHandler</code> which can be used to handle …\nCreates a new coroutine which will execute <code>func</code> on the …\nDefault stack implementation which uses <code>mmap</code>.\nMinimum size of a stack, excluding guard pages.\nRequired stack alignment at function call boundaries.\nA trait for objects that hold ownership of a stack.\nType to represent a stack address.\nReturns the base address of the stack. This is the highest …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the maximum limit address of the stack. This is …\nCreates a new stack which has at least the given capacity.\nOptional support for registering stacks with Valgrind.\nHelper type which registers a stack with Valgrind and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegisters the given region of memory as a stack so that …\nHelper type to force a trapping coroutine to return from a …\nRegisters which must be updated upon return from a trap …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets up the stack and register state so that once the trap …\nChecks whether the stack pointer at the point where a trap …")