searchState.loadedDescShard("futures_intrusive", 0, "Synchronization primitives and utilities based on …\nBuffer types\nAsynchronous channels.\nAsynchronous synchronization primitives based on intrusive …\nAsynchronous timers.\nAn array-backed Ring Buffer\nA Ring Buffer which stores all items on the heap.\nA Ring Buffer which stores all items on the heap but grows …\nThe type of stored items inside the Ring Buffer\nThe length of the array\nA marker trait which may only be implemented for native …\nA Ring Buffer of items\nReturns true if there is enough space in the buffer to …\nThe capacity of the buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if no item is stored inside the buffer.\nReturns true if no item is stored inside the buffer.\nThe amount of stored items in the buffer\nCreates a new instance of the Ring Buffer\nReturns the oldest item inside the buffer. Panics if there …\nStores the item at the end of the buffer. Panics if there …\nCreates a new instance of the Ring Buffer with the given …\nThe channel was already closed prior to the operation.\nA <code>GenericChannel</code> implementation backed by <code>parking_lot</code>.\nA Future that is returned by the <code>receive</code> function on a …\nThe error which is returned when sending a value into a …\nA Future that is returned by the <code>send</code> function on a …\nA stream that receives from a <code>GenericChannel</code>.\nConveys additional information regarding the status of a …\nThe channel had been closed and no more value is available …\nThe channel was closed.\nThe channel is empty. No value is available for reception.\nThe channel is full.\nA channel which can be used to exchange values of type <code>T</code> …\nA channel which can be used to exchange a single value …\nA channel which can be used to exchange a single value …\nA channel which can be used to synchronize the state …\nA <code>GenericChannel</code> implementation which is not thread-safe.\nA <code>GenericOneshotBroadcastChannel</code> which is not thread-safe.\nA <code>GenericOneshotChannel</code> which is not thread-safe.\nA <code>GenericStateBroadcastChannel</code> which is not thread-safe.\nAn unbuffered <code>GenericChannel</code> implementation which is not …\nThe channel has just been closed by the operation.\nA <code>GenericOneshotBroadcastChannel</code> implementation backed by …\nA <code>GenericOneshotChannel</code> implementation backed by …\nA <code>GenericStateBroadcastChannel</code> implementation backed by …\nAn ID, which allows to differentiate states received from …\nA Future that is returned by the <code>receive</code> function on a …\nThe error which is returned when trying to receive from a …\nThe error which is returned when trying to send on a …\nAn unbuffered <code>GenericChannel</code> implementation backed by …\nTries to cancel the ongoing send operation\nCloses the channel.\nCloses the channel.\nCloses the channel.\nCloses the channel. All pending and future send attempts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the error into its inner value.\nReturns whether the value is the <code>AlreadyClosed</code> variant.\nReturns whether the error is the <code>Closed</code> variant.\nReturns whether the error is the <code>Closed</code> variant.\nReturns whether the error is the <code>Empty</code> variant.\nReturns whether the error is the <code>WouldBlock</code> variant.\nReturns whether the value is the <code>NewlyClosed</code> variant.\nCreates a new OneshotChannel in the given state\nCreates a new OneshotBroadcastChannel in the given state\nCreates a new State Broadcast Channel in the given state\nCreates a new Channel, utilizing the default capacity that …\nReturns the initial StateId, which is guaranteed to return …\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nWrites a single value to the channel.\nWrites a single value to the channel.\nWrites a single value to the channel.\nReturns a future that gets fulfilled when the value has …\nChannel implementations where Sender and Receiver sides …\nReturns a stream that will receive values from this …\nAttempt to retrieve a value whose <code>StateId</code> is greater than …\nAttempt to receive a value of the channel without waiting.\nAttempt to send the value without waiting.\nCreates a new Channel, which has storage for a <code>capacity</code> …\nA Future that is returned by the <code>receive</code> function on a …\nA Future that is returned by the <code>send</code> function on a …\nThe receiving side of a channel which can be used to …\nThe sending side of a channel which can be used to …\nThe receiving side of a channel which can be used to …\nThe sending side of a channel which can be used to …\nThe receiving side of a channel which can be used to …\nThe sending side of a channel which can be used to …\nThe receiving side of a channel which can be used to …\nThe sending side of a channel which can be used to …\nA <code>GenericOneshotBroadcastReceiver</code> implementation backed by …\nA <code>GenericOneshotBroadcastSender</code> implementation backed by …\nA <code>GenericOneshotReceiver</code> implementation backed by …\nA <code>GenericOneshotSender</code> implementation backed by <code>parking_lot</code>…\nA <code>GenericReceiver</code> implementation backed by <code>parking_lot</code>.\nA <code>GenericSender</code> implementation backed by <code>parking_lot</code>.\nA stream that receives from channel using a <code>GenericReceiver</code>…\nA Future that is returned by the <code>receive</code> function on a …\nA <code>GenericStateReceiver</code> implementation backed by <code>parking_lot</code>…\nA <code>GenericStateSender</code> implementation backed by <code>parking_lot</code>.\nA <code>GenericReceiver</code> implementation backed by <code>parking_lot</code>.\nA <code>GenericSender</code> implementation backed by <code>parking_lot</code>.\nTries to cancel the ongoing send operation\nCreates a new channel with the given buffering capacity\nCloses the channel. All pending future send attempts will …\nCloses the channel. All pending future send attempts will …\nCloses the channel. All pending and future send attempts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Channel which can be used to exchange values …\nCreates a new oneshot broadcast channel which can be used …\nCreates a new oneshot channel which can be used to …\nCreates a new state broadcast channel which can be used to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a stream that will receive values from this …\nCreates a new oneshot broadcast channel.\nCreates a new oneshot channel.\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nReturns a future that gets fulfilled when a value is …\nWrites a single value to the channel.\nWrites a single value to the channel.\nWrites a single value to the channel.\nReturns a future that gets fulfilled when the value has …\nCreates a new state broadcast channel.\nAttempt to retrieve a value whose <code>StateId</code> is greater than …\nAttempt to receive form the channel without waiting.\nAttempt to send the value without waiting.\nCreates a new unbuffered channel.\nA synchronization primitive which can be either in the set …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nA futures-aware semaphore.\nA future which resolves when the target semaphore has been …\nAn RAII guard returned by the <code>acquire</code> and <code>try_acquire</code> …\nA futures-aware shared semaphore.\nA future which resolves when the target semaphore has been …\nAn RAII guard returned by the <code>acquire</code> and <code>try_acquire</code> …\nA Future that is resolved once the corresponding …\nA <code>GenericManualResetEvent</code> which is not thread-safe.\nA <code>GenericMutex</code> which is not thread-safe.\nA <code>GenericMutexGuard</code> for <code>LocalMutex</code>.\nA <code>GenericMutexLockFuture</code> for <code>LocalMutex</code>.\nA <code>GenericSemaphore</code> which is not thread-safe.\nA <code>GenericSemaphoreAcquireFuture</code> for <code>LocalSemaphore</code>.\nA <code>GenericSemaphoreReleaser</code> for <code>LocalSemaphore</code>.\nA <code>GenericWaitForEventFuture</code> for <code>LocalManualResetEvent</code>.\nA <code>GenericManualResetEvent</code> implementation backed by …\nA <code>GenericMutex</code> backed by <code>parking_lot</code>.\nA <code>GenericMutexGuard</code> for <code>Mutex</code>.\nA <code>GenericMutexLockFuture</code> for <code>Mutex</code>.\nA <code>GenericSemaphore</code> backed by <code>parking_lot</code>.\nA <code>GenericSemaphoreAcquireFuture</code> for <code>Semaphore</code>.\nA <code>GenericSemaphoreReleaser</code> for <code>Semaphore</code>.\nA <code>GenericSharedSemaphore</code> backed by <code>parking_lot</code>.\nA <code>GenericSharedSemaphoreAcquireFuture</code> for <code>SharedSemaphore</code>.\nA <code>GenericSharedSemaphoreReleaser</code> for <code>SharedSemaphore</code>.\nA <code>GenericWaitForEventFuture</code> for <code>ManualResetEvent</code>.\nAcquire a certain amount of permits on a semaphore …\nAcquire a certain amount of permits on a semaphore …\nPrevents the SemaphoreReleaser from automatically …\nPrevents the SharedSemaphoreReleaser from automatically …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mutex is locked.\nReturns whether the event is set\nAcquire the mutex asynchronously.\nCreates a new ManualResetEvent in the given state\nCreates a new futures-aware mutex.\nCreates a new futures-aware semaphore.\nCreates a new futures-aware shared semaphore.\nReturns the amount of permits that are available on the …\nReturns the amount of permits that are available on the …\nReleases the given amount of permits back to the semaphore.\nReleases the given amount of permits back to the semaphore.\nResets the event.\nSets the event.\nTries to acquire a certain amount of permits on a …\nTries to acquire a certain amount of permits on a …\nTries to acquire the mutex\nReturns a future that gets fulfilled when the event is set.\nA monotonic source of time.\nAn asynchronously awaitable timer.\nAn asynchronously awaitable timer which is bound to a …\nA Future that is resolved once the requested time has …\nA <code>GenericTimerService</code> implementation which is not …\nA <code>Clock</code> which can be set to arbitrary timestamps for …\nA Clock that makes use of the Standard libraries …\nAn asynchronously awaitable thread-safe timer.\nA Future that is resolved once the requested time has …\nA <code>GenericTimerService</code> implementation backed by <code>parking_lot</code>.\nChecks whether any of the attached <code>TimerFuture</code>s has …\nReturns a future that gets fulfilled when the utilized …\nReturns a future that gets fulfilled when the utilized …\nReturns a future that gets fulfilled when the utilized …\nReturns a future that gets fulfilled when the utilized …\nReturns a future that gets fulfilled after the given …\nReturns a future that gets fulfilled after the given …\nReturns a future that gets fulfilled after the given …\nReturns a future that gets fulfilled after the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the <code>MockClock</code>, which is …\nCreates a new <code>StdClock</code>\nCreates a new Timer in the given state.\nReturns a timestamp when the next timer expires.\nReturns a timestamp in milliseconds which represents the …\nSets the current timestamp inside to <code>MockClock</code> to the …")