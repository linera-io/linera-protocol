searchState.loadedDescShard("scylla_cql", 0, "Defines CQL protocol-level types and traits for …\nDerive macro for the <code>DeserializeRow</code> trait that generates …\nDerive macro for the <code>DeserializeValue</code> trait that generates …\nDerive macro for the <code>SerializeRow</code> trait which serializes …\nDerive macro for the <code>SerializeValue</code> trait which serializes …\nFramework for deserialization of data returned by database …\nAbstractions of the CQL wire protocol:\nTypes and traits related to serialization of values to the …\nVarious utilities.\nDefines CQL values of various types and their …\nAn error indicating that a failure happened during …\nAn error indicating that a failure happened during type …\nRetrieve an error reason by downcasting to specific type.\nRetrieve an error reason by downcasting to specific type.\nDefines <code>FrameSlice</code>, a borrowed reference to a part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>TypeCheckError</code>.\nConstructs a new <code>DeserializationError</code>.\nProvides types for dealing with query result …\nProvides types for dealing with row deserialization.\nProvides types for dealing with CQL value deserialization.\nA borrowed reference to a part of the frame.\nReturns a reference to the Bytes object which encompasses …\nReturns the subslice.\nReturns a mutable reference to the subslice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the slice has length of 0.\nCreates a new FrameSlice from a reference of a Bytes …\nCreates an empty FrameSlice.\nReads and consumes a <code>[bytes]</code> item from the beginning of …\nReads and consumes a fixed number of bytes from the …\nReturns a new Bytes object which is a subslice of the …\nIterates over the whole result, returning raw rows.\nA <em>lending</em> iterator over serialized rows.\nA typed version of RawRowIterator which deserializes the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata associated with the response (paging …\nCreates a new iterator over raw rows from a serialized …\nCreates a new TypedRowIterator from given RawRowIterator.\nCreates a new <code>RawRowLendingIterator</code>, consuming given …\nReturns a <code>ColumnIterator</code> that represents the next row.\nReturns the remaining number of rows that this iterator is …\nReturns the remaining number of rows that this iterator is …\nReturns the remaining number of rows that this iterator is …\nReturns the bounds on the remaining length of the iterator.\nReturns information about the columns of rows that are …\nReturns information about the columns of rows that are …\nFailed to deserialize a row from the DB response, …\nDescribes why deserializing a result row failed.\nFailed to type check incoming result column types again …\nDescribes why type checking incoming result column types …\nOne of the columns failed to deserialize.\nIterates over columns of a single row.\nA different column name was expected at given position.\nColumn type check failed between Rust type and DB type at …\nThe CQL row contains a column for which a corresponding …\nA type that can be deserialized from a row that was …\nDuplicated column in DB metadata.\nRepresents a raw, unparsed column value.\nOne of the raw columns failed to deserialize, most probably\nSeveral values required by the Rust type are not provided …\nThe Rust type expects <code>rust_cols</code> columns, but the statement …\nReturns the remaining number of columns that this iterator …\nThe CQL types of the values that the Rust type was being …\nDeserializes a row from given column iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex of the column in the row.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nCreates a new iterator over a single row.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the row.\nSlice of the frame that contains the serialized value of …\nSpecification of the column, including its name and type.\nChecks that the schema of the result matches what this …\nIndex of the column that failed to deserialize.\nIndex of the raw column that failed to deserialize.\nName of the column that failed to deserialize.\nName of the raw column that failed to deserialize.\nThe error that caused the column deserialization to fail.\nThe error that caused the raw column deserialization to …\nIndex of the excess column.\nIndex of the column having mismatched name.\nIndex of the column.\nColumn index of the second occurrence of the column with …\nName of the column that is present in CQL row but not in …\nName of the column, as provided by the DB.\nThe name of the duplicated column.\nNames of the columns in the Rust type for which the DB …\nThe number of columns that the statement operates on.\nName of the column for which the DB requested a value.\nInner type check error due to the type mismatch.\nIndex of the field determining the expected name.\nThe number of values that the Rust type provides.\nName of the column, as expected by the Rust type.\nFailed to deserialize one of date’s fields.\nFailed to deserialize decimal’s scale.\nThe length of read value in bytes is not suitable for IP …\nDeserialization of one of the built-in types failed.\nDescribes why deserialization of some of the built-in …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types …\nThe length of read value in bytes is different than …\nIterates over a sequence of <code>[bytes]</code> items from a frame …\nA type that can be deserialized from a column value inside …\nDuplicated field in serialized data.\nOne of the elements of the set/list failed to deserialize.\nOne of the elements of the vector failed to deserialize.\nIncompatible element types.\nIncompatible element types.\nValues that may be empty or not.\nUDT contains an excess field, which does not correspond to …\nExpected valid ASCII string.\nExpected non-null value, got null.\nOne of the tuple fields failed to deserialize.\nOne of the fields failed to deserialize.\nA different field name was expected at given position.\nThe CQL type and the Rust type of a tuple field failed to …\nType check failed between UDT and Rust type field.\nIterates over a sequence of <code>[bytes]</code> items from a frame …\nInvalid UTF-8 string.\nOne of the keys in the map failed to deserialize.\nIncompatible key types.\nFailed to deserialize set or list’s length.\nFailed to deserialize map’s length.\nAn iterator over either a CQL set or list.\nDescribes why deserialization of a map type failed.\nA type check failure specific to a CQL map.\nA deserialization failure specific to a CQL map.\nAn iterator over a CQL map.\nDescribes why type checking of a map type failed.\nA value that may be empty or not.\nExpected one from a list of particular types.\nA type check detected type not deserializable to a vector.\nThe CQL type is not a map.\nThe CQL type is not a set.\nThe CQL type is neither a set not a list.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nThe CQL type is not a vector.\nFailed to deserialize raw bytes of cql value.\nDescribes why deserialization of a set or list type failed.\nA type check failure specific to a CQL set or list.\nA deserialization failure specific to a CQL set or list.\nDescribes why type checking of a set or list type failed.\nFewer fields present in the UDT than required by the Rust …\nDescribes why deserialization of a tuple failed.\nA type check failure specific to a CQL tuple.\nA deserialization failure specific to a CQL tuple.\nDescribes why type checking of a tuple failed.\nDescribes why deserialization of a user defined type …\nA type check failure specific to a CQL UDT.\nA deserialization failure specific to a CQL UDT.\nAn iterator over fields of a User Defined Type.\nDescribes why type checking of a user defined type failed.\nDeserialization of this CQL type is not supported by the …\nOne of the values in the map failed to deserialize.\nThe read value is out of range supported by the Rust type.\nIncompatible value types.\nThe CQL UDT type does not have some fields that is …\nDescribes why deserialization of a vector type failed.\nA type check failure specific to a CQL vector.\nA deserialization failure specific to a CQL vector.\nA deserialization iterator over a CQL vector.\nDescribes why type checking a vector type failed.\nThe tuple has the wrong element count.\nThe CQL type that the Rust type was being deserialized …\nThe CQL type that the Rust type was being deserialized …\nDeserialize a column value from given serialized …\nReturns remaining (i.e., not yet deserialized) fields of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being deserialized.\nName of the Rust type being deserialized.\nChecks that the column type matches what this type expects.\nThe list of types that the Rust type can deserialize from.\nThe error that caused the tuple field deserialization to …\nIndex of the tuple field that failed to deserialize.\nThe number of elements that the CQL tuple type has.\nThe type check error that occurred.\nThe index of the field whose type check failed.\nThe number of elements that the Rust tuple has.\nThe error that caused the UDT field deserialization to …\nName of the field which failed to deserialize.\nThe name of the CQL UDT field.\nThe name of the CQL UDT field.\nInner type check error that occurred.\nThe name of the duplicated field.\nThe name of the field whose type check failed.\nNames of fields that the Rust struct requires but are …\nIndex of the field in the Rust struct.\nThe name of the Rust field.\nAll of the Authenticators supported by ScyllaDB\nThe wire protocol compression algorithm.\nUnknown compression.\nParts of the frame header which are not determined by the …\nLZ4 compression algorithm.\nRepresents the already parsed response body extensions, …\nA serialized CQL request frame, nearly ready to be sent …\nSnappy compression algorithm.\nAn error type for parsing an enum value from a primitive.\nReturns the string representation of the compression …\nThe remaining body data after parsing the extensions.\nCompresses the request body using the specified …\nCustom payload (see the CQL protocol description of the …\nDeompresses the response body using the specified …\nFrame flags\nFlags for the frame, indicating features like compression, …\nLow-level errors that can occur during CQL frame parsing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the serialized frame data, including the header …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new serialized request frame from a request …\nDecompresses the response body if compression is enabled, …\nImplementation and negotiation of extensions to the CQL …\nReads a response frame from the provided reader (usually, …\nCQL requests sent by the client.\nCQL responses sent by the server.\nThis module defines the <code>EventType</code> enum, which represents …\nSets the stream number for this request frame. Intended to …\nThe stream ID for this frame, which allows matching …\nThe trace ID if tracing was requested in the request.\nCQL binary protocol in-wire types.\nThe version of the frame protocol. Currently, only version …\nWarnings returned by the server, if any.\nThe frame contains a compressed body.\nThe frame contains a custom payload.\nThe frame contains tracing ID.\nThe frame contains warnings.\nFailed to serialize AUTH_RESPONSE request.\nFailed to serialize BATCH request.\nFailed to read frame body from the socket.\nAn error type returned when deserialization of […\nFailed to parse column count.\nFailed to parse column count.\nFailed to parse column count.\nAn error type returned when deserialization of table …\nFailed to parse column spec.\nFailed to parse column spec.\nThe type of error that appeared during deserialization of …\nConnection was closed before whole frame was read.\nAn error type returned when deserialization of …\nAn error type returned when deserialization of …\nAn error type returned when deserialization of …\nAn error type returned when deserialization of ERROR …\nAn error type returned when deserialization of <code>EVENT</code> …\nAn error that occurred during CQL request serialization.\nAn error type returned when deserialization of CQL server …\nAn error type returned when deserialization of RESULT …\nAn error type returned when deserialization of SUPPORTED …\nAn error type returned when deserialization of CQL type …\nFailed to deserialize frame’s custom payload.\nAn error type returned when deserialization of Custom CQL …\nFailed to serialize EXECUTE request.\nFailed to parse metadata flags.\nFailed to parse metadata flags.\nFailed to parse metadata flags.\nAn error returned by <code>parse_response_body_extensions</code>.\nReceived a frame marked as coming from a client.\nReceived a frame marked as coming from a server, while …\nAn error that occurred during frame header deserialization.\nFailed to parse global table spec.\nFailed to parse global table spec.\nFailed to read the frame header from the socket.\nA low level deserialization error.\nFailed to decompress frame body (lz4).\nFrame is compressed, but no compression was negotiated for …\nFailed to parse paging state response.\nFailed to parse paging state response.\nFailed to parse partition key count.\nFailed to parse partition key index.\nFailed to serialize PREPARE request.\nAn error type returned when deserialization of statement’…\nAn error type returned when deserialization of <code>RESULT::</code>…\nFailed to serialize QUERY request.\nAn error that occurred during initial deserialization of …\nFailed to serialize REGISTER request.\nAn error returned when lazy deserialization of result …\nAn error type returned when deserialization of result …\nFailed to deserialize result metadata.\nReceived malformed rows count from the server.\nAn error type returned when deserialization of …\nRequest body compression failed.\nFailed to decompress frame body (snap).\nFailed to serialize STARTUP request.\nAn error type returned when deserialization of table …\nFailed to deserialize frame trace id.\nReceived unknown response opcode.\nReceived a frame with unsupported version.\nFailed to deserialize warnings attached to frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the kind of CQL response that this error …\nThe key of the single entry of the LWT optimization …\nWhich protocol extensions are supported by the server.\nThe extension used to add metadata for LWT optimization. …\nAdds the protocol features as STARTUP options.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe bit mask used for the LWT optimization, if negotiated. …\nParses the supported protocol features from the <code>supported</code> …\nChecks if the given flags of a PREPARED response contain …\nThe error code to use for rate limit errors, if negotiated.\nWhether the server supports tablets routing v1.\nAnswers a server authentication challenge. Authentication …\nSee CqlRequestKind::AuthResponse.\nBATCH request, used to execute a batch of (prepared, …\nAllows executing a list of queries (prepared or not) as a …\nSee CqlRequestKind::Batch.\nPossible requests sent by the client.\nRequests that can be deserialized from a CQL frame.\nEXECUTE request, used to execute a single prepared …\nExecutes a prepared query. The response from the server …\nSee CqlRequestKind::Execute.\nOpcode of the request, used to identify the request type …\nAsks the server to return which STARTUP options are …\nSee CqlRequestKind::Options.\nPrepares a query for later execution (through EXECUTE). …\nSee CqlRequestKind::Prepare.\nQUERY request, used to execute a single unprepared …\nPerforms a CQL query, i.e., executes an unprepared …\nSee CqlRequestKind::Query.\nRegister this connection to receive some types of events. …\nSee CqlRequestKind::Register.\nA CQL request that can be sent to the server.\nOpcode of a request, used to identify the request type in …\nRequests that can be serialized into a CQL frame.\nInitialize the connection. The server will respond by …\nSee CqlRequestKind::Startup.\nCQL protocol-level representation of a <code>AUTH_RESPONSE</code> …\nCQL protocol-level representation of a <code>BATCH</code> request.\nDeserializes the request from the provided buffer.\nDeserializes the request from the provided buffer.\nCQL protocol-level representation of a <code>EXECUTE</code> request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves consistency from request frame, if present.\nRetrieves serial consistency from request frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL protocol-level representation of a <code>OPTIONS</code> request.\nCQL protocol-level representation of a <code>PREPARE</code> request.\nCQL protocol-level representation of a <code>QUERY</code> request.\nCQL protocol-level representation of a <code>REGISTER</code> request.\nSerializes the request into the provided buffer.\nCQL protocol-level representation of a <code>STARTUP</code> request.\nSerializes the request into a heap-allocated <code>Bytes</code> object.\nRepresents AUTH_RESPONSE CQL request.\nAn error type returned when serialization of AUTH_RESPONSE …\nMaximum response’s body length exceeded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw response bytes.\nNumber of announced batch statements differs from actual …\nCQL protocol-level representation of a <code>BATCH</code> request, used …\nAn error type returned when serialization of BATCH request …\nA single statement in a batch, which can either be a …\nAn error type returned when serialization of one of the …\nThe type of a batch.\nEncountered a malformed batch type.\nUse the <code>COUNTER</code> option for batched counter updates. Unlike …\nBy default, all operations in the batch are performed as …\nPrepared CQL statement.\nUnprepared CQL statement.\nMaximum value of statement id exceeded.\nFailed to serialize a statement in the batch.\nFailed to serialize the CQL statement string.\nMaximum number of batch statements exceeded.\nToo many bound values provided.\nBy default, ScyllaDB uses a batch log to ensure all …\nNumber of batch statements differs from number of provided …\nFailed to serialize statement’s bound values.\nThe type of the batch.\nThe consistency level for the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe serial consistency level for the batch, if any.\nThe statements in the batch.\nThe client-side-assigned timestamp for the batch, if any.\nThe bound values for the batch statements.\nPrepared CQL statement’s ID.\nCQL statement string.\nCQL protocol-level representation of an <code>EXECUTE</code> request, …\nAn error type returned when serialization of EXECUTE …\nFailed to serialize query parameters.\nFailed to serialize prepared statement id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the prepared statement to execute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVarious parameters controlling the execution of the …\nThe CQL protocol-level representation of an <code>OPTIONS</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCQL protocol-level representation of an <code>PREPARE</code> request, …\nAn error type returned when serialization of PREPARE …\nFailed to serialize the CQL statement string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL statement string to prepare.\nFailed to serialize paging state.\nIndicates that there are more pages to fetch, and provides …\nIndicates that there are no more pages to fetch, and the …\nThe state of a paged query, i.e. where to resume fetching …\nA response containing the paging state of a paged query, …\nCQL protocol-level representation of an <code>QUERY</code> request, …\nVarious parameters controlling the execution of the …\nFailed to serialize query parameters.\nAn error type returned when serialization of query …\nAn error type returned when serialization of QUERY request …\nFailed to serialize the CQL statement string.\nReturns the inner representation of PagingState. One can …\nConsistency level for the query.\nCQL statement string to execute.\nDeserializes the parameters from the provided buffer.\nDetermines if the query has finished or it should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the response into ControlFlow, signalling whether …\nCreates PagingState from its inner representation. One can …\nMaximum number of rows to return for the query, if …\nPaging state for the query, used to resume fetching …\nVarious parameters controlling the execution of the …\nSerial consistency level for the query, if specified.\nSerializes the parameters into the provided buffer.\nWhether to skip metadata for the values in the result set. …\nA start state - the state of a not-yet-started paged query.\nClient-side-assigned timestamp for the query, if specified.\nValues bound to the statements.\nThe paging state to use for resuming the query from the …\nFailed to serialize event types list.\nThe CQL protocol-level representation of an <code>REGISTER</code> …\nAn error type returned when serialization of REGISTER …\nA list of event types to register for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFailed to serialize startup options.\nThe CQL protocol-level representation of an <code>STARTUP</code> …\nAn error type returned when serialization of STARTUP …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe protocol options that were suggested by the server and …\nA server authentication challenge (see AUTH_RESPONSE for …\nSee CqlResponseKind::AuthChallenge.\nAUTH_CHALLENGE response, indicating that the server …\nSee <code>Response::AuthChallenge</code>.\nIndicates the success of the authentication phase.\nSee CqlResponseKind::AuthSuccess.\nAUTH_SUCCESS response, indicating that the authentication …\nSee <code>Response::AuthSuccess</code>.\nIndicates that the server requires authentication, and …\nSee CqlResponseKind::Authenticate.\nAUTHENTICATE response, indicating that the server requires …\nSee <code>Response::Authenticate</code>.\nPossible CQL responses received from the server\nIndicates an error processing a request.\nSee CqlResponseKind::Error.\nERROR response, returned by the server when an error …\nAn event pushed by the server. A client will only receive …\nSee CqlResponseKind::Event.\nEVENT response, containing an event that occurred on the …\nSee <code>Response::Event</code>.\nA CQL response that has been received from the server, …\nIndicates that the server is ready to process queries. …\nSee CqlResponseKind::Ready.\nREADY response, indicating that the server is ready to …\nSee <code>Response::Ready</code>.\nA CQL response that has been received from the server.\nOpcode of a response, used to identify the response type …\nThe result to a query (QUERY, PREPARE, EXECUTE or BATCH …\nSee CqlResponseKind::Result.\nRESULT response, containing the result of a statement …\nSee <code>Response::Result</code>.\nIndicates which startup options are supported by the …\nSee CqlResponseKind::Supported.\nSUPPORTED response, containing the features supported by …\nSee <code>Response::Supported</code>.\nCQL protocol-level representation of an <code>AUTHENTICATE</code> …\nImplementation of a parser for custom types in the CQL …\nDeserialize a response from the given bytes.\nCQL protocol-level representation of an <code>ERROR</code> response.\nCQL protocol-level representation of an <code>EVENT</code> response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this response into a <code>NonErrorResponse</code>, returning …\nCQL protocol-level representation of a <code>RESULT</code> response.\nCQL protocol-level representation of a <code>SUPPORTED</code> response.\nReturns the kind of this response.\nReturns the kind of this non-error response.\nRepresents AUTH_CHALLENGE CQL response.\nRepresents AUTH_SUCCESS CQL response.\nRepresents AUTHENTICATE CQL response.\nThe challenge sent by the server, whose semantics depend …\nThe name of the authenticator requested by the server to …\nDeserializes an <code>AUTHENTICATE</code> message from the provided …\nDeserializes an <code>AUTH_SUCCESS</code> message from the provided …\nDeserializes an <code>AUTH_CHALLENGE</code> message from the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional success message provided by the server.\nAttempted to create a keyspace or a table that was already …\nAuthentication failed - bad credentials\nLogged batch write. If this type is received, it means the …\nTimeout occurred during the write to the batch log when a …\nTimeout occurred during Compare And Set write/update\nTimeout occurred when a cdc_total_space_in_mb is exceeded …\nThe query is invalid because of some configuration issue\nCounter write (batched or not)\nAn error sent from the database in response to a query as …\nRepresents a CQL protocol-level error that is sent by the …\nUser defined function failed during execution\nThe query is syntactically correct but invalid\nThe coordinator node is still bootstrapping\nType of the operation rejected by rate limiting\nOther error code not specified in the specification\nOther type not specified in the specification\nThe request cannot be processed because the coordinator …\nInvalid protocol message received from the driver\nRate limit was exceeded for a partition affected by the …\nA non-timeout error during a read request\nNot enough nodes responded to the read request in time to …\nInternal server error. This indicates a server-side bug\nNon-batched non-counter write\nThe submitted query has a syntax error\nError during truncate operation\nThe logged user doesn’t have the right to perform the …\nNot enough nodes are alive to satisfy required consistency …\nUnlogged batch. No batch log write has been attempted.\nTried to execute a prepared statement that is not …\nWrite involves VIEW update and failure to acquire local …\nA non-timeout error during a write request\nNot enough nodes responded to the write request in time to …\nType of write operation requested\nReturns the string representation of the write type as …\nDecides whether the error can be ignored. If true, the …\nReturns the error code for this error, as defined in the …\nDeserializes the error response from the provided buffer.\nError code and other context of the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe reason for the error, typically a human-readable …\nFound number of active nodes\nTypes of arguments passed to the function\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nReplica that was asked for data has responded\nReplica that was asked for data has responded\nName of the failed function\nCreated keyspace name or name of the keyspace in which …\nKeyspace of the failed function\nNumber of nodes that experience a failure while executing …\nNumber of nodes that experience a failure while executing …\nType of the operation rejected by rate limiting.\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the write request\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the read request\nWhether the operation was rate limited on the coordinator …\nNumber of nodes required to be alive to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nStatement id of the requested prepared query\nName of the table created, in case of keyspace creation it…\nType of write operation requested\nType of write operation requested\nAggregate was altered.\nThe affected schema item was created.\nA node went down.\nThe affected schema item was dropped.\nEvent that the server notified the client about.\nFunction was altered.\nA placeholder for an invalid schema change type.\nKeyspace was altered.\nA new node was added to the cluster.\nA node was removed from the cluster.\nSchema changed.\nEvent that notifies about changes in the cluster topology.\nType of change that was made to the schema.\nStatus of a node changed.\nEvent that notifies about changes in the nodes’ status.\nTable was altered.\nTopology changed.\nEvent that notifies about changes in the cluster topology.\nType was altered.\nA node went up.\nThe affected schema item was updated.\nDeserialize an event from the provided buffer.\nDeserialize a topology change event from the provided …\nDeserialize a status change event from the provided buffer.\nDeserialize a schema change event from the provided buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the aggregate that was altered.\nList of argument types of the function that was altered.\nList of argument types of the aggregate that was altered.\nType of change that was made to the keyspace.\nType of change that was made to the table.\nType of change that was made to the type.\nType of change that was made to the function.\nType of change that was made to the aggregate.\nName of the function that was altered.\nName of the keyspace that was altered.\nName of the keyspace that contains the table.\nName of the keyspace that contains the type.\nName of the keyspace that contains the function.\nName of the keyspace that contains the aggregate.\nName of the table that was altered.\nName of the type that was altered.\nASCII-only string.\n64-bit signed integer.\nBinary data of any length.\nBoolean value.\nCollection types: Map, Set, and List. Those are composite …\nCollection variants of ColumnType. A collection is a …\nSpecification of a column of a table.\nA type of:\nCounter value, represented as a 64-bit integer.\nDays since -5877641-06-23 i.e. 2^31 days before unix epoch\nVariable-precision decimal.\nRESULT:Rows response, in partially serialized form.\n64-bit IEEE-754 floating point number.\nA duration with nanosecond precision.\n32-bit IEEE-754 floating point number.\nIPv4 or IPv6 address.\n32-bit signed integer.\nA list of CQL values of the same types.\nA map of CQL values, whose all keys have the same type and …\nTypes that are “simple” (non-recursive).\nA ColumnType variants that are “simple” …\nRepresents the relationship between partition key columns …\nRepresents a CQL <code>RESULT::Prepared</code> response, which is sent …\nA result indicating that a statement was prepared as an …\nMetadata of a prepared statement about its bound values.\nRESULT:Rows response, in partially serialized form.\nRepresents the result of a CQL <code>RESULT</code> response.\nMetadata of a result set.\nVersatile container for ResultMetadata. Allows 2 types of …\nA result with metadata and rows.\nRepresents a CQL <code>RESULT::SchemaChange</code> response, which …\nA result indicating that a schema change occurred as an …\nResultMetadata that is self-borrowed from the RESULT:Rows …\nA container that can be considered an <code>Arc&lt;ResultMetadata&gt;</code> …\nA set of CQL values of the same types.\nRepresents a CQL <code>RESULT::SetKeyspace</code> response.\nA result indicating that a keyspace was set as an effect …\nResultMetadata that is shared and cached in …\n16-bit signed integer.\nSpecification of a table in a keyspace.\nUTF-8 encoded string.\nNanoseconds since midnight.\nMilliseconds since unix epoch.\nVersion 1 UUID, generally used as a “conflict-free” …\n8-bit signed integer.\nA composite type with a defined size and elements of …\nDefinition of a user-defined type (UDT). UDT is composed …\nA C-struct-like type defined by the user.\nUniversally unique identifier (UUID) of any version.\nArbitrary-precision integer.\nA composite list-like type that has a defined size and all …\nA result with no associated data.\nCreates a new borrowed TableSpec with the given keyspace …\nCreates a new borrowed ColumnSpec with the given name, …\nRetrieves the number of columns in the result set.\nNumber of bound values in the prepared statement.\nRetrieves the specifications of the columns in the result …\nSpecifications of the bound values.\nDeserializes a CQL <code>RESULT</code> response from the provided …\nDeserializes ResultMetadata and deserializes rows count. …\nEvent that describes the schema change.\nFields of the user-defined type - (name, type) pairs.\nCurrently just the <code>GLOBAL_TABLES_SPEC</code> flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the prepared statement.\nIndex of the bind marker.\nReturns reference to the stored ResultMetadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>DeserializedMetadataAndRawRows</code> and returns …\nConverts the TableSpec to an owned version, where all …\nConverts a ColumnType to an owned version, where all …\nKeyspace the type belongs to.\nThe name of the keyspace that was set as an effect of the …\nRetrieves the keyspace name.\nReturns a reference to the contained ResultMetadata.\nReturns the metadata associated with this response (table …\nReturns the serialized size of the raw metadata + raw rows.\nCreates a new mock empty ResultMetadata with 0 columns. …\nCreates an empty ResultMetadataHolder.\nCreates an empty RawMetadataAndRawRows.\nCreates an empty SelfBorrowedMetadataContainer.\nCreates an empty DeserializedMetadataAndRawRows.\nRetrieves the name of the column.\nName of the user-defined type.\nCreates a new owned TableSpec with the given keyspace and …\nCreates a new owned ColumnSpec with the given name, type, …\npk_indexes are sorted by <code>index</code> and can be reordered in …\nMetadata about the bound values which need to be provided …\nMetadata about the result set which will be returned by …\nReturns the serialized size of the raw rows.\nReturns the number of rows that the RESULT:Rows contain.\nCreates a typed iterator over the rows that lazily …\nSequence number in partition key.\nRetrieves the table name.\nRetrieves the table specification associated with this …\nConverts the TableSpec to an owned version, where all …\nRetrieves the type of the column.\nDefinition of the user-defined type.\nLength of the vector.\nIf a collection is not frozen, elements in the collection …\nAnalogous to ColumnType::Collection::frozen. If a UDT is …\nType of the collection’s elements.\nType of the vector’s elements.\nThe CQL protocol-level representation of an <code>SUPPORTED</code> …\nDeserializes a <code>SUPPORTED</code> response from the provided byte …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA map of option names to their supported values.\nRepresents the type of a CQL event.\nRepresents a change in the schema, such as table creation …\nRepresents a change in the status of a node, such as up or …\nRepresents a change in the cluster topology, such as node …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<em>All</em> replicas in the cluster must respond. May cause …\n<strong>Write-only</strong>. Closest replica, as determined by the Snitch, …\nA setting that defines a successful write or read by the …\n<strong>Write-only</strong>. A simple majority in each datacenter must …\nSame as ONE, but confined to the local datacenter.\nSame as QUORUM, but confined to the same datacenter as the …\n<strong>Read-only</strong>. Same as SERIAL, but confined to a local …\nGuarantees linearizable semantics in a local datacenter.\nError returned when a serial consistency what expected, …\nThe closest replica as determined by the Snitch must …\nA simple majority of all replicas across all datacenters …\n<strong>Read-only</strong>. Returns results with the most recent data. …\nGuarantees linearizable semantics across the whole cluster.\nConsistency for Lightweight Transactions (LWTs).\nThe closest three replicas as determined by the Snitch …\nThe closest two replicas as determined by the Snitch must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the consistency is a serial consistency.\nAn error indicating that a failure happened during …\nContains the <code>BatchValues</code> and <code>BatchValuesIterator</code> trait and …\nRetrieve an error reason by downcasting to specific type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SerializationError</code>.\nContains the <code>RawBatchValues</code> and <code>RawBatchValuesIterator</code> …\nContains the <code>SerializeRow</code> trait and its implementations.\nContains the <code>SerializeValue</code> trait and its implementations.\nContains types and traits used for safe serialization of …\nRepresents a list of sets of values for a batch statement.\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nA <code>BatchValuesIterator</code> over a tuple.\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new `BatchValuesFromIter`` object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nRepresents a list of sets of values for a batch statement.\nTakes <code>BatchValues</code> and an iterator over contexts, and turns …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nTakes <code>BatchValuesIterator</code> and an iterator over contexts, …\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new <code>RawBatchValuesAdapter</code> object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nFailed to serialize values for a statement, represented by …\nDescribes why serializing values for a statement failed.\nFailed to type check values for a statement, represented …\nDescribes why type checking values for a statement failed.\nA different column name was expected at given position.\nOne of the columns failed to serialize.\nA const empty instance, useful for taking references\nThe Rust type provides a value for some column, but that …\nContains information needed to serialize a row.\nRepresents a set of values that can be sent along a CQL …\nA buffer containing already serialized values.\nAn iterator over raw values in some <code>SerializedValues</code>.\nToo many values to add, max 65,535 values can be sent in a …\nA value required by the statement is not provided by the …\nThe Rust type provides <code>rust_cols</code> columns, but the …\nSerializes value and appends it to the list\nReturns the total serialized size of the values written so …\nReturns column/bind marker specifications for given query.\nReturns the number of values written so far.\nConstructs an empty <code>RowSerializationContext</code>, as if for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SerializedValues</code> via given closure.\nCreates the serialization context from prepared statement …\nConstructs <code>SerializedValues</code> from given <code>SerializeRow</code> object.\nCreates the serialization context directly from column …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this row contains any values or not.\nReturns <code>true</code> if the row contains no elements.\nReturns an iterator over the values serialized into the …\nDetailed information about the failure.\nDetailed information about the failure.\nConstructs a new, empty <code>SerializedValues</code>.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the values.\nSerializes the row according to the information in the …\nThe error that caused the column serialization to fail.\nName of the column that failed to serialize.\nThe number of columns that the statement operates on.\nName of the column for which the DB requested a value.\nName of the column that is missing in the statement.\nName of the column for which the Rust type doesn’t …\nThe number of values that the Rust type provides.\nName of the column, as expected by the Rust type.\nSerialization of one of the built-in types failed.\nDescribes why serialization of some of the built-in types …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types has …\nOne of the elements of the set/list failed to serialize.\nOne of the elements of the vector failed to serialize.\nOne of the tuple elements failed to serialize.\nA different field name was expected at given position.\nOne of the fields failed to serialize.\nThe number of elements in the serialized collection does …\nOne of the keys in the map failed to serialize.\nA type check failure specific to a CQL map.\nA serialization failure specific to a CQL map.\nDescribes why serialization of a map type failed.\nDescribes why type checking of a map type failed.\nExpected one from a list of particular types.\nThe name of the UDT being serialized to does not match.\nThe Rust data contains a field that is not present in the …\nExpected a type that can be empty.\nThe CQL type is not a map.\nThe CQL type is neither a set, nor a list, nor a vector.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nA type that can be serialized and sent along with a CQL …\nA type check failure specific to a CQL set or list.\nA serialization failure specific to a CQL set or list.\nDescribes why serialization of a set or list type failed.\nDescribes why type checking of a set or list type failed.\nThe size of the Rust value is too large to fit in the CQL …\nThe many contains too many items, exceeding the protocol …\nThe set/list contains too many items, exceeding the …\nA type check failure specific to a CQL tuple.\nA serialization failure specific to a CQL tuple.\nDescribes why serialize of a tuple failed.\nDescribes why type checking of a tuple failed.\nA type check failure specific to a CQL UDT.\nA serialization failure specific to a CQL UDT.\nDescribes why serialization of a user defined type failed.\nDescribes why type checking of a user defined type failed.\nThe Rust data does not have a field that is required in …\nThe Rust value is out of range supported by the CQL type.\nOne of the values in the map failed to serialize.\nA serialization failure specific to a CQL set or list.\nDescribes why serialization of a vector type failed.\nThe tuple has the wrong element count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe CQL type that the Rust type was being serialized to.\nThe CQL type that the Rust type was being serialized to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being serialized.\nName of the Rust type being serialized.\nSerializes the value to given CQL type.\nThe list of types that the Rust type can serialize as.\nThe error that caused the tuple field serialization to …\nIndex of the tuple element that failed to serialize.\nThe number of elements that the CQL tuple type has.\nThe number of elements that the Rust tuple has.\nThe error that caused the UDT field serialization to fail.\nName of the field which failed to serialize.\nThe name of the CQL UDT field.\nName of field that the CQL UDT requires but is missing in …\nName of the Rust struct field that is missing in the UDT.\nKeyspace in which the UDT was defined.\nThe name of the Rust field.\nName of the UDT.\nThere was an attempt to produce a CQL value over the …\nAllows appending bytes to a non-null, non-unset cell.\nRepresents a handle to a CQL value that needs to be …\nAn interface that facilitates writing values for a CQL …\nAn object that indicates a type-level proof that something …\nAppends raw bytes to this cell.\nAppends the values from an existing <code>SerializedValues</code> …\nFinishes serializing the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this writter into a <code>CellValueBuilder</code> which can be …\nAppends a new value to the sequence and returns an object …\nAppends a sub-value to the end of the current contents of …\nAppends a sub-value to the end of the current contents of …\nCreates a new row writer based on an existing Vec.\nCreates a new cell writer based on an existing Vec.\nThe newly created row writer will append data to the end …\nSets this value to be null, consuming this object.\nSets this value to represent an unset value, consuming …\nSets this value to a non-zero, non-unset value with given …\nReturns the number of values that were written so far.\nSimple general-purpose recursive-descent parser. Used for …\nContains the error value\nExpected a specific string, but it was not found.\nContains the success value\nOther error, described by a string.\nAn error that can occur during parsing.\nCause of the parsing error. Should be lightweight so that …\nResult of a parsing operation.\nA utility class for building simple recursive-descent …\nIf the input string contains given string at the beginning,\nGiven the original string, returns the 1-based position of …\nGiven the original string, returns the 1-based position of …\nReturns an error with given cause, associated with given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the error cause.\nReturns the number of remaining bytes to parse.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the input string was parsed completely.\nCreates a new parser from given input string.\nParses a sequence of digits as an integer. Consumes …\nApplies given parsing function until it returns false and …\nReturns new parser state with whitespace skipped from the …\nSkips characters from the beginning while they satisfy …\nASCII-only string.\n64-bit signed integer.\nBinary data of any length.\nBoolean value.\nRepresents an counter value\nCounter value, represented as a 64-bit integer.\nNative CQL date representation that allows for a bigger …\nNative CQL <code>decimal</code> representation.\nBorrowed version of native CQL <code>decimal</code> representation.\nRepresents a CQL Duration value\nNative CQL time representation.\nNative CQL timestamp representation that allows full …\nRepresents timeuuid (uuid V1) value\nRepresents all possible CQL values that can be returned by …\nNative CQL <code>varint</code> representation.\nA borrowed version of native CQL <code>varint</code> representation.\nDays since -5877641-06-23 i.e. 2^31 days before unix epoch …\nVariable-precision decimal.\n64-bit IEEE-754 floating point number.\nA duration with nanosecond precision.\nAn empty value, which is distinct from null and is some DB …\n32-bit IEEE-754 floating point number.\nIPv4 or IPv6 address.\n32-bit signed integer.\nA list of CQL values of the same types.\nA map of CQL values, whose all keys have the same type and …\nEnum providing a way to represent a value that might be …\nA row in a CQL result set, containing a vector of columns. …\nThe value is set, so the server’s state will be changed …\nA set of CQL values of the same types.\n16-bit signed integer.\nUTF-8 encoded string.\nNanoseconds since midnight.\nMilliseconds since unix epoch.\nVersion 1 UUID, generally used as a “conflict-free” …\n8-bit signed integer.\nA tuple of CQL values of independent types each, where …\nRepresents an unset value\nThe value is unset, so the server’s state about this …\nA user-defined type (UDT) value. UDT is composed of …\nUniversally unique identifier (UUID) of any version.\nError type indicating that the value is too large to fit …\nArbitrary-precision integer.\nA vector of CQL values of the same type. The length of the …\nCasts the value to ASCII string if it is of that type.\nCasts the value to 64-bit signed integer if it is of that …\nCasts the value to a byte sequence if it is of <code>blob</code> type.\nCasts the value to bool if it is of that type.\nReturns byte representation of the <code>CqlTimeuuid</code>. See …\nCasts the value to CQL Counter if it is of that type.\nCasts the value to CQL Date if it is of that type.\nCasts the value to CQL Duration if it is of that type.\nCasts the value to CQL Time if it is of that type.\nCasts the value to CQL Timestamp if it is of that type.\nCasts the value to double-precision float if it is of that …\nReturns a representation of the <code>CqlTimeuuid</code> as a list of …\nCasts the value to single-precision float if it is of that …\nCasts the value to an IP address if it is of <code>inet</code> type.\nCasts the value to 32-bit signed integer if it is of that …\nCasts the value to a vec of CQL values if it is of <code>list</code> …\nCasts the value to a vec of pairs of CQL values if it is …\nCasts the value to a vec of CQL values if it is of <code>set</code> …\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nCasts the value to 16-bit signed integer if it is of that …\nCasts the value to UTF-8 encoded string if it is of <code>text</code> …\nCasts the value to CQL Timeuuid if it is of that type.\nCasts the value to 8-bit signed integer if it is of that …\nReturns a <code>u128</code> representation of the <code>CqlTimeuuid</code>. See …\nReturns a representation of the <code>CqlTimeuuid</code> as a pair of …\nCasts the value to a user-defined type (UDT) if it is of …\nCasts the value to UUID if it is of that type.\nA vector of columns in the row.\nNumber of days.\nDeserializes any CQL value from a byte slice according to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CqlTimeuuid</code> from a big-endian byte …\nCreates a new <code>CqlTimeuuid</code> from a little-endian byte …\nCreates a new <code>CqlTimeuuid</code> from a big-endian byte …\nCreates a new <code>CqlTimeuuid</code> from a little-endian byte …\nConverts an <code>Option&lt;V&gt;</code> into a <code>MaybeUnset&lt;V&gt;</code>.\nCreates a <code>CqlDecimal</code> from an array of bytes representing …\nCreates a <code>CqlDecimal</code> from a slice of bytes representing …\nCreates a <code>CqlDecimalBorrowed</code> from a slice of bytes …\nCreates a <code>CqlVarint</code> from an array of bytes in two’s …\nCreates a <code>CqlVarint</code> from a slice of bytes in two’s …\nCreates a <code>CqlVarintBorrowed</code> from a slice of bytes in two’…\nCreates a new <code>CqlTimeuuid</code> from a big-endian byte …\nCreates a new <code>CqlTimeuuid</code> from a little-endian byte …\nCreates a new <code>CqlTimeuuid</code> from a big-endian <code>u128</code> value. …\nCreates a new <code>CqlTimeuuid</code> from a little-endian <code>u128</code> value. …\nCreates a new <code>CqlTimeuuid</code> from a pair of <code>u64</code> values. See …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the value to a byte sequence if it is of <code>blob</code> …\nConverts the value to CQL Decimal if it is of that type.\nConverts the value to CQL Varint if it is of that type.\nConverts the value to a vec of pairs of CQL values if it …\nConverts <code>CqlDecimal</code> to an array of bytes in two’s …\nConverts <code>CqlVarint</code> to an array of bytes in two’s …\nConverts the value to string if it is of <code>ascii</code> or <code>text</code> …\nConverts the value to a vec of pairs if it is a …\nConverts the value to a vector of CQL values if it is of …\nNumber of months.\nNumber of nanoseconds.\nCreates a new nil <code>CqlTimeuuid</code>. See <code>Uuid::nil</code> for details.\nFields of the user-defined type - (name, value) pairs.\nKeyspace the type belongs to.\nName of the user-defined type.")