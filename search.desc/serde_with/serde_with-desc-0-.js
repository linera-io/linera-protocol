searchState.loadedDescShard("serde_with", 0, "crates.io badge Build Status codecov CII Best Practices\nAdapter to convert from <code>serde_as</code> to the serde traits.\nDeserialize a boolean from a number\nBorrow <code>Cow</code> data during deserialization when possible.\nOptimized handling of owned and borrowed byte …\nDeserialize from bytes or string\nDeserialize value and return <code>Default</code> on error\nDeserialize <code>Default</code> from <code>null</code> values\nA <strong>data structure</strong> that can be deserialized from any data …\nDeserialize value by using its <code>FromStr</code> implementation\nDe/Serialize using <code>Display</code> and <code>FromStr</code> implementation\nEquivalent to <code>DurationSeconds</code> with micro-seconds as base …\nEquivalent to <code>DurationSecondsWithFrac</code> with micro-seconds …\nEquivalent to <code>DurationSeconds</code> with milli-seconds as base …\nEquivalent to <code>DurationSecondsWithFrac</code> with milli-seconds …\nEquivalent to <code>DurationSeconds</code> with nano-seconds as base …\nEquivalent to <code>DurationSecondsWithFrac</code> with nano-seconds as …\nDe/Serialize Durations as number of seconds.\nDe/Serialize Durations as number of seconds.\nRepresent a list of enum values as a map.\nSerialize value by converting to/from a proxy type with …\nSerialize a reference value by converting to/from a proxy …\nUse the first format if <code>De/Serializer::is_human_readable</code>, …\nConvert <code>Vec</code> elements into key-value map entries\nThis serializes a list of tuples into a map\nEnsure that the first key is taken, if duplicate keys exist\nEnsure no duplicate keys exist in a map.\nDeserialize a map, skipping keys and values which fail to …\nDe/Serialize a <code>Option&lt;String&gt;</code> type while transforming the …\nDeserialize one or many elements\nTry multiple deserialization options until one succeeds.\nAdapter to convert from <code>serde_as</code> to the serde traits.\nDe/Serialize a Map into a list of tuples\nA <strong>data structure</strong> that can be serialized into any data …\nSerialize value by using it’s <code>Display</code> implementation\nSerialize value by using its <code>Display</code> implementation with …\nEnsure that the last value is taken, if duplicate values …\nEnsure no duplicate values exist in a set.\nDe/Serialize a delimited collection using <code>Display</code> and …\nEquivalent to <code>TimestampSeconds</code> with micro-seconds as base …\nEquivalent to <code>TimestampSecondsWithFrac</code> with micro-seconds …\nEquivalent to <code>TimestampSeconds</code> with milli-seconds as base …\nEquivalent to <code>TimestampSecondsWithFrac</code> with milli-seconds …\nEquivalent to <code>TimestampSeconds</code> with nano-seconds as base …\nEquivalent to <code>TimestampSecondsWithFrac</code> with nano-seconds …\nDe/Serialize timestamps as seconds since the UNIX epoch\nDe/Serialize timestamps as seconds since the UNIX epoch\nSerialize value by converting to/from a proxy type with …\nSerialize a reference value by converting to/from a proxy …\nDeserialize a sequence into <code>Vec&lt;T&gt;</code>, skipping elements …\nApply attributes to all fields with matching types\nModule for <code>DeserializeAs</code> implementations\nDeserialize type <code>T</code> using <code>DeserializeAs</code>\nDeserialize this value from the given Serde deserializer.\nSpecify the format and how lenient the deserialization is\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDe/Serialization for Rust’s builtin and std types\nModule for <code>SerializeAs</code> implementations\nConvenience macro to use the <code>serde_as</code> system.\nCreate new conversion adapters from functions\nSerialize type <code>T</code> using <code>SerializeAs</code>\nSerialize this value into the given Serde serializer.\nAdd <code>skip_serializing_if</code> annotations to [<code>Option</code>] fields.\nA <strong>data structure</strong> that can be deserialized from any data …\nHelper type to implement <code>DeserializeAs</code> for container-like …\nDeserialize this value from the given Serde deserializer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the inner value of type <code>T</code>.\nPredefined separator using a single semicolon\nPredefined separator using a single comma\nPredefined separator using a DOS/Windows line ending.\nUse a flexible deserialization behavior, see <code>Strictness</code>.\nSpecify how to serialize/deserialize a type\nUse lowercase characters\nEmit padding during serialization.\nUse in combination with <code>OneOrMany</code>. Always emit the list …\nUse in combination with <code>OneOrMany</code>. Emit single element for …\nPredefined separator using a single semicolon\nSeparator for string-based collection de/serialization\nPredefined separator using a single space\nUse strict deserialization behavior, see <code>Strictness</code>.\nSpecify how lenient the deserialization process should be\nPredefined separator using a single linefeed.\nDo not emit padding during serialization.\nUse uppercase characters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the string delimiting two elements in the …\nDeserialize any value, ignore it, and return the default …\nMakes a distinction between a missing, unset, or existing …\nEnsure no duplicate keys exist in a map.\nEnsure that the first key is taken, if duplicate keys exist\nEnsure no duplicate values exist in a set.\nEnsure that the last value is taken, if duplicate values …\nSerialize inner value if <code>Some</code><code>(T)</code>. If <code>None</code>, serialize the …\nDeserialize potentially non-existing optional value\nSerialize optional value\nDeserialize a map and return an error on duplicate keys\nSerialize the map with the default serializer\nDeserialize a map and return an error on duplicate keys\nSerialize the map with the default serializer\nDeserialize a set and return an error on duplicate values\nSerialize the set with the default serializer\nDeserialize a set and keep the last of equal values\nSerialize the set with the default serializer\nDeserialize value wrapped in Some(T)\nSerialize value if Some(T), unit struct if None\nA <strong>data structure</strong> that can be serialized into any data …\nHelper type to implement <code>SerializeAs</code> for container-like …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new instance with provided value.\nSerialize this value into the given Serde serializer.")