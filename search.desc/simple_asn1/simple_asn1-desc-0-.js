searchState.loadedDescShard("simple_asn1", 0, "A small ASN.1 parsing library for Rust. In particular, …\nA primitive block from ASN.1.\nAn ASN.1 block class.\nAn error that can arise decoding ASN.1 primitive blocks.\nAn error that can arise encoding ASN.1 primitive blocks.\nA big signed integer type.\nA big unsigned integer type.\nAn explicitly tagged block.\nA trait defining types that can be decoded from an …\nA trait defining types that can be decoded from an …\nExpected more input\nNot a valid ASN.1 class\nAn ASN.1 OID.\nThe set of types that can automatically converted into a …\nAn unkown block.\nA constant <code>BigInt</code> with value 0, useful for static …\nA constant <code>BigUint</code> with value 0, useful for static …\nconverts the\nReinitializes a <code>BigInt</code>.\nAssign a value to a <code>BigUint</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns whether the bit in position <code>bit</code> is set, using the …\nReturns whether the bit in the given position is set\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nDetermines the fewest bits necessary to express the <code>BigUint</code>…\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the truncated principal cube root of <code>self</code> – see …\nGet the class associated with the given ASN1Block, …\nReturns the number of one bits.\nAutomatically decode a type via DER encoding, assuming …\nAutomatically encode a type into binary via DER encoding, …\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nGreatest common divisor, least common multiple, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nTranslate a binary blob into a series of <code>ASN1Block</code>s, or …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nCalculates the Lowest Common Multiple (LCM) of the number …\nCalculates the Lowest Common Multiple (LCM) of the number …\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nReturns the modular multiplicative inverse if it exists, …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nReturns <code>(self ^ exponent) % modulus</code>.\nGenerate an ASN.1. The vector should be in the obvious …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nReturns the truncated principal <code>n</code>th root of <code>self</code> – see …\nGet the starting offset associated with the given …\nA handy macro for generating OIDs from a sequence of <code>u64</code>s.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>. The input slice must …\nReturns <code>self ^ exponent</code>.\nReturns <code>self ^ exponent</code>.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nSets or clears the bit in the given position, using the two…\nSets or clears the bit in the given position\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nReturns the truncated principal square root of <code>self</code> – …\nReturns the truncated principal square root of <code>self</code> – …\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nGiven an <code>ASN1Block</code>, covert it to its DER encoding, or …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nReturns the integer in the requested base in little-endian …\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the integer formatted as a string in the given …\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the <code>u32</code> digits representation of the <code>BigUint</code> …\nReturns the sign and the <code>u64</code> digits representation of the …\nReturns the <code>u64</code> digits representation of the <code>BigUint</code> …\nReturns the number of least-significant bits that are ones.\nReturns the number of least-significant bits that are zero,\nReturns the number of least-significant bits that are zero,")