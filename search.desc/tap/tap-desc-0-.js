searchState.loadedDescShard("tap", 0, "<code>tap</code> – Syntactical Plumb-Lines\nWraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …\nThe interior type used to indicate a failed construction.\nThe interior type used to indicate a successful …\nProvides universal suffix-position call syntax for any …\nPoint-free value inspection and modification.\nFallible tapping, conditional on the optional success of …\nOptional tapping, conditional on the optional presence of …\nWraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …\nThe interior type that the container may or may not carry.\nMethod-Directed Type Conversion\nConverts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.\nUniversal Suffix Calls\nPipes by value. This is generally the method you want to …\nMutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …\nBorrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …\nBorrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …\nMutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …\nBorrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …\nMutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …\nBorrows <code>self</code> and passes that borrow into the pipe function.\nMutably borrows <code>self</code> and passes that borrow into the pipe …\nReëxports all traits in one place, for easy import.\nPoint-Free Inspection\nImmutable access to a value.\nImmutable access to the <code>Borrow&lt;B&gt;</code> of a value.\nCalls <code>.tap_borrow()</code> only in debug builds, and is erased in …\nMutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.\nCalls <code>.tap_borrow_mut()</code> only in debug builds, and is …\nCalls <code>.tap()</code> only in debug builds, and is erased in …\nImmutable access to the <code>Deref::Target</code> of a value.\nCalls <code>.tap_deref()</code> only in debug builds, and is erased in …\nMutable access to the <code>Deref::Target</code> of a value.\nCalls <code>.tap_deref_mut()</code> only in debug builds, and is erased …\nImmutably accesses an interior failure value.\nCalls <code>.tap_err()</code> only in debug builds, and is erased in …\nMutably accesses an interior failure value.\nCalls <code>.tap_err_mut()</code> only in debug builds, and is erased …\nMutable access to a value.\nCalls <code>.tap_mut()</code> only in debug builds, and is erased in …\nRuns an effect function when the container is empty.\nCalls <code>.tap_none()</code> only in debug builds, and is erased in …\nImmutably accesses an interior success value.\nCalls <code>.tap_ok()</code> only in debug builds, and is erased in …\nMutably accesses an interior success value.\nCalls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …\nImmutable access to the <code>AsRef&lt;R&gt;</code> view of a value.\nCalls <code>.tap_ref()</code> only in debug builds, and is erased in …\nMutable access to the <code>AsMut&lt;R&gt;</code> view of a value.\nCalls <code>.tap_ref_mut()</code> only in debug builds, and is erased …\nImmutabily accesses an interior value only when it is …\nCalls <code>.tap_some()</code> only in debug builds, and is erased in …\nMutably accesses an interor value only when it is present.\nCalls <code>.tap_some_mut()</code> only in debug builds, and is erased …\nAttempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.\nWraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …\nWraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …\nConverts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.\nConverts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.\nAttempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.\nAttempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.\nProvides universal suffix-position call syntax for any …\nPipes by value. This is generally the method you want to …\nPipes by value. This is generally the method you want to …\nMutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …\nMutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …\nBorrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …\nBorrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …\nBorrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …\nBorrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …\nMutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …\nMutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …\nBorrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …\nBorrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …\nMutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …\nMutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …\nBorrows <code>self</code> and passes that borrow into the pipe function.\nBorrows <code>self</code> and passes that borrow into the pipe function.\nMutably borrows <code>self</code> and passes that borrow into the pipe …\nMutably borrows <code>self</code> and passes that borrow into the pipe …\nWraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …\nThe interior type used to indicate a failed construction.\nThe interior type used to indicate a successful …\nProvides universal suffix-position call syntax for any …\nPoint-free value inspection and modification.\nFallible tapping, conditional on the optional success of …\nOptional tapping, conditional on the optional presence of …\nWraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …\nThe interior type that the container may or may not carry.\nImmutably accesses an interior failure value.\nMutably accesses an interior failure value.\nRuns an effect function when the container is empty.\nImmutably accesses an interior success value.\nMutably accesses an interior success value.\nImmutabily accesses an interior value only when it is …\nMutably accesses an interor value only when it is present.\nThe interior type used to indicate a failed construction.\nThe interior type used to indicate a successful …\nPoint-free value inspection and modification.\nFallible tapping, conditional on the optional success of …\nOptional tapping, conditional on the optional presence of …\nThe interior type that the container may or may not carry.\nImmutable access to a value.\nImmutable access to a value.\nImmutable access to the <code>Borrow&lt;B&gt;</code> of a value.\nImmutable access to the <code>Borrow&lt;B&gt;</code> of a value.\nCalls <code>.tap_borrow()</code> only in debug builds, and is erased in …\nCalls <code>.tap_borrow()</code> only in debug builds, and is erased in …\nMutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.\nMutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.\nCalls <code>.tap_borrow_mut()</code> only in debug builds, and is …\nCalls <code>.tap_borrow_mut()</code> only in debug builds, and is …\nCalls <code>.tap()</code> only in debug builds, and is erased in …\nCalls <code>.tap()</code> only in debug builds, and is erased in …\nImmutable access to the <code>Deref::Target</code> of a value.\nImmutable access to the <code>Deref::Target</code> of a value.\nCalls <code>.tap_deref()</code> only in debug builds, and is erased in …\nCalls <code>.tap_deref()</code> only in debug builds, and is erased in …\nMutable access to the <code>Deref::Target</code> of a value.\nMutable access to the <code>Deref::Target</code> of a value.\nCalls <code>.tap_deref_mut()</code> only in debug builds, and is erased …\nCalls <code>.tap_deref_mut()</code> only in debug builds, and is erased …\nImmutably accesses an interior failure value.\nCalls <code>.tap_err()</code> only in debug builds, and is erased in …\nCalls <code>.tap_err()</code> only in debug builds, and is erased in …\nMutably accesses an interior failure value.\nCalls <code>.tap_err_mut()</code> only in debug builds, and is erased …\nCalls <code>.tap_err_mut()</code> only in debug builds, and is erased …\nMutable access to a value.\nMutable access to a value.\nCalls <code>.tap_mut()</code> only in debug builds, and is erased in …\nCalls <code>.tap_mut()</code> only in debug builds, and is erased in …\nRuns an effect function when the container is empty.\nCalls <code>.tap_none()</code> only in debug builds, and is erased in …\nCalls <code>.tap_none()</code> only in debug builds, and is erased in …\nImmutably accesses an interior success value.\nCalls <code>.tap_ok()</code> only in debug builds, and is erased in …\nCalls <code>.tap_ok()</code> only in debug builds, and is erased in …\nMutably accesses an interior success value.\nCalls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …\nCalls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …\nImmutable access to the <code>AsRef&lt;R&gt;</code> view of a value.\nImmutable access to the <code>AsRef&lt;R&gt;</code> view of a value.\nCalls <code>.tap_ref()</code> only in debug builds, and is erased in …\nCalls <code>.tap_ref()</code> only in debug builds, and is erased in …\nMutable access to the <code>AsMut&lt;R&gt;</code> view of a value.\nMutable access to the <code>AsMut&lt;R&gt;</code> view of a value.\nCalls <code>.tap_ref_mut()</code> only in debug builds, and is erased …\nCalls <code>.tap_ref_mut()</code> only in debug builds, and is erased …\nImmutabily accesses an interior value only when it is …\nCalls <code>.tap_some()</code> only in debug builds, and is erased in …\nCalls <code>.tap_some()</code> only in debug builds, and is erased in …\nMutably accesses an interor value only when it is present.\nCalls <code>.tap_some_mut()</code> only in debug builds, and is erased …\nCalls <code>.tap_some_mut()</code> only in debug builds, and is erased …")