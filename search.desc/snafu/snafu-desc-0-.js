searchState.loadedDescShard("snafu", 0, "SNAFU\nView a backtrace-like value as an optional backtrace.\nConverts the receiver into an <code>Error</code> trait object, suitable …\nA captured OS thread stack backtrace.\nAn iterator over an Error and its sources.\nAn iterator over an Error and its sources that removes …\nBackports changes to the <code>Error</code> trait to versions of Rust …\nTakes a string message and builds the corresponding error.\nConstruct data to be included as part of an error. The …\nCombines an underlying error with additional information …\nThe source code location where the error was reported.\nA temporary error type used when converting an <code>Option</code> into …\nAdditions to <code>Option</code>.\nOpinionated solution to format an error in a user-friendly …\nAdditions to <code>Result</code>.\nThe <code>Snafu</code> macro is the entrypoint to defining your own …\nThe underlying error\nThe underlying error\nA basic error type that you can use as a first step to …\nRetrieve the optional backtrace\nFor maximum effectiveness, this needs to be called as a …\nReturns a <code>Backtrace</code> that may be printed.\nGets the backtrace from the deepest <code>Whatever</code> error. If none\nConvert a <code>Result</code>’s error into a boxed trait object …\nConvert a <code>Result</code>’s error into a boxed trait object.\nExecutes a closure that returns a <code>Result</code>, converting any …\nCaptures a stack backtrace of the current thread.\nExecutes a closure that returns a <code>Result</code>, converting the …\nThe column where the error was reported\nExtend a <code>Result</code>’s error with additional …\nConvert an <code>Option</code> into a <code>Result</code> with additional …\nForcibly captures a disabled backtrace, regardless of …\nEnsure a condition is true. If it is not, return from the …\nEnsure a condition is true. If it is not, return a …\nThe file where the error was reported\nForcibly captures a full backtrace, regardless of …\nReturns an iterator over the backtrace frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an error into a <code>Report</code>.\nBuild the data.\nBuild the data using the given source\nNot currently built; please add the <code>guide</code> feature flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCombine the information to produce the error\nReturns an iterator for traversing the chain of errors, …\nThe line where the error was reported\nConstructs a <code>Location</code> using the current file, line, and …\nConstructs the iterator.\nCreates a new error chain iterator.\nConstructs a <code>Location</code> using the given information\nA <code>Report</code> that indicates no error occurred.\nTraits and macros used by most projects. Add …\nAdapts a function to provide user-friendly error output …\nReturns the status of this backtrace, indicating whether …\nInstantiate and return a stringly-typed error message.\nExtend a <code>Result</code>’s error with information from a string.\nConvert an <code>Option</code> into a <code>Result</code> with information from a …\nExtend a <code>Result</code>’s error with lazily-generated …\nConvert an <code>Option</code> into a <code>Result</code> with lazily-generated …\nWrap an existing error with the given string\nExtend a <code>Result</code>’s error with information from a …\nConvert an <code>Option</code> into a <code>Result</code> with information from a …\nCreate a brand new error from the given string\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nNot currently built; please add the <code>guide</code> feature flag.\nThe <code>Snafu</code> macro is the entrypoint to defining your own …\nEnsure a condition is true. If it is not, return from the …\nEnsure a condition is true. If it is not, return a …\nInstantiate and return a stringly-typed error message.")