searchState.loadedDescShard("async_lock", 0, "Async synchronization primitives.\nA counter to synchronize multiple tasks at the same time.\nReturned by <code>Barrier::wait()</code> when all tasks have called it.\nAn async mutex.\nA guard that releases the mutex when dropped.\nAn owned guard that releases the mutex when dropped.\nA memory location that can be written to at most once.\nAn async reader-writer lock.\nA guard that releases the read lock when dropped.\nAn owned, reference-counting guard that releases the read …\nA guard that releases the upgradable read lock when …\nAn owned, reference-counting guard that releases the …\nA guard that releases the write lock when dropped.\nAn owned, reference-counted guard that releases the write …\nA counter for limiting the number of concurrent operations.\nA guard that releases the acquired permit.\nAn owned guard that releases the acquired permit.\nWaits for a permit for a concurrent operation.\nWaits for an owned permit for a concurrent operation.\nWaits for an owned permit for a concurrent operation.\nWaits for a permit for a concurrent operation.\nAdds <code>n</code> additional permits to the semaphore.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into an upgradable reader guard.\nDowngrades into an upgradable reader guard.\nDrops the guard <em>without</em> releasing the acquired permit.\nDrops the guard <em>without</em> releasing the acquired permit. …\nReturns the argument unchanged.\nCreate a new, initialized <code>OnceCell</code> from an existing value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNamed futures for use with <code>async_lock</code> primitives.\nGet a reference to the inner value, or <code>None</code> if the value …\nReturns a mutable reference to the underlying data.\nGet a mutable reference to the inner value, or <code>None</code> if the …\nReturns a mutable reference to the inner value.\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nGet a reference to the inner value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nConvert this <code>OnceCell</code> into the inner value, if it is …\nUnwraps the lock and returns the inner value.\nTell whether or not the cell is initialized.\nReturns <code>true</code> if this task was the last to call to …\nAcquires the mutex.\nAcquires the mutex and clones a reference to it.\nAcquires the mutex and clones a reference to it using the …\nAcquires the mutex using the blocking strategy.\nCreates a new async mutex.\nCreate a new, uninitialized <code>OnceCell</code>.\nCreates a new reader-writer lock.\nCreates a barrier that can block the given number of tasks.\nCreates a new semaphore with a limit of <code>n</code> concurrent …\nAcquires a read lock.\nAcquires an owned, reference-counted read lock.\nAcquires an owned, reference-counted read lock.\nAcquires a read lock.\nTry to set the value of the cell.\nTry to set the value of the cell.\nReturns a reference to the mutex a guard came from.\nReturns a reference to the mutex a guard came from.\nTake the value out of this <code>OnceCell</code>, moving it back to the …\nAttempts to get a permit for a concurrent operation.\nAttempts to get an owned permit for a concurrent operation.\nAttempts to acquire the mutex.\nAttempts to acquire the mutex and clone a reference to it.\nAttempts to acquire a read lock.\nAttempts to acquire an an owned, reference-counted read …\nAttempts to acquire a read lock with the possibility to …\nAttempts to acquire an owned, reference-counted read lock …\nAttempts to upgrade into a write lock.\nAttempts to upgrade into a write lock.\nAttempts to acquire a write lock.\nAttempts to acquire an owned, reference-counted write lock.\nAcquires a read lock with the possibility to upgrade to a …\nAcquires an owned, reference-counted read lock with the …\nAttempts to acquire an owned, reference-counted read lock …\nAttempts to acquire a read lock with the possibility to …\nUpgrades into a write lock.\nUpgrades into a write lock.\nUpgrades into a write lock.\nUpgrades into a write lock.\nWait for the cell to be initialized, and then return a …\nBlocks the current task until all tasks reach this point.\nWait for the cell to be initialized, and then return a …\nBlocks the current thread until all tasks reach this point.\nAcquires a write lock.\nAcquires an owned, reference-counted write lock.\nAcquires an owned, reference-counted write lock.\nAcquires a write lock.\nThe future returned by <code>Semaphore::acquire</code>.\nThe future returned by <code>Semaphore::acquire_arc</code>.\nThe future returned by <code>Barrier::wait()</code>.\nThe future returned by <code>Mutex::lock</code>.\nThe future returned by <code>Mutex::lock_arc</code>.\nThe future returned by <code>RwLock::read</code>.\nThe future returned by <code>RwLock::read_arc</code>.\nThe future returned by <code>RwLock::upgradable_read</code>.\nThe future returned by <code>RwLock::upgradable_read_arc</code>.\nThe future returned by <code>RwLockUpgradableReadGuard::upgrade</code>.\nThe future returned by …\nThe future returned by <code>RwLock::write</code>.\nThe future returned by <code>RwLock::write_arc</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")