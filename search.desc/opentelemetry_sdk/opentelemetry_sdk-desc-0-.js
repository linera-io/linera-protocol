searchState.loadedDescShard("opentelemetry_sdk", 0, "Implements the <code>SDK</code> component of OpenTelemetry.\nErrors that can occur during when returning telemetry from …\nOperation failed due to an internal error.\nAn immutable representation of the entity producing …\nWrapper for error from trace, logs and metrics part of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpenTelemetry Log SDK\nThe crust of the OpenTelemetry metrics SDK.\nOpenTelemetry Propagators\nRepresentations of entities producing telemetry.\nProvides an abstraction of several async runtimes\nIn-Memory exporters for testing purpose.\nOpenTelemetry Trace SDK\nShutdown has already been invoked.\nContains the error value\nTrait for errors returned by exporters\nOperation failed due to an internal error.\nErrors that can occur during SDK operations export(), …\nA specialized <code>Result</code> type for Shutdown operations.\nContains the success value\nOperation timed out before completing.\nThe name of exporter that returned this error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBatch log processor configuration. Use <code>BatchConfigBuilder</code> …\nA builder for creating <code>BatchConfig</code> instances.\nThe <code>BatchLogProcessor</code> collects finished logs in a buffer …\nA builder for creating <code>BatchLogProcessor</code> instances.\nA batch of log records to be exported by a <code>LogExporter</code>.\n<code>LogExporter</code> defines the interface that log exporters …\nThe interface for plugging into a <code>SdkLogger</code>.\nBuilder for provider attributes.\nLogRecord represents all data carried by a log record, and …\nThe object for emitting <code>LogRecord</code>s.\nHandles the creation and coordination of <code>Logger</code>s.\nA <code>LogProcessor</code> designed for testing and debugging purpose, …\nTraceContext stores the trace context for logs that have …\nProvides an iterator over the attributes.\nReturns the body\nBuild a batch processor\nBuilds a <code>BatchConfig</code> enforcing the following invariants:\nCreate a new provider from this configuration.\nCreate a new batch processor builder\nCreate a new <code>LoggerProvider</code> builder.\nCreate a new <code>BatchConfigBuilder</code> initialized with default …\nCalled when a log record is ready to processed and …\nEmit a <code>LogRecord</code>.\nReturns the event name\nExports a batch of log records and their associated …\nForce the logs lying in the cache to be exported.\nForce flush all remaining logs in log processors and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIn-Memory log exporter for testing purpose.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the log records and …\nCreates a new instance of <code>LogBatch</code>.\nCreates a new instance of <code>SimpleLogProcessor</code>.\nReturns the observed timestamp\nSet the resource for the exporter.\nSet the resource for the exporter.\nSet the resource for the log processor.\nSet the resource for the log processor.\nReturns the severity number\nReturns the severity text\nShuts down the exporter with a default timeout.\nShuts down the exporter with a default timeout.\nShuts down the processor with default timeout.\nShuts down the processor with default timeout.\nShuts down this <code>LoggerProvider</code> with default timeout\nShuts down the exporter.\nShuts down the exporter.\nShuts down the processor. After shutdown returns the log …\nShuts down the processor. After shutdown returns the log …\nShuts down this <code>LoggerProvider</code>\nSpan Id\nReturns the target\nReturns the timestamp\nReturns the trace context\nTrace flags\nTrace id\nSet the BatchConfig for <code>BatchLogProcessorBuilder</code>\nAdds a BatchLogProcessor with the configured exporter to …\nAdds a custom LogProcessor to the pipeline.\nSet max_export_batch_size for <code>BatchConfigBuilder</code>. It’s …\nSet max_queue_size for <code>BatchConfigBuilder</code>. It’s the …\nThe <code>Resource</code> to be associated with this Provider.\nSet scheduled_delay for <code>BatchConfigBuilder</code>. It’s the …\nAdds a SimpleLogProcessor with the configured exporter to …\nAn in-memory logs exporter that stores logs data in …\nBuilder for [‘InMemoryLogExporter’].\n<code>LogDataWithResource</code> associates a <code>SdkLogRecord</code> with a …\n<code>OwnedLogData</code> represents a single log event without …\nCreates a new instance of <code>InMemoryLogExporter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the logs emitted via Logger as a vector of …\nInstrumentation details for the emitter who produced this …\nInstrumentation details for the emitter who produced this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if shutdown was called.\nCreates a new instance of <code>InMemoryLogExporter</code>.\nLog record, which can be borrowed or owned.\nLog record\nClears the internal (in-memory) storage of logs.\nResource for the emitter who produced this <code>LogRecord</code>.\nIdentifies a group of instruments that record increasing …\nA measurement interval that continues to expand forward in …\nA measurement interval that resets each cycle.\na group of instruments that record current value …\nA group of instruments that record a distribution of …\nDescribes the properties of an instrument at creation, …\nThe identifier of a group of instruments that all perform …\nConfigures Synchronous Counter and Histogram instruments …\nConfiguration options for a MeterProvider.\nA group of instruments that record increasing values in an …\na group of instruments that record current values in an …\nA group of instruments that record increasing and …\nA <code>MetricReader</code> that periodically collects and exports …\nConfiguration options for PeriodicReader.\nHandles the creation and coordination of Meters.\nDescribes the stream of data an instrument produces. Used …\nA builder for creating Stream objects.\nDefines the window that an aggregation was calculated over.\nA group of instruments that record increasing and …\nBuild a new Stream instance using the configuration in …\nConstruct a new MeterProvider with this configuration.\nCreate a PeriodicReader with the given config.\nConfiguration options for a periodic reader with own thread\nCreate a new stream builder with default values.\nReturn default MeterProviderBuilder\nTypes for delivery of pre-aggregated metric time series …\nInterfaces for exporting metrics\nFlushes all pending telemetry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIn-Memory metric exporter for testing purpose.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstrument kind.\nInstrument name.\nInstrument scope.\nshutdown with default timeout\nShuts down the meter provider flushing all pending …\nInstrument unit.\nSet the stream cardinality limit. If this is not set, the …\nSet the stream description. If this is not set, …\nConfigures the intervening time between exports for a …\nSet the stream name. If this is not set, name provide …\nAdds a <code>PushMetricExporter</code> to the <code>MeterProvider</code> and …\nAssociates a MetricReader with a MeterProvider. `…\nAssociates a Resource with a MeterProvider.\nSet the stream unit. If this is not set, unit provided …\nAdds a view to the MeterProvider.\nAggregated metrics data from an instrument\nA measurement sampled from a time series providing a …\nA set of bucket counts, encoded in a contiguous array of …\nThe histogram of all measurements of values from an …\nMetric data for ExponentialHistogram\nA single exponential histogram data point in a time series.\nAll metric data with <code>f64</code> value type\nA measurement of the current value of an instrument.\nMetric data for Gauge\nDataPoint is a single data point in a time series.\nRepresents the histogram of all measurements of values …\nMetric data for Histogram\nA single histogram data point in a time series.\nAll metric data with <code>i64</code> value type\nA collection of one or more aggregated time series from an …\nMetric data for all types\nA collection of ScopeMetrics and the associated Resource …\nA collection of metrics produced by a meter.\nRepresents the sum of all measurements of values from an …\nMetric data for Sum\nDataPoint is a single data point in a time series.\nAll metric data with <code>u64</code> value type\nReturns an iterator over the attributes in GaugeDataPoint.\nReturns an iterator over the attributes in SumDataPoint.\nReturns an iterator over the attributes in …\nReturns an iterator over the attributes in …\nReturns an iterator over the bucket boundaries in …\nReturns an iterator over the bucket counts in …\nReturns the number of updates this histogram has been …\nReturns the number of updates this histogram has been …\nReturns an iterator over the counts.\nReturns the aggregated data from the instrument.\nReturns an iterator over the GaugeDataPoints in Gauge.\nReturns an iterator over the SumDataPoints in Sum.\nReturns an iterator over the HistogramDataPoints in …\nReturns an iterator over the ExponentialHistogramDataPoint…\nReturns the description of the instrument.\nReturns an iterator over the Exemplars in GaugeDataPoint.\nReturns an iterator over the Exemplars in SumDataPoint.\nReturns an iterator over the exemplars in …\nReturns an iterator over the exemplars in …\nReturns an iterator over the filtered attributes in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this aggregation only increases or …\nReturns the maximum value recorded.\nReturns the maximum value recorded.\nReturns an iterator over the Metrics in ScopeMetrics.\nReturns the minimum value recorded.\nReturns the minimum value recorded.\nReturns the name of the instrument that created this data.\nReturns the range of negative value bucket counts.\nReturns the bucket index of the first entry in the counts …\nReturns the range of positive value bucket counts.\nReturns a reference to the Resource in ResourceMetrics.\nReturns the resolution of the histogram.\nReturns a reference to the InstrumentationScope in …\nReturns an iterator over the ScopeMetrics in …\nReturns the ID of the span that was active during the …\nReturns the time when the time series was started.\nReturns the time when the time series was started.\nReturns the time when the time series was started.\nReturns the time when the time series was started.\nReturns the sum of the values recorded.\nReturns the sum of the values recorded.\nReturns the temporality describing if the aggregation is …\nReturns the temporality describing if the aggregation is …\nReturns the temporality describing if the aggregation is …\nReturns the time when the time series was recorded.\nReturns the time when the time series was recorded.\nReturns the time when the time series was recorded.\nReturns the time when the time series was recorded.\nReturns the time when the measurement was recorded.\nReturns the ID of the trace the active span belonged to …\nReturns the unit in which the instrument reports.\nReturns the value of this data point.\nReturns the value of this data point.\nThe measured value.\nReturns the number of values whose absolute value is less …\nReturns the width of the zero region.\nExporter handles the delivery of metric data to external …\nExport serializes and transmits metric data to a receiver.\nFlushes any metric data held by an exporter.\nShutdown with the default timeout of 5 seconds.\nReleases any held computational resources.\nAccess the Temporality of the MetricExporter.\nAn in-memory metrics exporter that stores metrics data in …\nBuilder for <code>InMemoryMetricExporter</code>.\nCreates a new instance of the <code>InMemoryMetricExporter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the finished metrics as a vector of <code>ResourceMetrics</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the <code>InMemoryMetricExporterBuilder</code>…\nClears the internal storage of finished metrics.\nSet the Temporality of the exporter.\nPropagates name-value pairs in W3C Baggage format.\nPropagates <code>SpanContext</code>s in W3C TraceContext format under …\nExtracts a <code>Context</code> with baggage values from a <code>Extractor</code>.\nRetrieves encoded <code>SpanContext</code>s using the <code>Extractor</code>. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nEncodes the values of the <code>Context</code> and injects them into …\nProperly encodes the values of the <code>SpanContext</code> and injects …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new baggage propagator.\nCreate a new <code>TraceContextPropagator</code>.\nEnvResourceDetector extract resource from environment …\nAn iterator over the entries of a <code>Resource</code>.\nAn immutable representation of the entity producing …\nBuilder for Resource\nResourceDetector detects OpenTelemetry resource information\nThere are attributes which MUST be provided by the SDK as …\nDetect the telemetry SDK information used to capture data …\nCreate a Resource with the options provided to the …\nCreates a ResourceBuilder that allows you to configure …\nCreates a ResourceBuilder that allows you to configure …\ndetect returns an initialized Resource based on gathered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the value from resource associate with given key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the resource contains no attributes.\nGets an iterator over the attributes of this resource.\nReturns the number of attributes for this resource\nCreate <code>EnvResourceDetector</code> instance.\nReturn the schema url of the resource. If the resource …\nAdd a KeyValue to the resource.\nAdd multiple KeyValues to the resource.\nAdd a single ResourceDetector to your resource.\nAdd multiple ResourceDetectors to your resource.\nThis will merge the provided <code>schema_url</code> with the current …\nAdd <code>service.name</code> resource attribute.\nSend failed due to the channel being closed.\nSend failed due to the channel being full.\nThe message that will be sent.\nAny other send error that isn’t covered above.\nA future stream to receive batch messages from channels.\nA runtime is an abstraction of an async runtime like Tokio…\n<code>RuntimeChannel</code> is an extension to <code>Runtime</code>. Currently, it …\nA batch messages sender that can be sent across threads …\nRuntime implementation, which works with Tokio’s multi …\nRuntime implementation, which works with Tokio’s current …\nTrySend is an abstraction of <code>Sender</code> that is capable of …\nError returned by a <code>TrySend</code> implementation.\nReturn the sender and receiver used to send batch messages.\nReturn a future that resolves after the specified Duration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawn a new task or thread, which executes the given …\nTry to send a message batch to a worker thread.\nStructs for tests.\nStructs used for testing\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA no-op instance of an <code>SpanExporter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new noop span exporter\nNever sample the trace\nAlways sample the trace\nBatch span processor configuration. Use <code>BatchConfigBuilder</code> …\nA builder for creating <code>BatchConfig</code> instances.\nThe <code>BatchSpanProcessor</code> collects finished spans in a buffer …\nBuilder for <code>BatchSpanProcessorDedicatedThread</code>.\nTracer configuration\nContains the error value\nExport failed with the error returned by the exporter\nExport failed to finish after certain period and processor …\nInterface for generating IDs\nContains the success value\nOther errors propagated from trace SDK that weren’t …\nRespects the parent span’s sampling decision or …\nDefault <code>IdGenerator</code> implementation.\nDefault Sampling options\n<code>Tracer</code> implementation to create and manage spans\nCreator and registry of named <code>SdkTracer</code> instances.\nThe <code>ShouldSample</code> interface allows implementations to …\nA SpanProcessor that passes finished spans to the …\nSingle operation within a trace.\n<code>SpanData</code> contains all the information collected by a <code>Span</code> …\nStores span events along with dropped count.\n<code>SpanExporter</code> defines the interface that protocol-specific …\nSpan limit configuration to keep attributes, events and …\nStores span links along with dropped count.\n<code>SpanProcessor</code> is an interface which allows hooks for span …\nErrors returned by the trace API.\nSample a given fraction of traces. Fractions &gt;= 1 will …\nA specialized <code>Result</code> type for trace operations.\n<code>Tracer</code> implementation to create and manage spans\nalready shutdown error\nBuilder for provider attributes.\nRecords events at a specific time in the context of a …\nAdd <code>Link</code> to this <code>Span</code>\nSpan attributes\nReturn a versioned boxed tracer\nCreate a new provider from this configuration.\nBuild a new instance of <code>BatchSpanProcessor</code>.\nBuilds a <code>BatchConfig</code> enforcing the following invariants:\nStarts a span from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nCreate a new <code>SdkTracerProvider</code> builder.\nbuilder\nCreate default global sdk configuration.\nCreate a new <code>BatchConfigBuilder</code> initialized with default …\nReport span on inner drop\nThe number of attributes that were above the configured …\nThe number of Events dropped from the span.\nThe number of links dropped from the span.\nSpan end time\nFinishes the span with given timestamp.\nThe events stored as a vector. Could be empty if there are …\nSpan events\nExports a batch of readable spans. Protocol exporters that …\nConvert information in this span into …\nFormats the <code>Tracer</code> using the given formatter. Omitting …\nForce the spans lying in the cache to be exported.\nThis is a hint to ensure that the export of any Spans the …\nThis is a hint to ensure that the export of any Spans the …\nForce flush all remaining spans in span processors and …\nFlushes all pending spans.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe id generator that the sdk should use\nIn-Memory span exporter for testing purpose.\nInstrumentation scope that produced this span\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Span</code> is recording information like …\nSpan Links\nThe links stored as a vector. Could be empty if there are …\nThe max attributes that can be added into an <code>Event</code>\nThe max attributes that can be added into a <code>Link</code>\nThe max attributes that can be added to a <code>Span</code>.\nThe max events that can be added to a <code>Span</code>.\nThe max links that can be added to a <code>Span</code>.\nSpan name\nCreate a new SimpleSpanProcessor using the provided …\nCreates a new instance of <code>BatchSpanProcessor</code>.\nGenerate a new <code>SpanId</code>\nGenerate a new <code>TraceId</code>\n<code>on_end</code> is called after a <code>Span</code> is ended (i.e., the end …\nHandles span end.\n<code>on_start</code> is called when a <code>Span</code> is started.  This method is …\nHandles span start.\nSpan parent id\nContains attributes representing an entity that produces …\nThe sampler that the sdk should use\nSets a single <code>Attribute</code> where the attribute properties are …\nSet the resource for the exporter.\nSet the resource for the exporter.\nSet the resource for the span processor.\nSet the resource for the span processor.\nSet the resource for the processor.\nSets the status of this <code>Span</code>.\nReturns the <code>SamplingDecision</code> for a <code>Span</code> to be created.\nShuts down the exporter with default timeout.\nShuts down the exporter with default timeout.\nshutdown the processor with a default timeout.\nshutdown the processor with a default timeout.\nshutdown with default timeout\nShuts down the processor. Called when SDK is shut down. …\nShuts down the exporter. Called when SDK is shut down. …\nShuts down the exporter. Called when SDK is shut down. …\nShuts down the current <code>TracerProvider</code>.\nShuts down the processor.\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nExportable <code>SpanContext</code>\nSpan kind\nspan limits\nSpan start time\nSpan status\nUpdates the <code>Span</code>’s name.\nSet the BatchConfig for BatchSpanProcessorBuilder\nAdds a BatchSpanProcessor with the configured exporter to …\nSpecify the id generator to be used.\nSpecify the number of attributes one event can have.\nSpecify the number of attributes one link can have.\nSpecify the number of attributes to be recorded per span.\nSpecify the number of events to be recorded per span.\nSet max_export_batch_size for <code>BatchConfigBuilder</code>. It’s …\nSpecify the number of events to be recorded per span.\nSet max_queue_size for <code>BatchConfigBuilder</code>. It’s the …\nAssociates a Resource with a SdkTracerProvider.\nSpecify the sampler to be used.\nSet scheduled_delay_duration for <code>BatchConfigBuilder</code>. It’…\nAdds a SimpleSpanProcessor with the configured exporter to …\nSpecify all limit via the span_limits\nAdds a custom SpanProcessor to the pipeline.\nAn in-memory span exporter that stores span data in memory.\nBuilder for <code>InMemorySpanExporter</code>.\nCreates a new instance of the <code>InMemorySpanExporter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the finished span as a vector of <code>SpanData</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the <code>InMemorySpanExporterBuilder</code>.\nClears the internal storage of finished spans.")