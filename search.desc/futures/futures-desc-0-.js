searchState.loadedDescShard("futures", 0, "Abstractions for asynchronous programming.\nBuilt-in executors and related tools.\nAsynchronous values.\nAsynchronous I/O.\nPolls multiple futures simultaneously, returning a tuple …\nFutures-powered synchronization primitives.\nThis module contains the <code>Never</code> type.\nA macro which yields to the event loop once.\nPins a value on the stack.\nA macro which returns the result of polling a future once …\nA macro which returns the result of polling a future once …\nA “prelude” for crates using the <code>futures</code> crate.\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nPolls multiple futures and streams simultaneously, …\nPolls multiple futures and streams simultaneously, …\nAsynchronous sinks.\nAsynchronous streams.\nCombines several streams, all producing the same <code>Item</code> …\nTools for working with tasks.\nPolls multiple futures simultaneously, resolving to a …\nA multi-producer, single-consumer queue for sending values …\nA channel for sending a single message between …\nThe receiving end of a bounded mpsc channel.\nThe error type for <code>Sender</code>s used as <code>Sink</code>s.\nThe transmission end of a bounded mpsc channel.\nThe error type returned from <code>try_next</code>.\nThe error type returned from <code>try_send</code>.\nThe receiving end of an unbounded mpsc channel.\nThe transmission end of an unbounded mpsc channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel, without dropping …\nCloses the receiving half of a channel, without dropping …\nCloses this channel from the sender side, preventing any …\nCloses this channel from the sender side, preventing any …\nDisconnects this sender from the channel, closing it if …\nDisconnects this sender from the channel, closing it if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the receiver into the provided hasher\nHashes the receiver into the provided hasher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the message that was attempted to be sent but …\nDrops the message and converts into a <code>SendError</code>.\nReturns whether this channel is closed without needing a …\nReturns whether this channel is closed without needing a …\nReturns whether the sender send to this receiver.\nReturns whether the sender send to this receiver.\nReturns <code>true</code> if this error is a result of the receiver …\nReturns <code>true</code> if this error is a result of the receiver …\nReturn false is channel has no queued messages, true …\nReturns <code>true</code> if this error is a result of the channel …\nReturns <code>true</code> if this error is a result of the channel …\nReturn the number of messages in the queue or 0 if channel …\nPolls the channel to determine if there is guaranteed …\nCheck if the channel is ready to receive a message.\nReturns whether the senders send to the same receiver.\nReturns whether the senders send to the same receiver.\nSend a message on the channel.\nSend a message on the channel.\nTries to receive the next message without notifying a …\nTries to receive the next message without notifying a …\nAttempts to send a message on this <code>Sender</code>, returning the …\nCreates an unbounded mpsc channel for communicating …\nSends a message along this channel.\nError returned from a <code>Receiver</code> when the corresponding …\nA future that resolves when the receiving end of a channel …\nA future for a value that will be provided by another …\nA means of transmitting a single value to another task.\nCreates a future that resolves when this <code>Sender</code>’s …\nCreates a new one-shot channel for sending a single value …\nGracefully close this receiver, preventing any subsequent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>\nTests to see whether this <code>Sender</code> is connected to the given …\nPolls this <code>Sender</code> half to detect whether its associated …\nCompletes this oneshot with a successful result.\nAttempts to receive a message outside of the context of a …\nAn iterator which blocks on values from a stream until …\nRepresents an executor context.\nAn error returned by <code>enter</code> if an execution scope has …\nA single-threaded task pool for polling futures to …\nA handle to a <code>LocalPool</code> that implements <code>Spawn</code>.\nRun a future to completion on the current thread.\nTurn a stream into a blocking iterator.\nMarks the current thread as being within the dynamic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>BlockingStream</code> into the inner <code>Stream</code> type.\nCreate a new, empty pool of tasks.\nRun all tasks in the pool to completion.\nRuns all the tasks in the pool until the given future …\nRuns all tasks in the pool and returns if no more progress …\nGet a clonable handle to the pool as a <code>Spawn</code>.\nRuns all tasks and returns after completing one future or …\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>always_ready</code> function.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA future represents an asynchronous computation obtained …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nAbort the <code>Abortable</code> stream/future associated with this …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nCreates a future that is always immediately ready with a …\nExecutes another future after this one resolves …\nConvert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nCreates a new <code>WeakShared</code> for this <code>Shared</code>.\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nMaps this future’s <code>Error</code> to a new error type using the …\nFactor out a homogeneous type from an either of pairs.\nFactor out a homogeneous type from an either of pairs.\nFlatten the execution of this future when the output of …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nDrops this handle <em>without</em> canceling the underlying future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a future such that <code>poll</code> will never again be called …\nCreate an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.\nDo something with the output of a future before passing it …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.\nUnwraps the value from this immediately ready future.\nConsumes this combinator, returning the underlying futures.\nExtract the value of an either over two equivalent types.\nConvert an owned instance into a (conceptually owned) fat …\nConvert this future into a single element stream.\nChecks whether the task has been aborted. Note that all …\nChecks whether <code>AbortHandle::abort</code> was <em>called</em> on any …\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMaps this future’s error value to a different value.\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nWraps a future into a <code>MaybeDone</code>\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreate a <code>LocalFutureObj</code> from a custom trait object …\nCreate a <code>FutureObj</code> from a custom trait object …\nCreates a new <code>Abortable</code> future/stream using an existing …\nCreates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can …\nEvaluates and consumes the future, returning the resulting …\nCreate a future that is immediately ready with a success …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns <code>Some</code> containing a reference to this <code>Shared</code>’s …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nReturns <code>true</code> if the two <code>Shared</code>s point to the same future …\nHashes the internal state of this <code>Shared</code> in a way that’s …\nCreates a future that is immediately ready with a value.\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nCreate a cloneable handle to this future where all handles …\nGets the number of strong pointers to this allocation.\nAttempt to take the output of a <code>MaybeDone</code> without driving …\nAttempt to take the output of a <code>TryMaybeDone</code> without …\nCreates a new <code>Fuse</code>-wrapped future which is already …\nChain on a computation for when a future finished, passing …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nCreates a future which represents either a collection of …\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nWaits for either one of two differently-typed futures to …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nAttempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.\nGets the number of weak pointers to this allocation.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nA simple wrapper type which allows types which implement …\nAn entity already exists, often a file.\nProgram argument list too long.\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe operation failed because a pipe was closed.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a writer and buffers its output.\nReader for the <code>chain</code> method.\nFuture for the <code>close</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nFuture for the <code>copy()</code> function.\nFuture for the <code>copy_buf()</code> function.\nFuture for the <code>copy_buf_abortable()</code> function.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFuture for the <code>fill_buf</code> method.\nFuture for the <code>flush</code> method.\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nThis operation was interrupted.\nSink for the <code>into_sink</code> method.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nThe filesystem object is, unexpectedly, a directory.\nWrap a writer, like <code>BufWriter</code> does, but prioritizes …\nStream for the <code>lines</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFilesystem quota or some other kind of quota was exceeded.\nFuture for the <code>read</code> method.\nFuture for the <code>read_exact</code> method.\nThe readable half of an object returned from …\nFuture for the <code>read_line</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>read_to_end</code> method.\nFuture for the <code>read_to_string</code> method.\nFuture for the <code>read_until</code> method.\nFuture for the <code>read_vectored</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nError indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …\nFuture for the <code>BufReader::seek_relative</code> method.\nFuture for the <code>seek</code> method.\nEnumeration of possible methods to seek within an I/O …\nWriter for the <code>sink()</code> function.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>take</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nAn owned window around an underlying buffer.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>write</code> method.\nFuture for the <code>write_all</code> method.\nThe writable half of an object returned from …\nFuture for the <code>write_vectored</code> method.\nAn error returned when an operation could not be completed …\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nGet the underlying bytes as a slice with the original …\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns a reference to <code>buf_writer</code>’s internally buffered …\nCreates an adaptor which will chain this stream with …\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nAttempts to downcast the custom boxed error to <code>E</code>.\nConstructs a new handle to an empty reader.\nReturns the end index of this window into the underlying …\nCreates a future which will wait for a non-empty buffer to …\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nShows a human-readable description of the <code>ErrorKind</code>.\nConverts <code>TryReserveError</code> to an error with …\nReturns the argument unchanged.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nReturns a mutable reference to the contained IO object.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGets mutable references to the underlying readers in this …\nGets a mutable reference to the underlying value in this …\nAcquires a mutable reference to the underlying sink or …\nGets a mutable reference to the underlying buffer inside …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGets pinned mutable references to the underlying readers …\nAcquires a pinned mutable reference to the underlying sink …\nReturns a reference to the inner error wrapped by this …\nReturns a reference to the contained IO object.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nGets references to the underlying readers in this <code>Chain</code>.\nGets a reference to the underlying value in this cursor.\nAcquires a reference to the underlying sink or stream that …\nGets a shared reference to the underlying buffer inside of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes self and returns the contained IO object.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes the <code>Chain</code>, returning the wrapped readers.\nConsumes this cursor, returning the underlying value.\nConsumes this combinator, returning the underlying sink or …\nConsumes this <code>Window</code>, returning the underlying buffer.\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nGet the underlying bytes as a mutable slice with the …\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nCreates a new I/O error from a known kind of error as well …\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\nCreates a new <code>AllowStdIo</code> from an existing IO object.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nCreate a new <code>LineWriter</code> with default buffer capacity. The …\nCreates a new cursor wrapping the provided underlying …\nCreates a new window around the buffer <code>t</code> defaulting to the …\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_close()</code>\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_flush()</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to seek to an offset, in bytes, in a stream.\nSeek to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nAttempts to seek relative to the current position. If the …\nAttempt to write bytes from <code>buf</code> into the object.\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nCreates an instance of a reader that infinitely repeats …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nCreates a future which will seek an IO object, and then …\nSeeks relative to the current position. If the new …\nChanges the range of this window to the range specified.\nSets the number of bytes that can be read before this …\nSets the position of this cursor.\nCreates an instance of a writer which will successfully …\nHelper method for splitting this read/write object into …\nReturns the starting index of this window into the …\nCreates a future which will return the current seek …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a new <code>LineWriter</code> with the specified buffer …\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn RAII guard returned by the <code>MutexGuard::map</code> and …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…\nA future which resolves when the target mutex has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nAcquire the lock asynchronously.\nAcquire the lock asynchronously.\nReturns a locked view over a portion of the locked data.\nReturns a locked view over a portion of the locked data.\nCreates a new futures-aware mutex.\nAttempt to acquire the lock immediately.\nAttempt to acquire the lock immediately.\nA type with no possible values.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nA stream of values produced asynchronously.\nA convenience for futures that return <code>Result</code> values that …\nA convenience for streams that return <code>Result</code> values that …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAsynchronous values.\nAttempts to resolve the future to a final value, …\nFlush any remaining output and close this sink, if …\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nFlush any remaining output from this sink.\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempts to prepare the <code>Sink</code> to receive a value.\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nAttempt to write bytes from <code>bufs</code> into the object using …\nAsynchronous sinks.\nReturns the bounds on the remaining length of the stream.\nReturns the bounds on the remaining length of the stream.\nBegin the process of sending a value to the sink. Each …\nAsynchronous streams.\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>always_ready</code> function.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA future represents an asynchronous computation obtained …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nCreates a future that is always immediately ready with a …\nExecutes another future after this one resolves …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nMaps this future’s <code>Error</code> to a new error type using the …\nFlatten the execution of this future when the output of …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFuse a future such that <code>poll</code> will never again be called …\nDo something with the output of a future before passing it …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConvert an owned instance into a (conceptually owned) fat …\nConvert this future into a single element stream.\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMaps this future’s error value to a different value.\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nWraps a future into a <code>MaybeDone</code>\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nEvaluates and consumes the future, returning the resulting …\nCreate a future that is immediately ready with a success …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nCreates a future that is immediately ready with a value.\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nCreate a cloneable handle to this future where all handles …\nChain on a computation for when a future finished, passing …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nCreates a future which represents either a collection of …\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nWaits for either one of two differently-typed futures to …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which contains no elements.\nCreates a stream which gives the current iteration count …\nWraps the current stream in a new stream which converts …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a stream such that <code>poll_next</code> will never again be …\nAn unbounded set of futures.\nDo something with each item of this stream, afterwards …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConverts this stream into a future of …\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nWrap this stream in an <code>Either</code> stream, making it the …\nMaps this stream’s items to a different type, returning …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nCreates a future that resolves to the next item in the …\nCreates a stream of a single element.\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAn adaptor for chunking up ready items of the stream …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner sinks.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGet a pinned mutable reference to the inner sinks.\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGet a shared reference to the inner sinks.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sinks.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nClears the set, removing all futures.\nClears the set, removing all streams.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which contains no elements.\nCreates a stream which gives the current iteration count …\nWraps the current stream in a new stream which converts …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a stream such that <code>poll_next</code> will never again be …\nAn unbounded set of futures.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying stream that …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying iterator …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying stream that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying iterator that this …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying streams that this …\nDo something with each item of this stream, afterwards …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConverts this stream into a future of …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying stream.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this stream, returning the underlying iterator.\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying streams.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nReturns whether the underlying stream has finished or not.\nReturns <code>true</code> if the queue contains no futures\nReturns <code>true</code> if the set contains no futures.\nReturns <code>true</code> if the set contains no streams\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nWhether the stream was stopped yet by the stopping future …\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows inspecting each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the number of futures contained in the queue.\nReturns the number of futures contained in the set.\nReturns the number of streams contained in the set.\nMaps this stream’s items to a different type, returning …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nConstructs a new, empty <code>FuturesOrdered</code>\nConstructs a new, empty <code>FuturesUnordered</code>.\nConstructs a new, empty <code>SelectAll</code>\nCreates a future that resolves to the next item in the …\nCreates a future which will consume and return the next …\nCreates a future which will consume and return the next …\nCreates a stream of a single element.\nChain on a computation for when an error happens, passing …\nProduces a future which retrieves a reference to the next …\nProduces a future which retrieves a mutable reference to …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nPeek retrieves a reference to the next item in the stream.\nPeek retrieves a mutable reference to the next item in the …\nPush a future into the queue.\nPush a future into the set.\nPush a stream into the set.\nPushes a future to the back of the queue.\nPushes a future to the front of the queue.\nAn adaptor for chunking up ready items of the stream …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nExtract the stopping future out of the combinator. The …\nOnce the stopping future is resolved, this method can be …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nToggle the value and return the old one.\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a list of streams into a <code>Stream</code> of results from …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nThe context of an asynchronous task.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nA <code>Waker</code> that is only valid for a given lifetime.\nAssigns a clone of <code>source</code> to <code>self</code>, unless …\nGets the <code>data</code> pointer used to create this <code>Waker</code>.\nDrops the future represented by the given fat pointer.\nReturns a reference to the extension data for the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>Waker</code>.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nReturns the argument unchanged.\nCreates a new <code>Waker</code> from <code>RawWaker</code>.\nCreates a new <code>Context</code> from a <code>&amp;Waker</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an owned instance into a (conceptually owned) fat …\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nCheck whether spawning failed to the executor being shut …\nReturns a reference to the <code>LocalWaker</code> for the current task.\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nCreate an <code>AtomicWaker</code>.\nCreate a new <code>WakerRef</code> from a <code>Waker</code> reference.\nCreates a new <code>Waker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,\nCreate a new <code>WakerRef</code> from a <code>Waker</code> that must not be …\nReturns a reference to a <code>Waker</code> that does nothing when used.\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nRegisters the waker to be notified on calls to <code>wake</code>.\nSpawning failed because the executor has been shut down.\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nReturns the last <code>Waker</code> passed to <code>register</code>, so that the …\nGets the <code>vtable</code> pointer used to create this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nCalls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.\nWakes up the task associated with this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nWakes up the task associated with this <code>Waker</code> without …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nReturns a reference to the <code>Waker</code> for the current task.\nCreates a reference to a <code>Waker</code> from a reference to …\nReturns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …")