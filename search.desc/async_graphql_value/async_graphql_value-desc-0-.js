searchState.loadedDescShard("async_graphql_value", 0, "Value for GraphQL. Used in the <code>async-graphql</code> crate.\nA binary.\nA binary.\nA boolean.\nA boolean.\nA resolved GraphQL value, for example <code>1</code> or <code>&quot;Hello World!&quot;</code>.\nThis type represents errors that can occur when …\nAn enum. These are typically in <code>SCREAMING_SNAKE_CASE</code>.\nAn enum. These are typically in <code>SCREAMING_SNAKE_CASE</code>.\nExtensions of a query.\nA list of values.\nA list of values.\nA GraphQL name.\n<code>null</code>.\n<code>null</code>.\nRepresents a JSON number, whether integer or floating …\nA number.\nA number.\nAn object. This is a map of keys to values.\nAn object. This is a map of keys to values.\nThis type represents errors that can occur when …\nA string.\nA string.\nA GraphQL value, for example <code>1</code>, <code>$name</code> or <code>&quot;Hello World!&quot;</code>. …\nA variable, without the <code>$</code>.\nVariables of a query.\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Number</code> is an integer, represent it as i128 if …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nGet the name as a string.\nIf the <code>Number</code> is an integer, represent it as u128 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …\nConverts an <code>i128</code> to a <code>Number</code>. Numbers smaller than …\nGet the values from a JSON value.\nAttempt to convert JSON into a value. This is equivalent …\nAttempt to convert JSON into a value. This is equivalent …\nConverts a <code>u128</code> to a <code>Number</code>. Numbers greater than u64::MAX …\nInterpret a <code>ConstValue</code> as an instance of type <code>T</code>.\nGet the variables from a GraphQL value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert the value into a const value.\nAttempt to convert the value into a const value by using a …\nAttempt to convert the value into JSON. This is equivalent …\nAttempt to convert the value into JSON. This is equivalent …\nGet the variables as a GraphQL value.\nConvert this <code>ConstValue</code> into a <code>Value</code>.\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Number</code> is an integer between zero and …\nCreate a new name.\nConvert a <code>T</code> into <code>ConstValue</code> which is an enum that can …\nConstruct a <code>ConstValue</code>.")