searchState.loadedDescShard("arc_swap", 0, "Making <code>Arc</code> itself atomic\nAn atomic storage for <code>Arc</code>.\nAn atomic storage for a reference counted smart pointer …\nAn atomic storage for <code>Option&lt;Arc&gt;</code>.\nA trait describing things that can be turned into a raw …\nThe base type the pointer points to.\nA temporary storage of the pointer.\nA trait describing smart reference counted pointers.\nAbstracting over accessing parts of stored value.\nProvides a view into the smart pointer as a raw pointer.\nConverts the value into a raw pointer.\nCaching handle into the ArcSwapAny.\nSwaps the stored Arc if it equals to <code>current</code>.\nA const-fn equivalent of empty.\nA const-fn equivalent of empty.\nDecrements the reference count by one.\nDecrements the reference count by one.\nAdditional documentation.\nA convenience constructor for an empty value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a guard for a given value <code>inner</code>.\nA convenience constructor directly from the pointed-to …\nA convenience constructor directly from a pointed-to value.\nConverts a raw pointer back into the smart pointer, …\nIncrements the reference count by one.\nIncrements the reference count by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts it into the held value.\nExtracts the value inside.\nConverts the smart pointer into a raw pointer, without …\nProvides a temporary borrow of the object inside.\nLoads the value.\nProvides an access to an up to date projection of the …\nConstructs a new storage.\nRead-Copy-Update of the pointer inside.\nReplaces the value inside this instance.\nStrategies for protecting the reference counts.\nExchanges the value inside this instance.\nConstructs a new storage while customizing the protection …\nAbstracts over ways code can get access to a value of type …\nDynAccess to Access wrapper.\nAccess to an constant.\nAn object-safe version of the <code>Access</code> trait.\nA guard object containing the value and keeping it alive.\nAn adaptor to provide access to a part of larger structure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe loading method.\nThe equivalent of <code>Access::load</code>.\nCreates a new instance.\nGeneralization of caches providing access to <code>T</code>.\nCaching handle for <code>ArcSwapAny</code>.\nAn implementation of a cache with a projection into the …\nGives access to the (possibly shared) cached <code>ArcSwapAny</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the value from cache.\nLoads the currently held value.\nTurns this cache into a cache with a projection inside the …\nCreates a new caching handle.\nInternal details.\nLimitations and common pitfalls.\nCommon use patterns\nPerformance characteristics.\nAn extension of the <code>Strategy</code>, allowing for compare and …\nThe default strategy.\nA strategy for protecting the reference counted pointer <code>T</code>.")