searchState.loadedDescShard("base16ct", 0, "Pure Rust implementation of Base16 (RFC 4648, a.k.a. hex).\nContains the error value\nError type\n<code>core::fmt</code> presenter for binary data encoded as hexadecimal …\nInvalid encoding of provided Base16 string.\nInsufficient output buffer length.\nContains the success value\nResult type with the <code>base16ct</code> crate’s <code>Error</code> type.\nCompute decoded length of the given hex-encoded input.\nGet the length of Base16 (hex) produced by encoding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction for decoding and encoding lower Base16 (hex)\nFunction for decoding mixed Base16 (hex)\nFunction for decoding and encoding upper Base16 (hex)\nDecode a lower Base16 (hex) string into the provided …\nDecode a lower Base16 (hex) string into a byte vector.\nEncode the input byte slice as lower Base16.\nEncode input byte slice into a <code>&amp;str</code> containing lower …\nEncode input byte slice into a <code>String</code> containing lower …\nDecode a mixed Base16 (hex) string into the provided …\nDecode a mixed Base16 (hex) string into a byte vector.\nDecode an upper Base16 (hex) string into the provided …\nDecode an upper Base16 (hex) string into a byte vector.\nEncode the input byte slice as upper Base16.\nEncode input byte slice into a <code>&amp;str</code> containing upper …\nEncode input byte slice into a <code>String</code> containing upper …")