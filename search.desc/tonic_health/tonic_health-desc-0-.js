searchState.loadedDescShard("tonic_health", 0, "A <code>tonic</code> based gRPC healthcheck implementation.\nThe service is currently down and not serving requests.\nThe service is currently up and serving requests.\nAn enumeration of values representing gRPC service health.\nUnknown status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerated protobuf types from the <code>grpc.health.v1</code> package.\nContains all healthcheck based server utilities.\nByte encoded FILE_DESCRIPTOR_SET.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNested message and enum types in <code>HealthCheckResponse</code>.\nGenerated client implementations.\nGenerated server implementations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets <code>status</code> to the provided enum value.\nReturns the enum value of <code>status</code>, or the default if the …\nUsed only by the Watch method.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ServingStatus</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ServingStatus</code>.\nEnable decompressing responses.\nIf the requested service is unknown, the call will fail …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nPerforms a watch for the serving status of the requested …\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nServer streaming response type for the Watch method.\nEnable decompressing requests with the given encoding.\nIf the requested service is unknown, the call will fail …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nPerforms a watch for the serving status of the requested …\nA handle providing methods to update the health status of …\nA service providing implementations of gRPC health …\nA watch stream for the health service.\nClear the status of the given service.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a HealthService, carrying across the statuses from …\nCreates a <code>HealthReporter</code> and a linked <code>HealthServer</code> pair. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new HealthReporter with an initial service (named …\nSets the status of the service implemented by <code>S</code> to …\nSets the status of the service with <code>service_name</code> to <code>status</code>…\nSets the status of the service implemented by <code>S</code> to <code>Serving</code>…")