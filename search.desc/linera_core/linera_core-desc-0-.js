searchState.loadedDescShard("linera_core", 0, "This module defines the core Linera protocol.\nThe maximum number of entries in a <code>received_log</code> included …\nThe default amount of time we wait for additional …\nError type for the operations on a local node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn extension trait to allow determining at compile time …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrapper for <code>AbortHandle</code> that aborts when its dropped.\nAutomatically accept all incoming messages. Reject them …\nA builder that creates <code>ChainClient</code>s which share the cache …\nOnly listen to blocks which contain events from those …\nListen to everything.\nDon’t include any messages in blocks, and don’t make …\nDefines how we listen to a chain:\nPolicies for automatically handling incoming messages.\nA pending proposed block, together with its published …\nAutomatically reject tracked messages, ignore or skip …\nObtains the committee for the latest epoch on the admin …\nCreates a compressed Contract, Service and bytecode.\nCreates a new <code>ChainClient</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnsures that the client has the <code>ChainDescription</code> blob …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Client</code> with a new cache and notifiers.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThis module manages communication with validator nodes, …\nReturns a reference to the <code>Signer</code> of the client.\nReturns the storage client used by this client’s local …\nDownloads and processes any certificates we are missing …\nAdds a chain to the set of chains tracked by the local …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nClient to operate a chain by interacting with validators …\nError type for <code>ChainClient</code>.\nThe state of our interaction with a particular chain: how …\nObtains the committee for the latest epoch on the admin …\nGets the ID of the admin chain.\nThe delay when downloading a blob, after which we try a …\nBurns tokens (transfer to a special address).\nThe delay when downloading a batch of certificates, after …\nMaximum number of certificates that we download at a time …\nGets the ID of the associated chain.\nObtains the basic <code>ChainInfo</code> data for the local chain.\nObtains the basic <code>ChainInfo</code> data for the local chain, with …\nObtains a <code>ChainStateView</code> for this client’s chain.\nChanges the application permissions configuration on this …\nChanges the ownership of this chain. Fails if it would …\nClaims money in a remote chain.\nClears the information on any operation that previously …\nCloses the chain (and loses everything in it!!). Returns …\nBroadcasts certified blocks to validators.\nCreates an application by instantiating some bytecode.\nCreates an application by instantiating some bytecode.\nWhether to block on cross-chain message delivery.\nReturns chain IDs that this chain subscribes to.\nReturns the indices and events from the storage\nExecutes an operation.\nExecutes a list of operations.\nAttempts to download new received certificates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the chain’s description. Fetches it from the …\nAn additional delay, after reaching a quorum, to wait for …\nObtains the identity of the current owner of the chain.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this chain is tracked by the client, i.e. …\nSpawns a task that listens to notifications about the …\nReads the local balance of the chain account.\nObtains the committee for the current epoch of the local …\nReads the local balance of a user account.\nMaximum number of tasks that can be joined concurrently …\nMaximum number of pending message bundles processed at a …\nThe policy for automatically handling incoming messages.\nOpens a new chain with a derived UID.\nGets a reference to the per-<code>ChainClient</code> options.\nGets a mutable reference to the per-<code>ChainClient</code> options.\nGets the next pending block.\nGets the currently preferred owner for signing the blocks.\nPrepares the chain for the next operation, i.e. makes sure …\nSynchronizes the chain with the validators and creates …\nCreates blocks without any operations to process all …\nProcesses the last pending block\nPublishes some data blob.\nPublishes some data blobs.\nPublishes some module.\nPublishes some module.\nQueries an application.\nObtains the local balance of the chain account after …\nObtains the local balance of an account after staging the …\nQueries a system application.\nQueries a user application.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the hashed certificate values in descending order …\nVerify if a data blob is readable from storage.\nRequests a leader timeout vote from all validators. If a …\nHandles any cross-chain requests for any pending outgoing …\nDeprecates all the configurations of voting rights up to …\nRotates the key of the chain.\nMaximum number of sender certificates we try to download …\nSets the new, preferred owner for signing the blocks.\nAdds another owner to the chain, and turns existing super …\nGets a reference to the client’s signer instance.\nCreates a new committee and starts using it (admin chains …\nReturns the storage client used by this client’s local …\nSubscribes to notifications from this client’s chain.\nSubscribes to notifications from the specified chain.\nAttempts to update a validator with the local information.\nDownloads and processes any certificates we are missing …\nDownloads and processes any certificates we are missing …\nAttempts to synchronize chains that have sent us messages …\nGets a clone of the timing sender for benchmarking.\nSends money.\nTransfers ownership of the chain to a single super owner.\nSends tokens to a chain.\nSends money to a chain. Do not check balance. (This may …\n<code>ToString::to_string</code>, but without panic on OOM.\nUnsets the preferred owner for signing the blocks.\nAttempts to update all validators about the local chain.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nManages a pool of validator nodes with intelligent load …\nConfiguration for the <code>RequestsScheduler</code>.\nConfigurable weights for the scoring algorithm.\nSmoothing factor for Exponential Moving Averages (0 &lt; …\nMaximum number of entries in the cache\nTime-to-live for cached responses in milliseconds\nDownloads the blobs with the given IDs. This is done in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the alternative peers registered for an in-flight …\nReturns current performance metrics for all managed nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeight for latency metric (lower latency = higher score)\nWeight for load metric (lower load = higher score)\nMaximum expected latency in milliseconds for score …\nMaximum latency for an in-flight request before we stop …\nCreates a new <code>RequestsScheduler</code> with the provided …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWeight for success rate metric (higher success = higher …\nCreates a new <code>RequestsScheduler</code> with custom configuration.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA range of block heights as used in <code>ChainInfoQuery</code>.\nRequest for downloading certificates by heights.\nRequest information about a chain.\nThe response to an <code>ChainInfoQuery</code>\nThe outcome of trying to commit a list of operations to …\nThe operations were committed successfully.\nAcknowledge the height of the highest confirmed blocks …\nAn internal request between chains within a validator.\nInformation about shard allocation for a chain.\nCommunicate a number of confirmed blocks from the sender …\nWe are not the round leader and cannot do anything. Try …\nThe last block hash, if any.\nThe current balance.\nThe chain ID.\nThe chain ID.\nThe current number of received certificates (useful for …\nThe chain description.\nThe number identifying the current configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the cross-chain request has messages lower …\nReturns the highest block height in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional limit on the number of elements.\nThe state of the chain authentication.\nCreates a range starting at the specified block height and …\nThe height after the latest block in the chain.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nQuery the current committees.\nInclude a vote to switch to fallback mode, if appropriate.\nInclude a timeout vote for the specified round, if …\nQuery values from the chain manager, not just votes.\nRequest the balance of a given <code>AccountOwner</code>.\nQuery the received messages that are waiting to be picked …\nQuery new certificate sender chain IDs and block heights …\nQuery for certificate hashes at block heights.\nQuery a range of certificate hashes sent from the chain.\nThe current committees.\nThe requested owner balance, if any.\nThe received messages that are waiting be picked in the …\nThe response to …\nThe response to <code>request_sent_certificate_hashes_in_range</code>\nReturns the <code>RoundTimeout</code> value for the current round, or …\nThe shard ID that will process this chain.\nSigns the <code>ChainInfo</code> stored inside this <code>ChainInfoResponse</code> …\nCreates a range containing only the single specified block …\nStarting point\nThe hash of the current execution state.\nWhere to send the cross-chain request.\nOptionally test that the block height is the one expected.\nThe earliest possible timestamp for the next block.\nThe total number of shards in the validator.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nAn owned permission to abort a spawned task, without …\nAn extension trait for the <code>JoinSet</code> type.\nA handle to a task spawned with <code>JoinSetExt</code>.\nAborts the task.\nAbort the task associated with the handle.\nAwaits all tasks spawned in this <code>JoinSet</code>.\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the task associated with this <code>AbortHandle</code> has …\nReturns <code>true</code> if the task is still running.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReaps tasks that have finished.\nSpawns a <code>future</code> task on this <code>JoinSet</code> using <code>JoinSet::spawn</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWhether to wait for the delivery of outgoing cross-chain …\nError type for node queries.\nA pinned <code>Stream</code> of Notifications.\nHow to communicate with a validator node.\nTurn an address into a validator node.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nReturns the certificate that last used the blob.\nDownloads a blob. Returns an error if the validator does …\nRequests a batch of certificates from the validator.\nRequests a batch of certificates from a specific chain by …\nDownloads a blob that belongs to a pending proposal or the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the network’s description.\nGets shard information for a specific chain.\nGets the version info for this validator node.\nProposes a new block.\nHandles information queries for this chain.\nProcesses a confirmed certificate.\nProcesses a certificate without a value.\nHandles a blob that belongs to a pending proposal or …\nProcesses a timeout certificate.\nProcesses a validated certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the missing <code>Blob</code>s by their IDs.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nSubscribes to receiving notifications for a collection of …\n<code>ToString::to_string</code>, but without panic on OOM.\nUploads the blobs to the validator.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>Notifier</code> holds references to clients waiting to receive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNotifies all the clients waiting for a notification from a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates a subscription given a collection of chain IDs and …\nCreates a subscription given a collection of chain IDs and …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nCreates the root chain with the given <code>index</code>, and returns a …\nObtains the basic <code>ChainInfo</code> data for the local validator …\nTries to find a (confirmation) certificate for the given …\nTries to find a (confirmation) certificate for the given …\nPanics if any validator has a nonempty outbox for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ServiceStorage</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the hashed certificate values in descending order …\nCreates a <code>RocksDbStorageBuilder</code> that uses the specified …\nCreates a <code>MemoryStorageBuilder</code> that uses the specified …\nCreates a <code>ServiceStorage</code> with the given Wasm runtime.\nCreates a <code>DynamoDbStorageBuilder</code> that uses the specified …\nCreates a <code>ScyllaDbStorageBuilder</code> that uses the specified …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nInstruct the networking layer to send cross-chain requests …\nNotification that a chain has a new certified block or a …\nReason for the notification.\nError type for worker operations.\nState of a worker in a validator or a local node.\nReturns a read-only view of the <code>ChainStateView</code> of a chain …\nThe cross-chain requests\nReturns the inner <code>ExecutionError</code> in this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the next block height to receive from an inbox.\nGets locking blobs for specific blob IDs. Returns <code>Ok(None)</code> …\nGets preprocessed block hashes in a given height range.\nProcesses a confirmed block certificate.\nProcesses a certificate, e.g. to extend a chain with a …\nProcesses a timeout certificate\nProcesses a validated block certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this error is caused by an issue in the …\nThe push notifications.\nGets a reference to the validator’s <code>ValidatorPublicKey</code>.\nExecutes a <code>Query</code> for an application’s state on a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReturns a stored <code>ConfirmedBlockCertificate</code> for a chain’s …\nReads a range from the confirmed log.\nTries to execute a block proposal without any verification …\nReturns the storage client so that it can be manipulated …\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdates the received certificate trackers to at least the …\nReturns an instance with the specified maximum size for …\nReturns an instance with the specified chain worker TTL.\nReturns an instance with the specified grace period.\nReturns an instance with the specified sender chain worker …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")