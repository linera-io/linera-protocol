searchState.loadedDescShard("radium", 0, "<code>radium</code> provides a series of helpers for a uniform API over …\nA maybe-atomic shared mutable fundamental type <code>T</code>.\nStores a value into this object if the currently-stored …\nStores a value into this object if the currently-stored …\nStores a value into this object if the currently-stored …\nIf the underlying value is atomic, calls <code>fence</code> with the …\nAdds <code>value</code> to the currently-stored value, wrapping on …\nPerforms a bitwise “and” on the currently-stored value …\nPerforms a bitwise “nand” on the currently-stored …\nPerforms a bitwise “or” on the currently-stored value …\nSubtracts <code>value</code> from the currently-stored value, wrapping …\nFetches the value, and applies a function to it that …\nPerforms a bitwise “xor” on the currently-stored value …\nReturns a mutable reference to the underlying value.\nConditional compilation based on the presence of atomic …\nConsumes the wrapper and returns the contained value.\nLoad a value from this object.\nMarker traits used by <code>Radium</code>.\nCreates a new value of this type.\nStore a value in this object.\nSwap with the value stored in this object.\nBest-effort atomic types\nTypes supporting maybe-atomic bitwise operations.\nTypes supporting maybe-atomic arithmetic operations.\nBest-effort atomic <code>bool</code> type.\nBest-effort atomic <code>i16</code> type.\nBest-effort atomic <code>i32</code> type.\nBest-effort atomic <code>i64</code> type.\nBest-effort atomic <code>i8</code> type.\nBest-effort atomic <code>isize</code> type.\nBest-effort atomic pointer type.\nBest-effort atomic <code>u16</code> type.\nBest-effort atomic <code>u32</code> type.\nBest-effort atomic <code>u64</code> type.\nBest-effort atomic <code>u8</code> type.\nBest-effort atomic <code>usize</code> type.")