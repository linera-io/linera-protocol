searchState.loadedDescShard("spki", 0, "RustCrypto: X.509 Subject Public Key Info (SPKI)\n<code>AlgorithmIdentifier</code> for this structure.\nX.509 <code>AlgorithmIdentifier</code> as defined in RFC 5280 Section …\n<code>AlgorithmIdentifier</code> reference which has <code>Any</code> parameters.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\n<code>AlgorithmIdentifier</code> with <code>ObjectIdentifier</code> parameters.\nAlgorithm parameters are missing.\nASN.1 DER-related errors.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a SPKI document.\nMaximum size of a BER/DER-encoded OID in bytes.\nObject identifier (OID).\nUnknown algorithm OID.\nContains the success value\nAlgorithm parameters.\nAlgorithm parameters.\nResult type with <code>spki</code> crate’s <code>Error</code> type.\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nReturns the <code>BitString</code> encoding of the signature.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>Any</code> algorithm parameters, and …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\n<code>AlgorithmIdentifier</code> for this structure.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nGet the ASN.1 DER-encoded bytes of this document.\nAssert the <code>algorithm</code> OID is an expected value.\nAssert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.\nAssert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.\nAssert <code>parameters</code> is an OID and has the expected value.\nAssert <code>parameters</code> is an OID and has the expected value.\nTry to decode the inner ASN.1 DER message contained in this\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode the provided type as ASN.1 DER, storing the …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nCreate a <code>SubjectPublicKeyInfoOwned</code> from any object that …\nCreate a <code>SubjectPublicKeyInfoOwned</code> from any object that …\nDecode ASN.1 DER document from PEM.\nDeserialize object from ASN.1 DER-encoded …\nDeserialize PEM-encoded <code>SubjectPublicKeyInfo</code>.\nDeserialize PEM-encoded <code>SubjectPublicKeyInfo</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>SecretDocument</code>.\nConvert to an ASN.1 DER-encoded byte vector.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nGet the length of the encoded ASN.1 DER in bytes.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nConvert to a pair of <code>ObjectIdentifier</code>s.\nConvert to a pair of <code>ObjectIdentifier</code>s.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nGet the <code>parameters</code> field as an <code>AnyRef</code>.\nGet the <code>parameters</code> field as an <code>AnyRef</code>.\nGet the <code>parameters</code> field as an <code>ObjectIdentifier</code>.\nGet the <code>parameters</code> field as an <code>ObjectIdentifier</code>.\nGet the parent OID of this one (if applicable).\nPush an additional arc onto this OID, returning the child …\nRead ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from a PEM-encoded file on the …\nLoad public key object from a PEM-encoded file on the …\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nPublic key data\nPublic key data\nPublic key data\n<code>BitString</code> encoding for this signature.\nEncode ASN.1 DER document as a PEM string with …\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nSerialize this public key as PEM-encoded SPKI with the …\nSerialize this public key as PEM-encoded SPKI with the …\nReturn an ASN.1 DER-encoded byte vector.\nWrite ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nUnrecognized OID value found in e.g. a SPKI …")