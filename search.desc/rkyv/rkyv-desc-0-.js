searchState.loadedDescShard("rkyv", 0, "rkyv\nA type that can be used without deserializing.\nDerives <code>Archive</code> for the labeled type.\nAn archived type with associated metadata for its relative …\nA counterpart of <code>Archive</code> that’s suitable for unsized …\nAlias for the archived version of some <code>Archive</code> type.\nThe archived representation of this type.\nThe archived counterpart of this type. Unlike <code>Archive</code>, it …\nAlias for the archived metadata for some <code>ArchiveUnsized</code> …\nThe archived version of the pointer metadata for this type.\nA type that can check whether a pointer points to a valid …\nDerives <code>CheckBytes</code> for the labeled type.\nConverts a type back from its archived form.\nDerives <code>Deserialize</code> for the labeled type.\nA counterpart of <code>Deserialize</code> that’s suitable for unsized …\nThe error that may result from checking the type.\nThe error produced by any failing methods.\nA type that can produce an error.\nThe native type that <code>isize</code> is converted to for archiving.\nThe native type that <code>usize</code> is converted to for archiving.\nA fallible type that cannot produce errors.\nAlias for the metadata resolver for some <code>ArchiveUnsized</code> …\nThe resolver for the metadata of this type.\nThe default raw relative pointer.\nThe default relative pointer.\nAlias for the resolver for some <code>Archive</code> type.\nThe resolver for this type. It must contain all the …\nConverts a type to its archived form.\nDerives <code>Serialize</code> for the labeled type.\nA counterpart of <code>Serialize</code> that’s suitable for unsized …\nAn archived version of <code>Box</code>.\nChecks whether the given pointer points to a valid value …\nArchived versions of standard library containers.\nDeserialization traits, deserializers, and adapters.\nDeserializes using the given deserializer\nDeserializes the metadata for the given type.\nDeserializes a reference to the given value.\nArchived versions of FFI types.\nReturns the argument unchanged.\nReturns the unarchived value of the given archived …\nCalls <code>U::from(self)</code>.\nArchived versions of network types.\nManually niched type replacements.\nArchived versions of <code>ops</code> types.\nAn archived version of <code>Option</code>.\nReturns a tuple of <code>(field_pos, field_out)</code>, where <code>field_pos</code> …\nConverts some archived metadata to the pointer metadata …\nArchived versions of shared pointers.\nRelative pointer implementations and options.\nCreates the archived version of this value at the given …\nCreates the archived version of the metadata for this …\nResolves a relative pointer to this value with the given …\nAn archived version of <code>Result</code>.\nSerialization traits, serializers, and adapters.\nWrites the dependencies for the object and returns a …\nSerializes the metadata for the given type.\nWrites the object and returns the position of the archived …\nArchived versions of string types.\nArchived versions of <code>time</code> types.\nReturns the archived value of the given archived primitive.\nUtilities for common archive operations.\nValidation implementations and helper types.\nAn archived version of <code>Vec</code>.\nWrapper type support and commonly used wrappers.\nAn archived <code>Box</code>.\nThe resolver for <code>Box</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a a new <code>BoxResolver&lt;M&gt;</code> from raw parts. Note that <code>M</code> …\nReturns a reference to the value of this archived box.\nReturns a pinned mutable reference to the value of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves an archived box from a <code>BoxResolver</code> which contains …\nResolves an archived box from the given value and …\nSerializes an archived <code>Box</code> from a given slice by directly …\nSerializes an archived box from the given value and …\n<code>Archive</code> implementation for B-tree maps.\n<code>Archive</code> implementation for B-tree sets.\nA helper type that archives index data for hashed …\nArchived hash map implementation.\nArchived hash set implementation.\nArchived index map implementation.\nArchived index set implementation.\nUtilities for archived collections.\nAn archived <code>BTreeMap</code>.\nThe resolver for an <code>ArchivedBTreeMap</code>.\nAn iterator over the key-value pairs of an archived B-tree …\nAn iterator over the keys of an archived B-tree map.\nThe minimum number of entries to place in an inner node.\nThe minimum number of entries to place in a leaf node.\nAn iterator over the values of an archived B-tree map.\nReturns <code>true</code> if the map contains a value for the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nGets an iterator over the entries of the map, sorted by …\nGets an iterator over the keys of the map, in sorted order.\nReturns the number of items in the archived B-tree map.\nResolves a B-tree map from its length.\nSerializes an ordered iterator of key-value pairs as a …\nValidation implementation for BTreeMap.\nGets an iterator over the values of the map, in order by …\nErrors that can occur while checking an archived B-tree.\nAn error occurred while checking the entries of an inner …\nAn error occurred while checking the entries of a leaf node\nAn context error occurred\nThe keys for an inner node were incorrect\nThe leaf level of the B-tree contained an inner node\nThe leaves of the B-tree were not all located at the same …\nThe size of an inner node was invalid\nAn error occurred while checking the entry’s key.\nAn error occurred while checking the bytes of a key\nThe forward pointer of the last leaf did not have an …\nAn error that can occur while checking a leaf node entry.\nThe number of entries the B-tree claims to have does not …\nThe child of an inner node had a first key that did not …\nThe number of entries in the inner node is less than the …\nThe number of entries in the leaf node is less than the …\nA leaf node is not linked after a node despite being the …\nA leaf node with lesser keys is linked after a leaf node …\nA leaf node did not contain entries in sorted order\nAn error occurred while checking the entry’s value.\nAn error occurred while checking the bytes of a value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe depth of the invalid leaf node\nThe actual number of entries in the B-tree\nThe depth of the first leaf node in the tree\nThe number of entries the B-tree claims to have\nThe index of the inner node entry\nThe index of the leaf node entry\nThe inner error that occurred\nThe inner error that occurred\nAn archived <code>BTreeSet</code>. This is a wrapper around a B-tree …\nThe resolver for archived B-tree sets.\nReturns <code>true</code> if the set contains a value for the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value int he set, if any, that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the set contains no elements.\nGets an iterator over the keys of the set, in sorted order.\nReturns the number of items in the archived B-tree set.\nResolves a B-tree set from its length.\nSerializes an ordered iterator of key-value pairs as a …\nAn archived hash index.\nThe hash builder for archived hash indexes. The streaming …\nThe resolver for an archived hash index.\nBuilds and serializes a hash index from an iterator of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the hasher for this hash index. The hasher for all …\nReturns the index where a key may be located in the hash …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no items in the hash index.\nGets the number of items in the hash index.\nCreate a new <code>SeaHasher</code> with default state.\nResolves an archived hash index from a given length and …\nValidation implementation for ArchivedHashIndex.\nConstruct a new <code>SeaHasher</code> given some seed.\nA bounds error occurred\nErrors that can occur while checking an archived hash …\nA displacement value was invalid\nAn error occurred while checking the layouts of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index of the entry with an invalid displacement\nThe value of the entry at the invalid location\nAn archived <code>HashMap</code>.\nThe resolver for archived hash maps.\nAn iterator over the key-value pairs of a hash map.\nAn iterator over the mutable key-value pairs of a hash map.\nAn iterator over the keys of a hash map.\nAn iterator over the values of a hash map.\nAn iterator over the mutable values of a hash map.\nReturns whether a key is present in the hash map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value associated with the given key.\nFinds the key-value entry for a key.\nFinds the mutable key-value entry for a key.\nGets the mutable value associated with the given key.\nGets the value associated with the given key, and matching …\nGets the hasher for this hashmap. The hasher for all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nGets an iterator over the key-value entries in the hash …\nGets an iterator over the mutable key-value entries in the …\nGets an iterator over the keys in the hash map.\nGets the number of items in the hash map.\nResolves an archived hash map from a given length and …\nSerializes an iterator of key-value pairs as a hash map.\nValidation implementation for ArchiveHashMap.\nGets an iterator over the values in the hash map.\nGets an iterator over the mutable values in the hash map.\nAn error occurred while checking the entries\nA bounds error occurred\nAn error occurred while checking the hash index\nErrors that can occur while checking an archived hash map.\nA key is not located at the correct position\nAn error occurred while checking the layouts of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index of the key when iterating\nAn archived <code>HashSet</code>. This is a wrapper around a hash map …\nThe resolver for archived hash sets.\nReturns whether the given key is in the hash set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the key corresponding to the given key in the hash …\nGets the hasher for the underlying hash map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no items in the hash set.\nGets an iterator over the keys of the underlying hash map.\nGets the number of items in the hash set.\nResolves an archived hash set from the given length and …\nSerializes an iterator of keys as a hash set.\nAn archived <code>IndexMap</code>.\nThe resolver for an <code>IndexMap</code>.\nAn iterator over the key-value pairs of an index map.\nAn iterator over the keys of an index map.\nAn iterator over the values of an index map.\nReturns whether a key is present in the hash map.\nReturns the first key-value pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value associated with the given key.\nGets the index, key, and value associated with the given …\nGets a key-value pair by index.\nGets the index of a key if it exists in the map.\nGets the key-value pair associated with the given key.\nGets the hasher for this index map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nReturns an iterator over the key-value pairs of the map in …\nReturns an iterator over the keys of the map in order\nReturns the last key-value pair.\nGets the number of items in the index map.\nResolves an archived index map from a given length and …\nSerializes an iterator of key-value pairs as an index map.\nValidation implementation for ArchivedIndexMap.\nReturns an iterator over the values of the map in order.\nAn error occurred while checking the entries\nA bounds error occurred\nAn error occurred while checking the hash index\nErrors that can occur while checking an archived index map.\nA key is not located at the correct position\nAn error occurred while checking the layouts of …\nA pivot indexes outside of the entries array\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index of the pivot when iterating\nThe index of the key when iterating\nThe pivot value that was invalid\nAn archived <code>IndexSet</code>.\nThe resolver for <code>IndexSet</code>.\nReturns whether a key is present in the hash set.\nReturns the first key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value stored in the set, if any.\nReturns the item index and value stored in the set, if any.\nGets a key by index.\nReturns the index of a key if it exists in the set.\nGets the hasher for this index set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the index set contains no values.\nReturns an iterator over the keys of the index set in …\nReturns the last key.\nReturns the number of elements in the index set.\nResolves an archived index map from a given length and …\nSerializes an iterator of keys as an index set.\nA simple key-value pair.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe key of the pair.\nValidation implementation for utility types.\nThe value of the pair.\nErrors that can occur while checking an archived hash map …\nAn error occurred while checking the bytes of a key\nAn error occurred while checking the bytes of a value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA registry that tracks deserialized shared memory.\nA deserializable shared pointer type.\nAdds the data address of a deserialized shared pointer to …\nReturns the data address for this shared pointer.\nChecks whether the given reference has been deserialized …\nDeserializers that can be used standalone and provide …\nGets the data pointer of a previously-deserialized shared …\nA shared pointer was added multiple times\nAn adapter that adds shared deserialization support to a …\nAn error that can occur while deserializing shared …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps the given deserializer and adds shared memory …\nWraps the given deserializer and adds shared memory …\nAn archived <code>CString</code>.\nThe resolver for <code>CString</code>.\nReturns the contents of this CString as a slice of bytes.\nEquivalent to <code>as_bytes</code> except that the returned slice …\nExtracts a <code>CStr</code> slice containing the entire string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts a pinned mutable <code>CStr</code> slice containing the entire …\nResolves an archived C string from the given C string and …\nSerializes a C string.\nAn archived <code>IpAddr</code>.\nAn archived <code>Ipv4Addr</code>.\nAn archived <code>Ipv6Addr</code>.\nAn archived <code>SocketAddr</code>.\nAn archived <code>SocketAddrV4</code>.\nAn archived <code>SocketAddrV6</code>.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nReturns an <code>IpAddr</code> with the same value.\nReturns an <code>Ipv4Addr</code> with the same value.\nReturns an <code>Ipv6Addr</code> with the same value.\nReturns a <code>SocketAddr</code> with the same value.\nReturns a <code>SocketAddrV4</code> with the same value.\nReturns a <code>SocketAddrV6</code> with the same value.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns <code>true</code> if this is a broadcast address …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>ArchivedSocketAddr</code> …\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>ArchivedSocketAddr</code> …\nReturns <code>true</code> if the address is link-local (169.254.0.0/16).\nReturns <code>true</code> if this is a loopback address (127.0.0.0/8).\nReturns <code>true</code> if this is a loopback address (::1).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a multicast address (224.0.0.0/4).\nReturns <code>true</code> if this is a multicast address (ff00::/8).\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> for the special ‘unspecified’ address …\nReturns <code>true</code> for the special ‘unspecified’ address …\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\nConverts this address to an <code>IPv4</code> address. Returns <code>None</code> if …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nA niched archived <code>Option&lt;Box&lt;T&gt;&gt;</code> that uses less space.\nNiched archived <code>Option&lt;NonZero&gt;</code> integers that use less …\nA niched archived <code>Option&lt;Box&lt;T&gt;&gt;</code>.\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nThe <code>ArchivedOptionBox</code> was <code>None</code>\nThe resolver for <code>ArchivedOptionBox</code>.\nThe resolver for the <code>ArchivedBox</code>\nConverts from <code>&amp;ArchivedOptionBox&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nConverts to an <code>Option&lt;&amp;mut ArchivedBox&lt;T&gt;&gt;</code>.\nConverts from <code>Pin&lt;&amp;mut ArchivedOption&lt;T&gt;&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionBox&lt;T&gt;&gt;</code> to …\nConverts to an <code>Option&lt;&amp;ArchivedBox&lt;T&gt;&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the option box is a <code>None</code> value.\nReturns <code>true</code> if the option box is a <code>Some</code> value.\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nResolves an <code>ArchivedOptionBox&lt;T::Archived&gt;</code> from an …\nSerializes an <code>ArchivedOptionBox&lt;T::Archived&gt;</code> from an …\nA niched archived <code>Option&lt;NonZeroI128&gt;</code>\nA niched archived <code>Option&lt;NonZeroI16&gt;</code>\nA niched archived <code>Option&lt;NonZeroI32&gt;</code>\nA niched archived <code>Option&lt;NonZeroI64&gt;</code>\nA niched archived <code>Option&lt;NonZeroI8&gt;</code>\nA niched archived <code>Option&lt;NonZeroU128&gt;</code>\nA niched archived <code>Option&lt;NonZeroU16&gt;</code>\nA niched archived <code>Option&lt;NonZeroU32&gt;</code>\nA niched archived <code>Option&lt;NonZeroU64&gt;</code>\nA niched archived <code>Option&lt;NonZeroU8&gt;</code>\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroI8&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroI16&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroI32&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroI64&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroI128&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroU8&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroU16&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroU32&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroU64&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;mut Archived&lt;NonZeroU128&gt;&gt;</code>\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroI8&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroI16&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroI32&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroI64&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroI128&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroU8&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroU16&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroU32&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroU64&gt;</code> to …\nConverts from <code>Pin&lt;&amp;mut ArchivedOptionNonZeroU128&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroI8&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroI16&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroI32&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroI64&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroI128&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroU8&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroU16&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroU32&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroU64&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOptionNonZeroU128&gt;</code> to …\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroI8&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroI16&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroI32&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroI64&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroI128&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroU8&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroU16&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroU32&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroU64&gt;&gt;</code>\nConverts to an <code>Option&lt;&amp;Archived&lt;NonZeroU128&gt;&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts a value computed from <code>f</code> into the option if it is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nResolves an <code>ArchivedOptionNonZero</code> from an <code>Option&lt;NonZero&gt;</code>.\nAn archived <code>Range</code>.\nAn archived <code>RangeFrom</code>.\nAn archived <code>RangeInclusive</code>.\nAn archived <code>RangeTo</code>.\nAn archived <code>RangeToInclusive</code>.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nThe upper bound of the range (inclusive).\nThe upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nAn archived <code>Option</code>.\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nNo value\nSome value <code>T</code>\nConverts from <code>&amp;ArchivedOption&lt;T&gt;</code> to <code>Option&lt;&amp;T::Target&gt;</code>.\nConverts from <code>&amp;mut ArchivedOption&lt;T&gt;</code> to …\nConverts to an <code>Option&lt;&amp;mut T&gt;</code>.\nConverts from <code>Pin&lt;&amp;mut ArchivedOption&lt;T&gt;&gt;</code> to …\nConverts from <code>Pin&lt;&amp;ArchivedOption&lt;T&gt;&gt;</code> to <code>Option&lt;Pin&lt;&amp;T&gt;&gt;</code>.\nConverts to an <code>Option&lt;&amp;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMoves <code>val</code> into a new <code>Some</code>.\nReturns the argument unchanged.\nInserts <code>v</code> into the option if it is <code>None</code>, then returns a …\nInserts a value computed from <code>f</code> into the option if it is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nTransforms the <code>ArchivedOption&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, …\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Some</code> value or a provided default.\nReturns the contained <code>Some</code> value or computes it from a …\nAn archived <code>Rc</code>.\nAn archived <code>rc::Weak</code>.\nA null weak pointer\nThe weak pointer was null\nThe resolver for <code>Rc</code>.\nThe resolver for <code>rc::Weak</code>.\nA weak pointer to some shared pointer\nThe weak pointer was to some shared pointer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value of the <code>ArchivedRc</code>.\nGets the pinned mutable value of this <code>ArchivedRc</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves an archived <code>Rc</code> from a given reference.\nResolves an archived <code>Weak</code> from a given optional reference.\nSerializes an archived <code>Rc</code> from a given reference.\nSerializes an archived <code>Weak</code> from a given optional …\nAttempts to upgrade the weak pointer to an <code>ArchivedArc</code>.\nAttempts to upgrade a pinned mutable weak pointer.\nValidation implementations for shared pointers.\nAn error occurred while checking the underlying shared …\nA context error occurred\nThe weak pointer had an invalid tag\nAn error occurred while checking the bytes of a shared …\nErrors that can occur while checking archived shared …\nAn error occurred while checking the bytes of a shared …\nErrors that can occur while checking archived weak …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe offset is too far for the offset type of the relative …\nThe offset overflowed the range of <code>isize</code>\nA offset that can be used with <code>RawRelPtr</code>.\nAn error where the distance between two positions cannot …\nThe given <code>from</code> and <code>to</code> positions for the relative pointer …\nAn untyped pointer which resolves relative to its position …\nA raw relative pointer that uses an archived <code>i16</code> as the …\nA raw relative pointer that uses an archived <code>i32</code> as the …\nA raw relative pointer that uses an archived <code>i64</code> as the …\nA raw relative pointer that uses an archived <code>i8</code> as the …\nA raw relative pointer that uses an archived <code>u16</code> as the …\nA raw relative pointer that uses an archived <code>u32</code> as the …\nA raw relative pointer that uses an archived <code>u64</code> as the …\nA raw relative pointer that uses an archived <code>u8</code> as the …\nA pointer which resolves to relative to its position in …\nErrors that can occur while creating raw relative pointers.\nReturns an unsafe mutable pointer to the memory address …\nReturns an unsafe mutable pointer to the memory address …\nCalculates the memory address being pointed to by this …\nCalculates the memory address being pointed to by this …\nGets the base pointer for the relative pointer.\nGets the base pointer for the relative pointer.\nGets the mutable base pointer for the relative pointer.\nGets the mutable base pointer for the relative pointer.\nCreates a new offset between a <code>from</code> position and a <code>to</code> …\nCreates a new <code>RawRelPtr</code> in-place between the given <code>from</code> …\nCreates a relative pointer from one position to another.\nCreates a null relative pointer with default metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets whether the offset of the relative pointer is 0.\nGets whether the offset of the relative pointer is 0.\nChecks the bytes of the given raw relative pointer.\nChecks the bytes of the given relative pointer.\nGets the metadata of the relative pointer.\nGets the offset of the relative pointer from its base.\nGets the offset of the relative pointer from its base.\nCreates a relative pointer from one position to another.\nCreates a relative pointer from one position to another …\nCalculates the offset between two positions as an <code>isize</code>.\nGets the offset as an <code>isize</code>.\nAttempts to create a new <code>RawRelPtr</code> in-place between the …\nAttempts to create a relative pointer from one position to …\nAttempts to create a null relative pointer with default …\nAttempts to create a relative pointer from one position to …\nAttempts to create a relative pointer from one position to …\nAn archived <code>Result</code> that represents either success (<code>Ok</code>) or …\nContains the error value\nAn iterator over a reference to the <code>Ok</code> variant of an …\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\nConverts from <code>&amp;ArchivedResult&lt;T, E&gt;</code> to …\nConverts from <code>&amp;mut ArchivedResult&lt;T, E&gt;</code> to …\nConverts from <code>&amp;mut ArchivedResult&lt;T, E&gt;</code> to …\nReturns a <code>Result</code> containing the success and error values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nConverts from <code>ArchivedResult&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Ok</code> value or computes it from a …\nA serializer that can allocate scratch space.\nA byte sink that knows where it is.\nA registry that tracks serialized shared memory.\nAdds the position of a shared value to the registry.\nAdds the position of a shared pointer to the registry.\nAligns the position of the serializer to the given …\nAligns the position of the serializer to be suitable to …\nGets the position of a previously-added shared value.\nGets the position of a previously-added shared pointer.\nAdvances the given number of bytes as padding.\nDeallocates previously allocated scratch space.\nReturns the current position of the serializer.\nAllocates scratch space of the requested size.\nResolves the given value with its resolver and writes the …\nResolves the given reference with its resolver and writes …\nArchives the given shared value and returns its position. …\nArchives a reference to the given object and returns the …\nArchives the given object and returns the position it was …\nSerializers that can be used standalone and provide basic …\nAttempts to write the given bytes to the serializer.\nA serializer made specifically to work with <code>AlignedVec</code>.\nScratch space that always uses the global allocator.\nErrors that can occur when allocating with the global …\nA general-purpose serializer suitable for environments …\nScratch space that allocates within a buffer.\nWraps a byte buffer and equips it with <code>Serializer</code>.\nThe error type returned by an <code>BufferSerializer</code>.\nA serializer built from composeable pieces.\nThe default serializer error.\nA serializer suitable for environments where allocations …\nA shared pointer was added multiple times\nThe amount of scratch space requested exceeded the maximum …\nAllocates scratch space with a main and backup scratch.\nErrors that can occur when using a fixed-size allocator.\nFixed-size scratch space allocated on the heap.\nThere are no allocations to pop\nScratch space was not popped in reverse order.\nScratch space was not popped in reverse order.\nThe allocator ran out of scratch space.\nWriting has overflowed the internal buffer.\nAn error occurred while using scratch space\nA passthrough scratch space allocator that tracks scratch …\nAn error occurred while serializing\nAn error occurred while serializing shared memory\nAn adapter that adds shared serialization support to a …\nAn error that can occur while serializing shared pointers.\nThe given allocation did not belong to the scratch …\nWraps a type that implements <code>io::Write</code> and equips it with …\nResets the scratch space to its initial state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the composite serializer and returns the …\nConsumes the serializer and returns the underlying type.\nConsumes the serializer and returns the underlying type.\nConsumes the buffer scratch allocator, returning the …\nConsumes the serializer and returns the internal writer …\nConsumes the composite serializer and returns the …\nGets the memory layout of the heap-allocated space.\nReturns the maximum alignment of scratch space requested …\nReturns the maximum number of concurrent allocations …\nReturns the maximum number of bytes that were concurrently …\nReturns the minimum buffer size required to serialize the …\nReturns the maximum error term for the minimum buffer size …\nCreates a new <code>AlignedSerializer</code> by wrapping a …\nCreates a new heap scratch space.\nCreates a new scratch allocator with no allocation limit.\nCreates a new shared registry map.\nCreates a new archive buffer from a byte buffer.\nCreates a new buffer scratch allocator.\nCreates fallback scratch from a main and backup scratch.\nCreates a new scratch tracker from the given inner scratch …\nCreates a new serializer from a writer.\nCreates a new composite serializer from serializer, …\nCreates a new shared registry map with initial capacity.\nCreates a new scratch allocator with the given allocation …\nCreates a new archive buffer from a byte buffer. The …\nCreates a new serializer from a writer, and assumes that …\nThe pointer that was popped instead\nThe layout of the pointer that was popped instead\nThe pointer of the allocation that was expected to be next\nThe layout of the allocation that was expected to be next\nThe amount of scratch space remaining\nThe amount of scratch space requested\nThe total length of the archive\nThe number of bytes needed\nThe position of the serializer\nThe next position according to the erroneous pop\nThe size of the memory according to the erroneous pop\nThe current position of the start of free memory\nAn archived <code>String</code>.\nThe resolver for <code>String</code>.\nExtracts a string slice containing the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts a pinned mutable string slice containing the …\nAn archived string representation that supports inlining …\nResolves an archived string from a given <code>str</code>.\nSerializes an archived string from a given <code>str</code>.\nAn archived string representation that can inline short …\nThe maximum number of bytes that can be inlined.\nReturns a mutable pointer to the bytes of the string.\nReturns a mutable reference to the string as a <code>str</code>.\nReturns a pointer to the bytes of the string.\nReturns a reference to the string as a <code>str</code>.\nReturns a pointer to the string as a <code>str</code>.\nReturns a slice of the bytes of the string.\nReturns a mutable slice of the bytes of the string.\nEmplaces a new inline representation for the given <code>str</code>.\nEmplaces a new out-of-line representation for the given <code>str</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the string is empty.\nReturns whether the representation is inline.\nReturns the length of the string.\nReturns the offset of the representation.\nAn archived <code>Duration</code>.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this …\nReturns the number of seconds contained by this …\nConstructs an archived duration at the given position.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the fractional part of this <code>ArchivedDuration</code>, in …\nReturns the fractional part of this <code>ArchivedDuration</code>, in …\nReturns the fractional part of this <code>Duration</code>, in …\nThe alignment of the vector\nA buffer of bytes aligned to 16 bytes.\nThe resolver for an archived <code>AlignedBytes</code>\nA vector of bytes that aligns its memory to 16 bytes.\nAn archived <code>AlignedBytes</code>\nA draining iterator for <code>ScratchVec&lt;T&gt;</code>.\nMaximum capacity of the vector. Dictated by the …\nA vector view into serializer scratch space.\nCasts an archived value from the given byte slice by …\nCasts a mutable archived value from the given byte slice …\nCasts a <code>RelPtr</code> to the given unsized type from the given …\nCasts a <code>RelPtr</code> to the given unsized type from the given …\nCasts a <code>RelPtr</code> to the given unsized type from the given …\nCasts a mutable <code>RelPtr</code> to the given unsized type from the …\nCasts an archived value from the given byte slice at the …\nCasts a mutable archived value from the given byte slice …\nReturns an unsafe mutable pointer to the vector’s buffer.\nReturns an unsafe mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer.\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nAssuming that all the elements are initialized, removes …\nReturns the number of elements the vector can hold without …\nReturns the number of elements the vector can hole without …\nChange capacity of vector.\nClears the vector, removing all values.\nClears the vector, removing all values.\nCreates a draining iterator that removes the specified …\nReads all bytes until EOF from <code>r</code> and appends them to this …\nCopies and appends all bytes in a slice to the <code>AlignedVec</code>.\nCopies and appends all elements in a slice to the …\nFrees the memory associated with the scratch vec and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a value from the given bytes.\nGrows total capacity of vector to <code>new_cap</code> or more.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[u8]&gt;</code>.\nConverts the vector into <code>Vec&lt;u8&gt;</code>.\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nReturns the number of elements in the vector, also …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>AlignedVec</code>.\nConstructs a new, empty <code>ScratchVec</code> with the specified …\nRemoves the last element from a vector and returns it, or …\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of a collection.\nAppends an element to the back of a collection.\nReserves capacity for at least <code>additional</code> more bytes to be …\nEnsures that there is capacity for at least <code>additional</code> …\nReserves the minimum capacity for exactly <code>additional</code> more …\nReserves the minimum capacity for exactly <code>additional</code> more …\nResizes the Vec in-place so that len is equal to new_len.\nForces the length of the vector to <code>new_len</code>.\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector as much as possible.\nSerializes the given value and returns the resulting bytes.\nConstructs a new, empty <code>AlignedVec</code> with the specified …\nA context that can validate nonlocal archive memory.\nErrors that can occur when checking an archive.\nAn error that occurred while validating an object\nAn error that occurred while validating an object\nThe error type that can be produced by checking the given …\nA context error occurred\nA context error occurred\nGets the layout of a type from its pointee type and …\nA prefix range from an archive context.\nA context that can validate shared archive memory.\nA suffix range from an archive context.\nChecks that a given pointer can be dereferenced.\nChecks that a relative pointer points to an address within …\nChecks that the given pointer is located completely within …\nChecks that the given data address and layout is located …\nChecks the given archive with an additional context.\nChecks the given archive with an additional context.\nChecks that the given relative pointer can be dereferenced.\nChecks that the given <code>RelPtr</code> can be dereferenced.\nChecks that the given relative pointer to a subtree can be …\nChecks that the given <code>RelPtr</code> to a subtree can be …\nVerifies that all outstanding claims have been returned.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the layout of the type.\nCommon validation utilities for owned containers (<code>Box</code>, …\nPops the given range, restoring the original state with …\nFinishes the given range, restoring the original state …\nPushes a new subtree range onto the validator and starts …\nPushes a new subtree range onto the validator and starts …\nPushes a new subtree range onto the validator and starts …\nRegisters the given <code>ptr</code> as a shared pointer with the given …\nValidators that can check archived types.\nWraps a layout error in an ArchiveContext error\nThe <code>OwnedPointerError</code> for an owned <code>T</code> being checked with a …\nAn error occurred from the validation context.\nAn error occurred from the validation context.\nErrors that can occur while chechking archived owned …\nThe pointer failed to validate due to invalid metadata.\nThe pointer failed to validate due to invalid metadata.\nThe value pointed to by the owned pointer was invalid.\nThe value pointed to by the owned pointer was invalid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors that can occur when checking archive memory.\nAn archive validator error occurred.\nA validator that can verify archives with nonlocal memory.\nA validation error occurred.\nA validation error occurred.\nErrors that can occur while deserializing from bytes.\nThe default validator.\nThe default validator error.\nA deserialization error occurred.\nA deserialization error occurred.\nThe maximum subtree depth was reached or exceeded.\nThe error type for <code>from_bytes</code>.\nA layout error occurred\nA pointer pointed outside the bounds of the archive\nComputing the target of a relative pointer overflowed\nThere wasn’t enough space for the desired type at the …\nA prefix range from an <code>ArchiveValidator</code>.\nA subtree range was popped out of order.\nErrors that can occur when checking shared memory.\nA shared validator error occurred.\nA validator that can verify shared memory.\nThe pointer wasn’t within the subtree range\nThere wasn’t enough space in the subtree range for the …\nA suffix range from an <code>ArchiveValidator</code>.\nMultiple pointers exist to the same location with …\nThe pointer wasn’t aligned properly for the desired type\nThe archive is under-aligned for one of the types inside\nA subtree range was not popped before validation concluded.\nReturns the alignment of the archive.\nChecks the given archive at the given position for an …\nChecks the given archive at the given position for an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks and deserializes a value from the given bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the log base 2 of the alignment of the archive.\nCreates a new bounds validator for the given bytes.\nWraps the given context and adds shared memory validation.\nCreates a new validator from a byte range.\nShared memory validator with specific capacity.\nCreate a new validator from a byte range with specific …\nCrates a new bounds validator for the given bytes with a …\nThe actual alignment of the archive\nThe actual depth of the range\nThe required alignment of the type\nThe base pointer\nThe base of the relative pointer\nThe expected alignment of the archive\nThe expected depth of the range\nThe depth of the last subtree that was pushed\nA layout error\nThe maximum depth that subtrees may be validated down to\nThe offset\nThe offset of the relative pointer\nThe pointer to the type\nThe pointer to the type\nThe pointer to the subtree\nThe pointer to the subtree type,\nThe pointer range of the archive\nThe pointer range of the archive\nThe desired size of the type\nThe desired size of the type\nThe subtree range\nThe subtree range\nThe current type that the location is checked as\nA previous type that the location was checked as\nAn archived <code>Vec</code>.\nAn archived <code>Vec</code>.\nThe resolver for <code>ArchivedVec</code>.\nReturns a pointer to the first element of the archived vec.\nReturns a pointer to the first element of the archived vec.\nGets the elements of the archived vec as a slice.\nGets the elements of the archived vec as a slice.\nChecks the bytes of the <code>ArchivedVec</code> with the given element …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the element at the given index ot this archived vec …\nGets the element at the given index ot this archived vec …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the archived vec is empty.\nReturns whether the archived vec is empty.\nReturns the number of elements in the archived vec.\nReturns the number of elements in the archived vec.\nGets the elements of the archived vec as a pinned mutable …\nGets the elements of the archived vec as a pinned mutable …\nResolves an archived <code>Vec</code> from a given length.\nResolves an archived <code>Vec</code> from a given slice.\nResolves an archived <code>Vec</code> from a given slice.\nSerializes an archived <code>Vec</code> from a given slice by directly …\nSerializes an archived <code>Vec</code> from a given slice by directly …\nSerializes an archived <code>Vec</code> from a given iterator.\nSerializes an archived <code>Vec</code> from a given slice.\nA variant of <code>Archive</code> that works with <code>With</code> wrappers.\nThe archived type of a <code>With&lt;F, Self&gt;</code>.\nA wrapper that serializes a field into a box.\nA wrapper that serializes a <code>Cow</code> as if it were owned.\nA wrapper that attempts to convert a type to and from …\nErrors that can occur when serializing a <code>AsString</code> wrapper.\nA wrapper that serializes associative containers as a <code>Vec</code> …\nA wrapper that archives an atomic with an underlying …\nA wrapper that serializes a reference as if it were boxed.\nA wrapper that provides specialized, performant …\nA variant of <code>Deserialize</code> that works with <code>With</code> wrappers.\nA wrapper to make a type immutable.\nA wrapper that serializes a reference inline.\nThe <code>OsString</code> or <code>PathBuf</code> was not valid UTF-8.\nA wrapper that locks a lock and serializes the value …\nErrors that can occur while serializing a <code>Lock</code> wrapper\nA generic wrapper that allows wrapping an <code>Option&lt;T&gt;</code>.\nA wrapper that niches some type combinations.\nThe mutex was poisoned\nA wrapper that provides an optimized bulk data array. This …\nA wrapper that serializes a reference as if it were boxed.\nThe resolver of a <code>With&lt;F, Self&gt;</code>.\nA variant of <code>Serialize</code> that works with <code>With</code> wrappers.\nA wrapper that skips serializing a field.\nThe <code>SystemTime</code> occurred prior to the UNIX epoch.\nA wrapper that converts a <code>SystemTime</code> to a <code>Duration</code> since …\nErrors that can occur when serializing a <code>UnixTimestamp</code> …\nA wrapper that allows serialize-unsafe types to be …\nA transparent wrapper for archived fields.\nCasts a <code>With</code> reference from a reference to the underlying …\nDeserializes the field type <code>F</code> using the given deserializer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps a <code>With</code> into the underlying field.\nResolves the archived type using a reference to the field …\nSerializes the field type <code>F</code> using the given serializer.\nGets the underlying immutable value.")