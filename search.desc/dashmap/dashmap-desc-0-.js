searchState.loadedDescShard("dashmap", 0, "DashMap is an implementation of a concurrent associative …\nDashSet is a thin wrapper around <code>DashMap</code> using <code>()</code> as the …\nImplementation detail that is exposed due to generic …\nA read-only view into a <code>DashMap</code>. Allows to obtain raw …\nSafety\nSafety\nSafety\nSafety\nSafety\nModify a specific value according to a function.\nModify every value in the map according to a function.\nReturns the number of elements the map can hold without …\nReturns how many keys the set can store without …\nReturns how many key-value pairs the map can store without …\nRemoves all keys in the set.\nRemoves all key-value pairs in the map.\nChecks if the set contains a specific key.\nReturns <code>true</code> if the map contains a value for the specified …\nChecks if the map contains a specific key.\nAdvanced entry API that tries to mimic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGet a reference to an entry in the set\nGet an immutable reference to an entry in the map\nReturns the key-value pair corresponding to the supplied …\nGet a mutable reference to an entry in the map\nHash a given item to produce a usize. Uses the provided or …\nHash a given item to produce a usize. Uses the provided or …\nReturns a reference to the map’s <code>BuildHasher</code>.\nInserts a key into the set. Returns true if the key was …\nInserts a key and a value into the map. Returns the old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>ReadOnlyView</code>, returning the underlying …\nWraps this <code>DashMap</code> into a read-only view. This view allows …\nReturns <code>true</code> if the map contains no elements.\nChecks if the set is empty or not.\nChecks if the map is empty or not.\nAn iterator visiting all key-value pairs in arbitrary …\nCreates an iterator over a DashMap yielding immutable …\nCreates an iterator over a DashMap yielding immutable …\nIterator over a DashMap yielding mutable references.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nFetches the total number of keys stored in the set.\nFetches the total number of key-value pairs stored in the …\nCreates a new DashSet with a capacity of 0.\nCreates a new DashMap with a capacity of 0.\nRemoves an entry from the map, returning the key if it …\nRemoves an entry from the map, returning the key and value …\nRemoves an entry from the set, returning the key if the …\nRemoves an entry from the map, returning the key and value …\nRetain elements that whose predicates return true and …\nRetain elements that whose predicates return true and …\nRemove excess capacity to reduce memory usage.\nRemove excess capacity to reduce memory usage.\nAdvanced entry API that tries to mimic …\nGet an immutable reference to an entry in the map, if the …\nGet a mutable reference to an entry in the map, if the …\nAdvanced entry API that tries to mimic …\nAn iterator visiting all values in arbitrary order. The …\nScoped access into an item of the map according to a …\nCreates a new DashMap with a specified starting capacity.\nCreates a new DashMap with a specified starting capacity.\nCreates a new DashMap with a specified starting capacity …\nCreates a new DashMap with a specified starting capacity …\nCreates a new DashMap with a specified starting capacity, …\nCreates a new DashMap with a specified capacity and shard …\nCreates a new DashMap with a capacity of 0 and the …\nCreates a new DashMap with a capacity of 0 and the …\nCreates a new DashMap with a specified hasher and shard …\nCreates a new DashMap with a specified shard amount\nIterator over a DashMap yielding immutable references.\nIterator over a DashMap yielding mutable references.\nIterator over a DashMap yielding key value pairs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply a function to the stored value if it exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the value of the entry, and returns a reference to …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto the key of the entry.\nGet the key of the entry.\nReturn a mutable reference to the element if it exists, …\nReturn a mutable reference to the element if it exists, …\nReturn a mutable reference to the element if it exists, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe shard wasn’t locked, and the value wasn’t present …\nThe shard was locked.\nThe value was present in the map, and the lock for the …\nRepresents the result of a non-blocking read from a DashMap…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the shard wasn’t locked, and the value …\nReturns <code>true</code> if the shard was locked.\nReturns <code>true</code> if the value was present in the map, and the …\nIf <code>self</code> is Present, returns the reference to the value in …\nIf <code>self</code> is Present, returns the reference to the value in …")