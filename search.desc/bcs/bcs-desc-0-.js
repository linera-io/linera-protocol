searchState.loadedDescShard("bcs", 0, "Binary Canonical Serialization (BCS)\nContains the error value\nMaximal allowed depth of BCS data, counting only structs …\nVariable length sequences in BCS are limited to max length …\nContains the success value\nReturns the argument unchanged.\nDeserializes a <code>&amp;[u8]</code> into a type.\nPerform a stateful deserialization from a <code>&amp;[u8]</code> using the …\nSame as <code>from_bytes_seed</code> but use <code>limit</code> as max container …\nSame as <code>from_bytes</code> but use <code>limit</code> as max container depth …\nDeserialize a type from an implementation of <code>Read</code>.\nDeserialize a type from an implementation of <code>Read</code> using …\nSame as <code>from_reader_seed</code> but use <code>limit</code> as max container …\nSame as <code>from_reader_seed</code> but use <code>limit</code> as max container …\nCalls <code>U::from(self)</code>.\nSame as <code>to_bytes</code> but write directly into an <code>std::io::Write</code> …\nSame as <code>serialize_into</code> but use <code>limit</code> as max container …\nSame as <code>to_bytes</code> but only return the size of the …\nSame as <code>serialized_size</code> but use <code>limit</code> as max container …\nSerialize the given data structure as a <code>Vec&lt;u8&gt;</code> of BCS.\nSame as <code>to_bytes</code> but use <code>limit</code> as max container depth …")