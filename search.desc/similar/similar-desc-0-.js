searchState.loadedDescShard("similar", 0, "This crate implements diffing utilities.  It attempts to …\nAn enum representing a diffing algorithm.\nRepresents the expanded <code>DiffOp</code> change.\nThe tag of a change.\nThe change indicates deleted text.\nA segment was deleted (see <code>DiffHook::delete</code>)\nThe diff op encodes a deleted segment.\nUtility enum to capture a diff operation.\nThe tag of a diff operation.\nAll supported diffable strings.\nReference to a <code>DiffableStr</code>.\nThe change indicates equality (not a change)\nA segment is equal (see <code>DiffHook::equal</code>)\nThe diff op encodes an equal segment.\nRepresents the expanded textual change with inline …\nThe change indicates inserted text.\nA segment was inserted (see <code>DiffHook::insert</code>)\nThe diff op encodes an inserted segment.\nPicks the LCS algorithm from <code>crate::algorithms::lcs</code>\nPicks the myers algorithm from <code>crate::algorithms::myers</code>\nThe type of the resolved <code>DiffableStr</code>.\nPicks the patience algorithm from …\nA segment was replaced (see <code>DiffHook::replace</code>)\nThe diff op encodes a replaced segment.\nCaptures diff op codes for textual diffs.\nA builder type config for more complex uses of <code>TextDiff</code>.\nThe name of the algorithm that created the diff.\nChanges the algorithm.\nVarious diff (longest common subsequence) algorithms.\nApply this operation to a diff hook.\nReturns the string as slice of raw bytes.\nResolves the reference.\nDecodes the string (potentially) lossy.\nReturns the value as string if it is utf-8.\nTransform the op into a tuple of diff tag and ranges.\nCreates a diff between old and new with the given …\nCreates a diff between old and new with the given …\nCreates a diff between old and new with the given …\nCreates a diff between old and new with the given …\nConfigures a text differ before diffing.\nSets a deadline for the diff operation.\nReturns the default algorithm (<code>Algorithm::Myers</code>).\nCreates a diff of characters.\nCreates a diff of lines.\nCreates a diff of arbitrary slices.\nCreates a diff of words.\nChecks if the string ends in a newline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a diff of chars.\nCreates a diff of lines.\nCreates a diff of arbitrary slices.\nCreates a diff of words.\nUse the text differ to find <code>n</code> close matches.\nReturn a measure of similarity in the range <code>0..=1</code>.\nIsolate change clusters by eliminating ranges with no …\nIsolate change clusters by eliminating ranges with no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the string is empty.\nChecks if the string is empty.\nThe various iterators this crate provides.\nFlattens out the diff into all changes.\nIterates over the changes the op expands to.\nIterates over all changes encoded in the diff op against …\nIterates over the changes the op expands to with inline …\nIterates over the changes the op expands to with inline …\nGiven a diffop yields the changes it encodes against the …\nIterates over all (potentially lossy) utf-8 decoded values.\nThe length of the string.\nReturns <code>true</code> if this change does not end in a newline and …\nReturns <code>true</code> if this change does not end in a newline and …\nReturns the new index if available.\nReturns the new index if available.\nReturns the new range.\nReturns all new slices.\nReturns <code>true</code> if items in the slice are newline terminated.\nChanges the newline termination flag.\nReturns the old index if available.\nReturns the old index if available.\nReturns the old range.\nReturns all old slices.\nReturns the captured diff ops.\nReturn a measure of the sequences’ similarity in the …\nSlices the string.\nReturns the change tag.\nReturns the change tag.\nReturns the tag of the operation.\nSets a timeout for thediff operation.\nDecodes the string (potentially) lossy.\nReturns the value (lossy) decoded as utf-8 string.\nTokenizes the input into characters.\nSplits the value into newlines with newlines attached.\nSplits the value into newlines with newlines separated.\nTokenizes into words.\nThis module provides unified diff functionality.\nUtility to return a unified diff formatter.\nUtilities for common diff related operations.\nReturns the underlying changed value.\nReturns the underlying changed value as mutable reference.\nReturns the underlying changed value as reference.\nReturns the changed values.\nThe length of the segment.\nThe starting index in the new sequence.\nThe starting index in the new sequence.\nThe starting index in the new sequence.\nThe starting index in the new sequence.\nThe length of the new segment.\nThe length of the new segment.\nThe starting index in the old sequence.\nThe starting index in the old sequence.\nThe starting index in the old sequence.\nThe starting index in the old sequence.\nThe length of the old segment.\nThe length of the old segment.\nA <code>DiffHook</code> that captures all diff operations.\nPerforms semantic cleanup operations on a diff.\nA trait for reacting to an edit script from the “old” …\nThe error produced from the hook methods.\nA utility struct to convert distinct items to unique …\nWrapper <code>DiffHook</code> that prevents calls to <code>DiffHook::finish</code>.\nA <code>DiffHook</code> that combines deletions and insertions to give …\nCalled when a section of length <code>old_len</code>, starting at …\nCalled when a section of length <code>old_len</code>, starting at …\nCreates a diff between old and new with the given …\nCreates a diff between old and new with the given …\nShortcut for diffing slices with a specific algorithm.\nShortcut for diffing slices with a specific algorithm.\nCalled when lines with indices <code>old_index</code> (in the old …\nCalled when lines with indices <code>old_index</code> (in the old …\nAlways called at the end of the algorithm.\nAlways called at the end of the algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalled when a section of the new version, of length <code>new_len</code>\nCalled when a section of the new version, of length <code>new_len</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIsolate change clusters by eliminating ranges with no …\nExtracts the inner hook.\nExtracts the inner hook.\nExtracts the inner hook.\nConverts the capture hook into a vector of ops.\nLCS diff algorithm.\nMyers’ diff algorithm.\nWraps another hook.\nCreates a new replace hook wrapping another hook.\nCreates an int hasher for two sequences.\nCreates a new capture hook.\nCreates a new compact hook wrapping another hook.\nReturns a lookup for the new side.\nConvenience method to get back the new range.\nReturns a lookup for the old side.\nConvenience method to get back the old range.\nAccesses the captured operations.\nPatience diff algorithm.\nCalled when a section of the old version, starting at index\nCalled when a section of the old version, starting at index\nLCS diff algorithm.\nLCS diff algorithm.\nMyers’ diff algorithm.\nMyers’ diff algorithm with deadline.\nPatience diff algorithm.\nPatience diff algorithm with deadline.\nIterator for <code>TextDiff::iter_all_changes</code>.\nIterator for <code>DiffOp::iter_changes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnified diff formatter.\nUnified diff hunk formatter.\nUnified diff hunk header formatter.\nChanges the context radius.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a formatter from a text diff object.\nSets a header to the diff.\nReturns the header for the hunk.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over all changes in a hunk.\nIterates over all hunks as configured.\nControls the missing newline hint.\nReturns the value of the <code>missing_newline_hint</code> flag.\nCreates a hunk header from a (non empty) slice of diff ops.\nCreates a new hunk for some operations.\nReturns all operations in the hunk.\nWrite the unified diff as bytes to the output stream.\nWrite the hunk as bytes to the output stream.\nQuick way to get a unified diff as string.\nA remapper that can remap diff ops to the original slices.\nShortcut for making a character level diff.\nShortcut for making a line diff.\nShortcut for diffing two slices.\nShortcut for making a word level diff.\nReturns the argument unchanged.\nCreates a new remapper from a text diff and the original …\nCalls <code>U::from(self)</code>.\nGiven a diffop yields the changes it encodes against the …\nCreates a new remapper from strings and slices.\nSlices into the new string.\nSlices into the old string.")