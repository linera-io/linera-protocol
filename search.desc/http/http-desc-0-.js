searchState.loadedDescShard("http", 0, "A general purpose library of common HTTP types\nContains the error value\nA generic “error” for HTTP connections\nA type map of protocol extensions.\nContains the success value\nA <code>Result</code> typedef to use with the <code>http::Error</code> type\nClear the <code>Extensions</code> of all inserted extensions.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nReturn a reference to the lower level, inner error.\nHTTP header types\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the underlying error has the same type as T.\nCheck whether the extension set is empty or not.\nGet the number of extensions available.\nThe HTTP request method\nCreate an empty <code>Extensions</code>.\nRemove a type from this <code>Extensions</code>.\nHTTP request types.\nHTTP response types.\nHTTP status codes\nURI component of request and response lines\nHTTP version\nAdvertises which content types the client is able to …\nAdvertises which character set the client is able to …\nAdvertises which content encoding the client is able to …\nAdvertises which languages the client is able to …\nMarker used by the server to advertise partial request …\nPreflight response indicating if the response to the …\nPreflight response indicating permitted HTTP headers.\nPreflight header response indicating permitted access …\nIndicates whether the response can be shared with …\nIndicates which headers can be exposed as part of the …\nIndicates how long the results of a preflight request can …\nInforms the server which HTTP headers will be used when an …\nInforms the server know which HTTP method will be used …\nIndicates the time in seconds the object has been in a …\nLists the set of methods support by a resource.\nAdvertises the availability of alternate services to …\nContains the credentials to authenticate a user agent with …\nA marker trait used to identify values that can be used as …\nSpecifies directives for caching mechanisms in both …\nIndicates how caches have handled a response and its …\nSpecifies directives that allow origin servers to control …\nControls whether or not the network connection stays open …\nIndicates if the content is expected to be displayed …\nUsed to compress the media-type.\nUsed to describe the languages intended for the audience.\nIndicates the size of the entity-body.\nIndicates an alternate location for the returned data.\nIndicates where in a full body message a partial message …\nAllows controlling resources the user agent is allowed to …\nAllows experimenting with policies by monitoring their …\nUsed to indicate the media type of the resource.\nContains stored HTTP cookies previously sent by the server …\nContains the date and time at which the message was …\nIndicates the client’s tracking preference.\nA drain iterator for <code>HeaderMap</code>.\nIdentifier for a specific version of a resource.\nIndicates expectations that need to be fulfilled by the …\nContains the date/time after which the response is …\nA view into a single location in a <code>HeaderMap</code>, which may be …\nContains information from the client-facing side of proxy …\nContains an Internet email address for a human user who …\nA view to all values stored in a single entry.\nSpecifies the domain name of the server and (optionally) …\nA set of HTTP headers\nRepresents an HTTP header field name\nRepresents an HTTP header field value.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on the modification date.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on range.\nMakes the request conditional based on the last …\nA marker trait used to identify values that can be used as …\nAn owning iterator over the entries of a <code>HeaderMap</code>.\nA possible error when converting a <code>HeaderName</code> from another …\nA possible error when converting a <code>HeaderValue</code> from a …\n<code>HeaderMap</code> entry iterator.\n<code>HeaderMap</code> mutable entry iterator\nAn iterator over <code>HeaderMap</code> keys.\nThe Last-Modified header contains the date and time when …\nAllows the server to point an interested client to another …\nIndicates the URL to redirect a page to.\nIndicates the max number of intermediaries the request …\nError returned when max capacity of <code>HeaderMap</code> is exceeded\nIndicates where a fetch originates from.\nAn occupied entry\nA view into a single occupied location in a <code>HeaderMap</code>.\nHTTP/1.0 header usually used for backwards compatibility.\nDefines the authentication method that should be used to …\nContains the credentials to authenticate a user agent to a …\nAssociates a specific cryptographic public key with a …\nSends reports of pinning violation to the report-uri …\nIndicates the part of a document that the server should …\nContains the address of the previous web page from which a …\nGoverns which referrer information should be included with …\nInforms the web browser that the current page or frame …\nThe Retry-After response HTTP header indicates how long …\nThe |Sec-WebSocket-Accept| header field is used in the …\nThe |Sec-WebSocket-Extensions| header field is used in the …\nThe |Sec-WebSocket-Key| header field is used in the …\nThe |Sec-WebSocket-Protocol| header field is used in the …\nThe |Sec-WebSocket-Version| header field is used in the …\nContains information about the software used by the origin …\nUsed to send cookies from the server to the user agent.\nTells the client to communicate with HTTPS instead of …\nInforms the server of transfer encodings willing to be …\nAllows the sender to include additional fields at the end …\nSpecifies the form of encoding used to safely transfer the …\nA possible error when converting a <code>HeaderValue</code> to a string …\nUsed as part of the exchange to upgrade the protocol.\nSends a signal to the server expressing the client’s …\nContains a string that allows identifying the requesting …\nDetermines how to match future requests with cached …\nAdded by proxies to track routing.\nA vacant entry\nA view into a single empty location in a <code>HeaderMap</code>.\nAn drain iterator of all values associated with a single …\nAn iterator of all values associated with a single header …\nA mutable iterator of all values associated with a single …\n<code>HeaderMap</code> value iterator.\n<code>HeaderMap</code> mutable value iterator\nGeneral HTTP header contains information about possible …\nDefines the authentication method that should be used to …\nMarker used by the server to indicate that the MIME types …\nControls DNS prefetching.\nIndicates whether or not a browser should be allowed to …\nStop pages from loading when an XSS attack is detected.\nInserts a key-value pair into the map.\nInsert the value into the entry.\nConverts a <code>HeaderValue</code> to a byte slice.\nReturns a <code>str</code> representation of the header.\nReturns the number of headers the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns true if the map contains a value for the specified …\nClears the map, returning all entries as an iterator.\nGets the given key’s corresponding entry in the map for …\nPerforms a case-insensitive comparison of the string …\nPerforms a case-insensitive comparison of the string …\nExtend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a byte slice to a <code>HeaderValue</code>.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.\nConvert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …\nConverts a HeaderName into a HeaderValue\nConverts a static string to a HTTP header name.\nConvert a static string to a <code>HeaderValue</code>.\nAttempt to convert a string to a <code>HeaderValue</code>.\nReturns a reference to the value associated with the key.\nGet a reference to the first value in the entry.\nReturns a view of all values associated with a key.\nReturns a mutable reference to the value associated with …\nGet a mutable reference to the first value in the entry.\nPanics\nInserts a key-value pair into the map.\nInsert the value into the entry.\nSets the value of the entry.\nInsert the value into the entry.\nSets the value of the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves keys …\nTake ownership of the key\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns true if the map contains no elements.\nReturns true if the <code>HeaderValue</code> has a length of zero bytes.\nReturns <code>true</code> if the value represents sensitive data.\nAn iterator visiting all key-value pairs.\nReturns an iterator visiting all values associated with …\nReturns an iterator visiting all values associated with …\nAn iterator visiting all key-value pairs, with mutable …\nReturns an iterator mutably visiting all values associated …\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key.\nAn iterator visiting all keys.\nReturns the number of keys stored in the map.\nReturns the number of headers stored in the map.\nReturns the length of <code>self</code>.\nCreate an empty <code>HeaderMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the map, returning the value associated …\nRemove the entry from the map.\nRemove the entry from the map.\nRemove the entry from the map.\nReserves capacity for at least <code>additional</code> more headers to …\nMark that the header value represents sensitive …\nYields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …\nInserts a key-value pair into the map.\nGets the given key’s corresponding entry in the map for …\nInserts a key-value pair into the map.\nInsert the value into the entry.\nInsert the value into the entry.\nReserves capacity for at least <code>additional</code> more headers to …\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nAn iterator visiting all values.\nAn iterator visiting all values mutably.\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nCONNECT\nDELETE\nGET\nHEAD\nA possible error value when converting <code>Method</code> from bytes.\nThe Request Method (VERB)\nOPTIONS\nPATCH\nPOST\nPUT\nTRACE\nReturn a &amp;str representation of the HTTP method\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP method.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether a method is considered “idempotent”, meaning …\nWhether a method is considered “safe”, meaning the …\nAn HTTP request builder\nComponent parts of an HTTP <code>Request</code>\nRepresents an HTTP request.\nReturns a reference to the associated HTTP body.\n“Consumes” this builder, using the provided <code>body</code> to …\nReturns a mutable reference to the associated HTTP body.\nCreates a new builder-style object to manufacture a <code>Request</code>\nCreates a new <code>Builder</code> initialized with a CONNECT method …\nCreates a new <code>Builder</code> initialized with a DELETE method and …\nAdds an extension to this builder\nReturns a reference to the associated extensions.\nThe request’s extensions\nReturns a mutable reference to the associated extensions.\nGet a mutable reference to the extensions for this request …\nGet a reference to the extensions for this request builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Request</code> with the given components parts and …\nCreates a new <code>Builder</code> initialized with a GET method and …\nCreates a new <code>Builder</code> initialized with a HEAD method and …\nAppends a header to this request builder.\nReturns a reference to the associated header field map.\nThe request’s headers\nReturns a mutable reference to the associated header field …\nGet headers on this request builder.\nGet header on this request builder. when builder has error …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the request, returning just the body.\nConsumes the request returning the head and body parts.\nConsumes the request returning a new request with body …\nReturns a reference to the associated HTTP method.\nSet the HTTP method for this request.\nThe request’s method\nReturns a mutable reference to the associated HTTP method.\nGet the HTTP Method for this request.\nCreates a new blank <code>Request</code> with the body\nCreates a new default instance of <code>Builder</code> to construct a …\nCreates a new <code>Builder</code> initialized with an OPTIONS method …\nCreates a new <code>Builder</code> initialized with a PATCH method and …\nCreates a new <code>Builder</code> initialized with a POST method and …\nCreates a new <code>Builder</code> initialized with a PUT method and …\nCreates a new <code>Builder</code> initialized with a TRACE method and …\nReturns a reference to the associated URI.\nSet the URI for this request.\nThe request’s URI\nReturns a mutable reference to the associated URI.\nGet the URI for this request\nReturns the associated version.\nSet the HTTP version for this request.\nThe request’s version\nReturns a mutable reference to the associated version.\nGet the HTTP version for this request\nAn HTTP response builder\nComponent parts of an HTTP <code>Response</code>\nRepresents an HTTP response\nReturns a reference to the associated HTTP body.\n“Consumes” this builder, using the provided <code>body</code> to …\nReturns a mutable reference to the associated HTTP body.\nCreates a new builder-style object to manufacture a …\nAdds an extension to this builder\nReturns a reference to the associated extensions.\nThe response’s extensions\nReturns a mutable reference to the associated extensions.\nGet a mutable reference to the extensions for this …\nGet a reference to the extensions for this response …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Response</code> with the given head and body\nAppends a header to this response builder.\nReturns a reference to the associated header field map.\nThe response’s headers\nReturns a mutable reference to the associated header field …\nGet header on this response builder. when builder has …\nGet header on this response builder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the response, returning just the body.\nConsumes the response returning the head and body parts.\nConsumes the response returning a new response with body …\nCreates a new blank <code>Response</code> with the body\nCreates a new default instance of <code>Builder</code> to construct …\nReturns the <code>StatusCode</code>.\nSet the HTTP status for this response.\nThe response’s status\nReturns a mutable reference to the associated <code>StatusCode</code>.\nReturns a reference to the associated version.\nSet the HTTP version for this response.\nThe response’s version\nReturns a mutable reference to the associated version.\n202 Accepted [RFC9110, Section 15.3.3]\n208 Already Reported [RFC5842, Section 7.1]\n502 Bad Gateway [RFC9110, Section 15.6.3]\n400 Bad Request [RFC9110, Section 15.5.1]\n409 Conflict [RFC9110, Section 15.5.10]\n100 Continue [RFC9110, Section 15.2.1]\n201 Created [RFC9110, Section 15.3.2]\n417 Expectation Failed [RFC9110, Section 15.5.18]\n424 Failed Dependency [RFC4918, Section 11.4]\n403 Forbidden [RFC9110, Section 15.5.4]\n302 Found [RFC9110, Section 15.4.3]\n504 Gateway Timeout [RFC9110, Section 15.6.5]\n410 Gone [RFC9110, Section 15.5.11]\n505 HTTP Version Not Supported [RFC9110, Section 15.6.6]\n418 I’m a teapot [curiously not registered by IANA but …\n226 IM Used [RFC3229, Section 10.4.1]\n507 Insufficient Storage [RFC4918, Section 11.5]\n500 Internal Server Error [RFC9110, Section 15.6.1]\nA possible error value when converting a <code>StatusCode</code> from a …\n411 Length Required [RFC9110, Section 15.5.12]\n423 Locked [RFC4918, Section 11.3]\n508 Loop Detected [RFC5842, Section 7.2]\n405 Method Not Allowed [RFC9110, Section 15.5.6]\n421 Misdirected Request [RFC9110, Section 15.5.20]\n301 Moved Permanently [RFC9110, Section 15.4.2]\n300 Multiple Choices [RFC9110, Section 15.4.1]\n207 Multi-Status [RFC4918, Section 11.1]\n511 Network Authentication Required [RFC6585, Section 6]\n203 Non-Authoritative Information [RFC9110, Section 15.3.4]\n406 Not Acceptable [RFC9110, Section 15.5.7]\n510 Not Extended [RFC2774, Section 7]\n404 Not Found [RFC9110, Section 15.5.5]\n501 Not Implemented [RFC9110, Section 15.6.2]\n304 Not Modified [RFC9110, Section 15.4.5]\n204 No Content [RFC9110, Section 15.3.5]\n200 OK [RFC9110, Section 15.3.1]\n206 Partial Content [RFC9110, Section 15.3.7]\n413 Payload Too Large [RFC9110, Section 15.5.14]\n402 Payment Required [RFC9110, Section 15.5.3]\n308 Permanent Redirect [RFC9110, Section 15.4.8]\n412 Precondition Failed [RFC9110, Section 15.5.13]\n428 Precondition Required [RFC6585, Section 3]\n102 Processing [RFC2518, Section 10.1]\n407 Proxy Authentication Required [RFC9110, Section 15.5.8]\n416 Range Not Satisfiable [RFC9110, Section 15.5.17]\n431 Request Header Fields Too Large [RFC6585, Section 5]\n408 Request Timeout [RFC9110, Section 15.5.9]\n205 Reset Content [RFC9110, Section 15.3.6]\n303 See Other [RFC9110, Section 15.4.4]\n503 Service Unavailable [RFC9110, Section 15.6.4]\n101 Switching Protocols [RFC9110, Section 15.2.2]\nAn HTTP status code (<code>status-code</code> in RFC 9110 et al.).\n307 Temporary Redirect [RFC9110, Section 15.4.7]\n425 Too early [RFC8470, Section 5.2]\n429 Too Many Requests [RFC6585, Section 4]\n401 Unauthorized [RFC9110, Section 15.5.2]\n451 Unavailable For Legal Reasons [RFC7725, Section 3]\n422 Unprocessable Entity [RFC9110, Section 15.5.21]\n415 Unsupported Media Type [RFC9110, Section 15.5.16]\n426 Upgrade Required [RFC9110, Section 15.5.22]\n414 URI Too Long [RFC9110, Section 15.5.15]\n305 Use Proxy [RFC9110, Section 15.4.6]\n506 Variant Also Negotiates [RFC2295, Section 8.1]\nReturns a &amp;str representation of the <code>StatusCode</code>\nReturns the <code>u16</code> corresponding to this <code>StatusCode</code>.\nGet the standardised <code>reason-phrase</code> for this status code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>&amp;[u8]</code> to a status code.\nConverts a u16 to a status code.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if status is within 400-499.\nCheck if status is within 100-199.\nCheck if status is within 300-399.\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nRepresents the authority component of a URI.\nA builder for <code>Uri</code>s.\nHTTP protocol scheme\nHTTP protocol over TLS.\nAn error resulting from a failed attempt to construct a …\nAn error resulting from a failed attempt to construct a …\nThe various parts of a URI.\nRepresents the path component of a URI\nThe port component of a URI.\nRepresents the scheme component of a URI\nThe URI component of a request.\nReturns the port number as a <code>str</code>.\nReturn a str representation of the authority\nReturns the path and query as a string component.\nReturn a str representation of the scheme\nReturns the port number as a <code>u16</code>.\nSet the <code>Authority</code> for this URI.\nGet the authority of this <code>Uri</code>.\nThe authority component of a URI\nConsumes this builder, and tries to construct a valid <code>Uri</code> …\nCreates a new builder-style object to manufacture a <code>Uri</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.\nAttempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.\nAttempt to convert a <code>Parts</code> into a <code>Uri</code>.\nAttempt to convert an <code>Authority</code> from a static string.\nConvert a <code>PathAndQuery</code> from a static string.\nConvert a <code>Uri</code> from a static string.\nGet the host of this <code>Authority</code>.\nGet the host of this <code>Uri</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>Uri</code> into <code>Parts</code>.\nCreates a new default instance of <code>Builder</code> to construct a …\nReturns the path component\nGet the path of this <code>Uri</code>.\nSet the <code>PathAndQuery</code> for this URI.\nReturns the path &amp; query components of the Uri\nThe origin-form component of a URI\nGet the port part of this <code>Authority</code>.\nGet the port part of this <code>Uri</code>.\nGet the port of this <code>Authority</code> as a <code>u16</code>.\nGet the port of this <code>Uri</code> as a <code>u16</code>.\nReturns the query string component\nGet the query string of this <code>Uri</code>, starting after the <code>?</code>.\nSet the <code>Scheme</code> for this URI.\nGet the scheme of this <code>Uri</code>.\nThe scheme component of a URI\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\n<code>HTTP/0.9</code>\n<code>HTTP/1.0</code>\n<code>HTTP/1.1</code>\n<code>HTTP/2.0</code>\n<code>HTTP/3.0</code>\nRepresents a version of the HTTP spec.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")