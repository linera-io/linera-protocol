searchState.loadedDescShard("alloy_hardforks", 0, "alloy-hardforks\nArrow Glacier: …\nBerlin: …\nThe fork is activated after a certain block.\nBy block number activation.\nByzantium: …\nCancun: …\nConstantinople: …\nThe DAO fork: …\nRe-exported EIP-2124 forkid types. Represents a …\nA type allowing to configure activation <code>ForkCondition</code>s for …\nThe name of an Ethereum hardfork.\nHelper methods for Ethereum forks.\nThe condition at which a fork is activated.\nRe-exported EIP-2124 forkid types. Filter that describes …\nRe-exported EIP-2124 forkid types. How to filter forks.\nRe-exported EIP-2124 forkid types. <code>CRC32</code> hash of all …\nRe-exported EIP-2124 forkid types. A fork identifier as …\nRe-exported EIP-2124 forkid types. Represents a transition …\nFrontier: …\nGray Glacier: …\nGeneric hardfork trait.\nRe-exported EIP-2124 forkid types. Describes the current …\nHomestead: …\nIstanbul: …\nLocal node is on an incompatible chain or needs a software …\nLondon: …\nMuir Glacier: …\nThe fork is never activated\nOsaka: https://eips.ethereum.org/EIPS/eip-7607\nParis: …\nPetersburg: …\nPrague.\nRemote node is outdated and needs a software update.\nShanghai: …\nSpurious Dragon: …\nThe fork is activated after a total difficulty has been …\nTangerine: …\nBy timestamp activation.\nThe fork is activated after a specific timestamp.\nAll hardfork variants\nRe-exported EIP-2124 forkid types. Reason for rejecting …\nBlock number 0, equivalent to activation at genesis.\nTimestamp 0, equivalent to activation at genesis.\nRetrieves the activation block for the specified hardfork …\nRetrieves the activation timestamp for the specified …\nChecks whether the fork condition is satisfied at the …\nChecks whether the fork condition is satisfied at the …\nChecks whether the fork condition is satisfied at the …\nChecks whether the fork condition is satisfied at the …\nArbitrum hardfork starting points\nRetrieves the activation block for the specified hardfork …\nRetrieves the activation timestamp for the specified …\nRetrieves the activation block for the specified hardfork …\nRetrieves the activation timestamp for the specified …\nReturns the timestamp of the fork condition, if it is …\nReturns the block of the fork condition, if it is block …\nReturns boxed value.\nReturns boxed value.\nReturn current fork id\nThe new, active <code>ForkId</code>\nThe difficulty of the head block.\nError types for the hardforks crate.\nEthereum hardfork starting points\nRetrieves <code>ForkCondition</code> by an <code>EthereumHardfork</code>. If <code>fork</code> is …\nThe inner forkid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReverse lookup to find the hardfork given a chain ID and …\nConvert an u64 into an <code>EthereumHardfork</code>.\nMacro that defines different variants of a chain specific …\nThe hash of the head block.\nCRC32 checksum of the all fork blocks and timestamps from …\nEthereum holesky list of hardforks.\nCreates a new <code>EthereumChainHardforks</code> with Holesky …\nRetrieves the activation timestamp for the specified …\nEthereum Hoodi list of hardforks.\nCreates a new <code>EthereumChainHardforks</code> with Hoodi …\nRetrieves the activation timestamp for the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the fork condition is block based.\nConvenience method to check if <code>EthereumHardfork::Byzantium</code> …\nConvenience method to check if <code>EthereumHardfork::Byzantium</code> …\nConvenience method to check if <code>EthereumHardfork::Cancun</code> is …\nConvenience method to check if <code>EthereumHardfork::Cancun</code> is …\nConvenience method to check if …\nConvenience method to check if …\nChecks if the head block is an empty block (i.e., has …\nConvenience method to check if an <code>EthereumHardfork</code> is …\nConvenience method to check if an <code>EthereumHardfork</code> is …\nConvenience method to check if an <code>EthereumHardfork</code> is …\nConvenience method to check if an <code>EthereumHardfork</code> is …\nConvenience method to check if <code>EthereumHardfork::Homestead</code> …\nConvenience method to check if <code>EthereumHardfork::Homestead</code> …\nConvenience method to check if <code>EthereumHardfork::London</code> is …\nConvenience method to check if <code>EthereumHardfork::London</code> is …\nConvenience method to check if <code>EthereumHardfork::Osaka</code> is …\nConvenience method to check if <code>EthereumHardfork::Osaka</code> is …\nConvenience method to check if <code>EthereumHardfork::Paris</code> is …\nConvenience method to check if <code>EthereumHardfork::Paris</code> is …\nConvenience method to check if <code>EthereumHardfork::Prague</code> is …\nConvenience method to check if <code>EthereumHardfork::Prague</code> is …\nConvenience method to check if <code>EthereumHardfork::Shanghai</code> …\nConvenience method to check if <code>EthereumHardfork::Shanghai</code> …\nConvenience method to check if …\nConvenience method to check if …\nReturns true if the fork condition is timestamp based.\nReturns true if the fork condition is TTD based.\nEthereum mainnet list of hardforks.\nCreates a new <code>EthereumChainHardforks</code> with Mainnet …\nRetrieves the activation block for the specified hardfork …\nRetrieves the activation timestamp for the specified …\nFork name.\nReturns variant as <code>str</code>.\nCreates a new <code>Head</code> instance.\nCreates a new <code>EthereumChainHardforks</code> with the given list …\nCreate the filter from provided head, genesis block hash, …\nNext upcoming fork block number or timestamp, 0 if not yet …\nThe number of the head block.\nThe previously active <code>ForkId</code> before the transition\nEthereum sepolia list of hardforks.\nCreates a new <code>EthereumChainHardforks</code> with Sepolia …\nRetrieves the activation block for the specified hardfork …\nRetrieves the activation timestamp for the specified …\nManually set the current fork id.\nSet the current head.\nThe timestamp of the head block.\nThe total difficulty at the head block.\nChecks if the given block is the first block that …\nChecks if the given block is the first block that …\nGet the total terminal difficulty for this fork condition.\nUpdates the head block with new information.\nCheck whether the provided <code>ForkId</code> is compatible based on …\nThe activation block number for the merge.\nThe block number at which TTD is reached, if it is known.\nThe total difficulty after which the fork is activated.\nlocally configured forkId\nlocally configured forkId\n<code>ForkId</code> received from remote\n<code>ForkId</code> received from remote\nArbitrum One hardfork starting points\nArbitrum Sepolia hardfork starting points\nCancun arbitrum hard fork activation block is 190301729.\nCancun arbitrum hard fork activation timestamp is …\nParis arbitrum hard fork activation timestamp is …\nPrague arbitrum hard fork activation block is 348448105.\nPrague arbitrum hard fork activation timestamp is …\nShanghai arbitrum hard fork activation block is 184097479.\nShanghai arbitrum hard fork activation timestamp is …\nCancun arbitrum sepolia hard fork activation block is …\nCancun arbitrum sepolia hard fork activation timestamp is …\nParis arbitrum sepolia hard fork activation timestamp is …\nPrague arbitrum sepolia hard fork activation block is …\nPrague arbitrum sepolia hard fork activation timestamp is …\nShanghai arbitrum sepolia hard fork activation block is …\nShanghai arbitrum sepolia hard fork activation timestamp …\nError type for hardfork related errors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the error message\nCreates a new hardfork parse error with the given message\nHolesky hardfork starting points\nHoodi hardfork starting points\nEthereum Mainnet hardfork starting points\nSepolia hardfork starting points\nCancun holesky hard fork activation block is 894733.\nCancun holesky hard fork activation timestamp is …\nParis holesky hard fork activation timestamp is 1695902100.\nPrague holesky hard fork activation block is 3419704.\nPrague holesky hard fork activation timestamp is …\nParis holesky hard fork activation block is 6698.\nSanghai holesky hard fork activation timestamp is …\nPrague hoodi hard fork activation block is 60412.\nPrague hoodi hard fork activation timestamp is 1742999832.\nArrow Glacier hard fork activation block is 13773000.\nArrow Glacier hard fork activation timestamp is 1639036523.\nBerlin hard fork activation block is 12244000.\nBerlin hard fork activation timestamp is 1618481223.\nByzantium hard fork activation block is 4370000.\nByzantium hard fork activation timestamp is 1508131331.\nCancun hard fork activation block is 19426587.\nCancun hard fork activation timestamp is 1710338135.\nConstantinople hard fork activation block is 7280000, same …\nConstantinople hard fork activation timestamp is …\nDao hard fork activation  is 1920000.\nDao hard fork activation timestamp is 1468977640.\nFrontier hard fork activation block is 0.\nFrontier hard fork activation timestamp is 1438226773.\nGray Glacier hard fork activation block is 15050000.\nGray Glacier hard fork activation timestamp is 1656586444.\nHomestead hard fork activation block is 1150000.\nHomestead hard fork activation timestamp is 1457938193.\nIstanbul hard fork activation block is 9069000.\nIstanbul hard fork activation timestamp is 1575807909.\nLondon hard fork activation block is 12965000.\nLondon hard fork activation timestamp is 1628166822.\nMuir Glacier hard fork activation block is 9200000.\nMuir Glacier hard fork activation timestamp is 1577953849.\nParis hard fork activation block is 15537394.\nParis hard fork activation timestamp is 1663224162.\nParis hard fork activation terminal total difficulty is …\nPetersburg hard fork activation block is 7280000.\nPetersburg hard fork activation timestamp is 1551340324, …\nPrague hard fork activation block is 22431084.\nPrague hard fork activation timestamp is 1746612311.\nShanghai hard fork activation block is 17034870.\nShanghai hard fork activation timestamp is 1681338455.\nSpurious Dragon hard fork activation block is 2675000.\nSpurious Dragon hard fork activation timestamp is …\nTangerine hard fork activation block is 2463000.\nTangerine hard fork activation timestamp is 1476753571.\nCancun sepolia hard fork activation block is 5187023.\nCancun sepolia hard fork activation timestamp is …\nParis sepolia hard fork activation block is 1450409.\nParis sepolia fork block is 1735371. See <code>ForkCondition::TTD</code>…\nParis sepolia hard fork activation timestamp is 1633267481.\nParis sepolia hard fork activation terminal total …\nPrague sepolia hard fork activation block is 7836331.\nPrague sepolia hard fork activation timestamp is …\nShanghai sepolia hard fork activation block is 2990908.\nPrague sepolia hard fork activation block is 1677557088.")