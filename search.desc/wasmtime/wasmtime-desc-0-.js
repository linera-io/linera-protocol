searchState.loadedDescShard("wasmtime", 0, "Wasmtime’s embedding API\nThe <code>anyref</code> type, aka <code>(ref null any)</code>.\nThe <code>anyref</code> type, aka <code>(ref null any)</code>.\nThe <code>arrayref</code> type, aka <code>(ref null array)</code>.\nThe <code>arrayref</code> type, aka <code>(ref null array)</code>.\nWhen the <code>component-model</code> feature is enabled this trap …\nThe abstract <code>any</code> heap type represents all internal Wasm …\nAn internal reference.\nSupport for <code>anyref</code> disabled at compile time because the <code>gc</code> …\nAn internal reference.\nThe abstract <code>array</code> heap type represents a reference to any …\nSupport for <code>arrayref</code> disabled at compile time because the …\nSupport for <code>ArrayRefPre</code> disabled at compile time because …\nThe type of a WebAssembly array.\nA trait used to get shared access to a <code>Store</code> in Wasmtime.\nA trait used to get exclusive mutable access to a <code>Store</code> in …\nUsed to indicate that a trap was raised by atomic wait …\nAn indicator that the compilation strategy should be …\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nPassed to the argument of [<code>Store::call_hook</code>] to indicate a …\nA structure representing the caller’s context when …\nIndicates the VM is calling a host function, from …\nIndicates the VM is calling a WebAssembly function, from …\nWhen the <code>component-model</code> feature is enabled this trap …\nBuilder-style structure used to create a <code>Module</code> or …\nReturn value of <code>CodeBuilder::hint</code>\nManagement of executable memory within a <code>MmapVec</code>\nA compiled wasm module, ready to be instantiated.\nHint that the code being compiled is a component.\nThe input bytes look like a precompiled wasm component.\nA reference to an array of a specific, concrete type.\nA reference to a function of a specific, concrete type.\nA reference to an struct of a specific, concrete type.\nGlobal configuration options used to create an <code>Engine</code> and …\nThe global value, struct field, or array elements are …\nExtend the deadline by the specified number of ticks.\nCurrently the default backend, Cranelift aims to be a …\nUse a custom version string. Must be at most 255 bytes.\nValue returned by <code>ResourceLimiter::instances</code> default method\nValue returned by <code>ResourceLimiter::memories</code> default method\nValue returned by <code>ResourceLimiter::tables</code> default method\nThe host information associated with the <code>Store</code>, aka the <code>T</code> …\nSupport is disabled, and wasmtime will not parse debug …\nThe <code>externref</code> type, aka <code>(ref null extern)</code>.\nThe <code>externref</code> type, aka <code>(ref null extern)</code>.\nSupport is unconditionally enabled and wasmtime will parse …\nAn <code>Engine</code> which is a global context for compilation and …\nA weak reference to an <code>Engine</code>.\nSupport for backtrace details is conditional on the …\nThe abstract <code>eq</code> heap type represenets all internal Wasm …\nA convenience wrapper for <code>Result&lt;T, anyhow::Error&gt;</code>.\nAn exported WebAssembly value.\nA descriptor for an exported WebAssembly value.\nAn external item to a WebAssembly module, or a list of …\nThe abstract <code>extern</code> heap type represents external host …\nA reference to an value outside of the Wasm heap.\nSupport for <code>externref</code> disabled at compile time because the …\nAn external reference.\nA list of all possible types which can be externally …\nFloating point 32 bit integer.\nA 32-bit float.\nFloating point 64 bit integer.\nA 64-bit float.\nThe <code>funcref</code> type, aka <code>(ref null func)</code>.\nThe <code>funcref</code> type, aka <code>(ref null func)</code>.\nThe type of a <code>struct</code> field or an <code>array</code>’s elements.\nThe associated type is final.\nIndicator of whether a type is final or not.\nDescription of a frame in a backtrace for a <code>WasmBacktrace</code>.\nDebug information for a symbol that is attached to a …\nA WebAssembly function which can be called.\nA WebAssembly <code>func</code> which can be called.\nThe abstract <code>func</code> heap type represents a reference to any …\nThis external type is the type of a WebAssembly function.\nA first-class reference to a WebAssembly function.\nA function reference.\nThe type of a WebAssembly function.\nAn error returned when attempting to allocate a GC-managed …\nA common trait implemented by all garbage-collected …\nA WebAssembly <code>global</code> value which can be read and written …\nA WebAssembly <code>global</code> which acts like a <code>Cell&lt;T&gt;</code> of sorts, …\nThis external type is the type of a WebAssembly global.\nA WebAssembly global descriptor.\nA wasm atomic operation was presented with a …\nThe heap types that can Wasm can have references to.\n<code>i16</code>, a 16-bit integer.\nSupport for <code>i31ref</code> disabled at compile time because the <code>gc</code> …\nThe <code>i31</code> heap type represents unboxed 31-bit integers.\nThe <code>i31ref</code> type, aka <code>(ref null i31)</code>.\nThe <code>i31ref</code> type, aka <code>(ref null i31)</code>.\nSigned 32 bit integer.\nA 32-bit integer.\nSigned 64 bit integer.\nA 64-bit integer.\n<code>i8</code>, an 8-bit integer.\nA descriptor for an imported value into a wasm module.\nIndirect call to a null table entry.\nAn instantiated WebAssembly module.\nRepresents the module instance allocation strategy to use.\nAn instance, pre-instantiation, that is ready to be …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nExecution has potentially run too long and may be …\nInternal trait implemented for all arguments that can be …\nCollect profiling info for “jitdump” file format, used …\nA linear memory. This trait provides an interface for raw …\nStructure used to link wasm modules/instances together.\nThis type has been disabled because the <code>gc</code> cargo feature …\nA WebAssembly linear memory.\nA WebAssembly linear memory.\nThis external type is the type of a WebAssembly memory.\nError for out of bounds <code>Memory</code> access.\nA memory creator. Can be used to provide a memory creator …\nAn out-of-bounds memory access.\nA descriptor for a WebAssembly memory type.\nA builder for <code>MemoryType</code>s.\nIndicates that <code>wait</code> did not complete and instead returned …\nA compiled WebAssembly module, ready to be instantiated.\nHint that the code being compiled is a module.\nThe input bytes look like a precompiled core wasm module.\nDescribes the location of an export in a module.\nConfigure the strategy used for versioning in serializing …\nIndicator of whether a global value, struct’s field, or …\nThe <code>nullexternref</code> type, aka <code>(ref null noextern)</code>.\nThe <code>nullexternref</code> type, aka <code>(ref null noextern)</code>.\nThe <code>nullfuncref</code> type, aka <code>(ref null nofunc)</code>.\nThe <code>nullfuncref</code> type, aka <code>(ref null nofunc)</code>.\nThe <code>nullref</code> type, aka <code>(ref null none)</code>.\nThe <code>nullref</code> type, aka <code>(ref null none)</code>.\nA reference to the abstract <code>noextern</code> heap value.\nThe abstract <code>noextern</code> heap type represents the null …\nA reference to the abstract <code>nofunc</code> heap value.\nThe abstract <code>nofunc</code> heap type represents the null function …\nThe associated type is not final.\nThe abstract <code>none</code> heap type represents the null internal …\nEmit no version string in serialization, and accept all …\nNo optimizations performed, minimizes compilation time by …\nNo profiler support.\nAttempt to get the bits of a null <code>i31ref</code>.\nCall to a null reference.\nIndicates that a <code>wait</code> completed by being awoken by a …\nThe on-demand instance allocation strategy.\nPossible optimization levels for the Cranelift codegen …\nWhen wasm code is configured to consume fuel and it runs …\nCollect function name information as the “perf map” …\nReturn value from the <code>Engine::detect_precompiled</code> API.\nSelect which profiling technique to support.\nA reference.\nAn opaque reference to some type on the heap.\nOpaque references to data in the Wasm heap or to host data.\nUsed by hosts to limit resource consumption of instances.\nA summary of the amount of resources required to …\nA convenience wrapper for <code>Result&lt;T, anyhow::Error&gt;</code>.\nIndicates the VM is returning from a host function, to …\nIndicates the VM is returning from a WebAssembly function, …\nThis type has been disabled because the <code>gc</code> cargo feature …\nThis type is disabled because the <code>gc</code> cargo feature was not …\nA trait implemented for GC references that are guaranteed …\nThe <code>structref</code> type, aka <code>(ref null struct)</code>.\nThe <code>structref</code> type, aka <code>(ref null struct)</code>.\nA constructor for externally-created shared memory.\nA WebAssembly shared memory; these are handled separately …\nGenerates the fastest possible code, but may take longer.\nSimilar to <code>speed</code>, but also performs transformations aimed …\nThe current stack space was exhausted.\nThe storage type of a <code>struct</code> field or <code>array</code> element.\nA <code>Store</code> is a collection of WebAssembly instances and …\nA temporary handle to a <code>&amp;Store&lt;T&gt;</code>.\nA temporary handle to a <code>&amp;mut Store&lt;T&gt;</code>.\nProvides limits for a <code>Store</code>.\nUsed to build <code>StoreLimits</code>.\nPossible Compilation strategies for a wasm module.\nThe abstract <code>struct</code> heap type represents a reference to …\nSupport for <code>structref</code> disabled at compile time because the …\nSupport for <code>StructRefPre</code> disabled at compile time because …\nThe type of a WebAssembly struct.\nA WebAssembly <code>table</code>, or an array of values.\nA WebAssembly <code>table</code> which is an array of <code>Val</code> reference …\nThis external type is the type of a WebAssembly table.\nAn out-of-bounds access to a table.\nA descriptor for a table in a WebAssembly module.\nIndicates that <code>wait</code> completed with a timeout, meaning that …\nRepresentation of a WebAssembly trap and what caused it to …\nA statically typed WebAssembly function.\nError for an unresolvable import.\nCode that was supposed to have been unreachable was …\nWhat to do after returning from a callback when the engine …\nRepresentation of a 128-bit vector type, <code>v128</code>, for …\nA 128 bit number.\nA 128-bit number.\nCollect profiling info using the “ittapi”, used with …\nPossible runtime values that a WebAssembly module can …\nA “raw” and unsafe representation of a WebAssembly …\nA list of all possible value types in WebAssembly.\nA value type.\nThe value of the global, struct field, or array elements …\nResult of <code>Memory::atomic_wait32</code> and <code>Memory::atomic_wait64</code>\nRepresentation of a backtrace of function frames in a …\nSelect how wasm backtrace detailed information is handled.\nA trait used for <code>Func::typed</code> and with <code>TypedFunc</code> to …\nA trait used for <code>Func::typed</code> and with <code>TypedFunc</code> to …\nA trait implemented for types which can be returned from …\nA trait implemented for types which can be arguments and …\nTrait implemented for various tuples made up of types …\nUse the wasmtime crate’s Cargo package version.\nA baseline compiler for WebAssembly, currently under …\nGet the map from <code>.text</code> section offsets to Wasm binary …\nReturns the encoded address map section used to pass to …\nAliases one item’s name as another.\nAliases one module’s name as another.\nSets the instance allocation strategy to use.\nConfigures whether this <code>Linker</code> will shadow previous …\nConfigures whether this <code>Linker</code> will allow unknown exports …\nAttempt to access the underlying value of this <code>Val</code>, …\nAttempt to access the underlying <code>anyref</code> value of this <code>Val</code>.\nCreates a WebAssembly <code>anyref</code> value\nGet the array-to-Wasm trampoline for the function <code>index</code> …\nGet the underlying <code>any</code> reference, if any.\nGet the underlying concrete, user-defined array type, if …\nGet the underlying concrete, user-defined function type, …\nGet the underlying concrete, user-defined struct type, if …\nReturns the store context that this type provides access …\nReturns the store context that this type provides access …\nGet the underlying <code>extern</code> reference, if any.\nGet the underlying <code>func</code> reference, if any.\nReturn the allocated memory as a mutable pointer to u8.\nGet the underlying reference type, if this value type is a …\nReturns the representation of this <code>v128</code> as a 128-bit …\nGet this storage type’s underlying value type, if any.\nEquivalent of the WebAssembly <code>memory.atomic.notify</code> …\nEquivalent of the WebAssembly <code>memory.atomic.wait32</code> …\nEquivalent of the WebAssembly <code>memory.atomic.wait64</code> …\nGet the bottom type of this heap type’s type hierarchy.\nConsumes this builder and returns the <code>StoreLimits</code>.\nGet the underlying memory type that this builder has been …\nReturns the number of allocated bytes which are accessible …\nInvokes this WebAssembly function with the specified …\nInvokes this function with the <code>params</code> given and writes …\nInvokes this function in an “unchecked” fashion, …\nCaptures a trace of the WebAssembly frames on the stack …\nReturns the underlying owned mmap of this compiled image.\nReturns the 1-indexed source code column number this …\nSame as <code>CodeBuilder::compile_module_serialized</code> except that …\nFinishes this compilation and produces a serialized list …\nReturns the configuration settings that this engine is …\nConfigures whether execution of WebAssembly will “…\nReturns the value type of this global descriptor.\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nConfigures whether the debug verifier of Cranelift is …\nAllows setting a Cranelift boolean flag or preset. This …\nAllows settings another Cranelift flag defined by a flag …\nConfigures whether Cranelift should perform a …\nConfigures the Cranelift code generator optimization level.\nControls whether proof-carrying code (PCC) is used to …\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nReturns this memory as a native Rust slice.\nReturn access to the available portion of the shared …\nSame as <code>Memory::data_mut</code>, but also returns the <code>T</code> from the …\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nReturns this memory as a native Rust mutable slice.\nReturns the base pointer, in the host’s address space, …\nReturns the byte length of this memory.\nReturns the byte length of this memory.\nConfigures whether DWARF debug information will be emitted …\nDefines a new item in this <code>Linker</code>.\nSame as <code>Linker::define</code>, except only the name of the import …\nImplement any function imports of the <code>Module</code> with a …\nImplement any imports of the given <code>Module</code> with a function …\nDeserializes an in-memory compiled module previously …\nSame as <code>deserialize</code>, except that the contents of <code>path</code> are …\nConfigures an embedder-provided function, <code>detect</code>, which is …\nDetects whether the bytes provided are a precompiled …\nLike <code>Engine::detect_precompiled</code>, but performs the …\nReturns the contents of the <code>ELF_WASMTIME_DWARF</code> section.\nSet the DWARF package binary.\nExplicitly specify DWARF <code>.dwp</code> path.\nConfigures the size, in bytes, of the guard region used at …\nConfigures the size, in bytes, of the extra virtual memory …\nReturns the element value type of this table.\nGet this field type’s storage type.\nGet the storage type used for this array type’s elements.\nEnables clif output when compiling a WebAssembly module.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the <code>Engine</code> this is connected to.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the <code>Engine</code> that this store is associated with.\nReturns the <code>Engine</code> that this <code>Module</code> was compiled by.\nGet the engine that this struct type is associated with.\nGet the engine that this array type is associated with.\nGet the engine that this function type is associated with.\nIndicates the VM is entering host code (exiting …\nConfigures epoch-deadline expiration to invoke a custom …\nConfigures epoch-deadline expiration to trap.\nConfigures epoch-deadline expiration to trap.\nEnables epoch-based interruption.\nIs value type <code>a</code> precisely equal to value type <code>b</code>?\nIs reference type <code>a</code> precisely equal to reference type <code>b</code>?\nIs heap type <code>a</code> precisely equal to heap type <code>b</code>?\nIs field type <code>a</code> precisely equal to field type <code>b</code>?\nIs field type <code>a</code> precisely equal to field type <code>b</code>?\nIs struct type <code>a</code> precisely equal to struct type <code>b</code>?\nIs array type <code>a</code> precisely equal to array type <code>b</code>?\nIs function type <code>a</code> precisely equal to function type <code>b</code>?\nIndicates the VM is exiting host code (entering …\nReturns the list of exported items from this <code>Instance</code>.\nReturns the list of exports that this <code>Module</code> has and will …\nAttempt to access the underlying value of this <code>Val</code>, …\nAttempt to access the underlying <code>externref</code> value of this …\nCreates a WebAssembly <code>externref</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>f32</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>f64</code> value\nGet the <code>i</code>th field type.\nGet this array’s underlying field type.\nReturns the list of field types for this function.\nReturns the source code filename this symbol was defined …\nFill <code>table[dst..(dst + len)]</code> with the given value.\nGet the finality of this struct type.\nGet the finality of this array type.\nGet the finality of this function type.\nReturns the body of the function that <code>index</code> points to.\nReturns an iterator over all functions defined within this …\nUnconditionally captures a trace of the WebAssembly frames …\nA configuration option to force the usage of <code>memfd_create</code> …\nReturns a list of function frames in WebAssembly this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>CompiledModule</code> directly from a precompiled …\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nConverts the raw representation of a <code>funcref</code> into an …\nConvenience method to convert a <code>ValRaw</code> into a <code>Val</code>.\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nConverts a byte back into a <code>Trap</code> if its in-bounds\nConfigures this <code>Store</code> to yield while executing futures …\nConfigures this <code>Store</code> to periodically yield while …\nConfigures a <code>Store</code> to yield execution of async WebAssembly …\nReturns the underlying <code>Func</code> that this is wrapping, losing …\nAttempt to return the underlying type of this external …\nLookups a defined function by a program counter value.\nReturns the WebAssembly function index for this frame.\nGets the function location information for a given …\nLooks up the <code>name</code> section name for the function index <code>idx</code>, …\nReturns a descriptive name of the function for this frame, …\nReturns the data in the <code>ELF_NAME_DATA</code> section.\nCreates a <code>Func::new</code>-style function named in this linker.\nCreates a <code>Func::new_unchecked</code>-style function named in this …\nReturns the offset from the original wasm module’s …\nAttempt to access the underlying value of this <code>Val</code>, …\nDefine a host function within this linker.\nAttempt to access the underlying <code>funcref</code> value of this <code>Val</code>.\nCreates a WebAssembly <code>funcref</code> value\nGet information about functions in this module’s <code>.text</code> …\nConfigures whether compiled artifacts will contain …\nLooks up a previously defined value in this <code>Linker</code>, …\nReturns the current <code>Val</code> of this global.\nReturns the table element value at <code>index</code>.\nGets the WebAssembly <code>anyref</code> value\nLooks up a value in this <code>Linker</code> which matches the <code>import</code> …\nReturns the “default export” of a module.\nLooks up an export from the caller’s module by the <code>name</code> …\nLooks up an exported <code>Extern</code> value by name.\nLooks up an export in this <code>Module</code> by name.\nLooks up an export in this <code>Module</code> by name to get its index.\nGets the WebAssembly <code>externref</code> value\nGets the WebAssembly <code>f32</code> value\nGets the WebAssembly <code>f64</code> value\nReturns the remaining fuel in the store.\nReturns the remaining fuel in this store.\nReturns remaining fuel in this store.\nReturns the amount fuel in this <code>Store</code>. When fuel is …\nLooks up an exported <code>Func</code> value by name.\nGets the WebAssembly <code>funcref</code> value\nLooks up an exported <code>Global</code> value by name.\nGets the WebAssembly <code>i32</code> value\nGets the WebAssembly <code>i64</code> value\nLooks up an exported <code>Memory</code> value by name.\nLooks up an exported <code>Extern</code> value by a <code>ModuleExport</code> value.\nLooks up an exported <code>SharedMemory</code> value by name.\nLooks up an exported <code>Table</code> value by name.\nLooks up an exported <code>Func</code> value by name and with its type.\nGets the WebAssembly <code>i32</code> value\nGets the WebAssembly <code>i64</code> value\nGets the WebAssembly <code>v128</code> value\nAttempt to return the underlying type of this external …\nGrows the size of this table by <code>delta</code> more elements, …\nGrows this WebAssembly memory by <code>delta</code> pages.\nGrows this WebAssembly memory by <code>delta</code> pages.\nGrows this memory to have the <code>new_size</code>, in bytes, …\nIndicates whether a guard region is present before …\nIndicates whether this module came with n address map such …\nReturns whether the original wasm module had unparsed …\nThe heap type that this is a reference to.\nReturns a hint, if possible, of what the provided bytes …\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>i32</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>i64</code> value\nReturns the range of bytes in memory where this module’s …\nReturns the list of imports that this <code>Module</code> has and must …\nIncrements the epoch.\nForce initialization of copy-on-write images to happen …\nConvenience wrapper to define an entire <code>Instance</code> in this …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nInstantiates this instance, creating a new instance within …\nAttempts to instantiate the <code>module</code> provided.\nPerforms all checks necessary for instantiating <code>module</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Store</code>, destroying it, and returns the …\nConsume this <code>Export</code> and return the contained <code>Extern</code>.\nReturns the underlying <code>Func</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Func</code>, if it’…\nReturns the underlying <code>Global</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Global</code>, if it…\nRecover this error’s inner host value.\nReturns the underlying <code>Memory</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Memory</code>, if it…\nReturns the underlying <code>SharedMemory</code>, if this external is a …\nReturns the underlying <code>Table</code>, if this external is a table.\nConsume this <code>Export</code> and return the contained <code>Table</code>, if it…\nReturns whether this is a 64-bit memory or not.\nIs this an abstract type?\nIs this the abstract <code>any</code> heap type?\nIs this an <code>any</code> reference?\nIs this the <code>anyref</code> (aka <code>(ref null any)</code>) type?\nIs this the bottom type within its type hierarchy?\nIs this a concrete, user-defined heap type?\nIs this a concrete, user-defined array type?\nIs this a concrete, user-defined function type?\nIs this a concrete, user-defined struct type?\nIs this constant?\nIs this the abstract <code>extern</code> heap type?\nIs this an <code>extern</code> reference?\nIs this the <code>externref</code> (aka <code>(ref null extern)</code>) type?\nIs this the <code>f32</code> type?\nIs this the <code>f64</code> type?\nIs this final?\nIs this the abstract <code>func</code> heap type?\nIs this a <code>func</code> reference?\nIs this the <code>funcref</code> (aka <code>(ref null func)</code>) type?\nIs this an <code>i16</code>?\nIs this the abstract <code>i31</code> heap type?\nIs this the <code>i32</code> type?\nIs this the <code>i64</code> type?\nIs this an <code>i8</code>?\nIs this the abstract <code>nofunc</code> heap type?\nIs this non-final?\nIs this a non-null reference?\nIs this the abstract <code>none</code> heap type?\nIs this a null reference?\nCan this type of reference be null?\nReturns true if <code>ValType</code> matches any of the numeric types. …\nReturns true if <code>ValType</code> is any kind of reference type.\nReturns whether this is a shared memory or not.\nIs this the top type within its type hierarchy?\nIs this the <code>v128</code> type?\nIs this a Wasm value type?\nIs this variable?\nReturns an iterator over all items defined in this <code>Linker</code>, …\nConfigures the <code>ResourceLimiter</code> used to limit resource …\nReturns the 1-indexed source code line number this symbol …\nLooks up the given offset within this module’s text …\nConfigures whether, when on macOS, Mach ports are used for …\nDoes this value type match the other type?\nDoes this reference type match the other?\nDoes this heap type match the other heap type?\nDoes this field type match the other field type?\nDoes this field type match the other field type?\nDoes this struct type match the other struct type?\nDoes this array type match the other array type?\nDoes this function type match the other function type?\nDoes this function match the given type?\nDoes this value match the given type?\nDoes this reference value match the given type?\nSet the maximum size, in units of pages, for the memory …\nThe maximum initial size required by any memory, in units …\nThe maximum initial size required by any table.\nConfigures the maximum amount of stack space available for …\nReturns the optionally-specified maximum number of …\nReturns the optionally-specified maximum number of pages …\nReturns the maximum number of bytes the memory can grow to.\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nAttempt to return the underlying type of this external …\nSet whether this is a 64-bit memory or not.\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s linear …\nConfigures the “guaranteed dense image size” for …\nConfigures whether copy-on-write memory-mapped data is …\nThe maximum number of bytes a linear memory can grow to.\nSet the minimum size, in units of pages, for the memory …\nReturns minimum number of elements this table must have\nReturns minimum number of WebAssembly pages this memory …\nReturns a reference to the underlying <code>MmapVec</code> this memory …\nReturns the underlying memory which contains the compiled …\nReturns a reference to the module that this <code>InstancePre</code> …\nReturn a reference-counting pointer to a module.\nDefine automatic instantiations of a <code>Module</code> in this linker.\nGet this instance’s module.\nReturns the module name that the unknown import was …\nReturns the module for this frame.\nReturns the module name that this import is expected to …\nReturn a reference to a mutable module (if possible).\nReturns the offset within the original wasm module this …\nConfigure the version information used in serialized and …\nGet whether or not this field type is mutable.\nGet this array type’s mutability and whether its …\nReturns whether or not this global is mutable.\nReturns the name by which this export is known.\nReturns the field name of the module that the unknown …\nReturns identifier/name that this <code>Module</code> has. This name is …\nReturns the function name associated with this symbol.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known.\nConfigures whether to generate native unwind information …\nCreates a new <code>CodeMemory</code> by taking ownership of the …\nCreates a new <code>StoreLimitsBuilder</code>.\nCreates a new <code>Linker</code>.\nCreates a new <code>Store</code> to be associated with the given <code>Engine</code> …\nCreates a new builder which will insert modules into the …\nCreates a new <code>Func</code> with the given arguments, typically to …\nCreates a new WebAssembly <code>global</code> value with the provide …\nCreates a new <code>Table</code> with the given parameters.\nCreates a new <code>Instance</code> from the previously compiled <code>Module</code> …\nCreates a new WebAssembly memory given the configuration …\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nConstruct a new reference type.\nConstruct a new field type from the given parts.\nConstruct a new <code>StructType</code> with the given field types.\nConstruct a new <code>ArrayType</code> with the given field type’s …\nCreates a new function type from the given parameters and …\nCreates a new global descriptor of the specified <code>content</code> …\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a 32-bit WebAssembly memory …\nCreates a new configuration object with the default …\nCreates a new <code>Engine</code> with the specified compilation and …\nCreates a new descriptor for a 64-bit WebAssembly memory …\nCreate a new <code>LinearMemory</code> object from the specified …\nAn unchecked version of <code>Func::typed</code> which does not perform …\nCreates a new <code>Func</code> with the given arguments, although has …\nGet the null <code>(ref null nofunc)</code> (aka <code>nullfuncref</code>) reference.\nGet the null <code>(ref null noextern)</code> (aka <code>nullexternref</code>) …\nCreate a null reference to the given heap type.\nCreate a null reference that is compatible with any of …\nReturns the null function reference value.\nReturns the null function reference value.\nReturns the null function reference value.\nGet the null <code>(ref null nofunc)</code> (aka <code>nullfuncref</code>) reference …\nGet the null <code>(ref null noextern)</code> (aka <code>nullexternref</code>) …\nReturns the null reference for the given heap type.\nGet the null <code>(ref null nofunc)</code> (aka <code>nullfuncref</code>) reference …\nGet the null <code>(ref null noextern)</code> (aka <code>nullexternref</code>) …\nThe number of memories that are required.\nThe number of tables that are required.\nReturns the size of a page, in bytes, for this memory.\nReturns the size of a page, in bytes, for this memory.\nThis memory’s page size, in bytes.\nSet the log base 2 of the page size, in bytes, for the …\nReturns the log2 of this memory’s page size, in bytes.\nThe log2 of this memory’s page size, in bytes.\nGet the <code>i</code>th parameter type.\nReturns the list of parameter types for this function.\nReturns a <code>std::hash::Hash</code> that can be used to check …\nAhead-of-time (AOT) compiles a WebAssembly module.\nCreates a default profiler based on the profiling strategy …\nPublishes the internal ELF image to be ready for execution.\nSafely reads memory contents at the given offset into a …\nGet this value’s underlying reference, if any.\nThis option can be used to control the behavior of the …\nReturns a summary of the resources required to instantiate …\nGet the <code>i</code>th result type.\nReturns the list of result types for this function.\nReturns whether the engine <code>a</code> and <code>b</code> refer to the same …\nSerializes this module to a vector of bytes.\nAttempts to set the current value of this global to <code>Val</code>.\nWrites the <code>val</code> provided into <code>index</code> within this table.\nSets the epoch deadline to a certain number of ticks in …\nSets the epoch deadline to a certain number of ticks in …\nSet the amount of fuel in this store to be consumed when …\nSet the amount of fuel in this store.\nSet the fuel to this <code>Store</code> for wasm to consume while …\nSet the sharedness for the memory type being built.\nCreates a new descriptor for shared WebAssembly memory …\nReturns the current size of this table.\nReturns the size, in units of pages, of this Wasm memory.\nReturns the size, in WebAssembly pages, of this wasm …\nReturns the stack map information for all functions …\nIndicates that the “static” style of memory should …\nConfigures the size, in bytes, of the guard region used at …\nConfigures the maximum size, in bytes, where a linear …\nConfigures which compilation strategy will be used for …\nGet the supertype of this struct type, if any.\nGet the supertype of this array type, if any.\nGet the supertype of this function type, if any.\nReturns the debug symbols found, if any, for this function …\nAttempt to return the underlying type of this external …\nThe maximum number of elements in a table.\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s table …\nIndicates whether to initialize tables lazily, so that …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nSets the target triple for the <code>Config</code>.\nReturns the contents of the text section of the ELF …\nReturns the text section of the ELF image for this …\nGet this module’s code object’s <code>.text</code> section, …\nEagerly initialize thread-local functionality shared by …\nExtracts the raw value of this <code>Func</code>, which is owned by …\nConvenience method to convert this <code>Val</code> into a <code>ValRaw</code>.\nGet the top type of this heap type’s type hierarchy.\nReturns the contents of the <code>ELF_WASMTIME_TRAPS</code> section, or …\nIndicates that a trap should be raised whenever a growth …\nReturns the underlying wasm type that this <code>Func</code> has.\nReturns the underlying type of this <code>global</code>.\nReturns the underlying type of this table, including its …\nReturns the type associated with this <code>Extern</code>.\nReturn the <code>ExternType</code> of this export.\nReturns the type of the unknown import.\nReturns the underlying type of this memory.\nReturn the type of the shared memory.\nReturns the expected type of this import.\nReturns the type of this export.\nReturns the corresponding <code>ValType</code> for this <code>Val</code>.\nGet the type of this reference.\nAttempts to extract a typed object from this <code>Func</code> through …\nCreates a WebAssembly <code>i32</code> value\nCreates a WebAssembly <code>i64</code> value\nGet this module’s unique ID. It is unique with respect …\nUnix-specific extension for the <code>wasmtime</code> crate.\nUnload process-related trap/signal handlers and destroy …\nUnpack this (possibly packed) storage type into a full …\nGet the underlying <code>any</code> reference, panicking if this is a …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying <code>anyref</code> value of this <code>Val</code>, panicking …\nGet the underlying concrete, user-defined type, panicking …\nGet the underlying concrete, user-defined type, panicking …\nGet the underlying concrete, user-defined type, panicking …\nGet the underlying <code>extern</code> reference, panicking if this is …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying <code>externref</code> value of this <code>Val</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nGet the underlying <code>func</code> reference, panicking if this is a …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying <code>funcref</code> value of this <code>Val</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nGet the underlying reference type, panicking if this value …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nGet this storage type’s underlying value type, panicking …\nUpgrade this weak reference into an <code>Engine</code>. Returns <code>None</code> if\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>v128</code> value\nValidates <code>binary</code> input data as a WebAssembly binary given …\nGet the value type that each Type in the list represents.\nReturns the range of native addresses that WebAssembly can …\nConfigures whether <code>WasmBacktrace</code> will be present in the …\nConfigures whether backtraces in <code>Trap</code> will parse debug …\nConfigures the WebAssembly binary that is being compiled.\nReads the <code>file</code> specified for the WebAssembly bytes that …\nEquivalent of <code>CodeBuilder::wasm_binary</code> that also accepts …\nEquivalent of <code>CodeBuilder::wasm_binary_file</code> that also …\nConfigures whether the WebAssembly bulk memory operations …\nConfigures whether the WebAssembly custom-page-sizes …\nReturns the concatenated list of all data associated with …\nConfigures whether the WebAssembly extended-const proposal …\nGets the function information for a given function index.\nConfigures whether the WebAssembly memory64 proposal will …\nConfigures whether the WebAssembly multi-memory proposal …\nConfigures whether the WebAssembly multi-value proposal …\nConfigures whether the WebAssembly Relaxed SIMD proposal …\nConfigures whether the WebAssembly SIMD proposal will be …\nConfigures whether the WebAssembly tail calls proposal …\nGet the Wasm-to-array trampoline for the given signature.\nReturns the contents of the <code>ELF_WASMTIME_INFO</code> section, or …\nTake a weak reference to this engine.\nConstruct a new <code>StructType</code> with the given finality, …\nConstruct a new <code>StructType</code> with the given finality, …\nCreate a new function type with the given finality, …\nSets a custom memory creator.\nEnables memory error checking for wasm programs.\nCreates a new <code>Func</code> from the given Rust closure.\nSafely writes contents of a buffer to this memory at the …\nExtensions for the <code>Store</code> type only available on Unix.\nThe signal handler must be async-signal-safe.")