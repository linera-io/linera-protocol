searchState.loadedDescShard("slice_group_by", 0, "Crate <code>slice-group-by</code> is a library for efficiently …\nAn iterator that will return non-overlapping groups of …\nAn iterator that will return non-overlapping groups in the …\nAn iterator that will return non-overlapping groups in the …\nAn iterator that will return non-overlapping <em>mutable</em> groups\nAn iterator that will return non-overlapping <em>mutable</em> groups\nAn iterator that will return non-overlapping <em>mutable</em> …\nAn iterator that will return non-overlapping groups of …\nAn iterator that will reutrn non-overlapping groups in the …\nAn iterator that will reutrn non-overlapping groups in the …\nAn iterator that will reutrn non-overlapping <em>mutable</em> groups\nAn iterator that will reutrn non-overlapping <em>mutable</em> groups\nAn iterator that will return non-overlapping <em>mutable</em> …\nA convenient trait to construct an iterator returning …\nA convenient trait to construct an iterator returning …\nAn iterator that will return non-overlapping groups of …\nAn iterator that will return non-overlapping groups of …\nAn iterator that will return non-overlapping <em>mutable</em> …\nAn iterator that will return non-overlapping <em>mutable</em> …\nAn iterator that will return non-overlapping groups of …\nAn iterator that will return non-overlapping groups in the …\nAn iterator that will return non-overlapping groups in the …\nAn iterator that will return non-overlapping <em>mutable</em> …\nAn iterator that will return non-overlapping <em>mutable</em> …\nAn iterator that will return non-overlapping <em>mutable</em> …\nA convenient trait to construct an iterator returning …\nA convenient trait to construct an iterator returning …\nReturns an iterator on slice groups based on the …\nReturns an iterator on slice groups using the <em>binary search</em>…\nReturns an iterator on slice groups based that will use …\nReturns an iterator on <em>mutable</em> slice groups based that …\nReturns an iterator on <em>mutable</em> slice groups using the …\nReturns an iterator on <em>mutable</em> slice groups based on the …\nReturns an iterator on slice groups based on the …\nReturns an iterator on slice groups using the <em>exponential </em>…\nReturns an iterator on slice groups based that will use …\nReturns an iterator on <em>mutable</em> slice groups based that …\nReturns an iterator on <em>mutable</em> slice groups using the …\nReturns an iterator on <em>mutable</em> slice groups based on the …\nExponential searches this sorted slice for a given element.\nBinary searches this sorted slice with a comparator …\nBinary searches this sorted slice with a key extraction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns an iterator on slice groups based on the …\nReturns an iterator on <code>str</code> groups based on the …\nReturns an iterator on slice groups using the <em>linear search</em>…\nReturns an iterator on <code>str</code> groups using the <em>linear search</em> …\nReturns an iterator on slice groups based that will use …\nReturns an iterator on <code>str</code> groups based that will use the …\nReturns an iterator on <em>mutable</em> slice groups based that …\nReturns an iterator on <em>mutable</em> <code>str</code> groups based that will …\nReturns an iterator on <em>mutable</em> slice groups using the …\nReturns an iterator on <em>mutable</em> <code>str</code> groups using the <em>linear </em>…\nReturns an iterator on <em>mutable</em> slice groups based on the …\nReturns an iterator on <em>mutable</em> <code>str</code> groups based on the …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …\nReturns the remainder of the original slice that is going …")