searchState.loadedDescShard("syn_solidity", 0, "syn-solidity\n<code>abstract contract</code>\n<code>+</code>\n<code>+</code>\n<code>+=</code>\n<code>address $(payable)?</code>\nA list of import aliases: …\n<code>&amp;&amp;</code>\nA list of named or unnamed arguments: <code>{ foo: 42, bar: 64 }</code> …\nA list of either unnamed or named arguments.\nAn array literal expression: <code>[a, b, c, d]</code>.\n<code>$ty[$($size)?]</code>\nAn assembly block, with optional flags: …\nA list of flags of an assembly statement.\n<code>=</code>\nA variable assignment statement: <code>x := 1</code>.\nA binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.\nA binary operation: <code>a + b</code>, <code>a += b</code>.\n<code>&amp;</code>\n<code>&amp;</code>\n<code>&amp;=</code>\n<code>~</code>\n<code>~</code>\n<code>|</code>\n<code>|</code>\n<code>|=</code>\n<code>^</code>\n<code>^</code>\n<code>^=</code>\nA curly-braced block of statements: <code>{ ... }</code>.\nA function body delimited by curly braces.\nA blocked scope: <code>{ ... }</code>.\nA Yul blocked scope: <code>{ ... }</code>.\nA boolean literal: <code>true</code> or <code>false</code>.\n<code>bool</code>\nA break statement: <code>break;</code>.\nA break statement: <code>break</code>.\n<code>bytes</code>\nA function call expression: <code>foo(42)</code> or <code>foo({ bar: 42 })</code>.\nA function call statement: <code>foo(a, b)</code>.\nFunction call options: <code>foo.bar{ value: 1, gas: 2 }</code>.\n<code>calldata</code>\nA catch clause of a <code>StmtTry</code>: <code>catch  { ... }</code>.\n<code>constant</code>.\n<code>constant</code>\n<code>constructor</code>\nA continue statement: <code>continue;</code>.\nA continue statement: <code>continue</code>.\n<code>contract</code>\nA contract, abstract contract, interface, or library …\nThe kind of contract.\nA custom type.\nWhen calling a self defined function\n<code>days</code>\nA variable declaration statement: <code>let x := 0</code>.\n<code>--</code>\n<code>--</code>\nA unary <code>delete</code> expression: <code>delete vector</code>.\n<code>/</code>\n<code>/</code>\n<code>/=</code>\nA do-while statement: <code>do { ... } while (condition);</code>.\nWhen calling a built in evm opcode\nAn emit statement: <code>emit FooBar(42);</code>.\nA function without implementation.\nAn enum definition: <code>enum Foo { A, B, C }</code>\n<code>==</code>\n<code>==</code>\nAn error definition: <code>error Foo(uint256 a, uint256 b);</code>\n<code>ether</code>\nAn event definition: …\nAn event parameter.\nAn expression.\nAn expression with a trailing semicolon.\nAn array literal expression: <code>[a, b, c, d]</code>.\nA binary operation: <code>a + b</code>, <code>a += b</code>.\nA function call expression: <code>foo(42)</code> or <code>foo({ bar: 42 })</code>.\nFunction call options: <code>foo.bar{ value: 1, gas: 2 }</code>.\nA unary <code>delete</code> expression: <code>delete vector</code>.\nA square bracketed indexing expression: <code>vector[2]</code>.\nAccess of a named member: <code>obj.k</code>.\nA <code>new</code> expression: <code>new Contract</code>.\nA <code>payable</code> expression: <code>payable(address(0x...))</code>.\nA postfix unary expression: <code>foo++</code>.\nA ternary (AKA conditional) expression: <code>foo ? bar : baz</code>.\nA tuple expression: <code>(a, b, c, d)</code>.\nA <code>type()</code> expression: <code>type(uint256)</code>\nA unary operation: <code>!x</code>, <code>-x</code>.\n<code>external</code>\n<code>fallback</code>\nA list of semicolon-separated VariableDeclarations.\nA Solidity file. The root of the AST.\n<code>bytes&lt;size&gt;</code>\nA for statement: <code>for (uint256 i; i &lt; 42; ++i) { ... }</code>.\nA for statement: …\nA for statement initializer.\n<code>function</code>\nA function, constructor, fallback, receive, or modifier …\n…\nA function attribute.\nA list of unique function attributes. Used in ItemFunction.\nThe body of a function.\nA function definition statement: <code>function f() { ... }</code>.\nThe kind of function.\n<code>&gt;=</code>\n<code>&gt;=</code>\nA glob import directive: <code>import * as Foo from &quot;foo.sol&quot;;</code>.\n<code>&gt;</code>\n<code>&gt;</code>\n<code>gwei</code>\nA hex string literal: <code>hex&quot;1234&quot;</code>.\nA hex string.\n<code>hours</code>\nAn identifier: <code>foo</code>.\nAn <code>if</code> statement with an optional <code>else</code> block: …\nA if statement: <code>if lt(a, b) { ... }</code>.\n<code>immutable</code>.\nAn import directive: <code>import &quot;foo.sol&quot;;</code>\nAn import alias.\nA list of import aliases: …\nAn import directive: <code>import &quot;foo.sol&quot;;</code>.\nA glob import directive: <code>* as Foo from &quot;foo.sol&quot;</code>.\nThe path of an import directive.\nA plain import directive: <code>import &quot;foo.sol&quot; as Foo;</code>.\n<code>++</code>\n<code>++</code>\nA square bracketed indexing expression: <code>vector[2]</code>.\nA list of inheritance specifiers of an <code>ItemContract</code>: …\n<code>int[size]</code>\n<code>interface</code>\n<code>internal</code>\nAn AST item. A more expanded version of a Solidity source …\nA contract, abstract contract, interface, or library …\nAn enum definition: <code>enum Foo { A, B, C }</code>.\nAn error definition: <code>error Foo(uint256 a, uint256 b);</code>.\nA function, constructor, fallback, receive, or modifier …\nA struct definition: <code>struct Foo { uint256 bar; }</code>.\nA user-defined value type definition: <code>type Foo is uint256;</code>.\n<code>&lt;=</code>\n<code>&lt;=</code>\nA leave statement: <code>leave</code>.\n<code>library</code>\nA Solidity literal such as a string or integer or boolean.\nA literal: <code>hex&quot;1234&quot;</code>.\nA number literal with a sub-denomination: <code>1 ether</code>.\nAn integer or fixed-point number literal: <code>1</code> or <code>1.0</code>.\n<code>&lt;</code>\n<code>&lt;</code>\n<code>mapping($key $($key_name)? =&gt; $value $($value_name)?)</code>\nAccess of a named member: <code>obj.k</code>.\n<code>memory</code>\n<code>minutes</code>\nA modifier invocation, or an inheritance specifier.\nA Modifier attribute.\n<code>modifier</code>\n<code>*</code>\n<code>*</code>\n<code>*=</code>\nA mutability attribute.\nA Mutability attribute.\nA named argument in an argument list: <code>foo: uint256(42)</code>.\nA named argument list: <code>{ foo: uint256(42), bar: true }</code>.\n<code>!=</code>\n<code>-</code>\n<code>!=</code>\nA <code>new</code> expression: <code>new Contract</code>.\n<code>!</code>\nAn integer or fixed-point number literal: <code>1</code> or <code>1.0</code>.\n<code>||</code>\nThe <code>override</code> attribute.\nAn Override attribute.\nAn Override attribute.\nA list of comma-separated VariableDeclarations.\nA list of VariableDeclarations, separated by <code>P</code>.\n<code>payable</code>\nA <code>payable</code> expression: <code>payable(address(0x...))</code>.\nA plain import directive: <code>import &quot;foo.sol&quot; as Foo;</code>.\nPostfix unary operators.\nA postfix unary expression: <code>foo++</code>.\n<code>**</code>\nA pragma directive: <code>pragma solidity ^0.8.0;</code>\nA pragma directive: <code>pragma solidity ^0.8.0;</code>\n<code>private</code>\n<code>public</code>\n<code>pure</code>\n<code>receive</code>\n<code>%</code>\n<code>%</code>\n<code>%=</code>\nA return statement: <code>return 42;</code>.\nThe <code>returns</code> attribute of a function.\nA revert statement: <code>revert(&quot;error&quot;);</code>.\n<code>&gt;&gt;&gt;</code>\n<code>&gt;&gt;&gt;=</code>\n<code>seconds</code>\n<code>&lt;&lt;</code>\n<code>&lt;&lt;=</code>\n<code>&gt;&gt;</code>\n<code>&gt;&gt;=</code>\nA Solidity identifier.\nA list of identifiers, separated by dots.\nA statement, usually ending in a semicolon.\nAn assembly block, with optional flags: …\nA break statement: <code>break;</code>.\nA continue statement: <code>continue;</code>.\nA do-while statement: <code>do { ... } while (condition);</code>.\nAn emit statement: <code>emit FooBar(42);</code>.\nAn expression with a trailing semicolon.\nA for statement: <code>for (uint256 i; i &lt; 42; ++i) { ... }</code>.\nAn <code>if</code> statement with an optional <code>else</code> block: …\nA return statement: <code>return 42;</code>.\nA revert statement: <code>revert(&quot;error&quot;);</code>.\nA try statement: <code>try fooBar(42) catch { ... }</code>.\nA variable declaration statement: <code>uint256 foo = 42;</code>.\nA while statement: <code>while (i &lt; 42) { ... }</code>.\nA storage location.\n<code>storage</code>\nA string literal.\n<code>string</code>\nA struct definition: <code>struct Foo { uint256 bar; }</code>\n<code>-</code>\n<code>-</code>\n<code>-=</code>\nA sub-denomination suffix for a number literal.\nA switch statement: …\nA ternary (AKA conditional) expression: <code>foo ? bar : baz</code>.\nA try statement: <code>try fooBar(42) catch { ... }</code>.\nA tuple expression: <code>(a, b, c, d)</code>.\n<code>$(tuple)? ( $($types,)* )</code>\nA type name.\nA type name.\nAn array type.\nA <code>type()</code> expression: <code>type(uint256)</code>\nA function type: <code>function() returns (string memory)</code>.\nA mapping type: <code>mapping(uint key =&gt; string value)</code>\nA tuple type.\nA user-defined value type definition: <code>type Foo is uint256;</code>\n<code>uint[size]</code>\nUnary operators.\nA unary operation: <code>!x</code>, <code>-x</code>.\nAn unchecked block: <code>unchecked { ... }</code>.\nAn unchecked block: <code>unchecked { ... }</code>.\nA unicode string literal.\nA unicode string.\nA user-definable operator: <code>+</code>, <code>*</code>, <code>|</code>, etc.\nA <code>using</code> directive: …\nA <code>using</code> directive: …\nA variable declaration statement: <code>uint256 foo = 42;</code>.\nThe declaration of the variable(s) in a variable …\nA declaration of variables in a tuple: …\nA state variable or constant definition: …\nA variable attribute.\nA list of unique variable attributes.\nA variable declaration: <code>string memory hello</code>.\nAn enum variant.\n<code>view</code>\n<code>virtual</code>\nA visibility attribute.\nA Visibility attribute.\nA Visibility attribute.\nRepresents the walrus operator <code>:=</code>.\n<code>weeks</code>\n<code>wei</code>\nA while statement: <code>while (i &lt; 42) { ... }</code>.\n<code>years</code>\nA Yul block contains <code>YulStmt</code> between curly braces.\nRepresents a non-default case of a Yul switch statement.\nRepresentation of an EVM builtin opcode.\nA Yul expression.\nYul function call.\nWhat type of function is called.\nYul for loop e.g …\nYul function definition: <code>function f() -&gt; a, b { ... }</code>.\nA Yul identifier.\nA Yul if statement: <code>if lt(a, b) { sstore(0, 1) }</code>.\nIn inline assembly, only dot-less identifiers can be …\nThe return attribute of a Yul function definition.\nA Yul statement.\nA Yul switch statement can consist of only a default-case …\nRepresents the default case of a Yul switch statement.\nYul variable assignment. <code>x := 0</code> or <code>x, y := foo()</code>. …\nDeclares Yul variables, which may or may not have initial …\nReturns the Solidity ABI name for this type. This is <code>tuple</code> …\nReturns the Solidity ABI name for this type. This is <code>tuple</code> …\nConvert to a parameter declaration.\nReturns a string representation of the function body.\nReturns the identifier as a string, without the <code>r#</code> prefix …\nReturns the identifier as a string, without the <code>r#</code> prefix …\nAsserts that the event has a valid amount of indexed …\nThe Solidity attributes of the function.\nThe Solidity attributes of the function.\nThe inner attributes of the file.\nThe <code>syn</code> attributes of the function.\nThe attributes of the variable.\nReturns the base-10 digits of the literal.\nParses the literal into a selected number type.\nThe try block.\nReturns a reference to the function’s body, if any.\nReturns a mutable reference to the function’s body, if …\nReturns the function’s arguments tuple type.\nThe list of catch clauses. Cannot be parsed empty.\nReturns <code>true</code> if the event has more indexed parameters than …\nFormats <code>self</code> as an EIP-712 field: <code>&lt;ty&gt; &lt;name&gt;</code>\nReturns the argument unchanged.\nConverts a variable attribute to its corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new function from a variable definition.\nRecurses into this type and returns whether it contains a …\nSame as <code>has_custom</code>, but <code>Function</code> returns <code>false</code> rather than …\nReturns true if the function has a body.\nThe prefix of the string.\nName of the variant.\nReturns <code>true</code> if the event parameter is indexed and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Type::is_abi_dynamic</code>.\nSee <code>Type::is_abi_dynamic</code>.\nReturns whether this type is dynamic according to ABI …\nReturns true if <code>self</code> is an abstract contract.\nReturns true if <code>self</code> is an abstract contract.\nReturns true if <code>self</code> matches <code>Self::Add</code>.\nReturns true if <code>self</code> matches <code>Self::Add</code>.\nReturns true if <code>self</code> matches <code>Self::AddAssign</code>.\nReturns true if <code>self</code> matches <code>Self::And</code>.\nReturns <code>true</code> if the event is anonymous.\nReturns true if <code>self</code> matches <code>Self::Assign</code>.\nReturns true if <code>self</code> matches <code>Self::BitAnd</code>.\nReturns true if <code>self</code> matches <code>Self::BitAnd</code>.\nReturns true if <code>self</code> matches <code>Self::BitAndAssign</code>.\nReturns true if <code>self</code> matches <code>Self::BitNot</code>.\nReturns true if <code>self</code> matches <code>Self::BitNot</code>.\nReturns true if <code>self</code> matches <code>Self::BitOr</code>.\nReturns true if <code>self</code> matches <code>Self::BitOr</code>.\nReturns true if <code>self</code> matches <code>Self::BitOrAssign</code>.\nReturns true if <code>self</code> matches <code>Self::BitXor</code>.\nReturns true if <code>self</code> matches <code>Self::BitXor</code>.\nReturns true if <code>self</code> matches <code>Self::BitXorAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Calldata</code>.\nReturns true if <code>self</code> matches <code>Self::Constant</code>.\nReturns true if <code>self</code> matches <code>Self::Constructor</code>.\nReturns true if <code>self</code> is a contract.\nReturns true if <code>self</code> is a contract.\nReturns true if <code>self</code> matches <code>Self::Days</code>.\nReturns true if <code>self</code> matches <code>Self::Decrement</code>.\nReturns true if <code>self</code> matches <code>Self::Decrement</code>.\nReturns true if <code>self</code> matches <code>Self::Div</code>.\nReturns true if <code>self</code> matches <code>Self::Div</code>.\nReturns true if <code>self</code> matches <code>Self::DivAssign</code>.\nReturns <code>true</code> if the function body is empty.\nReturns true if <code>self</code> matches <code>Self::Eq</code>.\nReturns true if <code>self</code> matches <code>Self::Eq</code>.\nReturns true if <code>self</code> matches <code>Self::Ether</code>.\nReturns true if <code>self</code> matches <code>Self::External</code>.\nReturns true if <code>self</code> matches <code>Self::Fallback</code>.\nReturns true if <code>self</code> matches <code>Self::Function</code>.\nReturns true if <code>self</code> matches <code>Self::Ge</code>.\nReturns true if <code>self</code> matches <code>Self::Ge</code>.\nReturns true if <code>self</code> matches <code>Self::Gt</code>.\nReturns true if <code>self</code> matches <code>Self::Gt</code>.\nReturns true if <code>self</code> matches <code>Self::Gwei</code>.\nReturns true if <code>self</code> matches <code>Self::Hours</code>.\nReturns true if <code>self</code> matches <code>Self::Increment</code>.\nReturns true if <code>self</code> matches <code>Self::Increment</code>.\nReturns <code>true</code> if the parameter is indexed.\nReturns true if <code>self</code> is an interface.\nReturns true if <code>self</code> is an interface.\nReturns true if <code>self</code> matches <code>Self::Internal</code>.\nReturns true if <code>self</code> matches <code>Self::Le</code>.\nReturns true if <code>self</code> matches <code>Self::Le</code>.\nReturns true if <code>self</code> is a library.\nReturns true if <code>self</code> is a library.\nReturns true if <code>self</code> matches <code>Self::Lt</code>.\nReturns true if <code>self</code> matches <code>Self::Lt</code>.\nReturns true if <code>self</code> matches <code>Self::Memory</code>.\nReturns true if <code>self</code> matches <code>Self::Minutes</code>.\nReturns true if <code>self</code> matches <code>Self::Modifier</code>.\nReturns true if <code>self</code> matches <code>Self::Mul</code>.\nReturns true if <code>self</code> matches <code>Self::Mul</code>.\nReturns true if <code>self</code> matches <code>Self::MulAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Ne</code>.\nReturns true if <code>self</code> matches <code>Self::Neg</code>.\nReturns true if <code>self</code> matches <code>Self::Neq</code>.\nReturns <code>true</code> if the event parameter is stored in the event …\nReturns true if <code>self</code> matches <code>Self::Not</code>.\nReturns whether this type is ABI-encoded as a single EVM …\nReturns true if <code>self</code> matches <code>Self::Or</code>.\nReturns true if <code>self</code> matches <code>Self::Payable</code>.\nReturns true if <code>self</code> matches <code>Self::Pow</code>.\nReturns true if <code>self</code> matches <code>Self::Private</code>.\nReturns true if <code>self</code> matches <code>Self::Public</code>.\nReturns true if <code>self</code> matches <code>Self::Pure</code>.\nReturns true if <code>self</code> matches <code>Self::Receive</code>.\nReturns true if <code>self</code> matches <code>Self::Rem</code>.\nReturns true if <code>self</code> matches <code>Self::Rem</code>.\nReturns true if <code>self</code> matches <code>Self::RemAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Sar</code>.\nReturns true if <code>self</code> matches <code>Self::SarAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Seconds</code>.\nReturns true if <code>self</code> matches <code>Self::Shl</code>.\nReturns true if <code>self</code> matches <code>Self::ShlAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Shr</code>.\nReturns true if <code>self</code> matches <code>Self::ShrAssign</code>.\nReturns true if <code>self</code> matches <code>Self::Storage</code>.\nReturns true if <code>self</code> matches <code>Self::Sub</code>.\nReturns true if <code>self</code> matches <code>Self::Sub</code>.\nReturns true if <code>self</code> matches <code>Self::SubAssign</code>.\nReturns whether this type is a value type.\nReturns whether this type is a simple value type.\nReturns true if <code>self</code> matches <code>Self::View</code>.\nReturns true if the function returns nothing.\nReturns true if <code>self</code> matches <code>Self::Weeks</code>.\nReturns true if <code>self</code> matches <code>Self::Wei</code>.\nReturns true if <code>self</code> matches <code>Self::Years</code>.\nThe items in the file.\nReturns a <code>VariableDeclaration</code> corresponding to this mapping…\nSolidity keywords.\nThe list of arguments. Can be named or unnamed.\nReturns the maximum amount of indexed parameters this …\nReturns the name of the function.\nThe name of the variable. This is always Some if parsed as …\nCreate a new function of the given kind.\nCreates a new <code>Add</code> operator with the given <code>span</code>.\nCreates a new <code>Add</code> operator with the given <code>span</code>.\nCreates a new <code>AddAssign</code> operator with the given <code>span</code>.\nCreates a new <code>And</code> operator with the given <code>span</code>.\nCreates a new <code>Assign</code> operator with the given <code>span</code>.\nCreates a new <code>BitAnd</code> operator with the given <code>span</code>.\nCreates a new <code>BitAnd</code> operator with the given <code>span</code>.\nCreates a new <code>BitAndAssign</code> operator with the given <code>span</code>.\nCreates a new <code>BitNot</code> operator with the given <code>span</code>.\nCreates a new <code>BitNot</code> operator with the given <code>span</code>.\nCreates a new <code>BitOr</code> operator with the given <code>span</code>.\nCreates a new <code>BitOr</code> operator with the given <code>span</code>.\nCreates a new <code>BitOrAssign</code> operator with the given <code>span</code>.\nCreates a new <code>BitXor</code> operator with the given <code>span</code>.\nCreates a new <code>BitXor</code> operator with the given <code>span</code>.\nCreates a new <code>BitXorAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Calldata</code> keyword with the given <code>span</code>.\nCreates a new <code>Constant</code> keyword with the given <code>span</code>.\nCreates a new <code>Constructor</code> keyword with the given <code>span</code>.\nCreates a new <code>Days</code> keyword with the given <code>span</code>.\nCreates a new <code>Decrement</code> operator with the given <code>span</code>.\nCreates a new <code>Decrement</code> operator with the given <code>span</code>.\nCreates a new <code>Div</code> operator with the given <code>span</code>.\nCreates a new <code>Div</code> operator with the given <code>span</code>.\nCreates a new <code>DivAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Eq</code> operator with the given <code>span</code>.\nCreates a new <code>Eq</code> operator with the given <code>span</code>.\nCreates a new <code>Ether</code> keyword with the given <code>span</code>.\nCreates a new <code>External</code> keyword with the given <code>span</code>.\nCreates a new <code>Fallback</code> keyword with the given <code>span</code>.\nCreates a new <code>Function</code> keyword with the given <code>span</code>.\nCreates a new <code>Ge</code> operator with the given <code>span</code>.\nCreates a new <code>Ge</code> operator with the given <code>span</code>.\nCreate a new function with the given name and arguments.\nCreates a new <code>Gt</code> operator with the given <code>span</code>.\nCreates a new <code>Gt</code> operator with the given <code>span</code>.\nCreates a new <code>Gwei</code> keyword with the given <code>span</code>.\nCreates a new <code>Hours</code> keyword with the given <code>span</code>.\nCreates a new <code>Increment</code> operator with the given <code>span</code>.\nCreates a new <code>Increment</code> operator with the given <code>span</code>.\nCreates a new <code>Internal</code> keyword with the given <code>span</code>.\nCreates a new <code>Le</code> operator with the given <code>span</code>.\nCreates a new <code>Le</code> operator with the given <code>span</code>.\nCreates a new <code>Lt</code> operator with the given <code>span</code>.\nCreates a new <code>Lt</code> operator with the given <code>span</code>.\nCreates a new <code>Memory</code> keyword with the given <code>span</code>.\nCreates a new <code>Minutes</code> keyword with the given <code>span</code>.\nCreates a new <code>Modifier</code> keyword with the given <code>span</code>.\nCreates a new <code>Mul</code> operator with the given <code>span</code>.\nCreates a new <code>Mul</code> operator with the given <code>span</code>.\nCreates a new <code>MulAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Ne</code> operator with the given <code>span</code>.\nCreates a new <code>Neg</code> operator with the given <code>span</code>.\nCreates a new <code>Neq</code> operator with the given <code>span</code>.\nCreates a new <code>Not</code> operator with the given <code>span</code>.\nCreates a new <code>Or</code> operator with the given <code>span</code>.\nCreates a new <code>Payable</code> keyword with the given <code>span</code>.\nCreates a new <code>Pow</code> operator with the given <code>span</code>.\nCreates a new <code>Private</code> keyword with the given <code>span</code>.\nCreates a new <code>Public</code> keyword with the given <code>span</code>.\nCreates a new <code>Pure</code> keyword with the given <code>span</code>.\nCreates a new <code>Receive</code> keyword with the given <code>span</code>.\nCreates a new <code>Rem</code> operator with the given <code>span</code>.\nCreates a new <code>Rem</code> operator with the given <code>span</code>.\nCreates a new <code>RemAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Sar</code> operator with the given <code>span</code>.\nCreates a new <code>SarAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Seconds</code> keyword with the given <code>span</code>.\nCreates a new <code>Shl</code> operator with the given <code>span</code>.\nCreates a new <code>ShlAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Shr</code> operator with the given <code>span</code>.\nCreates a new <code>ShrAssign</code> operator with the given <code>span</code>.\nCreates a new <code>Storage</code> keyword with the given <code>span</code>.\nCreates a new <code>Sub</code> operator with the given <code>span</code>.\nCreates a new <code>Sub</code> operator with the given <code>span</code>.\nCreates a new <code>SubAssign</code> operator with the given <code>span</code>.\nCreates a new <code>View</code> keyword with the given <code>span</code>.\nCreates a new <code>Weeks</code> keyword with the given <code>span</code>.\nCreates a new <code>Wei</code> keyword with the given <code>span</code>.\nCreates a new <code>Years</code> keyword with the given <code>span</code>.\nParens are optional for modifiers: …\nParse a Solidity <code>proc_macro::TokenStream</code> into a <code>File</code>.\nParse a Solidity <code>proc_macro2::TokenStream</code> into a <code>File</code>.\nParses any identifier including keywords.\nParses any identifier including keywords.\nParses an identifier as an elementary type name.\nParses an array type from the given input stream, wrapping …\nParses the <code>payable</code> keyword from the input stream if this …\nPeeks any identifier including keywords.\nPeeks any identifier including keywords.\nReturns the inner type.\nReturns the function’s return tuple type.\nThe optional return types of the function.\nThe returns of the function. This cannot be parsed empty.\nThe optional return types of the function.\nSets the span of the event parameter.\nReturns the size of the array, or None if dynamic.\nReturns the size of the array, or None if dynamic.\nCreate a <code>SolPath</code> from a list of identifiers.\nGet the span of the event parameter\nHelper trait and methods to manipulate syntax tree nodes’…\nThe storage location of the variable, if any.\nThe type of the variable.\nThe prefix of the string.\nReturns the value of this sub-denomination.\nThe string literal.\nThe string literal.\nReturns a <code>VariableDeclaration</code> corresponding to this mapping…\nThe list of variables being declared. The list can’t be …\nSyntax tree traversal to walk a shared borrow of a syntax …\nTraverses this type while calling <code>f</code>.\nSyntax tree traversal to mutate an exclusive borrow of a …\nTraverses this type while calling <code>f</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait that can provide the <code>Span</code> of the complete contents …\nJoins the spans of each item in the given iterator.\nSets the span of this syntax tree node if it is not empty.\nSets the span of each item in the given iterator.\nReturns a <code>Span</code> covering the complete contents of this …\nSets the span of this owned syntax tree node if it is not …\nSyntax tree traversal to walk a shared borrow of a syntax …\nSyntax tree traversal to mutate an exclusive borrow of a …")