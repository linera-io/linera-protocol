searchState.loadedDescShard("cranelift_bitset", 0, "Bitsets for Cranelift.\nCompound bit sets.\nScalar bitsets.\nA large bit set backed by dynamically-sized storage.\nAn iterator over the elements in a <code>CompoundBitSet</code>.\nGet <code>n + 1</code> where <code>n</code> is the largest value that can be stored …\nRemove all elements from this bitset.\nIs <code>i</code> contained in this bitset?\nEnsure there is space in this bitset for the values <code>0..n</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert <code>i</code> into this bitset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this bitset empty?\nIterate over the elements in this bitset.\nGet the number of elements in this bitset.\nGet the largest value in this set, or <code>None</code> if this set is …\nConstruct a new, empty bit set.\nRemoves and returns the largest value in this set.\nRemove <code>i</code> from this bitset.\nConstruct a new, empty bit set with space reserved to …\nAn iterator over the elements in a <code>ScalarBitSet</code>.\nA small bitset built on top of a single primitive integer …\nA trait implemented by all integers that can be used as …\nThe maximum number of bits that can be stored in this …\nRemove all entries from this bitset.\nCheck whether this bitset contains <code>i</code>.\nCount the number of bits set in this integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a bitset with the half-open range <code>[lo, hi)</code> …\nInsert <code>i</code> into this bitset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this bitset empty?\nIterate over the items in this set.\nCount the number of leading zeros.\nGet the number of elements in this set.\nReturn the largest number contained in the bitset or None …\nReturn the smallest number contained in this bitset or <code>None</code>…\nCreate a new, empty bitset.\nRemove and return the largest value in the bitset.\nRemove and return the smallest value in the bitset.\nRemove <code>i</code> from this bitset.\nCount the number of trailing zeros.")