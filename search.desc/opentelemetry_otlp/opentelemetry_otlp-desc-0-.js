searchState.loadedDescShard("opentelemetry_otlp", 0, "OpenTelemetry OTLP Exporter\nThe compression algorithm to use when sending data.\nConfiguration for the OTLP exporter.\nErrors that can occur while building an exporter.\nFeature required to use the specified compression …\nGRPC protocol\nCompresses data using gzip.\nProvide access to the ExportConfig field within the …\nExpose interface for modifying builder config.\nExpose interface for modifying TonicConfig fields within …\nHTTP protocol with binary protobuf\nConfiguration for the OTLP HTTP exporter.\nType to hold the HttpExporterBuilder and indicate it has …\nHTTP protocol with JSON payload\nFailed due to an internal error. The error message is …\nInvalid URI.\nOTLP exporter that sends log data\nBuilder for creating a new LogExporter.\nExport metrics in OTEL format.\nA builder for creating a new MetricExporter.\nType to indicate the builder does not have a client set.\nNo Http client specified.\nCompression algorithm to use, defaults to none.\nTarget to which the exporter is going to send signals, …\nDefault target to which the exporter is going to send …\nKey-value pairs to be used as headers associated with gRPC …\nCompression algorithm to use, defaults to none.\nTarget to which the exporter is going to send logs\nKey-value pairs to be used as headers associated with gRPC …\nMaximum time the OTLP exporter will wait for each batch …\nCompression algorithm to use, defaults to none.\nTarget to which the exporter is going to send metrics, …\nKey-value pairs to be used as headers associated with gRPC …\nMax waiting time for the backend to process each metrics …\nProtocol the exporter will use. Either <code>http/protobuf</code> or …\nDefault protocol, using http-proto.\nMax waiting time for the backend to process each signal …\nDefault max waiting time for the backend to process each …\nCompression algorithm to use, defaults to none.\nTarget to which the exporter is going to send spans, …\nKey-value pairs to be used as headers associated with gRPC …\nMax waiting time for the backend to process each spans …\nThe communication protocol to use when exporting data.\nOTLP exporter that sends tracing data\nOTLP span exporter builder\nSpawning a new thread failed.\nConfiguration for tonic\nConfiguration for the tonic OTLP GRPC exporter.\nType to hold the TonicExporterBuilder and indicate it has …\nUnsupported compression algorithm.\nExpose methods to override ExportConfig.\nThis trait will be implemented for every struct that …\nExpose methods to override TonicConfig.\nCompresses data using zstd.\nBuild the LogExporter with the HTTP transport.\nBuild the LogExporter with the gRPC Tonic transport.\nBuild the MetricExporter with the HTTP transport.\nBuild the MetricExporter with the gRPC Tonic transport.\nBuild the SpanExporter with the gRPC Tonic transport.\nBuild the SpanExporter with the HTTP transport.\nCreate a log exporter with the current configuration\nCreate a metrics exporter with the current configuration\nCreate a log exporter with the current configuration\nObtain a builder to configure a MetricExporter.\nObtain a builder to configure a LogExporter.\nObtain a builder to configure a SpanExporter.\nThe address of the OTLP collector. Default address will be …\nReturn a mutable reference to the ExportConfig within the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a mutable reference to the config within the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new LogExporterBuilder with default settings.\nCreate a new MetricExporterBuilder with default settings.\nCreate a new SpanExporterBuilder with default settings.\nThe protocol to use when communicating with the collector.\nThe timeout to the collector. The default value is 10 …\nReturn a mutable reference to the export config within the …\nRe-exported types from the <code>tonic</code> crate.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUse <code>channel</code> as tonic’s transport channel. this will …\nSet the compression algorithm to use when communicating …\nSet the address of the OTLP collector. If not set or set …\nSet export config. This will override all previous …\nSet additional headers to send to the collector.\nWith the HTTP transport.\nWith the HTTP transport.\nWith the HTTP transport.\nAssign client implementation\nUse a custom <code>interceptor</code> to modify each outbound request. …\nSet custom metadata entries to send to the collector.\nSet custom metadata entries to send to the collector.\nSet custom metadata entries to send to the collector.\nSet custom metadata entries to send to the collector.\nSet custom metadata entries to send to the collector.\nSet the protocol to use when communicating with the …\nSet the temporality for the metrics.\nSet the timeout to the collector.\nSet the TLS settings for the collector endpoint.\nWith the gRPC Tonic transport.\nWith the gRPC Tonic transport.\nWith the gRPC Tonic transport.\nRe-exported types from <code>tonic::metadata</code>.\nRe-exported types from <code>tonic::transport</code>.")