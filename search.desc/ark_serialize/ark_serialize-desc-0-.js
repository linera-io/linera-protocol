searchState.loadedDescShard("ark_serialize", 0, "<code>ark-serialize</code> defines the <code>CanonicalSerialize</code> and …\nThe number of bits required to encode <code>Self</code>. This should be …\nDeserializer in little endian format. This trait can be …\nDeserializer in little endian format allowing flags to be …\nSerializer in little endian format. This trait can be …\nThe CanonicalSerialize induces a natural way to hash the …\nSerializer in little endian format allowing to encode …\nWhether to use a compressed version of the serialization …\nFlags to be encoded into the serialization.\nRepresents metadata to be appended to an object’s …\nDuring serialization, the data was invalid.\nDuring serialization, we countered an I/O error.\nDuring serialization, we didn’t have enough space to …\nThe <code>Read</code> trait allows for reading bytes from a source.\nThis is an error that could occur during serialization\nDuring serialization, non-empty flags were given where …\nWhether to validate the element after deserializing it. …\nA trait for objects which are byte-oriented sinks.\nConverts the number of bits required to represent a number …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adapter for this instance of …\nTransforms this <code>Read</code> instance to an <code>Iterator</code> over its …\nCreates an adapter which will chain this stream with …\nReads <code>Self</code> and <code>Flags</code> from <code>reader</code>. Returns empty flags by …\nThe general deserialize method that takes in customization …\nFlushes this output stream, ensuring that all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> …\nDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> …\nPull some bytes from this source into the specified …\nPull some bytes from this source into the specified buffer.\nReads the exact number of bytes required to fill <code>cursor</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nLike <code>read</code>, except that it reads into a slice of buffers.\nSerializes the given <code>CanonicalSerialize</code> items in sequence. …\nSerializes <code>self</code> and <code>flags</code> into <code>writer</code>.\nThe general serialize method that takes in customization …\nSerializes <code>self</code> and <code>flags</code> into <code>writer</code>.\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write multiple buffers into this writer.\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.")