searchState.loadedDescShard("opentelemetry", 0, "Implements the <code>API</code> component of OpenTelemetry.\nA Value::Array containing homogeneous values.\nArray of homogeneous values\nArray of bools\nbool values\nArray of floats\nf64 values\nArray of integers\ni64 values\nInvalid trace id\nInvalid span id\nInformation about a library or crate providing …\nConfiguration options for InstrumentationScope.\nThe key part of attribute KeyValue pairs.\nA key-value pair describing an attribute.\nTrace flags with the <code>sampled</code> flag set to <code>0</code>.\nTrace flags with the <code>sampled</code> flag set to <code>1</code>.\nAn 8-byte value which identifies a given span.\nArray of strings\nString values\nWrapper for string-like values\nFlags that can be set on a <code>SpanContext</code>.\nA 16-byte value which identifies a given trace.\nThe value part of attribute KeyValue pairs.\nReturns a reference to the underlying key name\nString representation of the <code>Value</code>\nReturns a string slice to this value\nReturns the instrumentation scope attributes to associate …\nPrimitives for sending name/value data across system …\nCreate a new InstrumentationScope from this configuration\nCreate a new builder to create an InstrumentationScope\nExecution-scoped context propagation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>Cow&lt;&#39;static, str&gt;</code> to a <code>Key</code>\nConvert a <code>&amp;str</code> to a <code>Key</code>.\nConvert a <code>String</code> to a <code>Key</code>.\nReturns the argument unchanged.\nConvert a <code>String</code> to a <code>Key</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a trace id from its representation as a byte array.\nCreate a span id from its representation as a byte array.\nConverts a string in base 16 to a trace id.\nConverts a string in base 16 to a span id.\nCreate a new const <code>Key</code>.\nUtilities for working with global telemetry primitives\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>sampled</code> flag is set\nThe attribute name\nOpenTelemetry Logs Bridge API\nOpenTelemetry Metrics API\nReturns the instrumentation library name.\nConstruct new trace flags\nCreate a new <code>Key</code>.\nCreate a new <code>KeyValue</code> pair.\nMacro for logging debug messages in OpenTelemetry.\nMacro for logging error messages in OpenTelemetry.\n<strong>Note</strong>: These macros (<code>otel_info!</code>, <code>otel_warn!</code>, <code>otel_debug!</code>, …\nMacro for logging warning messages in OpenTelemetry.\nOpenTelemetry Propagator interface\nReturns the Schema URL used by this library.\nReturn the representation of this trace id as a byte array.\nReturn the representation of this span id as a byte array.\nReturns the flags as a <code>u8</code>\nAPI for tracing applications and libraries.\nThe attribute value\nReturns the instrumentation library version.\nConfigure the attributes for the instrumentation scope\nReturns copy of the current flags with the <code>sampled</code> flag …\nConfigure the Schema URL for the instrumentation scope\nConfigure the version for the instrumentation scope\nA set of name/value pairs describing user-defined …\nMethods for sorting and retrieving baggage data in a …\nAn optional property set that can be added to <code>Baggage</code> …\nAn iterator over the entries of a <code>Baggage</code>.\n<code>Baggage</code> name/value pairs with their associated metadata.\nReturn underlying string\nReturns a reference to this context’s baggage, or the …\nReturns a clone of the current context with the included …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value associated with a given …\nReturns a reference to the value and metadata associated …\nInserts a name/value pair into the baggage.\nInserts a name/value(+metadata) pair into the baggage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the baggage contains no items.\nGets an iterator over the baggage items, in any order.\nReturns the number of attributes for this baggage\nCreates an empty <code>Baggage</code>.\nCreate a new <code>KeyValue</code> pair with metadata\nRemoves a name from the baggage, returning the value …\nReturns a clone of the given context with the included …\nReturns a clone of the given context with no baggage.\nAn execution-scoped collection of values.\nA guard that resets the current context to the prior …\nExtension trait allowing futures, streams, and sinks to be …\nA future, stream, or sink that has an associated context.\nReplaces the current context on this thread with this …\nReturns an immutable snapshot of the current thread’s …\nReturns a clone of the current thread’s context with the …\nEnters a scope where telemetry is suppressed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the entry for the corresponding …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether telemetry is suppressed in the current …\nReturns whether telemetry is suppressed in this context.\nApplies a function to the current context returning its …\nCreates an empty <code>Context</code>.\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nReturns a new context with telemetry suppression enabled.\nReturns a copy of the context with the new value included.\nWraps the <code>BoxedTracer</code>’s <code>Span</code> so it can be used …\nWraps the <code>GlobalTracerProvider</code>’s <code>Tracer</code> so it can be …\nRepresents the globally configured <code>TracerProvider</code> instance …\nAllows a specific <code>crate::trace::Span</code> to be used …\nAllows a specific <code>Tracer</code> to be used generically by …\nAllows a specific <code>TracerProvider</code> to be used generically by …\nAn API to record events at a specific time in the context …\nRecords events at a specific time in the context of a …\nAdds a link to this span\nAdds a link to this span\nCreates a versioned named tracer instance that is a trait …\nReturn a versioned boxed tracer\nCreate a span from a <code>SpanBuilder</code>\nReturns a trait object so the underlying implementation …\nReturns a trait object so the underlying implementation …\nFinishes the <code>Span</code>.\nFinishes the <code>Span</code>.\nFinishes the <code>Span</code> with given timestamp\nFinishes the span with given timestamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes a closure with a reference to the current global …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Span</code> is recording information like …\nReturns true if this <code>Span</code> is recording information like …\nCreates a named <code>Meter</code> via the currently configured global …\nReturns an instance of the currently configured global …\nCreates a <code>Meter</code> with the given instrumentation scope.\nCreate a <code>BoxedTracer</code> from an object-safe tracer.\nAn API to set a single <code>Attribute</code> where the attribute …\nSets a single <code>Attribute</code> where the attribute properties are …\nSets the given <code>MeterProvider</code> instance as the current …\nSets the status of the <code>Span</code>. <code>message</code> MUST be ignored when …\nSets the status of the <code>Span</code>. If used, this will override …\nSets the given <code>TextMapPropagator</code> propagator as the current …\nSets the given <code>TracerProvider</code> instance as the current …\nReturns the <code>SpanContext</code> for the given <code>Span</code>. The returned …\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nCreates a named instance of <code>Tracer</code> via the configured …\nReturns an instance of the currently configured global …\nCreates a <code>Tracer</code> with the given instrumentation scope via …\nCreate a tracer using the global provider.\nUpdates the <code>Span</code>’s name. After this update, any sampling …\nUpdates the <code>Span</code>’s name.\nValue types for representing arbitrary values in a log …\nA boolean value\nA byte array\nDEBUG\nDEBUG2\nDEBUG3\nDEBUG4\nA double value\nERROR\nERROR2\nERROR3\nERROR4\nFATAL\nFATAL2\nFATAL3\nFATAL4\nINFO\nINFO2\nINFO3\nINFO4\nAn integer value\nAn array of <code>Any</code> values\nSDK implemented trait for managing log records\nSpecifies the <code>LogRecord</code> type associated with this logger.\nThe interface for emitting <code>LogRecord</code>s.\nThe <code>Logger</code> type that this provider will return.\nInterfaces that can create <code>Logger</code> instances.\nA map of string keys to <code>Any</code> values, arbitrarily nested.\nA no-op implementation of a <code>LoggerProvider</code>.\nA normalized severity value.\nA string value\nTRACE\nTRACE2\nTRACE3\nTRACE4\nWARN\nWARN2\nWARN3\nWARN4\nAdds a single attribute.\nAdds multiple attributes.\nCreates a new log record builder.\nEmit a <code>LogRecord</code>. If there is active current thread’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>AnyValue::Map</code> value from a sequence of …\nCreates an <code>AnyValue::ListAny</code> value from a sequence of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new logger with the given name.\nReturns a new logger with the given name.\nReturns a new logger with the given instrumentation scope.\nReturn the string representing the short name for the …\nCreate a new no-op logger provider.\nSets the message body of the log.\nSets the <code>event_name</code> of a record\nSets the observed event timestamp.\nSets severity as a numeric value.\nSets severity as text.\nSets the <code>target</code> of a record. Currently, both …\nSets the time when the event occurred measured by the …\nSets the trace context of the log.\nSets the trace context of the log.\nAn SDK implemented instrument that records measurements …\nConfiguration for building an async instrument.\nA function registered with a Meter that makes observations …\nAn instrument that records increasing values.\nAn instrument that records independent values\nAn instrument that records a distribution of values.\nConfiguration for building a Histogram.\nConfiguration for building a sync instrument.\nSDK implemented trait for creating instruments\nProvides the ability to create instruments for recording …\nProvides access to named Meter instances, for …\nAn async instrument that records increasing values.\nAn async instrument that records independent readings.\nAn async instrument that records increasing or decreasing …\nAn SDK implemented instrument that records measurements …\nAn instrument that records increasing or decreasing values.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nBucket boundaries for the histogram.\nCreates a new instrument.\nCreates a new instrument.\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nValidates the instrument configuration and creates a new …\nCallbacks to be called for this instrument.\nDescription of the Histogram.\nDescription of the instrument.\nDescription of the instrument.\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording independent values.\ncreates an instrument builder for recording independent …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value via …\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates an instrument for recording independent values.\ncreates an instrument builder for recording independent …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nInstrument provider is used to create the instrument.\nInstrument provider is used to create the instrument.\nInstrument provider is used to create the instrument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecords a measurement synchronously.\nReturns a new Meter with the provided name and default …\nReturns a new Meter with the provided name and default …\nReturns a new Meter with the given instrumentation scope.\nName of the Histogram.\nName of the instrument.\nName of the instrument.\nCreate a new counter.\nCreate a new observable counter.\nCreate a new gauge.\nCreate a new gauge\nCreate a new histogram.\nCreate a new up down counter.\nCreate a new observable up down counter.\nObserves the state of the instrument.\nRecords an independent value.\nAdds an additional value to the distribution.\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording independent values.\ncreates an instrument builder for recording independent …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\nUnit of the Histogram.\nUnit of the instrument.\nUnit of the instrument.\nSet the boundaries for this histogram.\nSet the callback to be called for this instrument.\nSet the description for this instrument\nSet the description for this instrument\nSet the description for this instrument\nSet the unit for this instrument.\nSet the unit for this instrument.\nSet the unit for this instrument.\nExtractor provides an interface for removing fields from …\nInjector provides an interface for adding fields from an …\nComposite Propagator\nGet a value from a key from the underlying data.\nCollect all the keys from the underlying data.\nAdd a key and value to the underlying data.\nTextMapPropagator\nComposite propagator for <code>TextMapPropagator</code>s.\nRetrieves encoded <code>Context</code> information using the <code>Extractor</code>. …\nReturns the argument unchanged.\nEncodes the values of the <code>Context</code> and injects them into …\nCalls <code>U::from(self)</code>.\nConstructs a new propagator out of instances of …\nAn iterator over fields of a <code>TextMapPropagator</code>\nMethods to inject and extract a value as text into …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nReturns iter of fields used by <code>TextMapPropagator</code>\nReturns the argument unchanged.\nProperly encodes the values of the current <code>Context</code> and …\nProperly encodes the values of the <code>Context</code> and injects …\nCalls <code>U::from(self)</code>.\nCreate a new <code>FieldIter</code> from a slice of propagator fields\nIndicates that the span describes a request to some remote …\nIndicates that the span describes a child of an …\nSpan will not be recorded and all events and attributes …\nThe operation contains an error.\nEvents record things that happened during a <code>Span</code>’s …\nExtension trait allowing futures, streams, and sinks to be …\nDefault value.\nLink is the relationship between two Spans.\nThe default <code>TraceState</code>, as a constant\nAn invalid span context\nThe operation has been validated by an application …\nIndicates that the span describes the initiators of an …\nSpan data will be recorded and exported.\nSpan data wil be recorded, but not exported.\nDecision about whether or not to sample\nThe result of sampling logic for a given span.\nIndicates that the span covers server-side handling of a …\nThe interface for a single operation within a trace.\nThe <code>Span</code> type used by this tracer.\n<code>SpanBuilder</code> allows span attributes to be configured before …\nImmutable portion of a <code>Span</code> which can be serialized and …\n<code>SpanKind</code> describes the relationship between the <code>Span</code>, its …\nA reference to the currently active span in this context.\nThe status of a <code>Span</code>.\nMethods for storing and retrieving trace data in a <code>Context</code>.\nTraceState carries system-specific configuration data, …\nThe interface for constructing <code>Span</code>s.\nThe <code>Tracer</code> type that this provider will return.\nTypes that can create instances of <code>Tracer</code>.\nThe default status.\nA future, stream, or sink that has an associated context.\nRecord an event in the context this span.\nRecord an event in the context this span.\nRecord an event in the context this span.\nRecord an event with a timestamp in the context this span.\nRecord an event with a timestamp in the context this span.\nAdds <code>Link</code> to another <code>SpanContext</code>.\nAdds a <code>Link</code> to another <code>SpanContext</code>.\nSpan attributes that are provided at the span creation …\nExtra attributes to be added to the span by the sampler\nAttributes that describe this event.\nAttributes that describe this link.\nStart a <code>Span</code> from a <code>SpanBuilder</code>.\nStart a <code>Span</code> from a <code>SpanBuilder</code>.\nStart a span from a <code>SpanBuilder</code> with a parent context.\nReturns a clone of the current context with the included …\nThe decision about whether or not to sample.\nRemoves the given key-value pair from the <code>TraceState</code>. If …\nThe number of attributes that were above the configured …\nThe number of attributes that were above the configured …\nCreate an invalid empty span context\nSignals that the operation described by this span has now …\nSignals that the operation described by this span has now …\nSignals that the operation described by this span has now …\nSpan end time\nSignals that the operation described by this span ended at …\nSignals that the operation described by this span ended at …\nCreate a new error status with a given description.\nSpan events\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TraceState</code> from the given key-value …\nCreate a new span builder from a span name\nRetrieves a value for a given key from the <code>TraceState</code> if …\nExecutes a closure with a reference to this thread’s …\nReturns whether or not an active span has been set.\nCreates a new <code>TraceState</code> header string, delimiting each …\nCreates a new <code>TraceState</code> header string, with the given …\nStart a new span and execute the given closure with …\nStart a new span and execute the given closure with …\nInserts the given key-value pair into the <code>TraceState</code>. If a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if the span context was propagated from a …\nReturns <code>true</code> if the <code>sampled</code> trace flag is set.\nReturns <code>true</code> if the span context has a valid (non-zero) …\nSpan Links\nMark a given <code>Span</code> as active.\nSpan name\nThe name of this event.\nConstruct a new <code>SpanContext</code>\nCreate new <code>Event</code>\nCreate new <code>Link</code>\nNo-op trace implementation\nRecord an error as an event for this span.\nRecord an error as an event for this span.\nRecord an error as an event for this span.\nSampling result\nSet an attribute of this span.\nSet an attribute of this span.\nSet multiple attributes of this span.\nSet multiple attributes of this span.\nSet multiple attributes of this span.\nSets the status of this <code>Span</code>.\nSets the status of this <code>Span</code>.\nReturns a reference to this context’s span, or the …\nCreates a span builder.\nCreates a span builder.\nA reference to the <code>SpanContext</code> for this span.\nA reference to the <code>SpanContext</code> for this span.\nThe span context of the linked span.\nThe <code>SpanId</code> for this span context.\nSpan id, useful for integrations with external tracing …\nSpan kind\nStarts a new <code>Span</code>.\nStarts a new <code>Span</code>.\nBuilds a span with the given tracer from this …\nSpan start time\nStarts a new <code>Span</code> with a given context.\nStarts a new <code>Span</code> with a given context.\nBuilds a span with the given tracer from this …\nSpan status\nThe time at which this event occurred.\nReturns details about the trace.\nThe <code>TraceId</code> for this span context.\nTrace id, useful for integrations with external tracing …\nA reference to the span context’s <code>TraceState</code>.\nTrace state from parent context, may be modified by …\nReturns a new tracer with the given name.\nReturns a new tracer with the given name.\nReturns a new versioned tracer with the given …\nUpdates the span’s name.\nUpdates the span’s name.\nAssign span attributes from an iterable. Providing …\nCreate new <code>Link</code> with given context\nAssign span end time\nAssign events\nAssign span kind\nAssign links\nCreate new <code>Event</code> with a given name.\nReturns a copy of this context with the span context …\nAssign sampling result\nReturns a clone of this context with the included span.\nAssign span id\nAssign span start time\nAssign status code\nSpecify trace id to use if no parent context exists\nThe description of the error\nThe default <code>NoopSpan</code>, as a constant\nA no-op instance of a <code>Span</code>.\nA no-op instance of an <code>TextMapPropagator</code>.\nA no-op instance of a <code>Tracer</code>.\nA no-op instance of a <code>TracerProvider</code>.\nIgnores all events\nIgnores all events with timestamps\nReturn a versioned boxed tracer\nBuilds a <code>NoopSpan</code> from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nIgnores <code>Span</code> endings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns false, signifying that this span is never …\nCreate a new no-op tracer provider\nCreate a new no-op tracer\nCreate a new noop text map propagator\nIgnores all attributes\nIgnores status\nReturns an invalid <code>SpanContext</code>.\nReturns a new <code>NoopTracer</code> instance.\nIgnores name updates")