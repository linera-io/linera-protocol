searchState.loadedDescShard("strum", 0, "Strum\nConverts enum variants to <code>&amp;&#39;a str</code>, where <code>&#39;a</code> is the …\nA cheap reference-to-reference conversion. Used to convert …\nEnum listing the same variants as this enum but without …\nConverts enum variants to strings.\nA trait for capturing the number of variants in Enum. This …\nAdd a constant <code>usize</code> equal to the number of variants.\nGenerate a new type with only the discriminant names.\nGenerated <code>is_*()</code> methods for each variant. E.g. …\nCreates a new type that iterates over the variants of an …\nAssociates additional pieces of information with an Enum. …\nAdd a verbose message to an enum variant.\n<code>EnumProperty</code> is a trait that makes it possible to store …\nAdd custom properties to enum variants.\nConverts strings to enum variants based on their name.\nGenerated <code>try_as_*()</code> methods for all tuple-style variants. …\nAdd a function to enum that allows accessing variants by …\nA trait for retrieving the enum generated by …\nThis trait designates that an <code>Enum</code> can be iterated over. …\nImplements <code>From&lt;MyEnum&gt; for &amp;&#39;static str</code> on an enum.\nThe <code>ParseError</code> enum is a collection of all the possible …\nNames of the variants of this enum\nA trait for retrieving a static array containing all the …\nAdds a <code>&#39;static</code> slice with all of the Enum’s variants.\nA trait for retrieving the names of each variant in Enum. …\nImplements <code>Strum::VariantNames</code> which adds an associated …\nDocumentation for Additional Attributes\nReturns the argument unchanged.\nGet the doc comment associated with a variant if it exists.\nCalls <code>U::from(self)</code>.")