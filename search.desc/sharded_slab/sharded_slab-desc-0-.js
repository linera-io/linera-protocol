searchState.loadedDescShard("sharded_slab", 0, "A lock-free concurrent slab.\nTrait implemented by types which can be cleared in place, …\nConfiguration parameters which can be overridden to tune …\nDefault slab configuration values.\nA handle that allows access to an occupied entry in a <code>Slab</code>.\nThe size of the first page in each shard.\nThe size of the first page in each shard.\nThe maximum number of pages in each shard in the slab.\nThe maximum number of pages in each shard in the slab.\nThe maximum number of threads which can access the slab.\nThe maximum number of threads which can access the slab.\nAn owned reference to an occupied entry in a <code>Slab</code>.\nA lock-free concurrent object pool.\nSets a number of high-order bits in each index which are …\nSets a number of high-order bits in each index which are …\nA sharded slab.\nThe number of bits in each index which are used by the …\nAn exclusive fused iterator over the items in a <code>Slab</code>.\nA handle to a vacant entry in a <code>Slab</code>.\nClear all data in <code>self</code>, retaining the allocated capacithy.\nReturns <code>true</code> if the slab contains a value for the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the value associated with the given …\nReturn an owned reference to the value at the given index.\nNotes on <code>sharded-slab</code>’s implementation and design.\nInserts a value into the slab, returning the integer index …\nInsert a value in the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key used to access the guard.\nReturns the key used to access this guard\nReturn the integer index at which this entry will be …\nReturns a new slab with the default configuration …\nReturns a new slab with the provided configuration …\nA lock-free concurrent object pool.\nRemove the value at the given index in the slab, returning …\nRemoves the value associated with the given key from the …\nReturns an iterator over all the items in the slab.\nReturn a handle to a vacant entry allowing for further …\nAn owned guard that allows shared immutable access to an …\nAn owned guard that allows exclusive, mutable access to an …\nA lock-free concurrent object pool.\nA guard that allows access to an object in a pool.\nA guard that allows exclusive mutable access to an object …\nThe number of bits in each index which are used by the …\nRemove the value using the storage associated with the …\nCreates a new object in the pool, returning an <code>RefMut</code> …\nCreates a new object in the pool, returning an <code>OwnedRefMut</code> …\nCreates a new object in the pool with the provided …\nDowngrades the mutable guard to an immutable guard, …\nDowngrades the owned mutable guard to an owned immutable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a borrowed reference to the value associated with …\nReturn an owned reference to the value associated with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key used to access this guard\nReturns the key used to access the guard.\nReturns the key used to access this guard\nReturns the key used to access this guard\nReturns a new <code>Pool</code> with the default configuration …\nReturns a new <code>Pool</code> with the provided configuration …")