searchState.loadedDescShard("vsimd", 0, "⚠️ This crate contains shared implementation details. …\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2\nT1: SSE2\nT1: SSSE3\nT1: SSSE3\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2\nT1: SSE2\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2\nT1: SSE2\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE41\nT1: SSE41\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2\nT1: SSE2\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE41, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON-A64, WASM128\nT1: NEON-A64, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, WASM128\nT1: SSE2, WASM128\nif highbit(c) { b } else { a }\nif highbit(c) { b } else { a }\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON-A64\nT1: NEON-A64\nT1: NEON-A64\nT1: NEON-A64\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSSE3, NEON-A64, WASM128\nT1: SSSE3, NEON-A64, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nif highbit(c) { b } else { a }\nif highbit(c) { b } else { a }\nT1: SSE41, NEON-A64, WASM128\nT1: SSE41, NEON-A64, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON\nT1: NEON\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: NEON, WASM128\nT1: NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nT1: SSE2, NEON, WASM128\nfor each bit: if a == 1 { b } else { c }\nfor each bit: if a == 1 { b } else { c }\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn enum type which represents the case of ascii letters.\na-z are lower case letters.\nA-Z are upper case letters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocates uninit bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")