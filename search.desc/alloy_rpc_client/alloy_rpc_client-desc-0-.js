searchState.loadedDescShard("alloy_rpc_client", 0, "alloy-rpc-client\nA batch JSON-RPC request, used to bundle requests into a …\nConnection string for built-in transports.\nA builder for the transport  <code>RpcClient</code>.\nA borrowed <code>RpcClient</code>.\nHTTP transport.\nParameter type of a JSON-RPC request with no parameters.\nA channel yielding responses from a poller task.\nA poller task builder.\nA stream of responses from polling an RPC method.\nA client using a <code>reqwest</code> HTTP transport.\nA prepared, but unsent, RPC call.\nA JSON-RPC client.\nA JSON-RPC client.\nAwaits a single response for a request that has been …\nAn <code>RpcClient</code> in a <code>Weak</code> reference.\nAdd a call to the batch.\nConvert this future into a boxed, pinned future, erasing …\nBoxes the transport.\nType erase the service in the transport, allowing it to be …\nCreate a new <code>ClientBuilder</code>.\nReturns the channel size for the poller task.\nGet a reference to the <code>WeakClient</code> used by this poller.\nReturns the <code>WeakClient</code> associated with the poller.\nConnect a transport specified by the given string, …\nConnect a transport, producing an <code>RpcClient</code> with a …\nConnect with the given connection string.\nConnect a transport, producing an <code>RpcClient</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RpcClient</code> with the given inner client.\nBorrow the client.\nGet a <code>Weak</code> reference to the client.\nConvenience function to create a new <code>RpcClient</code> with a …\nConvenience function to create a new <code>RpcClient</code> with a …\nGet a reference to the client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the client into its inner type.\nConvert this call into one with owned params, by cloning …\nStarts the poller and returns the stream of responses.\nConverts the poll channel into a stream.\nConverts the poll channel into a stream that also yields …\nConsumes the client and returns the underlying transport.\n<code>true</code> if the client believes the transport is local.\nReturns <code>true</code> if the request is a subscription.\nAdd a middleware layer to the stack.\nReturns the limit on the number of successful polls.\nBuild a <code>JsonRpcRequest</code> with the given method and params.\nMaps the responses using the provided function.\nMaps the metadata of the request using the provided …\nMap the params of the request into a new type.\nMap the response to a different type. This is usable for …\nMap the response to a different type. This is usable for …\nReturns the RPC method\nCreate a new <code>RpcClient</code> with a transport that returns …\nCreate a new batch request.\nCreates a new <code>RpcClient</code> with the given transport.\nCreate a new <code>RpcClient</code> with the given transport.\nCreate a new poller task.\nCreate a new <code>BatchRequest</code> builder.\nCreate a new <code>RpcClient</code> with an HTTP transport.\nCreate a new <code>RpcClient</code> with an HTTP transport using a …\nReserve a request ID u64.\nGet a mutable reference to the params of the request.\nPauses the poller until it’s unpaused.\nReturns the default poll interval (milliseconds) for the …\nReturns the duration between polls.\nBuild a poller that polls a method with the given …\nReturns a reference to the request.\nPrepares an <code>RpcCall</code>.\nReturns a mutable reference to the request.\nPrepares an <code>RpcCall</code> with no parameters.\nResubscribe to the poller task.\nSend the batch future via its connection.\nSets the channel size for the poller task.\nSet the request to be a non-standard subscription (i.e. not\nSets a limit on the number of successful polls.\nSet the <code>is_local</code> flag.\nSet the poll interval for the client in milliseconds. …\nSets the duration between polls.\nSet the subscription status of the request.\nStarts the poller in a new task, returning a channel to …\nCreate a new <code>RpcClient</code> with the given transport and the …\nReturns a reference to the underlying transport.\nReturns a mutable reference to the underlying transport.\nTries to parse the given string as an HTTP URL.\nUnpauses the poller.\nSets the channel size for the poller task.\nSets the starting ID for the client.\nSets a limit on the number of successful polls.\nSets the poll interval for the client in milliseconds.\nSets the duration between polls.")