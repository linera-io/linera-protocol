searchState.loadedDescShard("sqlx", 0, "The async SQL toolkit for Rust, built with ❤️ by the …\nAcquire connections or transactions from a database in a …\nOpaque database driver. Capable of being used in place of …\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …\nError occurred within the <code>Any</code> driver mapping to/from the …\nAn alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Type alias for <code>Pool&lt;Any&gt;</code>.\nThe concrete type used as a buffer for arguments while …\nA tuple of arguments to be sent to the database.\nThe concrete <code>Arguments</code> implementation for this database.\nThe concrete <code>Column</code> implementation for this database.\nError occurred while decoding a value from a specific …\nA type that can be used to index into a <code>Row</code> or <code>Statement</code>.\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nRepresents a single database connection.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nError returned from the database.\nA type that can be decoded from the database.\nError occurred while decoding a value.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nEncode a single value to be sent to the database.\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nA type that may be executed against a database connection.\nA type that contains or can provide a database connection …\nA record that can be built from a row returned by the …\nOne or more of the arguments to the called function was …\nError communicating with the database backend.\nA value of type <code>L</code>.\nThe display name for this database driver.\nContains the success value\nAn asynchronous pool of SQLx database connections.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nA builder type for constructing queries at runtime.\nThe concrete <code>QueryResult</code> implementation for this database.\nOne or more raw SQL statements, separated by semicolons (<code>;</code>…\nA specialized <code>Result</code> type for SQLx.\nA value of type <code>R</code>.\nRepresents a single row from the database.\nThe concrete <code>Row</code> implementation for this database.\nNo rows returned by a query that expected to return at …\nSqlite database driver.\nA connection to an open Sqlite database.\nAn alias for <code>Executor&lt;&#39;_, Database = Sqlite&gt;</code>.\nAn alias for <code>Pool</code>, specialized for SQLite.\nAn alias for <code>Transaction</code>, specialized for SQLite.\nAn explicitly prepared statement.\nThe concrete <code>Statement</code> implementation for this database.\nError occurred while attempting to establish a TLS …\nAn in-progress database transaction or savepoint.\nThe concrete <code>TransactionManager</code> implementation for this …\nIndicates that a SQL type is supported for a database.\nProvides information about a SQL type for the database …\nThe concrete <code>TypeInfo</code> implementation for this database.\nType in query doesn’t exist. Likely due to typo or …\nThe schemes for database URLs that should match this …\nAn owned value from the database.\nThe concrete type used to hold an owned copy of the …\nA reference to a single value from the database.\nThe concrete type used to hold a reference to the …\nA background worker has crashed.\nRetrieves a connection from the pool.\nAdd the value to the end of the arguments.\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nGet this value as a reference.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns the name of the database backend in use (e.g. …\nBegin a new transaction or establish a savepoint within …\nRetrieves a connection and immediately begins a new …\nRetrieves a connection and immediately begins a new …\nBegin a new transaction with a custom statement.\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nExplicitly close this database connection.\nShut down the connection pool, immediately waking all …\nGet a future that resolves when <code>Pool::close()</code> is called.\nGets the column information at <code>index</code>.\nGets the column information at <code>index</code>.\nGet the columns expected to be returned by executing this …\nGets all columns in this statement.\nCommits this transaction or savepoint.\nDetermines if this Rust type is compatible with the given …\nEstablish a new database connection with the options …\nCreate a new connection pool with a default pool …\nEstablish a new database connection.\nCreate a new connection pool with a default pool …\nCreate a new connection pool with a default pool …\nGets a clone of the connection options for this pool\nCreate a new connection pool with a default pool …\nEstablish a new database connection with the provided …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nTraits to represent a database driver.\nProvides <code>Decode</code> for decoding values from the database.\nDecode a new value of this type using a raw value from the …\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nDeserialize a SQLite database from a buffer into the …\nEntirely disables statement logging (both slow and …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nProvides <code>Encode</code> for encoding values for the database.\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nTypes for working with errors produced by SQLx.\nExecute the query and return the total number of rows …\nExecute the SQL string and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the SQL string. Returns a stream which gives the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nExecute the query and return the generated results as a …\nExecute the SQL string and return the generated results as …\nExecute the query and return all the generated results, …\nExecute the SQL string and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute the SQL string and return the generated results as …\nExecute the query and returns exactly one row.\nExecute the SQL string, returning the first row or …\nExecute the query and returns at most one row.\nExecute the SQL string, returning the first row or <code>None</code> …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the <code>ConnectOptions</code> from a URL.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns a valid positional index into the row or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nDeconstruct this <code>QueryBuilder</code>, returning the built SQL. …\nReturns <code>true</code> if <code>.close()</code> has been called on the pool, <code>false</code>…\nReturns <code>true</code> if this row has no columns.\nReturns <code>true</code> if the connection is currently in a …\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nThe number of arguments that were already added.\nReturns the number of columns in this row.\nLock the SQLite database handle out from the worker thread …\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nEmbeds migrations into the binary by expanding to a static …\nGets the column name or alias.\nReturns the database system name of the type. Length …\nStart building a query with an initial SQL fragment, which …\nReturns the number of connections active and idle (not in …\nGet the options for this pool\nGets the column ordinal.\nGet the expected parameters for this statement.\nReturns <code>true</code> if the statement should be cached.\nChecks if a connection to the database is still valid.\nEnsure the background worker thread is alive and accepting …\nProvides the connection pool for asynchronous SQLx …\nConvenience re-export of common traits.\nPrepare the SQL query to inspect the type information of …\nPrepare the SQL query, with parameter type information, to …\nAppend a SQL fragment to the query.\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nCreates <code>((a, b), (..)</code> statements, from <code>tuples</code>.\nPush a <code>VALUES</code> clause where each item in <code>tuples</code> represents …\nTypes and traits for the <code>query</code> family of functions and …\nExecute a single SQL query as a prepared statement …\nStatically checked SQL query with <code>println!()</code> style syntax.\nExecute a single SQL query as a prepared statement …\nA variant of <code>query!</code> which takes a path to an explicitly …\nA variant of <code>query_as!</code> which does not check the input or …\nExecute a single SQL query, with the given arguments as a …\nRuntime query-builder API.\nA variant of <code>query!</code> where the SQL query is stored in a …\nCombines the syntaxes of <code>query_as!</code> and <code>query_file!</code>.\nA variant of <code>query_file_as!</code> which does not check the input …\nA variant of <code>query_scalar!</code> which takes a file path like …\nA variant of <code>query_file_scalar!</code> which does not typecheck …\nA variant of <code>query_file!</code> which does not check the input or …\nExecute a single SQL query as a prepared statement …\nA variant of <code>query!</code> which expects a single column from the …\nA variant of <code>query_scalar!</code> which does not typecheck bind …\nExecute a SQL query as a prepared statement (transparently …\nA variant of <code>query!</code> which does not check the input or …\nExecute a SQL query as a prepared statement (transparently …\nExecute one or more statements as raw SQL, separated by …\nReserves the capacity for at least <code>additional</code> more values …\nReset this <code>QueryBuilder</code> back to its initial state.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAborts this transaction or savepoint.\nStart a list separated by <code>separator</code>.\nSerialize the given SQLite database schema using …\nUpdates the connection options this pool will use when …\nRestore any buffers in the connection to their default …\nReturns the number of connections currently active. This …\nGet the original SQL text used to create this statement.\nGets the SQL that will be executed.\nGet the current build SQL; <strong>note</strong>: may not be syntactically …\nGets the previously cached statement, if available.\nReturns the arguments to be bound against the query string.\nMark an <code>async fn</code> as a test with SQLx support.\nCreates an owned statement from this statement reference. …\nCreates an owned value from this value reference.\nGet a connection URL that may be used to connect to the …\nExecute the function inside a transaction.\nAttempts to retrieve a connection from the pool if there …\nAttempts to retrieve a connection and immediately begins a …\nAttempts to retrieve a connection and, if successful, …\nGets the column information at <code>index</code> or a …\nGets the column information at <code>index</code> or a …\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturn <code>true</code> if <code>self</code> and <code>other</code> represent mutually …\nReturns the canonical SQL type for this Rust type.\nGets the type information for the column.\nGet the type information for this value.\nGet the type information for this value.\nConversions between Rust and SQL types.\nReturns the left value\nReturns the right value\nConstruct a <code>QueryBuilder</code> with existing SQL and arguments.\nOpaque database driver. Capable of being used in place of …\nOpaque options for connecting to a database. These may …\nAn alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstall all currently compiled-in drivers for <code>AnyConnection</code>…\nInstall the list of drivers for <code>AnyConnection</code> to use.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe concrete type used as a buffer for arguments while …\nThe concrete <code>Arguments</code> implementation for this database.\nThe concrete <code>Column</code> implementation for this database.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nA <code>Database</code> that maintains a client-side cache of prepared …\nThe display name for this database driver.\nThe concrete <code>QueryResult</code> implementation for this database.\nThe concrete <code>Row</code> implementation for this database.\nThe concrete <code>Statement</code> implementation for this database.\nThe concrete <code>TransactionManager</code> implementation for this …\nThe concrete <code>TypeInfo</code> implementation for this database.\nThe schemes for database URLs that should match this …\nThe concrete type used to hold an owned copy of the …\nThe concrete type used to hold a reference to the …\nA type that can be decoded from the database.\nDecode a new value of this type using a raw value from the …\nEncode a single value to be sent to the database.\nThe return type of Encode::encode.\nThe value is not null.\nThe value is null; no data was written.\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError occurred within the <code>Any</code> driver mapping to/from the …\nCheck constraint violation.\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nError returned from the database.\nAn error that was returned from the database.\nError occurred while decoding a value.\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nThe error kind.\nForeign key constraint violation.\nOne or more of the arguments to the called function was …\nError communicating with the database backend.\nNot-null constraint violation.\nContains the success value\nAn unmapped error.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nA specialized <code>Result</code> type for SQLx.\nNo rows returned by a query that expected to return at …\nError occurred while attempting to establish a TLS …\nType in query doesn’t exist. Likely due to typo or …\nAn unexpected <code>NULL</code> was encountered during decoding.\nUnique/primary key constraint violation.\nA background worker has crashed.\nThe (SQLSTATE) code for the error.\nReturns the name of the constraint that triggered the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the error kind is a violation of a check.\nReturns whether the error kind is a violation of a foreign …\nReturns whether the error kind is a violation of a …\nReturns the kind of the error, if supported.\nThe primary, human-readable error message.\nReturns the name of the table that was affected by the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nIn the default implementation, a MigrationSource is a …\nMigration Type represents the type of migration\nA resolved set of migrations, ready to be run.\nReversibleDown migrations represents the  delete or …\nReversibleUp migrations represents the  add or update part …\nSimple migration are single file migrations with no up / …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over all known migrations.\nCreates a new instance with the given source.\nRun any pending migrations against the database; and, …\nSpecify whether applied migrations that are missing from …\nSpecify whether or not to lock the database during …\nRun down migrations against the database until a specific …\nCheck if a migration version exists.\nA future that resolves when the pool is closed.\nAn asynchronous pool of SQLx database connections.\nA connection managed by a <code>Pool</code>.\nMetadata for the connection being processed by a …\nConfiguration options for <code>Pool</code>.\nLog excessive time taken to acquire a connection at a …\nSet a threshold for reporting excessive time taken to …\nEnable logging of time taken to acquire a connection from …\nSet the maximum amount of time to spend waiting for a …\nPerform an asynchronous action after connecting to the …\nPerform an asynchronous action on a connection before it …\nThe duration since the connection was first opened.\nPerform an asynchronous action on a previously idle …\nClose this connection, allowing the pool to open a …\nClose this connection on-drop, instead of returning it to …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nDetach this connection from the pool, allowing it to open …\nExecute the given future until it returns or the pool is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the threshold for reporting excessive time taken to …\nGet the maximum amount of time to spend waiting for a …\nGet the maximum idle duration for individual connections.\nGet the maximum number of connections that this pool …\nGet the maximum lifetime of individual connections.\nGet the minimum number of connections to maintain at all …\nGet whether <code>test_before_acquire</code> is currently set.\nThe duration that the connection spent in the idle queue.\nSet a maximum idle duration for individual connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetach this connection from the pool, treating it as …\nSet the maximum number of connections that this pool …\nSet the maximum lifetime of individual connections.\nSet the minimum number of connections to maintain at all …\nReturns a default “sane” configuration, suitable for …\nIf true, the health of a connection will be verified by a …\nAcquire connections or transactions from a database in a …\nRepresents a single database connection.\nA type that can be decoded from the database.\nEncode a single value to be sent to the database.\nA type that contains or can provide a database connection …\nA record that can be built from a row returned by the …\nRepresents a single row from the database.\nAn explicitly prepared statement.\nIndicates that a SQL type is supported for a database.\nBegin a new transaction or establish a savepoint within …\nBegin a new transaction with a custom statement.\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nExplicitly close this database connection.\nGets the column information at <code>index</code>.\nGets the column information at <code>index</code>.\nGet the columns expected to be returned by executing this …\nGets all columns in this statement.\nEstablish a new database connection with the options …\nEstablish a new database connection.\nEstablish a new database connection with the provided …\nDecode a new value of this type using a raw value from the …\nEntirely disables statement logging (both slow and …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return all the generated results, …\nExecute multiple queries and return the generated results …\nExecute the query and returns exactly one row.\nExecute the query and returns at most one row.\nParse the <code>ConnectOptions</code> from a URL.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns <code>true</code> if this row has no columns.\nReturns <code>true</code> if the connection is currently in a …\nReturns the number of columns in this row.\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nGet the expected parameters for this statement.\nChecks if a connection to the database is still valid.\nPrepare the SQL query to inspect the type information of …\nPrepare the SQL query, with parameter type information, to …\nRestore any buffers in the connection to their default …\nGet the original SQL text used to create this statement.\nCreates an owned statement from this statement reference. …\nGet a connection URL that may be used to connect to the …\nExecute the function inside a transaction.\nGets the column information at <code>index</code> or a …\nGets the column information at <code>index</code> or a …\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns the canonical SQL type for this Rust type.\nA single SQL query that will map its results to an owned …\nA single SQL query as a prepared statement. Returned by …\nA single SQL query as a prepared statement, mapping …\nA single SQL query as a prepared statement which extracts …\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap each row in the result to another type.\nMap each row in the result to another type.\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nLike <code>Query::try_bind</code> but immediately returns an error if …\nMap each row in the result to another type.\nMap each row in the result to another type.\nA builder type for constructing queries at runtime.\nA wrapper around <code>QueryBuilder</code> for creating comma(or other …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPush the separator if applicable, and then the given SQL …\nPush the separator if applicable, then append a bind …\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nPush a SQL fragment without a separator.\nSqlite database driver.\nOptions and flags which can be used to configure a SQLite …\nA connection to an open Sqlite database.\nAn alias for <code>Executor&lt;&#39;_, Database = Sqlite&gt;</code>.\nRefer to SQLite documentation for the meaning of the …\nRefer to SQLite documentation for the meaning of the …\nMemory buffer owned and allocated by SQLite. Freed on drop.\nAn alias for <code>Pool</code>, specialized for SQLite.\nAn alias for <code>PoolOptions</code>, specialized for SQLite.\nImplementation of <code>Row</code> for SQLite.\nRefer to SQLite documentation for the meaning of various …\nAn alias for <code>Transaction</code>, specialized for SQLite.\nImplementation of <code>TransactionManager</code> for SQLite.\nType information for a SQLite type.\nSet a soft limit on the number of rows that <code>ANALYZE</code> …\nReturns the underlying sqlite3* connection handle.\nSets the auto_vacuum setting for the database connection.\nSets a timeout value to wait when the database is locked, …\nThe extended result code.\nAdd a custom collation for comparing strings in SQL.\nSet the maximum number of commands to buffer for the …\nApply a collation to the open database.\nSets the access mode to create the database file if the …\nLoad an extension at run-time when the database connection …\nLoad an extension with a specified entry point.\nSets the name of the database file.\nSet the enforcement of foreign key constraints.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current name of the database file.\nSet to <code>true</code> to signal to SQLite that the database file is …\nSet the <code>SQLITE_OPEN_MEMORY</code> flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the journal mode for the database connection.\nSets the locking mode for the database connection.\nConstruct <code>Self</code> with default options.\nExecute <code>PRAGMA optimize;</code> on the SQLite connection before …\nSets the page_size setting for the database connection.\nSets custom initial pragma for the database connection.\nSets the access mode to open the database for read-only …\nRemoves the progress handler on a database connection. The …\nSet the maximum number of rows to buffer back to the …\nSets the threading mode for the database connection.\nSets a commit hook that is invoked whenever a transaction …\nSets a progress handler that is invoked periodically …\nSets a rollback hook that is invoked whenever a …\nSet the <code>SQLITE_OPEN_SHAREDCACHE</code> flag.\nSets the capacity of the connection’s statement cache in …\nSets the synchronous setting for the database connection.\nProvide a callback to generate the name of the background …\nConversions between Rust and <strong>SQLite</strong> types.\nSets the <code>vfs</code> parameter of the database connection.\nRepresents a JSON array.\nRepresents a JSON boolean.\nA constant RawValue with the JSON value <code>false</code>.\nJson for json and jsonb fields\nReference to a range of bytes encompassing a single valid …\nRepresents any valid JSON value.\nA constant RawValue with the JSON value <code>null</code>.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nA constant RawValue with the JSON value <code>true</code>.\nMap a SQL text value to/from a Rust type using <code>Display</code> and …\nIndicates that a SQL type is supported for a database.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nDetermines if this Rust type is compatible with the given …\nDetermines if this Rust type is compatible with the given …\nDisplay a JSON value as a string.\nConvert a slice to <code>Value::Array</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nAccess the JSON text underlying a raw value.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the inner value.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nReorders the entries of all <code>Value::Object</code> nested within …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nReturns the canonical SQL type for this Rust type.")