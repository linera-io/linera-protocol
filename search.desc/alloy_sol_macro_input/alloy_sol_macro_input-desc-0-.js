searchState.loadedDescShard("alloy_sol_macro_input", 0, "alloy-sol-macro-input\nIndicate word boundaries with uppercase letter, excluding …\nDefines the casing for the attributes long representation.\nTrait for items that contain <code>#[sol(...)]</code> attributes among …\nJSON ABI file\nKeep all letters lowercase and indicate word boundaries …\nKeep all letters lowercase and remove word boundaries.\nIndicate word boundaries with uppercase letter, including …\nKeep all letters uppercase and indicate word boundaries …\nKeep all letters lowercase and indicate word boundaries …\nSolidity file or snippet.\n<code>#[sol(...)]</code> attributes.\nParsed input for <code>sol!</code>-like macro expanders. This struct …\nExpands a <code>SolInput</code> into a <code>TokenStream</code>.\nParsed input for <code>sol!</code>-like macro expanders. This enum …\nSolidity type.\nKeep all letters uppercase and remove word boundaries.\nUse the original attribute name defined in the code.\n<code>#[sol(abi)]</code>\n<code>#[sol(all_derives)]</code>\n<code>#[sol(alloy_contract = alloy_contract)]</code>\n<code>#[sol(alloy_sol_types = alloy_core::sol_types)]</code>\nApply the casing style to the given string.\nGet the list of attributes.\nAttributes attached to the input, of the form <code>#[...]</code>.\n<code>#[sol(bytecode = &quot;0x1234&quot;)]</code>\n<code>#[sol(deployed_bytecode = &quot;0x1234&quot;)]</code>\nReturns an iterator over all the rust <code>::</code> paths in the …\n<code>#[sol(docs)]</code>\nFlattens all the <code>#[doc = &quot;...&quot;]</code> attributes into a single …\nExpand a <code>SolInput</code> into a <code>TokenStream</code>.\n<code>#[sol(extra_derives(...))]</code>\n<code>#[sol(extra_methods)]</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnore unlinked bytecode <code>#[sol(ignore_unlinked)]</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe input kind.\nWraps the argument in a doc attribute.\nNormalize JSON ABI inputs into Sol inputs.\nParse the <code>#[sol(...)]</code> attributes from a list of attributes.\nParses the <code>#[derive(...)]</code> attributes into a list of paths.\nParse the <code>SolInput</code> with the given settings.\nPath to the input, if any.\nUNIMPLEMENTED: <code>#[sol(rename = &quot;new_name&quot;)]</code>\nUNIMPLEMENTED: <code>#[sol(rename_all = &quot;camelCase&quot;)]</code>\n<code>#[sol(rpc)]</code>\nParse the <code>#[sol(...)]</code> attributes from the list of …\nParse the <code>#[sol(...)]</code> attributes from the list of …\nReturns <code>sol!</code> tokens.\nUDVT only <code>#[sol(type_check = &quot;my_function&quot;)]</code>")