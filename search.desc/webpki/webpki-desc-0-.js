searchState.loadedDescShard("webpki", 0, "webpki: Web PKI X.509 Certificate Validation.\nAn array of all the verification algorithms exported by …\nTreat unknown revocation status permissively, acting as if …\nThe encoding of some ASN.1 DER-encoded item is invalid.\nThe encoding of an ASN.1 DER-encoded time is invalid.\nA borrowed representation of a CRL.\nBorrowed representation of a RFC 5280 profile Certificate …\nBorrowed representation of a RFC 5280 profile Certificate …\nHuman-readable representation of the client authentication …\nA CA certificate is being used as an end-entity …\nA parsed X509 certificate.\nThe certificate is expired; i.e. the time it is being …\nThe certificate is not valid for the name it is being …\nThe certificate is not valid yet; i.e. the time it is …\nA RFC 5280 profile Certificate Revocation List (CRL).\nThe certificate, or one of its issuers, has been revoked.\nCheck the revocation status of the end entity (leaf) and …\nThe CRL is expired; i.e. the verification time is not …\nTreat unknown revocation status as an error condition, …\nTrailing data was found while parsing DER-encoded input …\nOnly check the end entity (leaf) certificate’s …\nAn end-entity certificate.\nAn end-entity certificate is being used as a CA …\nEnforce the verification time is before the time in the …\nAn error that occurs during certificate validation or name …\nDescribes how to handle the nextUpdate field of the CRL …\nAn X.509 extension is invalid.\nIgnore the CRL nextUpdate field.\nThe certificate validity period (notBefore, notAfter) is …\nA CRL number extension was invalid:\nThe CRL signature is invalid for the issuer’s public key.\nAdditional context for the <code>CertNotValidForName</code> error …\nA iPAddress name constraint was invalid:\nA serial number was invalid:\nThe signature is invalid for the given public key.\nA CRL was signed by an issuer that has a KeyUsage …\nThe expected key usage of a certificate.\nA presented or reference DNS identifier was malformed, …\nThe certificate extensions are malformed.\nA name constraint was malformed, potentially containing …\nThe maximum number of name constraint comparisons has been …\nThe maximum number of internal path building calls has …\nThe path search was terminated because it became too deep.\nThe maximum number of signature checks has been reached. …\nThe certificate violates one or more name constraints.\nAn owned representation of a CRL.\nOwned representation of a RFC 5280 profile Certificate …\nOwned representation of a RFC 5280 profile Certificate …\nThe certificate violates one or more path length …\nA Raw Public Key, used for connections using raw public …\nRemoveFromCrl only appears in delta CRLs that are …\nThe certificate is not valid for the Extended Key Usage …\nAdditional context for the <code>RequiredEkuNotFoundContext</code> …\nThe certificate is not valid for the Extended Key Usage …\nDescribes how much of a certificate chain is checked for …\nDescribes how revocation checking is performed, if at all. …\nBuilds a RevocationOptions instance to control how …\nIdentifies the reason a certificate was revoked. See RFC …\nHuman-readable representation of the server authentication …\nThe algorithm in the TBSCertificate “signature” field …\nTrailing data was found while parsing DER-encoded input …\nA valid issuer for the certificate could not be found.\nThe certificate’s revocation status could not be …\nDescribes how to handle the case where a certificate’s …\nUnspecified should not be used, and is instead assumed by …\nThe certificate is not a v3 X.509 certificate.\nThe certificate contains an unsupported critical extension.\nThe CRL contains an issuing distribution point with no …\nThe signature algorithm for a signature over a CRL is not …\nThe signature algorithm for a signature is not in the set …\nThe CRL signature’s algorithm does not match the …\nThe signature’s algorithm does not match the algorithm …\nThe CRL is not a v2 X.509 CRL.\nThe CRL is an unsupported “delta” CRL.\nThe CRL contains unsupported “indirect” entries.\nThe <code>ServerName</code> contained an unsupported type of value.\nThe revocation reason is not in the set of supported …\nThe CRL is partitioned by revocation reasons.\nThe signature algorithm for a signature is not in the set …\nAdditional context for the <code>UnsupportedSignatureAlgorithm</code> …\nThe signature algorithm for a signature is not in the set …\nThe signature’s algorithm does not match the algorithm …\nAdditional context for the …\nThe signature’s algorithm does not match the algorithm …\nPath from end-entity certificate to trust anchor that’s …\nYields the trust anchor for this path.\nInterprets the given pre-validated DER-encoded certificate …\nConvert the owned representation of this revoked cert to a …\nConstruct a RevocationOptions instance based on the builder…\nConstruct a new <code>KeyUsage</code> as appropriate for client …\nRaw DER encoded representation of the certificate.\nYields the end-entity certificate for this path.\nExpected server name.\nTry to find a revoked certificate in the CRL by DER …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to parse the given bytes as a RFC 5280 profile …\nTry to parse the given bytes as a RFC 5280 profile …\nYields a (double-ended) iterator over the intermediate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides the date on which it is known or suspected that …\nProvides the date on which it is known or suspected that …\nRaw DER encoded certificate issuer.\nReturn the DER encoded issuer of the CRL.\nReturn the DER encoded issuing distribution point of the …\nReturn an iterator over all possible RevocationReason …\nCreate a builder that will perform revocation checking …\nYield the OID values of the required extended key usage.\nThe ExtendedKeyUsage OIDs present in the certificate.\nThe names presented in the end entity certificate.\nThe public key algorithm OID.\nIdentifies the reason for the certificate revocation. When …\nIdentifies the reason for the certificate revocation. When …\nConstruct a new <code>KeyUsage</code> requiring a certificate to …\nThe required ExtendedKeyUsage.\nConstruct a new <code>KeyUsage</code> requiring a certificate to …\nThe date at which the CA processed the revocation.\nThe date at which the CA processed the revocation.\nSignature verification algorithm implementations using the …\nRaw DER encoded certificate serial number.\nSerial number of the revoked certificate.\nSerial number of the revoked certificate.\nConstruct a new <code>KeyUsage</code> as appropriate for server …\nThe signature algorithm OID.\nThe signature algorithm OID that was unsupported.\nRaw DER encoded certificate subject.\nGet the RFC 5280-compliant <code>SubjectPublicKeyInfoDer</code> (SPKI) …\nSupported algorithms that were available for signature …\nConvert the CRL to an <code>OwnedCertRevocationList</code>. This may …\nConstruct an owned representation of the revoked …\nParse the ASN.1 DER-encoded X.509 encoding of the …\nParse the ASN.1 DER-encoded SPKI encoding of the raw …\nReturns a list of valid DNS names provided in the subject …\nVerifies that the end-entity certificate is valid for use …\nVerifies that the certificate is valid for the given …\nVerifies the signature <code>signature</code> of message <code>msg</code> using the …\nVerifies the signature <code>signature</code> of message <code>msg</code> using a …\nCustomize the depth at which revocation checking will be …\nCustomize whether the CRL nextUpdate field (i.e. …\nCustomize whether unknown revocation status is an error, …\nThe nextUpdate time of the CRL.\nThe notAfter time of the certificate.\nThe notBefore time of the certificate.\nThe validation time.\nThe validation time.\nThe validation time.\nECDSA signatures using the P-256 curve and SHA-256.\nECDSA signatures using the P-256 curve and SHA-384. …\nECDSA signatures using the P-384 curve and SHA-256. …\nECDSA signatures using the P-384 curve and SHA-384.\nED25519 signatures according to RFC 8410\nRSA PKCS#1 1.5 signatures using SHA-256 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-256 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-384 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-384 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-512 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-512 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-384 for keys of …\nRSA PSS signatures using SHA-256 for keys of 2048-8192 …\nRSA PSS signatures using SHA-384 for keys of 2048-8192 …\nRSA PSS signatures using SHA-512 for keys of 2048-8192 …")