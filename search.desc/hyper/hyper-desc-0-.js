searchState.loadedDescShard("hyper", 0, "hyper\nContains the error value\nRepresents errors that can occur handling HTTP streams.\nContains the success value\nResult type often returned from methods that can have …\nStreaming bodies for Requests and Responses\nHTTP Client\nHTTP extensions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the body write was aborted.\nReturns true if this was about a <code>Request</code> that was canceled.\nReturns true if a sender’s channel is closed.\nReturns true if the connection closed before a message …\nReturns true if this was an HTTP parse error.\nReturns true if this was an HTTP parse error caused by an …\nReturns true if this was an HTTP parse error caused by a …\nReturns true if the error was caused by a timeout.\nReturns true if this error was caused by user code.\nRuntime components\nHTTP Server\nAsynchronous Services\nHTTP Upgrades\nTrait representing a streaming body of a Request or …\nRead bytes from a buffer.\nA cheaply cloneable and sliceable chunk of contiguous …\nValues yielded by the <code>Body</code>.\nThe error type this <code>Body</code> might generate.\nA frame of any kind related to an HTTP stream (body).\nA stream of <code>Bytes</code>, used when receiving bodies from the …\nA <code>Body</code> size hint\nAdvance the internal cursor of the Buf\nCreates an adaptor which will chain this buffer with …\nReturns a slice starting at the current position and of …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nClears the buffer, removing all data.\nCreates <code>Bytes</code> instance from slice, by copying it.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nCreate a DATA frame with the provided <code>Buf</code>.\nIf this is a DATA frame, returns a mutable reference to it.\nIf this is a DATA frame, returns a reference to it.\nReturns the exact size of data that will be yielded <strong>if</strong> the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Bytes with a buffer whose lifetime is controlled …\nCreates a new <code>Bytes</code> from a static slice.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self into the buf of the DATA frame.\nConsumes self into the buf of the trailers frame.\nReturns whether this is a DATA frame.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns <code>true</code> when the end of stream has been reached.\nReturns whether this is a trailers frame.\nReturns true if this is the only reference to the data and …\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the lower bound of data that the <code>Body</code> will yield …\nMaps this frame’s data to a different type.\nReturns a new <code>SizeHint</code> with default values\nCreates a new empty <code>Bytes</code>.\nAttempt to pull out the next data buffer of this stream.\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nSet the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …\nSet the value of the <code>lower</code> hint.\nSet the value of the <code>upper</code> hint value.\nReturns the bounds on the remaining length of the stream.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreate a trailers frame.\nIf this is a trailers frame, returns a mutable reference …\nIf this is a trailers frame, returns a reference to it.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets an signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in big-endian …\nGets an unsigned 32 bit integer from <code>self</code> in little-endian …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nTry to convert self into <code>BytesMut</code>.\nReturns the upper bound of data the <code>Body</code> will yield before …\nReturns a new <code>SizeHint</code> with both upper and lower bounds …\nLower-level client connection API.\nAn error when calling <code>try_send_request</code>.\nReturns the argument unchanged.\nHTTP/1 client connections\nHTTP/2 client connections\nCalls <code>U::from(self)</code>.\nConsumes this to return the inner error.\nTake the message from this error.\nA builder to configure an HTTP connection.\nA future that processes all HTTP state for the IO object.\nDeconstructed parts of a <code>Connection</code>.\nThe sender side of an established connection.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handshake future over some IO.\nConstructs a connection with the configured options and IO.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will silently ignored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nChecks if the connection side has been closed.\nChecks if the connection is currently ready to send a …\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nCreates a new connection builder.\nPolls to determine whether this sender can be used yet for …\nPoll the connection for completion, but without calling …\nSet whether to support preserving original header cases.\nA buffer of bytes that have been read but not processed as …\nSets the exact size of the read buffer to <em>always</em> use.\nWaits until the dispatcher is ready\nSends a <code>Request</code> on the associated connection.\nSet whether HTTP/1 connections will write header names as …\nSends a <code>Request</code> on the associated connection.\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nSet whether HTTP/1 connections should try to use vectored …\nA builder to configure an HTTP connection.\nA future that processes all HTTP state for the IO object.\nThe sender side of an established connection.\nSets whether to use an adaptive flow control.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handshake future over some IO.\nConstructs a connection with the configured options and IO.\nSets the header table size.\nSets the max connection-level flow control for HTTP2\nSets the initial maximum of locally initiated (send) …\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the connection side has been closed.\nReturns whether the extended CONNECT protocol is enabled …\nChecks if the connection is currently ready to send a …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum number of concurrent streams.\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreates a new connection builder.\nPolls to determine whether this sender can be used yet for …\nWaits until the dispatcher is ready\nSends a <code>Request</code> on the associated connection.\nProvide a timer to execute background HTTP2 tasks.\nSends a <code>Request</code> on the associated connection.\nRepresents the <code>:protocol</code> pseudo-header used by the …\nA reason phrase in an HTTP/1 response.\nGets the reason phrase as bytes.\nReturns a str representation of the header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a static byte slice to a reason phrase.\nConverts a static string to a protocol name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a callback for 1xx informational responses.\nAn executor of futures.\nReads bytes from a source.\nA wrapper around a byte buffer that is incrementally …\nThe cursor part of a <code>ReadBuf</code>.\nA future returned by a <code>Timer</code>.\nA timer which provides timer-like functions.\nWrite bytes asynchronously.\nAdvance the <code>filled</code> cursor by <code>n</code> bytes.\nAccess the unfilled part of the buffer.\nTrait aliases\nDowncast a pinned &amp;mut Sleep object to its original type\nPlace the future into the executor to be run.\nGet a slice of the buffer that has been filled in with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the type is the same as <code>T</code>\nReturns whether this writer has an efficient …\nReturns whether this writer has an efficient …\nCreate a new <code>ReadBuf</code> with a slice of initialized bytes.\nAttempts to flush the object.\nAttempts to read bytes into the <code>buf</code>.\nAttempts to shut down this writer.\nAttempt to write bytes from <code>buf</code> into the destination.\nLike <code>poll_write</code>, except that it writes from a slice of …\nLike <code>poll_write</code>, except that it writes from a slice of …\nTransfer bytes into <code>self`` from </code>src` and advance the cursor\nReturns the number of bytes that can be written from the …\nReset a future to resolve at <code>new_deadline</code> instead.\nReset a future to resolve at <code>new_deadline</code> instead.\nReturn a future that resolves in <code>duration</code> time.\nReturn a future that resolves at <code>deadline</code>.\nGet a cursor to the unfilled portion of the buffer.\nCreate a new <code>ReadBuf</code> with a slice of uninitialized bytes.\nAn executor to spawn http2 futures for the client.\nAn executor to spawn http2 connections.\nServer connection API.\nHTTP/1 Server Connections\nHTTP/2 Server Connections\nA configuration builder for HTTP/1 server connections.\nA <code>Future</code> representing an HTTP/1 connection, bound to a …\nDeconstructed parts of a <code>Connection</code>.\nA future binding a connection with a Service with Upgrade …\nSet whether the <code>date</code> header should be included in HTTP …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nSet whether HTTP/1 connections will silently ignored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nEnables or disables HTTP/1 keep-alive.\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nCreate a new connection builder.\nAggregates flushes to better support pipelined responses.\nPoll the connection for completion, but without calling …\nSet whether to support preserving original header cases.\nA buffer of bytes that have been read but not processed as …\nBind a connection together with a <code>Service</code>.\nThe <code>Service</code> used to serve this connection.\nSet the timer used in background tasks.\nSet whether HTTP/1 connections will write header names as …\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nSet whether HTTP/1 connections should try to use vectored …\nA configuration builder for HTTP/2 server connections.\nA <code>Future</code> representing an HTTP/2 connection, bound to a …\nSets whether to use an adaptive flow control.\nSet whether the <code>date</code> header should be included in HTTP …\nEnables the extended CONNECT protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of local reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreate a new connection builder.\nBind a connection together with a <code>Service</code>.\nSet the timer used in background tasks.\nThe error type that can occur within this <code>Service</code>.\nErrors produced by the service.\nThe <code>Future</code> returned by this <code>Service</code>.\nThe future response value.\nAn asynchronous function from <code>Request</code> to <code>Response</code>.\nThe <code>Body</code> body of the <code>http::Response</code>.\nResponses given by the service.\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nProcess the request and return the response asynchronously.\nCreate a <code>Service</code> from a function.\nA future for a possible HTTP upgrade.\nThe deconstructed parts of an <code>Upgraded</code> type.\nAn upgraded HTTP connection.\nTries to downcast the internal trait object to the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe original IO object used before the upgrade.\nGets a pending HTTP upgrade from this message.\nA buffer of bytes that have been read but not processed as …")