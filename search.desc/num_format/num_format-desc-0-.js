searchState.loadedDescShard("num_format", 0, "Crates.io Documentation License\nA key type. Represents a stack-allocated buffer you can …\nInput exceeds buffer capacity.\nType for representing your own custom formats. Implements …\nType for building <code>CustomFormat</code>s.\nThis crate’s error type.\nThis crate’s error kind.\nTrait that abstracts over <code>CustomFormat</code>, <code>Locale</code>, and …\nType for specifying how digits are grouped together (e.g. …\nThe first three digits are grouped together and all digits …\nA key type. Represents formats from the Unicode Consortium…\nOther miscellaneous error.\nFailed to parse input into a valid locale.\nFailed to parse input into a number.\nNo grouping (e.g. 10000000)\nDigits are separated into groups of three (e.g. 10,000,000)\nMarker trait for number types that can be formatted …\nA key trait. Gives numbers the <code>to_formatted_string</code> method.\nA key trait. Gives types in the standard library that …\nReturns a <code>&amp;[u8]</code> view into the buffer.\nReturns a <code>&amp;str</code> view into the buffer.\nReturns a static slice of all available names.\nConstruct a <code>CustomFormat</code>.\nConstructs a <code>CustomFormatBuilder</code>.\nReturns the string representation of a decimal point.\nReturns this format’s representation of decimal points.\nSets the character used to represent decimal points.\nReturns the locale’s decimal representation.\nSame as the <code>new</code> method.\nReturns a <code>CustomFormat</code> with settings equal to <code>Locale::en</code>.\nSets all fields based on the provided format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Locale</code> from its name. For a list of available …\nSame as <code>from_name</code>.\nReturns the <code>Grouping</code> to use for separating digits. (see …\nReturns this format’s <code>Grouping</code>, which governs how digits …\nSets the <code>Grouping</code> used to separate digits.\nReturns the locale’s <code>Grouping</code>.\nReturns the string representation of an infinity symbol.\nReturns this format’s representation of infinity.\nSets the string representation of infinity.\nReturns the locale’s infinity representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns <code>self</code> into a <code>CustomFormatBuilder</code>.\nReturns <code>true</code> if the buffer is empty; <code>false</code> otherwise.\nReturns the <code>ErrorKind</code>.\nReturns the length (in bytes) of the buffer.\nReturns the string representation of a minus sign.\nReturns this format’s representation of minus signs.\nSets the string representation of a minus sign.\nReturns the locale’s minus sign representation.\nReturns the locale’s name.\nReturns the string representation of NaN.\nReturns this format’s representation of NaN.\nSets the string representation of NaN.\nReturns the locale’s NaN representation.\nConstructs a new, stack-allocated buffer.\nConstructs a new <code>Error</code> with kind <code>ErrorKind::Other</code>.\nModule with traits for parsing a formatted string into a …\nReturns the string representation of a plus sign.\nReturns this format’s representation of plus signs.\nSets the string representation of a plus sign.\nReturns the locale’s plus sign representation.\nReturns the string representation of a thousands separator.\nReturns this format’s representation of separators.\nSets the string representation of a thousands separator.\nReturns the locale’s separator representation, if any.\nReturns a string representation of the number formatted …\nReturns a string representation of the number formatted …\nUtility types needed if you want to implement <code>Format</code> on …\nFormats the provided number according to the provided …\nWrites the provided number into the buffer using the …\nCapacity of the buffer in bytes.\nLength of the input in bytes.\nMarker trait for number types (e.g. <code>u32</code>) that string-like …\nTrait that provides string-like types with a …\nConverts <code>self</code> (typically a formatted string) into a number …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nSimple wrapper type for a <code>&amp;str</code> to make sure its length is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nAllows recovery of the initial / wrapped <code>&amp;str</code>.\nConstructs an <code>DecimalStr</code>, ensuring that the length is less …\nConstructs an <code>InfinityStr</code>, ensuring that the length is …\nConstructs a <code>MinusSignStr</code>, ensuring that the length is …\nConstructs an <code>NanStr</code>, ensuring that the length is less …\nConstructs an <code>PlusSignStr</code>, ensuring that the length is …\nConstructs an <code>SeparatorStr</code>, ensuring that the length is …")