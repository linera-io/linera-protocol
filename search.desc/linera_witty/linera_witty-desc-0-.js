searchState.loadedDescShard("linera_witty", 0, "Linera Witty\nThe alignment boundary required for the layout.\nCall to <code>cabi_realloc</code> returned a negative value instead of …\nAttempt to allocate a buffer larger than <code>i32::MAX</code>.\nA custom error reported by one of the Wasm host’s …\nAttempt to deallocate an address that’s after <code>i32::MAX</code>.\nOther <code>WitType</code>s that this type depends on.\nA handle to something exported from a guest Wasm module.\nA type that accepts registering a host function as an …\nA type that can register some functions as exports for the …\nRepresentation of an exported host function’s interface.\nResult of flattening this layout.\nThe runtime-specific type to represent the function.\nAttempt to load a function not exported from a module.\nThe representation of the guest-side function interface.\nThe type representing the guest-side parameters.\nThe flat layout representing the guest-side parameters.\nAn address for a location in a guest WebAssembly module’…\nThe type representing the guest-side results.\nThe flat layout representing the guest-side results.\nRepresents the most basic non-empty HList. Its value is …\nTypeclass for HList-y behaviour\nReturns a type signature for an HList of the provided types\nRepresents the right-most end of a heterogeneous list\nThe type representing the host-side parameters.\nThe type representing the host-side parameters.\nThe type representing the host-side results.\nThe type representing the host-side results.\nRepresentation of an imported function’s interface.\nAn active guest Wasm module.\nHow a runtime supports a function signature.\nTrait alias for a Wasm module instance with the WIT …\nAttempt to allocate a buffer that’s aligned to an …\nAttempt to create a <code>GuestPointer</code> from an invalid address …\nAttempt to load a string from a sequence of bytes that …\nAttempt to load an <code>enum</code> type but the discriminant doesn’…\nAllows converting between the current flat layout and the …\nReturns the length of a given HList type without making …\nRepresentation of the memory layout of complex types as a …\nThe layout of the type as fundamental types.\nA handle to interface with a guest Wasm module instance’…\nA handle to the guest Wasm module’s memory.\nMerging of two heterogeneous lists, resulting in a new …\nAttempt to load the memory export from a module that doesn…\nA helper type to verify how many times an exported …\nA fake Wasm instance.\nA helper trait to serve as an equivalent to …\nA fake Wasm runtime.\nAttempt to load a function with a name that’s used for a …\nAttempt to load the memory export from a module that …\nThe resulting heterogeneous list with elements of both …\nTrait to register a compile-time list of <code>WitType</code>s into a …\nThe tail of remaining elements after splitting up the list.\nHow the results from the exported host function should be …\nThe mock native type of the results for the <code>MockInstance</code>.\nA Wasm runtime.\nThe runtime this instance is running in.\nErrors that can occur when using a Wasm runtime.\nInterface for accessing a runtime specific memory.\nThe size of the type when laid out in memory.\nCompile time splitting of heterogeneous lists.\nCustom user data stored in the instance.\nA mutable reference to the custom user data stored in the …\nA reference to the custom user data stored in the instance.\nWasmer runtime error.\nAttempt to access an invalid memory address using Wasmer.\nWasmtime error.\nWasmtime trap during execution.\nA type that can be loaded from a guest Wasm module.\nDerives <code>WitLoad</code> for the Rust type.\nA type that can be stored in a guest Wasm module.\nDerives <code>WitStore</code> for the Rust type.\nA type that is representable by fundamental WIT types.\nDerives <code>WitType</code> for a Rust type.\nAdds a mock exported function to this <code>MockInstance</code>.\nReturns a new address that’s the current address …\nReturns a new address that’s the current address …\nReturns a new address that’s the current address …\nReturns a newly allocated buffer of <code>size</code> bytes in the …\nCalls the <code>function</code> from this instance using the specified …\nCalls a function that the mock instance imported from the …\nDeallocates the <code>allocation</code> managed by the guest.\nRegisters a host function executed by the <code>handler</code> with the …\nRegisters some host functions as exports to the provided …\nExtend the contents of this HList with another HList\nExtend the contents of this HList with another HList\nFlattens this layout into a layout consisting of native …\nPerform a left fold over an HList.\nPerform a left fold over an HList.\nPerform a right fold over an HList.\nPerform a right fold over an HList.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from the joined <code>Target</code> flat layout into the …\nConverts an export into a function, if it is one.\nBorrow an element by type from an HList.\nMutably borrow an element by type from an HList.\nModule that holds HList data structures, implementations, …\nReturns an <code>HList</code> based on the values passed in.\nMacro for pattern-matching on HLists.\nReturns the address of an element in a contiguous list of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the current flat layout into a the joined <code>Target</code> …\nReverse the HList.\nReverse the HList.\nTurns an HList into nested Tuple2s, which are less …\nReturns whether a given HList is empty\nReturns whether a given HList is empty\nReturns whether a given HList is empty\nReturns the length of a given HList\nReturns the length of a given HList\nReturns the length of a given HList\nLifts an instance of the type from the <code>flat_layout</code> …\nConverts the guest-side parameters into the host-side …\nConverts the guest-side results into the host-side results.\nLoads an instance of the type from the <code>location</code> in the …\nLoads an export from the guest module.\nLoads a function from the guest Wasm instance.\nLoads a function from the guest Wasm instance.\nLowers the type into its flat layout representation.\nConverts the host-side parameters into the guest-side …\nConverts the host-side results into the guest-side results.\nApply a function to each element of an HList.\nApply a function to each element of an HList.\nReturns the memory export from the current Wasm module …\nReturns the memory export from the current Wasm module …\nReturns a copy of the current memory contents.\nConverts an <code>export</code> into the runtime’s specific memory …\nCreates a new <code>MockInstance</code> using the provided <code>user_data</code>.\nCreates a new <code>MockExportedFunction</code> for the exported …\nRemove an element by type from an HList.\nReturns the head of the list and the tail of the list as a …\nPrepends an item to the current HList\nPrepend an item to the current HList\nPrepend an item to the current HList\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRegisters this <code>MockExportedFunction</code> with the mock <code>instance</code>.\nRegisters this list of <code>WitType</code>s into <code>wit_types</code>.\nConsume the current HList and return an HList with the …\nConsume the current HList and return an HList with the …\nSplits the current heterogeneous list in two.\nReturns the length of a given HList type without making …\nStores the type at the <code>location</code> in the guest’s <code>memory</code>.\nFunctions and types useful for writing tests.\nReturn an <code>HList</code> where the contents are mutable references …\nReturn an <code>HList</code> where the contents are mutable references …\nReturn an HList where the contents are references to the …\nReturn an HList where the contents are references to the …\nReturns a reference to the custom user data stored in this …\nReturns a mutable reference to the custom user data stored …\nSupport for the Wasmer runtime.\nSupport for the Wasmtime runtime.\nRegisters an <code>impl</code> block’s functions as callable host …\nGeneration of WIT files.\nGenerates a generic type from a trait.\nGenerates the WIT type declaration for this type.\nGenerates the WIT type name for this type.\nAdds a mock exported function to this <code>MockInstance</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites <code>bytes</code> to <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nZip two HLists together.\nZip two HLists together.\nThe invalid discriminant that was received.\nThe <code>enum</code> type that failed being loaded.\nRepresents the most basic non-empty HList. Its value is …\nTrait for performing a left fold over an HList\nTrait for performing a right fold over an HList\nTypeclass for HList-y behaviour\nTrait for mapping over an HList\nRepresents the right-most end of a heterogeneous list\nTrait for zipping HLists\nThe 0 element in the output tuple\nTrait for transforming an HList into a nested tuple.\nReturns the length of a given HList type without making …\nIndexed type conversions of <code>T -&gt; Self</code> with index <code>I</code>. This …\nAn indexed conversion that consumes <code>self</code>, and produces a <code>T</code>…\nTrait defining extraction from a given HList\nWhat is left after you pluck the target from the Self\nTrait for pulling out some subset of an HList, using type …\nTrait for borrowing an HList element by type\nThe 1 element in the output tuple\nPerform a left fold over an HList.\nPerform a right fold over an HList.\n<code>HFoldRightable</code> inner mechanics for folding with a folder …\nBorrow an element by type from an HList.\nMutably borrow an element by type from an HList.\nTakes an element and an Hlist and returns another one with …\nTurns an HList into nested Tuple2s, which are less …\nReturns whether a given HList is empty\nReturns the length of a given HList\nFree function version of <code>LiftFrom::lift_from</code>.\nPerforms the indexed conversion.\nPerforms the indexed conversion.\nApply a function to each element of an HList.\nRemove an element by type from an HList.\nPrepends an item to the current HList\nConsumes the current HList and returns an HList with the …\nReturns the length of a given HList type without making …\nZip this HList with another one.\nA real <code>foldr</code> for the folder that must be owned to fold.\nAsserts that the WIT type dependencies of the <code>Interface</code> …\nAsserts that the function declarations of the <code>Interface</code> …\nTest lowering an instance of <code>T</code>, checking that the …\nTest storing an instance of <code>T</code> to memory, checking that the …\nNecessary data for implementing an entrypoint <code>Instance</code>.\nA slot to store a <code>wasmer::Instance</code> in a way that can be …\nThe type Wasmer uses to represent the parameters in a …\nA temporary handle to a <code>FunctionEnv</code>.\nThe type Wasmer uses to represent the parameters in a …\nHelper to create Wasmer <code>Instance</code> implementations.\nAlias for the <code>Instance</code> implementation made available …\nThe type Wasmer uses to represent the results.\nRepresentation of the Wasmer runtime.\nConversions between flat layouts and Wasmer parameter …\nConversions between flat layouts and Wasmer function …\nBorrows a new mutable reference\nBorrows a new immmutable reference\nReturns mutable references to the <code>Store</code> and the …\nReturns a reference to the host state in this function …\nBorrows a new mutable reference of both the attached Store …\nReturns a mutable- reference to the host state in this …\nDefines a new import for the Wasm guest instance.\nCreates a <code>FunctionEnv</code> representing the instance of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from Wasmer’s representation for functions …\nConverts from Wasmer’s representation into a flat layout.\nCreates an <code>EntrypointInstance</code> from this <code>InstanceBuilder</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts from this flat layout into Wasmer’s …\nConverts from this flat layout into Wasmer’s …\nCreates a new <code>InstanceBuilder</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReturns a reference to the <code>Store</code> used in this …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA structure representing the caller’s context when …\nNecessary data for implementing an entrypoint <code>Instance</code>.\nStructure used to link wasm modules/instances together.\nThe type Wasmtime uses to represent the parameters.\nAlias for the <code>Instance</code> implementation made available …\nThe type Wasmtime uses to represent the results.\nRepresentation of the Wasmtime runtime.\nConversions between flat layouts and Wasmtime parameter …\nConversions between flat layouts and Wasmtime function …\nAliases one item’s name as another.\nAliases one module’s name as another.\nConfigures whether this <code>Linker</code> will shadow previous …\nConfigures whether this <code>Linker</code> will allow unknown exports …\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nDefines a new item in this <code>Linker</code>.\nSame as <code>Linker::define</code>, except only the name of the import …\nImplement any function imports of the <code>Module</code> with a …\nImplement any imports of the given <code>Module</code> with a function …\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the <code>Engine</code> this is connected to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from Wasmtime’s representation into a flat …\nConverts from Wasmtime’s representation into a flat …\nConfigures this <code>Store</code> to yield while executing futures …\nCreates a <code>Func::new</code>-style function named in this linker.\nCreates a <code>Func::new_unchecked</code>-style function named in this …\nDefine a host function within this linker.\nLooks up a previously defined value in this <code>Linker</code>, …\nLooks up a value in this <code>Linker</code> which matches the <code>import</code> …\nReturns the “default export” of a module.\nLooks up an export from the caller’s module by the <code>name</code> …\nReturns the remaining fuel in the store.\nConvenience wrapper to define an entire <code>Instance</code> in this …\nAttempts to instantiate the <code>module</code> provided.\nPerforms all checks necessary for instantiating <code>module</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts from this flat layout into Wasmtime’s …\nConverts from this flat layout into Wasmtime’s …\nReturns an iterator over all items defined in this <code>Linker</code>, …\nDefine automatic instantiations of a <code>Module</code> in this linker.\nCreates a new <code>EntrypointInstance</code> with the guest module …\nCreates a new <code>Linker</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nSet the amount of fuel in this store to be consumed when …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe <code>WitType</code>s that this interface uses.\nTrait for content generation.\nTrait to register a compile-time list of <code>WitType</code>s into a …\nA stub Wasm instance.\nGenerates WIT snippets for an interface.\nHelper type to write a <code>WitInterface</code> to a file.\nHelper type to write a WIT file declaring a world.\nRegisters a <code>WitInterface</code> to be exported from this world.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate file contents.\nRegisters a <code>WitInterface</code> to be imported into this world.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a new <code>WitInterfaceWriter</code> to write the provided …\nCreates a new <code>WitWorldWriter</code> to write a world with the …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRegisters this list of <code>WitType</code>s into <code>wit_types</code>.\nThe WIT definitions of each function in this interface.\nThe name of the interface.\nThe name of the package the interface belongs to.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")