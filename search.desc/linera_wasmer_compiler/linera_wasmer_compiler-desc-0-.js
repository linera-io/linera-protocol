searchState.loadedDescShard("linera_wasmer_compiler", 0, "The <code>wasmer-compiler</code> crate provides the necessary …\nAddend to add to the symbol value.\nArchived frame infos\nAn archived frame info\nA compiled wasm module, ready to be instantiated.\nA compiled wasm module, ready to be instantiated.\nA compiled wasm module that was loaded from a serialized …\nAn <code>Artifact</code> is the product that the <code>Engine</code> implementation …\nTunable parameters for WebAssembly compilation. This is …\nMemory manager for executable code.\nOffset in bytes from the beginning of the function.\nThe variant of the compiled function frame info which can …\nAn implementation of a Compiler from parsed WebAssembly …\nThe compiler configuration options.\nThe module was compiled with a CPU feature that is not …\nA WebAssembly <code>Universal</code> Engine.\nThe Builder contents of <code>Engine</code>\nThe inner contents of <code>Engine</code>\nThis is a global cache of backtrace frame information for …\nControls which experimental features will be enabled. …\nThe variant of the frame information which can be an owned …\nTrait for iterating over the operators of a Wasm Function\nContains function data: bytecode and its offset in the …\nRepresents a continuous region of executable memory …\nA function middleware specialized for a single function.\nAn RAII structure used to unregister a module’s frame …\nAn error occurred when checking the import types.\nAn error while instantiating a module.\nA linking ocurred during instantiation.\nThe WebAssembly.LinkError object indicates an error during …\nHeader signature for wasmu binary\nA Middleware binary reader of the WebAssembly structures …\nThe state of the binary reader. Exposed to middlewares to …\nThe result of translating via <code>ModuleEnvironment</code>. Function …\nModule loaded from an archive. Since <code>CompileModuleInfo</code> is …\nA shared builder for function middlewares.\nTrait for generating middleware chains from “prototype”…\nContains information decoded from the Wasm module that …\nOwned frame infos\nType of <code>OwnedDataInitializer</code> returned by the …\nType of iterator returned by the <code>data_initializers</code> method\nA reference to the frame info\nInsufficient resources available for linking.\nA runtime error occured while invoking the start function\nA trap ocurred during linking.\nAn engine delegates the creation of memories, tables, and …\nTrait needed to get downcasting of <code>Engine</code>s to work.\nVersion number of this crate.\nGets the address map for the frame info\nAllocate a single contiguous block of memory at a fixed …\nThis indicates if the Artifact is allocated and can be run …\nApplies the chain on a <code>ModuleInfo</code> struct.\nGet the parameter and result types for the given Wasm …\nConfigures whether the WebAssembly bulk memory operations …\nBulk Memory proposal should be enabled\nReturns the number of bytes remaining.\nEnable NaN canonicalization.\nEnable NaN canonicalization.\nClone the engine\nThe main serializable compilation object\nCompile a WebAssembly binary\nCompiles a parsed module.\nGets the custom compiler config\nGets the compiler associated to this engine.\nReturns the CPU features for this Artifact\nCPU Feature flags for this compilation\nCreate a global with an unset value.\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the memories of the current …\nCreate a <code>ModuleInfo</code> for instantiation\nAllocate memory for just the tables of the current module.\nAllocate memory for just the tables of the current module.\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nReturns the current position.\nFunction body bytecode.\nReturns data initializers to pass to <code>VMInstance::initialize</code>\nReferences to the data initializers.\nDatas initializers\nGets the default features for this compiler in the given …\nGets the default features for this compiler in the given …\nDeserialize a serialized artifact.\nDeserializes a WebAssembly module which was previously …\nGet Function Relocations ref\nDeserializes a WebAssembly module from a path.\nDeserialize from a file path.\nDeserialize a ArtifactBuild from an object file\nDeserialize a serialized artifact.\nDeserializes a WebAssembly module which was previously …\nReturns the deterministic id of this engine\nTry to downcast the artifact into a given type mutably.\nTry to downcast the artifact into a given type.\nThe size in bytes of the offset guard for dynamic heaps.\nEnable Position Independent Code (PIC).\nEnable Position Independent Code (PIC).\nEnable compiler IR verification.\nEnable compiler IR verification.\nBuild the <code>Engine</code> for this configuration\nReturns whether the readers has reached the end of the …\nWasm exceptions proposal should be enabled\nCompiles a module into a native object file.\nCompiles a module into a native object file.\nExtended constant expressions proposal should be enabled\nReturns the features for this Artifact\nThe Wasm features\nThe Wasm features\nProcesses the given operator.\nProcesses the given operator.\nFinishes the instantiation of a just created <code>VMInstance</code>.\nReturns the dynamic function trampolines allocated in …\nReturns the function call trampolines allocated in memory …\nReturns the functions allocated in memory or this <code>Artifact</code> …\nGet the <code>BaseTunables</code> for a specific Target\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>ArtifactBuild</code> from component parts.\nCreate a new ArtifactBuild from a SerializableModule\nCreate a new <code>ModuleFromArchive</code> from the archived version …\nReferences to the function bodies.\nGenerates a <code>FunctionMiddleware</code> for a given function.\nGenerates a function middleware chain.\nGets the frame info for a given local function index\nGet the CpuFeatues used by the compiler\nGet the CpuFeatues used by the compiler\nGet Function Relocations ref\nGet Function Relocations ref\nGet Custom Sections ref\nGet Custom Sections ref\nGet Debug optional Dwarf ref\nGet Debug optional Dwarf ref\nGet Dynamic Functions Call Trampolines ref\nGet Dynamic Functions Call Trampolines ref\nGet Function Relocations ref\nGet Function Relocations ref\nGet Functions Bodies ref\nGet Functions Bodies ref\nGet Functions Call Trampolines ref\nGet Functions Call Trampolines ref\nGet Function Relocations\nGet Function Relocations\nReturns the address of a trampoline in the libcall …\nGet LibCall Trampoline Length\nGet LibCall Trampoline Length\nGet LibCall Trampoline Section Index\nGet LibCall Trampoline Section Index\nGet the middlewares for this compiler\nGiven a <code>Trap</code>, this function returns the Wasm trace and the …\nReturns the hash algorithm\nCreate a new headless Backend\nCreate a headless <code>Engine</code>\nA unique identifier for this object.\nA unique identifier for this object.\nGet reference to <code>EngineInner</code>.\nGet mutable reference to <code>EngineInner</code>.\nCrate an <code>Instance</code> from this <code>Artifact</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provided bytes look like a serialized …\nCheck if the provided bytes look like a serialized …\nLength in bytes.\nReturns the length of a libcall trampoline.\nLinks a module, patching the allocated functions with the …\nLookup a signature\nCreates a custom section containing the libcall …\nConfigures whether the WebAssembly 64-bit memory proposal …\n64-bit Memory proposal should be enabled\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nGet a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nReturns the memory styles associated with this <code>Artifact</code>.\nModuleInfo information.\nReturns the <code>ModuleInfo</code> for instantiation\nConfigures whether the WebAssembly module linking proposal …\nModule Linking proposal should be enabled\nBody offset relative to the module file.\nThe decoded Wasm types for the module.\nConfigures whether the WebAssembly multi-memory proposal …\nMulti Memory proposal should be enabled\nConfigures whether the WebAssembly multi-value proposal …\nMulti Value proposal should be enabled\nReturns a descriptive name for this compiler.\nReturns the name of this engine\nCompile a data buffer into a <code>ArtifactBuild</code>, which may then …\nCreate a new builder with pre-made components\nCreate a new <code>CodeMemory</code> instance.\nCompile a data buffer into a <code>ArtifactBuild</code>, which may then …\nAllocates the environment data structures.\nCreate a new <code>Engine</code> with the given config\nCreates a new empty ModuleTranslationState.\nCreate a new feature\nConstructs a <code>MiddlewareBinaryReader</code> with an explicit …\nReturns the original position (with the offset)\nGets the owned buffer\nDo preinstantiation logic that is executed before …\nEntry point for normal entry of the function. All …\nApply the page permissions.\nPushes a middleware onto the back of the middleware chain.\nPush an operator.\nReturn the range (original offset, original offset + data …\nRead a <code>count</code> indicating the number of times to call …\nRead a <code>(count, value_type)</code> declaration of local variables …\nReads the next available <code>Operator</code>.\nConfigures whether the WebAssembly reference types …\nReference Types proposal should be enabled\nRegisters a new compiled module’s frame information.\nRegister thie <code>Artifact</code> stack frame information into the …\nRegister the frame info, so it’s free when the mememory …\nRegister a signature\nRelaxed SIMD proposal should be enabled\nThis function allows to match all imports of a <code>ModuleInfo</code> …\nSerializes an artifact into bytes\nSet the features\nSet the hashing algorithm\nSets the hash algorithm\nReplaces the middleware chain with a new one.\nSets the <code>ModuleInfo</code> name\nSet the target\nAttach a Tunable to this engine\nReturns the associated VM signatures for this <code>Artifact</code>.\nShared signature registry.\nConfigures whether the WebAssembly SIMD proposal will be …\nSIMD proposal should be enabled\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGet a <code>TableStyle</code> for the provided <code>TableType</code>.\nReturns the table plans associated with this <code>Artifact</code>.\nConfigures whether the WebAssembly tail-call proposal will …\nTail call proposal should be enabled\nThe GlobalFrameInfoRegistration needs to be transfered to …\nThe target\nGets the target\nConfigures whether the WebAssembly threads proposal will …\nThreads proposal should be enabled\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nTranslate a wasm module using this environment. This …\nTranslate a sequence of bytes forming a valid Wasm binary …\nGets the traps for the frame info\nGet a reference to attached Tunable of this engine\nMutably get the UnwindRegistry.\nupcast boxed dyn\nupcast mut ref\nupcast ref\nValidate the module\nValidates a WebAssembly module\nValidates a module.\nValidates a module.\nGet the VMConfig for this tunables Currently, VMConfig …\nGet the VMConfig for this tunables Currently, VMConfig …\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nwasmparser is exported as a module to slim compiler …\nConverts a wasmparser heap type to a Wasm Type.\nHelper function translating wasmparser types to Wasm Type.")