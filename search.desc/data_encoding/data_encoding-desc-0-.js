searchState.loadedDescShard("data_encoding", 0, "Efficient and customizable data-encoding functions like …\nPadded base32 encoding\nPadded base32hex encoding\nUnpadded base32hex encoding\nDNSCurve base32 encoding\nDNSSEC base32 encoding\nUnpadded base32 encoding\nUnpadded base32 encoding with case-insensitive decoding\nUnpadded base32 encoding with visual error correction …\nPadded base64 encoding\nPadded base64url encoding\nUnpadded base64url encoding\nMIME base64 encoding\nMIME base64 encoding without trailing bits check\nUnpadded base64 encoding\nOrder in which bits are read from a byte\nDecoding error\nDecoding error kind\nDecoding error with partial result\nWraps an encoding and input for display purposes.\nEncodes fragmented input to an output\nBase-conversion encoding\nLowercase hexadecimal encoding\nLowercase hexadecimal encoding with case-insensitive …\nUppercase hexadecimal encoding\nUppercase hexadecimal encoding with case-insensitive …\nLeast significant bit first\nInvalid length\nMost significant bit first\nInvalid padding length\nBase-conversion specification\nSpecification error\nInvalid symbol\nNon-zero trailing bits\nHow to translate characters when decoding\nHow to wrap the output when encoding\nEncodes the provided input fragment and appends the result …\nBit-order\nReturns the bit-width\nCheck trailing bits\nReturns decoded <code>input</code>\nReturns the maximum decoded length of an input of length …\nDecodes <code>input</code> in <code>output</code>\nReturns encoded <code>input</code>\nAppends the encoding of <code>input</code> to <code>output</code>\nReturns an object to display the encoding of <code>input</code>\nReturns the encoded length of an input of length <code>len</code>\nEncodes <code>input</code> in <code>output</code>\nEncodes <code>input</code> in <code>output</code> and returns it as a <code>&amp;str</code>\nWrites the encoding of <code>input</code> to <code>output</code>\nWrites the encoding of <code>input</code> to <code>output</code> using a temporary …\nReturns the specified encoding\nDecoding error\nMakes sure all inputs have been encoded and appended to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCharacters to translate from\nCharacters to ignore when decoding\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the encoding is canonical\nError kind\nReturns a default specification\nReturns an object to encode a fragmented input and append …\nPadding\nError position\nNumber of bytes read from input\nWrapping characters\nReturns the encoding specification\nSymbols\nCharacters to translate to\nHow to translate characters when decoding\nWrapping width\nHow to wrap the output when encoding\nNumber of bytes written to output")