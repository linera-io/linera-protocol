searchState.loadedDescShard("linera_rpc", 0, "This module provides network abstractions and the data …\nInformation about shard configuration for a specific chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this message is “local” i.e. will be executed …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe ID of the shard assigned to the chain.\nObtains the <code>ChainId</code> of the chain targeted by this message, …\nThe total number of shards in the validator network.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe server configuration for the linera-exporter.\nThe network protocol.\nThe network configuration of a proxy.\nThe network configuration of a shard.\nThe network configuration for all shards.\nThe network configuration for all shards.\nThe public network configuration for a validator.\nThe public network configuration for a validator.\nThe server configurations for the linera-exporter. They …\nThe server configurations for the linera-exporter. They …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>ShardConfig</code> of the shard assigned to the <code>chain_id</code>.\nStatic shard assignment\nThe host name of the validator (IP or hostname).\nThe host name (e.g., an IP address).\nThe hostname (e.g., an IP address).\nThe host name of the validator (IP or hostname).\nThe host name of the server (IP or hostname).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe port on which metrics are served.\nThe port on which metrics are served.\nThe port the validator listens on.\nThe port.\nThe port the validator listens on.\nThe port for the server to listen on.\nThe private port. Used for communicating with shards.\nThe network protocol to use internally.\nThe network protocol to use for the validator frontend.\nThe network protocol to use internally.\nThe network protocol to use for the validator frontend.\nThe available proxies.\nThe available proxies.\nThe public key of the validator.\nThe public key of the validator.\nThe public facing port. Receives incoming connections from …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe available shards. Each chain UID is mapped to a unique …\nThe available shards. Each chain UID is mapped to a unique …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nLimit of gRPC message size up to which we will try to …\nTypes which are proxyable and expose the appropriate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\n/ Public key of a Linera account. / Corresponding private …\n/ Signature created by a Linera account.\nA blob of binary data.\nA content-addressed blob ID i.e. the hash of the …\nContent-addressed blob IDs i.e. the hashes of the …\nAn authenticated proposal for a new block.\nA certified statement from the committee.\nA request for a batch of certificates.\nA batch of certificates.\nRequest information on a chain.\nResponse to <code>ChainInfoQuery</code>\nA wrapper around ChainInfoResponse which contains a …\nAcknowledge the height of the highest confirmed blocks …\nCertificate for a confirmed block.\nInformation about the Linera crate version the validator …\nAn internal request between chains within a validator.\nA request for downloading certificates by block heights.\nA certified statement from the committee, together with …\nA request to handle a pending blob.\nA certified statement from the committee, together with …\nA certified statement from the committee, together with …\nA certified statement from the committee, without the …\nNotify that a chain has a new certified block or a new …\nA request for a pending blob.\nA requested pending blob, or an error.\nA confirmed block certificate in a serialized form.\nBatch of raw certificates.\nInformation about shard configuration for a specific chain.\nA request for client to subscribe to notifications for a …\nCertificate for a timeout vote.\nCommunicate a number of messages from the sender to the …\nCertificate for a validated block.\n/ Public key of a validator.\n/ Signature created by a validator.\nInformation about the version of Linera the validator is …\nString value of the enum field names used in the ProtoBuf …\nA certified statement from the committee.\nA certified statement from the committee.\nA certified statement from the committee.\nThe chain ID\nThe ID of the chain (used for routing).\nThe ID of the chain the value belongs to.\nThe ID of the chain (used for routing).\nThe ID of the chain (used for routing).\nThe ID of the chain (used for routing).\nbincode-encoded chain info\nNested message and enum types in <code>ChainInfoResult</code>.\nBCS-serialized bytes of confirmed block part.\nbincode-encoded content\nReturns the value of <code>create_network_actions</code>, or the …\nWhether to create network actions as part of the query.\nNested message and enum types in <code>CrossChainRequest</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>CertificateKind</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nThe certified value’s hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>CertificateKind</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nReturns the enum value of <code>kind</code>, or the default if the …\nThe kind of certificate serialized in <code>value</code> field.\nBCS-serialized bytes of lite certificate part.\nGenerated client implementations.\nGenerated server implementations.\nReturns the value of <code>original_proposal</code>, or the default …\nA lite certificate for a validated block, or a fast block …\nByte-encoded owner\nNested message and enum types in <code>PendingBlobResult</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nQuery the current committees\nRequest a signed vote for fallback mode.\nReturns the value of <code>request_leader_timeout</code>, or the …\nRequest a signed vote for a leader timeout for the given …\nQuery values from the chain manager, not just votes.\nQuery the balance of a given owner.\nQuery the received messages that are waiting to be picked …\nReturns the value of <code>request_received_log_excluding_first_n</code>…\nQuery new certificate removed from the chain.\nReturns the value of …\nQuery for certificate hashes at block heights sent from …\nThe round in which the value was certified.\nThe round in which the value was certified.\nSets <code>kind</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nSignature by chain owner\nOptional validator signature for the response.\nSignatures on the value hash and round\nSignatures on the value hash and round\nOptionally test that the block height is as expected\nGenerated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nThe certified value\nWait until all outgoing cross-chain messages from this …\nWait until all outgoing cross-chain messages from this …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\na bincode wrapper around <code>NodeError</code>\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA service run by the Proxy which listens for incoming …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotify a client that there has been an update for a <code>ChainId</code>…\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nGenerated trait containing gRPC methods that should be …\nA service run by the Proxy which listens for incoming …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotify a client that there has been an update for a <code>ChainId</code>…\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\na bincode wrapper around <code>NodeError</code>\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nHow to communicate with a validator or a local node.\nEnable decompressing responses.\nReturn the hash of the <code>Certificate</code> that last used a blob.\nReturns the certificate that last used the blob.\nAttempt to create a new client by connecting to a given …\nDownload a blob.\nDownload a certificate.\nDownload a batch of certificates.\n/ Download a batch of certificates by heights.\nDownload a blob that belongs to a pending block on the …\nDownload a batch of certificates, in serialized form, by …\nReturns the argument unchanged.\nRequest the network description seen by this node.\nRequest shard information for a specific chain.\nRequest the node’s version info.\nPropose a new block.\nHandle information queries for this chain.\nProcess a certificate without value.\nHandle a blob that belongs to a pending block on the given …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReturn the <code>BlobId</code>s that are not contained as <code>Blob</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nSubscribe to notifications for a set of Chain Ids.\nUpload a blob. Returns an error if the validator has not …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nGenerated gRPC service name\nServer streaming response type for the Subscribe method.\nGenerated trait containing gRPC methods that should be …\nHow to communicate with a validator or a local node.\nEnable decompressing requests with the given encoding.\nReturn the hash of the <code>Certificate</code> that last used a blob.\nReturns the certificate that last used the blob.\nDownload a blob.\nDownload a certificate.\nDownload a batch of certificates.\n/ Download a batch of certificates by heights.\nDownload a blob that belongs to a pending block on the …\nDownload a batch of certificates, in serialized form, by …\nReturns the argument unchanged.\nRequest the network description seen by this node.\nRequest shard information for a specific chain.\nRequest the node’s version info.\nPropose a new block.\nHandle information queries for this chain.\nProcess a certificate without value.\nHandle a blob that belongs to a pending block on the given …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReturn the <code>BlobId</code>s that are not contained as <code>Blob</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nSubscribe to notifications for a set of Chain Ids.\nUpload a blob. Returns an error if the validator has not …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nInterface provided by each physical shard (aka “worker”…\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nDownload a blob that belongs to a pending block on the …\nReturns the argument unchanged.\nPropose a new block.\nHandle information queries for this chain.\nHandle a (trusted!) cross-chain request.\nProcess a certificate without value.\nHandle a blob that belongs to a pending block on the given …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nInterface provided by each physical shard (aka “worker”…\nEnable decompressing requests with the given encoding.\nDownload a blob that belongs to a pending block on the …\nReturns the argument unchanged.\nPropose a new block.\nHandle information queries for this chain.\nHandle a (trusted!) cross-chain request.\nProcess a certificate without value.\nHandle a blob that belongs to a pending block on the given …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA pool of transport channels to be used by gRPC.\nObtains a channel for the current address. Either clones …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA default batteries included <code>transport</code> channel.\nError’s that originate from the client or server;\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nCreate an <code>Endpoint</code> builder that can create <code>Channel</code>s.\nConnect to the provided <code>Endpoint</code> using the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Endpoint</code> from shared bytes.\nCreate an <code>Endpoint</code> from a static string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Channel</code> using a custom connector to the …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA general node provider which delegates node provision to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nAn encoder/decoder of <code>RpcMessage</code>s for the RPC protocol.\nA pool of (outgoing) data streams.\nSuggested buffer size\nErrors that can arise during transmission or reception of …\nThe handler required to create a service.\nThe result of spawning a server is oneshot channel to …\nA client without an address - serves as a client factory.\nServer implementation for TCP.\nA trait alias for a protocol transport.\nServer implementation for UDP.\nCreates a transport for this protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitiates a new block.\nHandles information queries for this chain.\nProcesses a confirmed certificate.\nProcesses a lite certificate.\nProcesses a timeout certificate.\nProcesses a validated certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ConnectionPool</code> for this protocol.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the UDP server implementation.\nRuns the TCP server implementation.\nRuns a server for this protocol and the given message …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")