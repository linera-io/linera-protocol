searchState.loadedDescShard("deluxe", 0, "Deluxe\nContains the error value\nThe error type for parsers.\nA wrapper for a list of errors. Can be empty.\nExtracts a structure out of a <code>syn::Attribute</code> list.\nGenerates <code>ExtractAttributes</code> for a struct or enum.\nA value for a boolean named field that can only be a name …\nTrait for a <code>syn</code> type containing a list of attributes.\nNamed context, corresponding to <code>syn::FieldsNamed</code>.\nContains the success value\nParses a structure out of a <code>syn::Attribute</code> list.\nGenerates <code>ParseAttributes</code> for a struct or enum.\nBase trait for parsing a single field out of …\nGenerates <code>ParseMetaItem</code> for a struct or enum.\nThe context a meta item parser is operating in.\nThe result of a parse method.\nA wrapper for adding a <code>Span</code> to an arbitrary value.\nUnnamed context, corresponding to <code>syn::FieldsUnnamed</code>.\nReturns an immutable slice of attributes.\nReturns a mutable <code>Vec</code> of attributes.\nReturns a new <code>Err</code> if the error list has errors.\nChecks if the error list is empty.\nReset the list to an empty state.\nGenerates a module for parsing a collection using `#[…\nGenerates a module for parsing a map collection using `#[…\nGenerates a module for parsing an optional value using `#[…\nAppends all errors from <code>iter</code> into this list.\nExtracts attributes out of another type holding a list of …\nIterates the attributes from a <code>T</code>, extracting and parsing …\nExtracts attributes out of another type holding a list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the error list into a token stream containing …\nReturns an iterator of token streams containing …\nUnwraps a <code>SpannedValue</code> into a <code>T</code>. Note this is an …\nReturns <code>Err</code> if the list has errors, or <code>Ok(value)</code> if the …\nChecks if the list contains any errors.\nReturns <code>true</code> if the flag was set.\nFallback for when a required item is missing.\nGets the stored <code>Span</code>.\nCreates a new empty error list.\nCreates a new value wrapping a T, with the span set to …\nCreates a token stream containing the current set of …\nParses a required Rust type out of a token stream.\nParses a required Rust type out of a token stream.\nParses a Rust type out of a token stream, returning a …\nParses a required Rust type out of another type holding a …\nIterates the attributes from a <code>T</code>, parsing any that match.\nParses a Rust type out of another type holding a list of …\nParse the item from the tokens in <code>input</code>.\nParses an empty flag value.\nParse the item in an inline context.\nParses the item following a name.\nParses a <code>ParseMetaItem</code> following a name, using a custom …\nParses a Rust type out of a token stream, returning a …\nChecks if a given attribute path can be parsed by this …\nChecks if a given attribute path can be extracted by this …\nPushes one error onto the list. This function is a wrapper …\nPushes one error onto the list, setting the error’s span …\nPushes an error onto the list from a <code>Result</code>.\nPushes one error onto the list spanning the given syntax …\nPushes one previously constructed <code>Error</code> onto the list.\nCreates a new <code>true</code> flag value spanned to <code>span</code>.\nCreates a new <code>true</code> flag value spanned to <code>Span::call_site</code>.\nGets the stored <code>Span</code>.\nConverts <code>self</code> to a <code>Self::Named</code>.\nGets the stored <code>Span</code>.\nCreates a new <code>false</code> flag value.\nReturns the inner if the error list has errors.\nAdditional helper functions for validating after parsing.\nCustom parsing helpers for <code>#[deluxe(with = ...)]</code>.\nCreates a new value wrapping a T, with the span set to <code>span</code>…\nAppends an error if some attributes are present, but not …\nAppends an error if some attributes are present, but not …\nAppends an error if more than one given attribute is …\nAppends an error if more than one given attribute is …\nHelpers for parsing a path allowing any keywords as …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing a module path using …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements …")