searchState.loadedDescShard("deluxe_core", 0, "Deluxe Core\nA flag noting if this parser will consume all unknown …\nA flag noting if this parser will consume all unknown …\nConverts a <code>HasAttributes</code> type to a stored container value.\nContains the error value\nThe error type for parsers.\nA wrapper for a list of errors. Can be empty.\nAn iterator containing all the errors in an <code>Errors</code>.\nExtracts a structure out of a <code>syn::Attribute</code> list.\nA value for a boolean named field that can only be a name …\nTrait for a <code>syn</code> type containing a list of attributes.\nNamed context, corresponding to <code>syn::FieldsNamed</code>.\nContains the success value\nParses a structure out of a <code>syn::Attribute</code> list.\nParses a meta item for a structure with named fields that …\nParses a meta item for a structure with named fields.\nParses a meta item for a structure with unnamed fields.\nBase trait for parsing a single field out of …\nParses a meta item for a structure with named fields that …\nThe context a meta item parser is operating in.\nThe result of a parse method.\nA region of source code, along with macro expansion …\nA wrapper for adding a <code>Span</code> to an arbitrary value.\nA trait for converting an attribute key to a string.\nUnnamed context, corresponding to <code>syn::FieldsUnnamed</code>.\nAppends an error if some attributes are present, but not …\nReturns an immutable slice of attributes.\nReturns a mutable <code>Vec</code> of attributes.\nReturns a new <code>Err</code> if the error list has errors.\nThe span of the invocation of the current procedural macro.\nChecks if the error list is empty.\nReset the list to an empty state.\nConverts a reference to a stored container <code>T</code> into this …\nConverts a reference to a stored container <code>T</code> into this …\nConverts a mutable reference to a stored container <code>T</code> into …\nConverts a mutable reference to a stored container <code>T</code> into …\nGenerates a module for parsing a collection using `#[…\nGenerates a module for parsing a map collection using `#[…\nGenerates a module for parsing an optional value using `#[…\nAppends all errors from <code>iter</code> into this list.\nIterates the attributes from a <code>T</code>, extracting and parsing …\nReturns the number of fields in this structure.\nReturns an array specifying all optional and required …\nFormats the given value as a key string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the error list into a token stream containing …\nReturns an iterator of token streams containing …\nUnwraps a <code>SpannedValue</code> into a <code>T</code>. Note this is an …\nReturns <code>Err</code> if the list has errors, or <code>Ok(value)</code> if the …\nChecks if the list contains any errors.\nReturns <code>true</code> if the flag was set.\nCreate a new span encompassing <code>self</code> and <code>other</code>.\nCreates a new span with the same name resolution behavior …\nFallback for when a required item is missing.\nFallback for when a required item is missing.\nThe span located at the invocation of the procedural …\nGets the stored <code>Span</code>.\nCreates a new empty error list.\nCreates a new value wrapping a T, with the span set to …\nAppends an error if more than one given attribute is …\nCreates a token stream containing the current set of …\nIterates the attributes from a <code>T</code>, parsing any that match.\nUtility functions for parse trait implementations.\nParse the item from a group of inline named contexts.\nParse the item from a group of inline named contexts.\nParse the item from a group of inline contexts.\nParse the item from the tokens in <code>input</code>.\nParses an empty flag value.\nParses an empty flag value.\nParse the item in an inline context.\nParse the item in an inline context.\nParses the item following a name.\nParses the item following a name.\nParse the item from a group of inline named contexts.\nParses a <code>ParseMetaItem</code> following a name, using a custom …\nChecks if a given attribute path can be parsed by this …\nChecks if a given attribute path can be extracted by this …\nPushes one error onto the list. This function is a wrapper …\nPushes one error onto the list, setting the error’s span …\nPushes an error onto the list from a <code>Result</code>.\nPushes one error onto the list spanning the given syntax …\nPushes one previously constructed <code>Error</code> onto the list.\nCreates a new span with the same line/column information …\nCreates a new <code>true</code> flag value spanned to <code>span</code>.\nCreates a new <code>true</code> flag value spanned to <code>Span::call_site</code>.\nReturns the source text behind a span. This preserves the …\nGets the stored <code>Span</code>.\nConverts <code>self</code> to a <code>Self::Named</code>.\nGets the stored <code>Span</code>.\nCreates a new <code>false</code> flag value.\nConvert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.\nReturns the inner if the error list has errors.\nAdditional helper functions for validating after parsing.\nCustom parsing helpers for <code>#[deluxe(with = ...)]</code>.\nRuns function <code>f</code> with the key converted to a <code>&amp;str</code>.\nRuns function <code>f</code> with the key converted to a <code>&amp;str</code>.\nCreates a new value wrapping a T, with the span set to <code>span</code>…\n<code>{</code>…<code>}</code>\n<code>{</code>…<code>}</code>\n<code>[</code>…<code>]</code>\n<code>[</code>…<code>]</code>\nThe field was specified with an equals, .e.g <code>my_arg = 123</code>.\nTemporary container for storing parsing state for a single …\nThe field was specified as a flag without a value, .e.g …\nThe type of a named meta field.\nField is not present or not parsed yet.\nAn empty syntax tree node that consumes no tokens when …\n<code>(</code>…<code>)</code>\n<code>(</code>…<code>)</code>\nThe field was specified with surrounding parenthesis, .e.g …\nHelpers for parsing tokens inside a delimiter.\nField was present, but had an error during parsing.\nA string type that can be stored on the stack or on the …\nField was found and successfully parsed.\nReturns <code>b</code> if the status is <code>Some</code>.\nIf the status is <code>Some</code>, calls <code>f</code> with the wrapped value and …\nConverts from <code>&amp;FieldStatus&lt;T&gt;</code> to <code>FieldStatus&lt;&amp;T&gt;</code>.\nExtracts a string slice containing the entire <code>SmallString</code>.\nAppends an error if a field is not included in a list of …\nAppends errors if any keys are found in a list of paths.\nGets the first string in a list of path names and spans.\nGets the first <code>Span</code> in a list of path names and spans.\nReturns an error with a “unexpected flag” message.\nConverts from <code>FieldStatus&lt;impl Into&lt;FieldStatus&lt;T&gt;&gt;&gt;</code> to …\nForks all streams in a <code>ParseStream</code> slice into a new <code>Vec</code> of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if all keys are contained in a set of paths.\nCreates a span encompassing a collection of <code>ParseStream</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the status to an <code>Option</code>.\nConverts this <code>SmallString</code> to <code>SmallString&lt;&#39;static&gt;</code>.\nReturns <code>true</code> if the field is a <code>FieldStatus::None</code> value.\nReturns <code>true</code> if the field is a <code>FieldStatus::ParseError</code> …\nReturns <code>true</code> if the field is a <code>FieldStatus::Some</code> value.\nConcatenates two path strings.\nCalls <code>join_path</code> on all paths in a slice.\nConcatenates two path prefix strings.\nConverts a <code>ToKeyString</code> to a <code>SmallString</code>.\nMaps a <code>FieldStatus&lt;T&gt;</code> to <code>FieldStatus&lt;U&gt;</code> by applying a …\nReturns an error with a “missing required field” …\nCreates a new empty <code>SmallString</code>.\nAppends a “too many enum variants” error.\nReturns the status if it contains a value, or if it is <code>None</code>…\nReturns the status if it contains a value, or if it is <code>None</code>…\nParses a path allowing any keywords as identifiers, and …\nParses a pair of delimiter tokens, and returns a …\nParse a <code>ParseMetaItem</code> surrounded by a delimiter. The inner …\nParse a stream surrounded by a delimiter. The inner stream …\nRuns a parsing function from an empty token stream.\nParses a <code>ParseMetaItem</code> inline from an empty token stream.\nParses a stream for end-of-stream, or a single comma.\nRuns a parsing function on the first stream in a stream …\nParses a named item into this status.\nParses a named item into this status, using a custom …\nParses a <code>ParseMetaItem</code> following a name.\nParses a <code>ParseMetaItem</code> following a name, using custom parse\nParses an inline struct with named fields from a stream.\nParses a collection of <code>ToTokens</code> values into a struct with …\nParses an inline fixed-length tuple struct from a stream.\nParses an unnamed item into this status.\nParses an unnamed item into this status, using a custom …\nChecks if a path matches a list of names.\nChecks if a stream is empty or contains only a comma.\nAppends the given <code>char</code> to the end of this <code>SmallString</code>.\nAppends a given string slice onto the end of this …\nReturns an iterator of pairs of <code>TokenStream</code>s and the …\nRemoves some paths from a path hashmap.\nConsumes all tokens left in a list of streams.\nSkips over items in a <code>ParseStream</code> until a comma is reached.\nReturns an iterator of <code>TokenStream</code>s and the corresponding …\nAttempts to begin parsing a meta item following a name, …\nReturns an error with an “unknown field” message.\nReturns the contained <code>FieldStatus::Some</code> value, consuming …\nReturns the contained <code>FieldStatus::Some</code> value or a …\nReturns the contained <code>FieldStatus::Some</code> value or computes …\nAppends a “enum variant expected” error message.\nAppends an error if some attributes are present, but not …\nAppends an error if more than one given attribute is …\nHelpers for parsing a path allowing any keywords as …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing a module path using …\nHelpers for parsing any type that implements <code>ParseMetaItem</code> …\nHelpers for parsing any type that implements …\nHelpers for parsing any type that implements …")