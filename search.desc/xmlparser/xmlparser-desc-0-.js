searchState.loadedDescShard("xmlparser", 0, "<em>xmlparser</em> is a low-level, pull-based, zero-allocation XML …\nAttribute token.\nCDATA token.\nA character reference.\nIndicates <code>&lt;/name&gt;</code>\nComment token.\nDeclaration token.\nDOCTYPE end token.\nDOCTYPE start token.\n<code>ElementEnd</code> token.\nElement end token.\nElement start token.\nIndicates <code>/&gt;</code>\nEmpty DOCTYPE token.\nAn entity reference.\nENTITY token.\nRepresentation of the EntityDef value.\nAn XML parser errors.\nRepresentation of the ExternalID value.\nAn invalid/unexpected character.\nAn invalid/unexpected character.\nA Character Data node contains an invalid data.\nComment cannot contain <code>--</code>.\nComment cannot end with <code>-</code>.\nAn invalid ExternalID in the DTD.\nAn invalid name.\nAn unexpected character instead of <code>&quot;</code> or <code>&#39;</code>.\nAn invalid reference.\nAn unexpected character instead of an XML space.\nAn unexpected string.\nA non-XML character has occurred.\nIndicates <code>&gt;</code>\nProcessing instruction token.\nRepresentation of the Reference value.\nA string slice.\nA streaming XML parsing interface.\nA stream parser errors.\nText token.\nPosition in text.\nAn XML token.\nTokenizer for the XML structure.\nThe steam ended earlier than we expected.\nExtension methods for XML-subset only operations.\nExtension methods for XML-subset only operations.\nAdvances by <code>n</code> bytes.\nReturns the span as a string slice\nChecks if the stream is reached the end.\nConsumes the current byte if it’s equal to the provided …\nConsumes bytes by the predicate and returns them.\nConsumes chars by the predicate and returns them.\nConsumes <code>=</code>.\nConsumes an XML name and returns it.\nConsumes a qualified XML name and returns it.\nConsumes quote.\nConsumes an XML reference.\nConsumes whitespaces.\nReturns a byte from a current stream position.\nReturns a byte from a current stream position.\nReturns the end position of the span.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnables document fragment parsing.\nCreates a new stream from a specified <code>text</code> substring.\nCalculates a current absolute position.\nCalculates an absolute position at <code>pos</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> is self is empty.\nChecks if the value is within the Char range.\nChecks if byte is a digit.\nChecks if byte is a hex digit.\nChecks if byte is an ASCII char.\nChecks if the value is within the NameChar range.\nChecks if byte is within the ASCII Char range.\nChecks if the value is within the NameStartChar range.\nChecks if byte is a space.\nSets current position equal to the end.\nConstructs a new <code>TextPos</code>.\nReturns a next byte from a current stream position.\nReturns the error position.\nReturns current position.\nReturns the range of the span.\nSkips bytes by the predicate.\nSkips chars by the predicate.\nSkips an XML name.\nSkips whitespaces.\nSkips selected string.\nSlices data from <code>pos</code> to the current position.\nSlices data from the current position to the end.\nReturns an underling string span.\nReturns the <code>StrSpan</code> encompassing all of the token.\nReturns the start position of the span.\nChecks that the stream starts with a selected text.\nChecks if the stream is starts with a space.\nReturns a copy of the tokenizer’s stream.\nTries to consume the current byte if it’s equal to the …\nConsumes an XML character reference if there is one.")