searchState.loadedDescShard("base64_simd", 0, "SIMD-accelerated base64 encoding and decoding.\nTypes that can append bytes decoded from from a base64 …\nTypes that can append a base64 string.\nExtension trait for converting a mutable reference to an …\nBase64 variant\nBase64 Error\nTypes that can be decoded from a base64 string.\nTypes that can represent a base64 string.\nOut reference (<code>&amp;&#39;a out T</code>).\nStandard charset with padding.\nStandard charset without padding.\nURL-Safe charset with padding.\nURL-Safe charset without padding.\nDecodes a base64 string to bytes and appends to the self …\nEncodes bytes to a base64 string and appends into the self …\nReturns an unsafe mutable pointer to the slice’s buffer.\nReturns an unsafe mutable pointer to the value.\nReturns an out reference to self.\nConverts to a mutable (unique) reference to the value.\nReturns the character set.\nChecks whether <code>data</code> is a base64 string.\nDecodes a base64 string to bytes.\nDecodes a base64 string to bytes and appends to a …\nDecodes a base64 string to bytes and writes inplace.\nDecodes a base64 string to bytes.\nDecodes a base64 string to bytes and returns a specified …\nCalculates the decoded length.\nEncodes bytes to a base64 string.\nEncodes bytes to a base64 string and appends to a …\nEncodes bytes to a base64 string and returns <code>&amp;mut str</code>.\nEncodes bytes to a base64 string.\nEncodes bytes to a base64 string and returns a specified …\nCalculates the encoded length.\nEstimates the decoded length.\nForgiving decodes a base64 string to bytes.\nForgiving decodes a base64 string to bytes and writes …\nForgiving decodes a base64 string to bytes and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a base64 string to bytes and returns the self type.\nEncodes bytes to a base64 string and returns the self type.\nForms an <code>Out&lt;&#39;a, T&gt;</code>.\nForms an <code>Out&lt;&#39;a, [T]&gt;</code>.\nForms an <code>Out&lt;&#39;a, T&gt;</code> from an uninitialized value.\nForms an <code>Out&lt;&#39;a, [T]&gt;</code> from an uninitialized slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to <code>&amp;&#39;a mut MaybeUninit&lt;T&gt;</code>\nConverts to <code>&amp;&#39;a mut [MaybeUninit&lt;T&gt;]</code>\nReturns true if the slice has a length of 0.\nReturns the number of elements in the slice.\nForms an <code>Out&lt;&#39;a, T&gt;</code>\nReborrows the out reference for a shorter lifetime.")