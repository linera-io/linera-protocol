searchState.loadedDescShard("tonic_reflection", 0, "A <code>tonic</code> based gRPC Server Reflection implementation.\nGenerated protobuf types from the <code>grpc.reflection</code> …\nImplementation of the server component of gRPC Server …\nGenerated protobuf types from the <code>grpc.reflection.v1</code> …\nGenerated protobuf types from the <code>grpc.reflection.v1alpha</code> …\nThe error code and error message sent by the server when …\nA list of extension numbers sent by the server answering …\nThe type name and extension number sent by the client when …\nByte encoded FILE_DESCRIPTOR_SET.\nSerialized FileDescriptorProto messages sent by the server …\nA list of ServiceResponse sent by the server answering …\nThe message sent by the client when calling …\nThe message sent by the server to answer …\nThe information of a single service used by …\nFull name of the base type, including the package name. …\nFully-qualified type name. The format should be .\nThis field uses the error codes defined in …\nSerialized FileDescriptorProto messages. We avoid taking a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo use reflection service, the client should set one of …\nThe server sets one of the following fields according to …\nFull name of a registered service, including its package …\nGenerated client implementations.\nNested message and enum types in <code>ServerReflectionRequest</code>.\nNested message and enum types in <code>ServerReflectionResponse</code>.\nGenerated server implementations.\nThe information of each service may be expanded in the …\nEnable decompressing responses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nThe reflection service is structured as a bidirectional …\nFinds the tag numbers used by all known extensions of the …\nFind a proto file by the file name.\nFind the proto file which defines an extension extending …\nFind the proto file that declares the given …\nList the full names of registered services. The content …\nTo use reflection service, the client should set one of …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThis message is used to answer …\nThis message is used when an error occurs.\nThis message is used to answer file_by_filename, …\nThis message is used to answer list_services requests.\nThe server sets one of the following fields according to …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nServer streaming response type for the …\nThe reflection service is structured as a bidirectional …\nThe error code and error message sent by the server when …\nA list of extension numbers sent by the server answering …\nThe type name and extension number sent by the client when …\nByte encoded FILE_DESCRIPTOR_SET.\nSerialized FileDescriptorProto messages sent by the server …\nA list of ServiceResponse sent by the server answering …\nThe message sent by the client when calling …\nThe message sent by the server to answer …\nThe information of a single service used by …\nFull name of the base type, including the package name. …\nFully-qualified type name. The format should be .\nThis field uses the error codes defined in …\nSerialized FileDescriptorProto messages. We avoid taking a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo use reflection service, the client should set one of …\nThe server sets one of the following fields according to …\nFull name of a registered service, including its package …\nGenerated client implementations.\nNested message and enum types in <code>ServerReflectionRequest</code>.\nNested message and enum types in <code>ServerReflectionResponse</code>.\nGenerated server implementations.\nThe information of each service may be expanded in the …\nEnable decompressing responses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nThe reflection service is structured as a bidirectional …\nFinds the tag numbers used by all known extensions of …\nFind a proto file by the file name.\nFind the proto file which defines an extension extending …\nFind the proto file that declares the given …\nList the full names of registered services. The content …\nTo use reflection service, the client should set one of …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThis message is used to answer …\nThis message is used when an error occurs.\nThis message is used to answer file_by_filename, …\nThis message is used to answer list_services requests.\nThe server sets one of the following fields according to …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nServer streaming response type for the …\nThe reflection service is structured as a bidirectional …\nA builder used to construct a gRPC Reflection Service.\nAn error was encountered decoding a …\nRepresents an error in the construction of a gRPC …\nAn invalid <code>prost_types::FileDescriptorProto</code> was …\nBuild a v1 gRPC Reflection Service to be served via Tonic.\nBuild a v1alpha gRPC Reflection Service to be served via …\nCreate a new builder that can configure a gRPC Reflection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nServe the gRPC Reflection Service descriptor via the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters a byte slice containing an encoded …\nRegisters an instance of <code>prost_types::FileDescriptorSet</code> …\nv1 interface for the gRPC Reflection Service server.\nv1alpha interface for the gRPC Reflection Service server.\nAdvertise a fully-qualified gRPC service name.\nAn implementation for <code>ServerReflection</code>.\nGenerated trait containing gRPC methods that should be …\nA response stream.\nServer streaming response type for the …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nThe reflection service is structured as a bidirectional …\nAn implementation for <code>ServerReflection</code>.\nGenerated trait containing gRPC methods that should be …\nA response stream.\nServer streaming response type for the …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nThe reflection service is structured as a bidirectional …")