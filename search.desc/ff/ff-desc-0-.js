searchState.loadedDescShard("ff", 0, "This crate provides traits for working with finite fields.\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nDerive the <code>PrimeField</code> trait.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nA field element of small multiplicative order $N$.\nConsumes this iterator and inverts each field element …\nCubes this element.\nFunctions and re-exported crates used by the <code>PrimeField</code> …\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into the standard …\nComputes <code>a + b + carry</code>, returning the result and the new …\nComputes <code>a + (b * c) + carry</code>, returning the result and the …\nComputes <code>a - (b + borrow)</code>, returning the result and the …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …")