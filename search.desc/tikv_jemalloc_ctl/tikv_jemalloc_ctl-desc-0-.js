searchState.loadedDescShard("tikv_jemalloc_ctl", 0, "<code>jemalloc</code> control and introspection.\nSafe read access to the <em>MALLCTL NAMESPACE</em>.\nConverts a null-terminated byte-string into a <code>Name</code>.\nContains the error value\nErrors of the <code>tikv_jemalloc_sys::mallct</code>-family of …\nManagement Information Base of a non-string value.\nManagement Information Base of a string value.\nA <code>Name</code> in the <em>MALLCTL NAMESPACE</em>.\nContains the success value\nResult type\nAdvances the epoch returning its old value - see <code>epoch</code>.\nAdvances the epoch returning its old value - see <code>epoch</code>.\nArena operations.\nReturns the name as null-terminated byte-string.\nState of internal background worker threads.\nSee <code>background_thread</code>.\n<code>jemalloc</code>’s build-time configuration.\n<code>jemalloc</code> epoch.\nSee <code>epoch</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of background threads that will be created.\nSee <code>max_background_threads</code>.\nReturns the <code>Mib</code> of <code>self</code>.\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns the <code>MibStr</code> of <code>self</code> which is a key whose value is a …\nConverts a null-terminated byte-string into a <code>Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\n<code>jemalloc</code>’s run-time configuration.\nRaw <code>unsafe</code> access to the <code>malloctl</code> API.\nRead the key at <code>self</code>.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nBulk statistics output.\nThread specific operations.\nWrite <code>value</code> at the key <code>self</code> returning its previous value.\nUpdates key to <code>value</code> returning its old value using string …\nUpdates key to <code>value</code> returning its old value using MIB API.\nUpdates key to <code>value</code> returning its old value using string …\nUpdates key to <code>value</code> returning its old value using MIB API.\nUpdates key to <code>value</code> returning its old value using string …\nUpdates key to <code>value</code> returning its old value using MIB API.\nReturns <code>true</code> if <code>self</code> is a key in the <em>MALLCTL NAMESPCE</em> …\n<code>jemalloc</code> version string.\nSee <code>version</code>.\nWrite <code>value</code> at the key <code>self</code>.\nWrites <code>value</code> using string API.\nWrites <code>value</code> using MIB API.\nWrites <code>value</code> using string API.\nWrites <code>value</code> using MIB API.\nWrites <code>value</code> using string API.\nWrites <code>value</code> using MIB API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns Management Information Base (MIB)\nKey <code>crate::keys::Name</code>.\nCurrent limit on the number of arenas.\nSee <code>narenas</code>.\nReads value using string API.\nReads value using MIB API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault run-time options specified during <code>jemalloc</code>’s …\nSee <code>malloc_conf</code>.\nReturns Management Information Base (MIB)\nKey <code>crate::keys::Name</code>.\nReads value using string API.\nReads value using MIB API.\nWhether <code>jemalloc</code> calls <code>abort(3)</code> on most warnings.\nSee <code>abort</code>.\n<code>jemalloc</code>’s default initialization behavior for …\nSee <code>background_thread</code>.\nThe <code>dss</code> (<code>sbrk(2)</code>) allocation precedence as related to …\nSee <code>dss</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>jemalloc</code>’s junk filling mode.\nSee <code>junk</code>.\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nMaximum number of arenas to use for automatic multiplexing …\nSee <code>narenas</code>.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.\nThread-local allocation caching behavior.\nMaximum size class (log base 2) to cache in the …\nSee <code>tcache_max</code>.\nSee <code>tcache</code>.\n<code>jemalloc</code>’s zeroing behavior.\nSee <code>zero</code>.\nTranslates <code>name</code> to a <code>mib</code> (Management Information Base)\nUses the null-terminated string <code>name</code> as key to the <em>MALLCTL </em>…\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and reads …\nUses the null-terminated string <code>name</code> as key to the <em>MALLCTL </em>…\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and reads …\nUses the null-terminated string <code>name</code> as key to the <em>MALLCTL </em>…\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and …\nUses the null-terminated string <code>name</code> as key to the <em>MALLCTL </em>…\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and …\nUses the null-terminated string <code>name</code> as the key to the …\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and …\nUses the null-terminated string <code>name</code> as key to the <em>MALLCTL </em>…\nUses the MIB <code>mib</code> as key to the <em>MALLCTL NAMESPACE</em> and …\nStatistics configuration.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf set, the output will be JSON-formatted.\nIf set, information about individual size classes for bins …\nIf set, information that never changes during execution …\nIf set, information about individual size classes for …\nIf set, merged information about arenas will be skipped.\nIf set, mutex statistics will be skipped.\nIf set, information about individual arenas will be …\nWrites allocator statistics.\nA thread-local pointer.\nAccess to the total number of bytes allocated by the …\nSee <code>allocatedp</code>.\nAccess to the total number of bytes deallocated by the …\nSee <code>deallocatedp</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current value at the pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns Management Information Base (MIB)\nReturns Management Information Base (MIB)\nKey <code>crate::keys::Name</code>.\nKey <code>crate::keys::Name</code>.\nReads value using string API.\nReads value using MIB API.\nReads value using string API.\nReads value using MIB API.")