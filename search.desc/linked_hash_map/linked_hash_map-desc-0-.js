searchState.loadedDescShard("linked_hash_map", 0, "A <code>HashMap</code> wrapper that holds key-value pairs in insertion …\nA draining insertion-order iterator over a <code>LinkedHashMap</code>’…\nAn insertion-order iterator over a <code>LinkedHashMap</code>’s …\nA view into a single location in a map, which may be …\nA consuming insertion-order iterator over a <code>LinkedHashMap</code>…\nAn insertion-order iterator over a <code>LinkedHashMap</code>’s …\nAn insertion-order iterator over a <code>LinkedHashMap</code>’s …\nAn insertion-order iterator over a <code>LinkedHashMap</code>’s keys.\nA linked hash map.\nAn occupied Entry.\nA view into a single occupied location in a <code>LinkedHashMap</code>.\nA vacant Entry.\nA view into a single empty location in a <code>LinkedHashMap</code>.\nAn insertion-order iterator over a <code>LinkedHashMap</code>’s …\nProvides in-place mutable access to an occupied entry …\nGets the last entry.\nReturns the maximum number of key-value pairs the map can …\nClears the map of all key-value pairs.\nChecks if the map contains the given key.\nClears the map, returning all key-value pairs as an …\nReturns an iterator visiting all entries in insertion …\nGets the given key’s corresponding entry in the map for …\nReturns a string that lists the key-value pairs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the first entry.\nReturns the value corresponding to the key in the map.\nGets a reference to the value in the entry.\nReturns the mutable reference corresponding to the key in …\nGets a mutable reference to the value in the entry.\nReturns the value corresponding to the key in the map.\nReturns a reference to the map’s hasher.\nInserts a key-value pair into the map. If the key already …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nReturns whether the map is currently empty.\nReturns a double-ended iterator visiting all key-value …\nReturns a double-ended iterator visiting all key-value …\nReturns the entry key\nGets a reference to the entry key\nGets a reference to the entry key\nReturns a double-ended iterator visiting all key in order …\nReturns the number of key-value pairs in the map.\nCreates a linked hash map.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves the last entry.\nRemoves the first entry.\nRemoves and returns the value corresponding to the key …\nTakes the value out of the entry, and returns it\nReserves capacity for at least <code>additional</code> more elements to …\nShrinks the capacity of the map as much as possible. It …\nReturns a double-ended iterator visiting all values in …\nCreates an empty linked hash map with the given initial …\nCreates an empty linked hash map with the given initial …\nCreates an empty linked hash map with the given initial …")