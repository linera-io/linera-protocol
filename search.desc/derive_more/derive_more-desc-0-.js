searchState.loadedDescShard("derive_more", 0, "<code>derive_more</code>\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nPossible errors returned by the derived implementations of …\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nError of parsing an enum value its string representation.\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nOperation is attempted between mismatched enum variants.\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nOperation is attempted on unit-like enum variants.\nError returned by the derived implementations when an …\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nError returned by the derived implementations when an …\nModule containing derive definitions only, without their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing derive definitions with their …\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates")