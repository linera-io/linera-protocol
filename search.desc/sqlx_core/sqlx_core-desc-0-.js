searchState.loadedDescShard("sqlx_core", 0, "Core of SQLx, the rust SQL toolkit.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA hash map implemented with quadratic probing and SIMD …\nA hash table where the iteration order of the key-value …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nA <code>Vec</code>-like container that can store a small number of …\nA parsed URL record.\nReturns the total amount of memory allocated internally by …\nReturns a reference to the underlying allocator.\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Generic database driver with …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all key-value pairs from <code>other</code> into <code>self</code>, leaving …\nTypes and traits for passing arguments to SQL queries.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nReturns a raw mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nReturns a mutable slice of all the key-value pairs in the …\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nReturns a raw pointer to the vector’s buffer.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nExtracts a slice containing the entire vector.\nReturns a slice of all the key-value pairs in the map.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nSearch over a sorted map with a comparator function.\nSearch over a sorted map with an extraction function.\nSearch over a sorted map for a key.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nThe number of items the vector can hold without …\nReturns the number of elements the map can hold without …\nReturn the number of elements the map can hold without …\nRemove all elements from the vector.\nClears the map, removing all key-value pairs. Keeps the …\nRemove all key-value pairs in the map, while preserving …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nReturns <code>true</code> if the map contains a value for the specified …\nReturn <code>true</code> if an equivalent to <code>key</code> exists in the map.\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nTraits to represent a database driver.\nProvides <code>Decode</code> for decoding values from the database.\nRemoves consecutive duplicate elements.\nRemoves consecutive duplicate elements using the given …\nRemoves consecutive elements that map to the same key.\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nReturn an empty <code>IndexMap</code>\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nCreates a draining iterator that removes the specified …\nClears the map, returning all key-value pairs as an …\nClears the <code>IndexMap</code> in the given index range, returning …\nHelper module to get drivers compiling again that used to …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nProvides <code>Encode</code> for encoding values for the database.\nGets the given key’s corresponding entry in the map for …\nGet the given key’s corresponding entry in the map for …\nGets the given key’s corresponding entry by reference in …\nFormat an error message as a <code>Protocol</code> error\nTypes for working with errors produced by SQLx.\nReturns the left value\nReturns the right value\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nCopy elements from a slice and append them to the vector.\nDrains elements which are true under the given predicate, …\nCreates an iterator which uses a closure to determine if …\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nGet the first key-value pair\nGet the first entry in the map for in-place manipulation.\nGet the first key-value pair, with mutable access to the …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nThe array passed as an argument is moved to be an inline …\nConstructs a new <code>SmallVec</code> on the stack from an array …\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nCreates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nCreate an <code>IndexMap</code> from the sequence of key-value pairs in …\nCreates a <code>SmallVec</code> directly from the raw components of …\nCopy the elements from a slice into a new <code>SmallVec</code>.\nConstruct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.\nReturns a reference to the value corresponding to the key.\nReturn a reference to the value stored for <code>key</code>, if it is …\nGet an array of <code>N</code> key-value pairs by <code>N</code> indices\nReturn the values for <code>N</code> keys. If any key is duplicated, …\nReturn item index, key and value\nGet a key-value pair by index\nGet an entry in the map by index for in-place manipulation.\nGet a key-value pair by index\nReturn item index, if it exists in the map\nReturns the key-value pair corresponding to the supplied …\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a slice of key-value pairs in the given range of …\nReturns a mutable slice of key-value pairs in the given …\nRe-allocate to set the capacity to …\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nA hash map implemented with quadratic probing and SIMD …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturn a reference to the map’s <code>BuildHasher</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nReturns a reference to the value corresponding to the …\nReturns a reference to the value at the supplied <code>index</code>.\nReturns a reference to the value corresponding to the …\nReturns a mutable reference to the value at the supplied …\nReturns a mutable reference to the value corresponding to …\nThe maximum number of elements this vector can hold inline\nInsert an element at position <code>index</code>, shifting all elements …\nInserts a key-value pair into the map.\nInsert a key-value pair in the map.\nInsert a key-value pair in the map before the entry at the …\nCopy elements from a slice into the vector at position …\nInsert a key-value pair in the map, and get their index.\nInsert multiple elements at position <code>index</code>, shifting all …\nInsert a key-value pair in the map at its ordered position …\nInsert a key-value pair into the map without checking if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …\nConverts into a boxed slice of all the key-value pairs in …\nConvert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nReturn an owning iterator over the keys of the map, in …\nReturn the serialization of this URL.\nCreates a consuming iterator visiting all the values in …\nReturn an owning iterator over the values of the map, in …\nConvert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …\nReturns <code>true</code> if the vector is empty\nReturns <code>true</code> if the map contains no elements.\nReturns true if the map contains no elements.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nReturn whether the URL is special (has a special scheme)\nBorrow the inner value as an iterator.\nAn iterator visiting all key-value pairs in arbitrary …\nReturn an iterator over the key-value pairs of the map, in …\nMutably borrow the inner value as an iterator.\nAn iterator visiting all key-value pairs in arbitrary …\nReturn an iterator over the key-value pairs of the map, in …\nParse a string as an URL, with this URL as the base URL.\nAn iterator visiting all keys in arbitrary order. The …\nReturn an iterator over the keys of the map, in their order\nGet the last key-value pair\nGet the last entry in the map for in-place manipulation.\nGet the last key-value pair, with mutable access to the …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nThe number of elements stored in the vector\nReturns the number of elements in the map.\nReturn the number of key-value pairs in the map.\nCreates a relative URL if possible, with this URL as the …\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMoves the position of a key-value pair from one index to …\nConstruct an empty vector\nCreates an empty <code>HashMap</code>.\nCreate a new map. (Does not allocate.)\nConstruct an empty vector.\nCreates an empty <code>HashMap</code> using the given allocator.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturns the index of the partition point of a sorted map …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nProvides the connection pool for asynchronous SQLx …\nRemove an item from the end of the vector and return it, …\nRemove the last key-value pair\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nAppend an item to the vector.\nReturn this URL’s query string, if any, as a …\nRuntime query-builder API.\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nCreates a raw immutable entry builder for the <code>HashMap</code>.\nCreates a raw entry builder for the <code>HashMap</code>.\nRemove and return the element at position <code>index</code>, shifting …\nRemoves a key from the map, returning the value at the key …\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemoves a key from the map, returning the stored key and …\nRemove and return the key-value pair equivalent to <code>key</code>.\nReserve capacity for <code>additional</code> more elements to be …\nReserves capacity for at least <code>additional</code> more elements to …\nReserve capacity for <code>additional</code> more key-value pairs.\nReserve the minimum capacity for <code>additional</code> more elements …\nReserve capacity for <code>additional</code> more key-value pairs, …\nResizes the vector so that its length is equal to <code>len</code>.\nResizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate. …\nScan through each key-value pair in the map and keep those …\nRetains only the elements specified by the predicate.\nReverses the order of the map’s key-value pairs in place.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nSets the length of a vector.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nInsert a key-value pair in the map at the given index.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the key-value pair by index\nShrinks the capacity of the map with a lower limit. It …\nShrink the capacity of the map with a lower limit.\nShrink the capacity of the vector as much as possible.\nShrinks the capacity of the map as much as possible. It …\nShrink the capacity of the map as much as possible.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nSort the map’s key-value pairs in place using the …\nSort the map’s key-value pairs in place using a sort-key …\nSort the map’s key-value pairs by the default ordering …\nSort the map’s key-value pairs in place using the …\nSort the map’s key-value pairs by the default ordering …\nSort the key-value pairs of the map and return a by-value …\nSort the key-value pairs of the map and return a by-value …\nReturns <code>true</code> if the data has spilled into a separate …\nCreates a splicing iterator that replaces the specified …\nSplits the collection into two at the given index.\nSwaps the position of two key-value pairs in the map.\nRemove the element at position <code>index</code>, replacing it with …\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the key-value pair by index\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nShorten the vector, keeping the first <code>len</code> elements and …\nShortens the map, keeping the first <code>len</code> elements and …\nRe-allocate to set the capacity to …\nTries to insert a key-value pair into the map, and returns …\nReserve capacity for <code>additional</code> more elements to be …\nTries to reserve capacity for at least <code>additional</code> more …\nTry to reserve capacity for <code>additional</code> more key-value …\nReserve the minimum capacity for <code>additional</code> more elements …\nTry to reserve capacity for <code>additional</code> more key-value …\nConversions between Rust and SQL types.\nReturns the left value\nReturns the right value\nReturn the username for this URL (typically the empty …\nAn iterator visiting all values in arbitrary order. The …\nReturn an iterator over the values of the map, in their …\nAn iterator visiting all values mutably in arbitrary order.\nReturn an iterator over mutable references to the values …\nConstruct an empty vector with enough capacity …\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreate a new map with <code>hash_builder</code>.\nCreates an empty <code>HashMap</code> which will use the given hash …\nAcquire connections or transactions from a database in a …\nOpaque database driver. Capable of being used in place of …\nOpaque options for connecting to a database. These may …\nA connection to <em>any</em> SQLx database.\nAn alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.\nReturns the name of the database backend in use (e.g. …\nBegin a new transaction or establish a savepoint within …\nThe number of statements currently cached in the …\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nRemoves all statements from the cache, closing them on the …\nExplicitly close this database connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current transaction depth.\nReturns the current transaction depth.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the connection is currently in a transaction.\nChecks if the connection is currently in a transaction.\nThe backend name.\nChecks if a connection to the database is still valid.\nForward to <code>Connection::shrink_buffers()</code>.\nConversions between Rust and standard <strong>SQL</strong> types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstall the list of drivers for <code>AnyConnection</code> to use.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA tuple of arguments to be sent to the database.\nused by the query macros to prevent supernumerary <code>.bind()</code> …\nAdd the value to the end of the arguments.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of arguments that were already added.\nReserves the capacity for at least <code>additional</code> more values …\nA type that can be used to index into a <code>Row</code> or <code>Statement</code>.\nReturns a valid positional index into the row or …\nGets the column name or alias.\nGets the column ordinal.\nGets the type information for the column.\nA wrapper for <code>Fn</code>s that provides a debug impl that just …\nA cache for prepared statements. When full, the least …\nReturns the maximum number of statements the cache can …\nClear all cached statements from the cache.\nTrue if cache has a value for the given key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the value corresponding to …\nInserts a new statement to the cache, returning the least …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the cache capacity is more than 0.\nThe number of statements in the cache.\nCreate a new cache with the given capacity.\nRemoves the least recently used item from the cache.\nRepresents a single database connection.\nBegin a new transaction or establish a savepoint within …\nBegin a new transaction with a custom statement.\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nExplicitly close this database connection.\nEstablish a new database connection with the options …\nEstablish a new database connection.\nEstablish a new database connection with the provided …\nEntirely disables statement logging (both slow and …\nReturns the argument unchanged.\nParse the <code>ConnectOptions</code> from a URL.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the connection is currently in a …\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nChecks if a connection to the database is still valid.\nRestore any buffers in the connection to their default …\nGet a connection URL that may be used to connect to the …\nExecute the function inside a transaction.\nThe concrete type used as a buffer for arguments while …\nThe concrete <code>Arguments</code> implementation for this database.\nThe concrete <code>Column</code> implementation for this database.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nA <code>Database</code> that maintains a client-side cache of prepared …\nThe display name for this database driver.\nThe concrete <code>QueryResult</code> implementation for this database.\nThe concrete <code>Row</code> implementation for this database.\nThe concrete <code>Statement</code> implementation for this database.\nThe concrete <code>TransactionManager</code> implementation for this …\nThe concrete <code>TypeInfo</code> implementation for this database.\nThe schemes for database URLs that should match this …\nThe concrete type used to hold an owned copy of the …\nThe concrete type used to hold a reference to the …\nA type that can be decoded from the database.\nDecode a new value of this type using a raw value from the …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA hash map implemented with quadratic probing and SIMD …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nA hash map implemented with quadratic probing and SIMD …\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nEncode a single value to be sent to the database.\nThe return type of Encode::encode.\nThe value is not null.\nThe value is null; no data was written.\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError occurred within the <code>Any</code> driver mapping to/from the …\nCheck constraint violation.\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nError returned from the database.\nAn error that was returned from the database.\nError occurred while decoding a value.\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nThe error kind.\nForeign key constraint violation.\nOne or more of the arguments to the called function was …\nError communicating with the database backend.\nNot-null constraint violation.\nContains the success value\nAn unmapped error.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nA specialized <code>Result</code> type for SQLx.\nNo rows returned by a query that expected to return at …\nError occurred while attempting to establish a TLS …\nType in query doesn’t exist. Likely due to typo or …\nAn unexpected <code>NULL</code> was encountered during decoding.\nUnique/primary key constraint violation.\nA background worker has crashed.\nThe (SQLSTATE) code for the error.\nReturns the name of the constraint that triggered the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the error kind is a violation of a check.\nReturns whether the error kind is a violation of a foreign …\nReturns whether the error kind is a violation of a …\nReturns the kind of the error, if supported.\nThe primary, human-readable error message.\nReturns the name of the table that was affected by the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nA type that may be executed against a database connection.\nA type that contains or can provide a database connection …\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return all the generated results, …\nExecute multiple queries and return the generated results …\nExecute the query and returns exactly one row.\nExecute the query and returns at most one row.\nReturns <code>true</code> if the statement should be cached.\nPrepare the SQL query to inspect the type information of …\nPrepare the SQL query, with parameter type information, to …\nGets the SQL that will be executed.\nGets the previously cached statement, if available.\nReturns the arguments to be bound against the query string.\nA minimalist clone of the <code>async-stream</code> crate in 100% safe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNOTE: may deadlock the task if called from outside the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply str::strip_prefix, without copying if possible.\nA record that can be built from a row returned by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntryRef</code>’s …\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>VacantEntryRef</code>’s …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to the key in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map.\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe value which was not inserted, because the entry was …\nReads bytes from a source.\nReads bytes from a source.\nAn extension for <code>BufMut</code> for getting a writeable buffer in …\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nGet the full capacity of this buffer as a safely …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn the default implementation, a MigrationSource is a …\nMigration Type represents the type of migration\nA resolved set of migrations, ready to be run.\nReversibleDown migrations represents the  delete or …\nReversibleUp migrations represents the  add or update part …\nSimple migration are single file migrations with no up / …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over all known migrations.\nCreates a new instance with the given source.\nRun any pending migrations against the database; and, …\nSpecify whether applied migrations that are missing from …\nSpecify whether or not to lock the database during …\nRun down migrations against the database until a specific …\nCheck if a migration version exists.\nConnect a Unix Domain Socket at the given path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead into the buffer from <code>source</code>, returning the number of …\nRetryable read operation.\nX.509 Certificate input, either a file path or a PEM …\nPath to a file containing PEM encoded certificate(s)\nPEM encoded certificate(s)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA future that resolves when the pool is closed.\nAn asynchronous pool of SQLx database connections.\nA connection managed by a <code>Pool</code>.\nMetadata for the connection being processed by a …\nConfiguration options for <code>Pool</code>.\nRetrieves a connection from the pool.\nLog excessive time taken to acquire a connection at a …\nSet a threshold for reporting excessive time taken to …\nEnable logging of time taken to acquire a connection from …\nSet the maximum amount of time to spend waiting for a …\nPerform an asynchronous action after connecting to the …\nPerform an asynchronous action on a connection before it …\nThe duration since the connection was first opened.\nPerform an asynchronous action on a previously idle …\nRetrieves a connection and immediately begins a new …\nRetrieves a connection and immediately begins a new …\nClose this connection, allowing the pool to open a …\nShut down the connection pool, immediately waking all …\nGet a future that resolves when <code>Pool::close()</code> is called.\nClose this connection on-drop, instead of returning it to …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new connection pool with a default pool …\nGets a clone of the connection options for this pool\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nCreate a new connection pool with a default pool …\nDetach this connection from the pool, allowing it to open …\nExecute the given future until it returns or the pool is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the threshold for reporting excessive time taken to …\nGet the maximum amount of time to spend waiting for a …\nGet the maximum idle duration for individual connections.\nGet the maximum number of connections that this pool …\nGet the maximum lifetime of individual connections.\nGet the minimum number of connections to maintain at all …\nGet whether <code>test_before_acquire</code> is currently set.\nThe duration that the connection spent in the idle queue.\nSet a maximum idle duration for individual connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>.close()</code> has been called on the pool, <code>false</code>…\nDetach this connection from the pool, treating it as …\nSet the maximum number of connections that this pool …\nSet the maximum lifetime of individual connections.\nSet the minimum number of connections to maintain at all …\nReturns a default “sane” configuration, suitable for …\nReturns the number of connections active and idle (not in …\nGet the options for this pool\nUpdates the connection options this pool will use when …\nReturns the number of connections currently active. This …\nIf true, the health of a connection will be verified by a …\nAttempts to retrieve a connection from the pool if there …\nAttempts to retrieve a connection and immediately begins a …\nAttempts to retrieve a connection and, if successful, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA single SQL query that will map its results to an owned …\nA single SQL query as a prepared statement. Returned by …\nBind a value for use with this SQL query.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap each row in the result to another type.\nMap each row in the result to another type.\nIf <code>true</code>, the statement will get prepared once and cached …\nExecute a single SQL query as a prepared statement …\nExecute a single SQL query as a prepared statement …\nExecute a single SQL query as a prepared statement …\nExecute a SQL query as a prepared statement (transparently …\nSame as <code>query_with</code> but is initialized with a Result of …\nLike <code>Query::try_bind</code> but immediately returns an error if …\nMap each row in the result to another type.\nMap each row in the result to another type.\nA single SQL query as a prepared statement, mapping …\nBind a value for use with this SQL query.\nExecute the query and return the generated results as a …\nExecute the query and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, the statement will get prepared once and cached …\nExecute a single SQL query as a prepared statement …\nExecute a single SQL query, with the given arguments as a …\nSame as <code>query_as_with</code> but takes arguments as a Result\nA builder type for constructing queries at runtime.\nA wrapper around <code>QueryBuilder</code> for creating comma(or other …\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstruct this <code>QueryBuilder</code>, returning the built SQL. …\nStart building a query with an initial SQL fragment, which …\nAppend a SQL fragment to the query.\nPush the separator if applicable, and then the given SQL …\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nPush the separator if applicable, then append a bind …\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nCreates <code>((a, b), (..)</code> statements, from <code>tuples</code>.\nPush a SQL fragment without a separator.\nPush a <code>VALUES</code> clause where each item in <code>tuples</code> represents …\nReset this <code>QueryBuilder</code> back to its initial state.\nStart a list separated by <code>separator</code>.\nGet the current build SQL; <strong>note</strong>: may not be syntactically …\nConstruct a <code>QueryBuilder</code> with existing SQL and arguments.\nA single SQL query as a prepared statement which extracts …\nBind a value for use with this SQL query.\nExecute the query and return the generated results as a …\nExecute the query and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, the statement will get prepared once and cached …\nExecute a single SQL query as a prepared statement …\nExecute a SQL query as a prepared statement (transparently …\nSame as <code>query_scalar_with</code> but takes arguments as Result\nOne or more raw SQL statements, separated by semicolons (<code>;</code>…\nExecute the SQL string and return the total number of rows …\nExecute the SQL string. Returns a stream which gives the …\nExecute the SQL string and return the generated results as …\nExecute the SQL string and return all the resulting rows …\nExecute the SQL string and return the generated results as …\nExecute the SQL string, returning the first row or …\nExecute the SQL string, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecute one or more statements as raw SQL, separated by …\nRepresents a single row from the database.\nGets the column information at <code>index</code>.\nGets all columns in this statement.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns <code>true</code> if this row has no columns.\nReturns the number of columns in this row.\nGets the column information at <code>index</code> or a …\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn explicitly prepared statement.\nGets the column information at <code>index</code>.\nGet the columns expected to be returned by executing this …\nGet the expected parameters for this statement.\nGet the original SQL text used to create this statement.\nCreates an owned statement from this statement reference. …\nGets the column information at <code>index</code> or a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA snapshot of the current state of the database.\nGenerate a fixture to reproduce this snapshot from an …\nCleanup any test databases that are no longer in-use.\nGenerate a unique database name for the given test path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake a snapshot of the current state of the database (data …\nGet parameters to construct a <code>Pool</code> suitable for testing.\nAn in-progress database transaction or savepoint.\nCommits this transaction or savepoint.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAborts this transaction or savepoint.\nAn adapter for <code>Value</code> which attempts to decode the value …\nDescribes how the database in question typechecks query …\nThe type of query parameter checking done by a SQL …\nParameter checking is strong (types must match exactly).\nType-checking extensions for the <code>Database</code> trait.\nParameter checking is weak or nonexistent (uses coercion …\nWhen printed with <code>Debug</code>, attempt to decode <code>value</code> as the …\nIf <code>value</code> is a well-known type, decode and format it using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the name of the Cargo feature gate that must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the full path of the Rust type that corresponds to the …\nGet the full path of the Rust type that corresponds to the …\nIf the type to be decoded is not known or not supported, …\nProvides information about a SQL type for the database …\nReturns the database system name of the type. Length …\nReturn <code>true</code> if <code>self</code> and <code>other</code> represent mutually …\nRepresents a JSON array.\nRepresents a JSON boolean.\nA constant RawValue with the JSON value <code>false</code>.\nJson for json and jsonb fields\nReference to a range of bytes encompassing a single valid …\nRepresents any valid JSON value.\nA constant RawValue with the JSON value <code>null</code>.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nA constant RawValue with the JSON value <code>true</code>.\nMap a SQL text value to/from a Rust type using <code>Display</code> and …\nIndicates that a SQL type is supported for a database.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nDetermines if this Rust type is compatible with the given …\nDisplay a JSON value as a string.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert a slice to <code>Value::Array</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nAccess the JSON text underlying a raw value.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the inner value.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nReorders the entries of all <code>Value::Object</code> nested within …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nReturns the canonical SQL type for this Rust type.\nAn owned value from the database.\nA reference to a single value from the database.\nGet this value as a reference.\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nCreates an owned value from this value reference.\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nGet the type information for this value.\nGet the type information for this value.")