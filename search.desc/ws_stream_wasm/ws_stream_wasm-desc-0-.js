searchState.loadedDescShard("ws_stream_wasm", 0, "The message contains binary data.\nWhen converting the JavaScript Message into a WsMessage, it…\nAn event holding information about how/why the connection …\nThe connection was closed. The enclosed <code>CloseEvent</code> has …\nThe connection has started closing, but is not closed yet. …\nFailed to connect to the server.\nWhen trying to send and WsState is anything but …\nAn error happened on the connection. For more information …\nAn invalid close code was given to a close method. For …\nWhen converting the JavaScript Message into a WsMessage, it…\nAn invalid URL was given to WsMeta::connect, please see: …\nInvalid input to WsState::try_from( u16 ).\nThe connection is now Open and ready for use.\nThe reason string given to a close method is longer than …\nThe data of the message is a string.\nFallback for unknown errors.\nWhen converting the JavaScript Message into a WsMessage, …\nThe error type for errors happening in <code>ws_stream_wasm</code>.\nAn error happened, not on the connection, but inside …\nEvents related to the WebSocket. You can filter like:\nRepresents a WebSocket Message, after converting from …\nThe meta data related to a websocket. Allows access to the …\nIndicates the state of a Websocket connection. The only …\nA futures 0.3 Sink/Stream of WsMessage. Created with …\nA wrapper around WsStream that converts errors into …\nThe number of bytes of data that have been queued but not …\nClose the socket. The future will resolve once the socket…\nClose the socket. The future will resolve once the socket…\nClose the socket. The future will resolve once the socket…\nThe close code. See: MDN Documentation.\nConnect to the server. The future will resolve when the …\nThe extensions selected by the server as negotiated during …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap this object in <code>IoStream</code>. <code>IoStream</code> implements <code>AsyncRead</code>…\nPredicate indicating whether this is a WsEvent::Closed …\nPredicate indicating whether this is a WsEvent::Closing …\nPredicate indicating whether this is a WsEvent::Error …\nPredicate indicating whether this is a WsEvent::Open …\nPredicate indicating whether this is a WsEvent::WsErr …\nCreate a new WsStreamIo.\nThe name of the sub-protocol the server selected during …\nVerify the WsState of the connection.\nVerify the WsState of the connection.\nThe reason why the connection was closed. See: MDN …\nRetrieve the address to which this socket is connected.\nWhether the connection was closed cleanly. See: MDN …\nAccess the wrapped web_sys::WebSocket directly.\nAccess the wrapped web_sys::WebSocket directly.\nThe close event that might hold extra code and reason …\nThe user supplied value that is invalid.\nThe user supplied value that is invalid.\nThe user supplied value that is invalid.")