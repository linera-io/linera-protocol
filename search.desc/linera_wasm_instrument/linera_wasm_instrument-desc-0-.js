searchState.loadedDescShard("linera_wasm_instrument", 0, "Export all declared mutable globals as <code>prefix_index</code>.\nThis module is used to instrument a Wasm module with the …\nInject the instumentation that makes stack overflows …\nUnder the hood part of the gas metering mechanics.\nA type that implements <code>Rules</code> so that every instruction …\nGas metering with an external function.\nSkip per page charge.\nImplementation details of the specific method of the gas …\nGas metering with a local function and a mutable global.\nCharge the specified amount for each page that the memory …\nDynamic costs for memory growth.\nAn interface that describes instruction costs.\nA surcharge cost to calling a function that is added per …\nUses instruction cost of <code>1</code> and disables memory growth …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides the gas metering implementation details.\nGas metering with an external host function.\nTransforms a given module into one that tracks the gas …\nReturns the cost for the passed <code>instruction</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the costs for growing the memory using the …\nGas metering with a mutable global.\nCreate a new <code>ConstantCostRules</code>.\nCost of the gas function execution.\nBody of the local gas counting function to be injected.\nName of the external gas function to be imported.\nName of the mutable global to be exported.\nName of the module to import the gas function from.\nInjects invocations of the gas charging host function into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInjects a mutable global variable and a local function to …\nReturns the argument unchanged.\nThe export name of the gas tracking global.\nCalls <code>U::from(self)</code>.")