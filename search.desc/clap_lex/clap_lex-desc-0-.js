searchState.loadedDescShard("clap_lex", 0, "Minimal, flexible command-line parser\nPosition within <code>RawArgs</code>\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nString-like methods for <code>OsStr</code>\nCommand-line Argument\nCommand-line arguments\nEnumeration of possible methods to seek within an I/O …\nWalk through short flags within a <code>ParsedArg</code>\nSets the offset to the provided number of bytes.\nMove the iterator forward by <code>n</code> short flags\nReturns <code>true</code> if the given pattern matches a sub-slice of …\nCreate a cursor for walking the arguments\nSafely print an argument that may contain non-UTF8 content\nReturns the byte index of the first character of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<strong>NOTE:</strong> The argument returned will be the current binary.\nInject arguments before the <code>RawArgs::next</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArgument is length of 0\nNo short flags left\nAny remaining args?\nDoes the argument look like an argument escape (<code>--</code>)\nCan treat as a long-flag\nDoes the argument look like a negative number?\nDoes the short flag look like a number\nCan treat as a short-flag\nDoes the argument look like a stdio argument (<code>-</code>)\nExample\nAdvance the cursor, returning the next <code>ParsedArg</code>\nAdvance the iterator, returning the next short flag on …\nAdvance the cursor, returning a raw argument value.\nAdvance the iterator, returning everything left as a value\nReturn the next <code>ParsedArg</code>\nReturn a raw argument value.\nReturn all remaining raw arguments, advancing the cursor …\nAdjust the cursor’s position\nAn iterator over substrings of this string slice, …\nSplits the string on the first occurrence of the specified …\nReturns <code>true</code> if the given pattern matches a prefix of this …\nReturns a string slice with the prefix removed.\nTreat as a long-flag\nTreat as a short-flag\nTreat as a value\nTreat as a value\nConverts to a string slice.")