searchState.loadedDescShard("sec1", 0, "RustCrypto: SEC1 Elliptic Curve Cryptography Formats\nAlgorithm <code>ObjectIdentifier</code> for elliptic curve public key …\nASN.1 DER-related errors.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nCryptographic errors.\nParse an <code>EcPrivateKey</code> from a SEC1-encoded document.\nElliptic curve parameters as described in RFC5480 Section …\nSEC1 elliptic curve private key.\nSerialize a <code>EcPrivateKey</code> to a SEC1 encoded document.\nContains the error value\nError type\nLine feed: <code>\\n</code> (Unix OSes)\nLine endings: variants of newline characters that can be …\nElliptic curve named by a particular OID.\nContains the success value\nPKCS#8 errors.\nErrors relating to the <code>Elliptic-Curve-Point-to-Octet-String</code>…\nResult type with <code>sec1</code> crate’s <code>Error</code> type.\nVersion errors\nGet the byte serialization of this <code>LineEnding</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize SEC1 private key from ASN.1 DER-encoded data …\nDeserialize SEC1-encoded private key from PEM.\nDeserialize SEC1-encoded private key from PEM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the encoded length of this <code>LineEnding</code>.\nObtain the <code>namedCurve</code> OID.\nElliptic curve parameters.\nSupport for the SEC1 <code>Elliptic-Curve-Point-to-Octet-String</code> …\nPrivate key data.\nPublic key data, optionally available if version is V2.\nLoad SEC1 private key from an ASN.1 DER-encoded file on …\nLoad SEC1 private key from an ASN.1 DER-encoded file on …\nLoad SEC1 private key from a PEM-encoded file on the local …\nLoad SEC1 private key from a PEM-encoded file on the local …\nSerialize a <code>SecretDocument</code> containing a SEC1-encoded …\nSerialize this private key as PEM-encoded SEC1 with the …\nSerialize this private key as PEM-encoded SEC1 with the …\nWrite ASN.1 DER-encoded SEC1 private key to the given path.\nWrite ASN.1 DER-encoded SEC1 private key to the given path.\nWrite ASN.1 DER-encoded SEC1 private key to the given path.\nWrite ASN.1 DER-encoded SEC1 private key to the given path.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.\nCompact curve point\nCompact point (<code>0x05</code>)\nCompressed curve point\nCompressed point with even y-coordinate (<code>0x02</code>)\nCompressed point with odd y-coordinate (<code>0x03</code>)\nSize of a compressed point for the given elliptic curve …\nEnum representing the coordinates of either compressed or …\nSEC1 encoded curve point.\nIdentity point (a.k.a. point at infinity)\nIdentity point (<code>0x00</code>)\nTrait for supported modulus sizes which precomputes the …\nTag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …\nUncompressed curve point\nUncompressed point (<code>0x04</code>)\nSize of an uncompressed point for the given elliptic curve …\nSize of an untagged point for given elliptic curve, i.e. …\nGet byte slice containing the serialized <code>EncodedPoint</code>.\nCompress this <code>EncodedPoint</code>, returning a new <code>EncodedPoint</code>.\nGet the <code>Coordinates</code> for this <code>EncodedPoint</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEncode an elliptic curve point from big endian serialized …\nDecode elliptic curve point (compressed or uncompressed) …\nParse a tag value from a byte\nDecode elliptic curve point from raw uncompressed …\nReturn <code>EncodedPoint</code> representing the additive identity …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this <code>EncodedPoint</code> compact?\nIs this point compact?\nIs this <code>EncodedPoint</code> compressed?\nIs this point compressed?\nIs this <code>EncodedPoint</code> the additive identity? (a.k.a. point …\nIs this point the identity point?\nGet the length of the encoded point in bytes\nCompute the expected total message length for a message …\nGet the SEC1 tag for this <code>EncodedPoint</code>\nGet the tag octet needed to encode this set of <code>Coordinates</code>\nGet boxed byte slice containing the serialized <code>EncodedPoint</code>\nGet the x-coordinate for this <code>EncodedPoint</code>.\nGet the y-coordinate for this <code>EncodedPoint</code>.\nx-coordinate\nx-coordinate\nx-coordinate\ny-coordinate\nIs the y-coordinate odd?")