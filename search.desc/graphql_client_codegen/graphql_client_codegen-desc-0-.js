searchState.loadedDescShard("graphql_client_codegen", 0, "Crate for internal use by other graphql-client crates, for …\nThe graphql-client CLI.\nWhich context is this code generation effort taking place.\nThe derive macro defined in graphql_query_derive.\nUsed to configure code generation.\nAdditional traits we want to derive for responses.\nTraits we want to derive for responses.\nAll the variable derives to be rendered.\nGet the custom scalar definitions module\nDeprecation-related code\nGet the externally defined enums type names\nGet a reference to the graphql client codegen options’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates Rust code given a query document, a schema and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhich context is this code generation effort taking place.\nCreates an empty options object with default params. It …\nNormalization-related code\nThe normalization mode for the generated code.\nName of the operation we want to generate code for. If it …\nA path to a file to include in the module to force Cargo …\nContains the [Schema] type and its implementation.\nA path to a file to include in the module to force Cargo …\nSet the custom scalar definitions module\nThe deprecation strategy to adopt.\nSet the externally defined enums type names\nSet the graphql client codegen options’s fragments other …\nTarget module visibility.\nSet the normalization mode for the generated code.\nName of the operation we want to generate code for. If …\nA path to a file to include in the module to force Cargo …\nComma-separated list of additional traits we want to …\nSet the graphql client codegen option’s skip none value.\nThe identifier to use when referring to the struct …\nThe name of implementation target struct.\nComma-separated list of additional traits we want to …\nGet a reference to the graphql client codegen option’s …\nThe identifier to use when referring to the struct …\nThe name of implementation target struct.\nComma-separated list of additional traits we want to …\nAllow use of deprecated items in queries, and say nothing.\nNot deprecated\nFail compilation if a deprecated item is used.\nDeprecated\nWhether an item is deprecated, with context.\nThe available deprecation strategies.\nAllow use of deprecated items in queries, but warn about …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse naming conventions from the schema.\nNormalization conventions available for generated code.\nUse Rust naming conventions for generated code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")