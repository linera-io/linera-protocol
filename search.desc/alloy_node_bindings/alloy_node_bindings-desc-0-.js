searchState.loadedDescShard("alloy_node_bindings", 0, "alloy-node-bindings\nThe chain id was not set.\nClique private key error\nCould not create the data directory.\nAn error occurred while deserializing a private key.\nThe default max priority fee per gas, used in case the …\nThe number of blocks from the past for which the fee …\nThe threshold for base fee below which we use the default …\nThe default percentile of gas premiums that are fetched …\nThe threshold max change/difference (in %) at which we …\nEncountered a fatal error.\nAn error occurred while parsing a hex string.\nGenesis error\nNode init error\nTimeout for waiting for the node to add a peer.\nHow long we will wait for the node to indicate that it is …\nNo keys available this node instance.\nNo stderr was captured from the child process.\nNo stdout was captured from the child process.\nErrors that can occur when working with the node instance.\nThe private key could not be parsed.\nA line could not be read from the node stderr.\nSpawn node error\nTimed out waiting for the node to start.\n1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei\nWait error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBindings for various nodes.\nUtility functions for the node bindings.\nUtilities for launching an Anvil instance.\nUtilities for launching a Geth dev-mode instance.\nUtilities for launching a Reth dev-mode instance.\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nanvil’s default ipc path\nReturns the addresses used to instantiate this instance\nAdds an argument to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nCreates an Anvil builder which will execute <code>anvil</code> at the …\nSets the block-time in seconds which will be used when the …\nSets the block-time in sub-seconds which will be used when …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Cancun</code>.\nReturns the chain of the anvil instance\nSets the chain_id the <code>anvil</code> instance will use.\nReturns a reference to the child process.\nReturns a mutable reference to the child process.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint url of this instance\nAdds an environment variable to pass to the <code>anvil</code>.\nAdds multiple environment variables to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nConvenience function that returns the first key.\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the <code>EthereumHardfork</code> to start anvil with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPC path\nSets the path for the ipc server\nKeep the handle to anvil’s stdout in order to read from …\nReturns the private keys used to instantiate this instance\nSets the mnemonic which will be used when the <code>anvil</code> …\nCreates an empty Anvil builder. The default port and the …\nReturns the private key for the given index.\nInstantiate <code>anvil</code> with the <code>--odyssey</code> flag.\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Paris</code>.\nSets the <code>path</code> to the <code>anvil</code> cli\nReturns the port of this instance\nSets the port which will be used when the <code>anvil</code> instance …\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Prague</code>.\nAdds an argument to pass to the <code>anvil</code>.\nSet the <code>EthereumHardfork</code> to <code>EthereumHardfork::Shanghai</code>.\nConsumes the builder and spawns <code>anvil</code>.\nSets the timeout which will be used when the <code>anvil</code> …\nConsumes the builder and spawns <code>anvil</code>. If spawning fails, …\nReturns the <code>EthereumWallet</code> of this instance generated from …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint url of this instance\nOptions that can be set in dev mode\nConfiguration options that can be set in dev mode.\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\nWhether or not node is in <code>dev</code> mode and configuration …\nOptions that cannot be set in dev mode\nConfiguration options that cannot be set in dev mode.\nAdds an argument to pass to <code>geth</code>.\nAdds multiple arguments to pass to <code>geth</code>.\nCreates a Geth builder which will execute <code>geth</code> at the …\nReturns the auth port of this instance\nSets the port for authenticated RPC connections.\nSets the block-time which will be used when the <code>geth-cli</code> …\nThe interval at which the dev chain will mine new blocks.\nSets the chain id for the geth instance.\nCalculates the address of the Clique consensus address.\nReturns the private key used to configure clique on this …\nReturns the path to this instances’ data directory\nSets the data directory for geth.\nPuts the <code>geth</code> instance in <code>dev</code> mode.\nDisable discovery for the geth instance.\nWhether or not peer discovery is enabled.\nEnable IPC for the geth instance.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint url of this instance\nAdds multiple arguments to pass to the <code>geth</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the geth instance.\nAllow geth to unlock accounts when rpc apis are open.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPC endpoint of this instance\nSets the IPC path for the socket.\nReturns whether the node is launched in Clique consensus …\nKeep the handle to geth’s stderr in order to read from …\nCreates an empty Geth builder.\nReturns the p2p port of this instance\nSets the port which will be used for incoming p2p …\nThe p2p port to use.\nSets the <code>path</code> to the <code>geth</code> executable\nReturns the port of this instance\nSets the port which will be used when the <code>geth-cli</code> …\nAdds an argument to pass to the <code>geth</code>.\nSets the Clique Private Key to the <code>geth</code> executable, which …\nConsumes the builder and spawns <code>geth</code>.\nTakes the stderr contained in the child process.\nConsumes the builder and spawns <code>geth</code>. If spawning fails, …\nBlocks until geth adds the specified peer, using 20s as …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint url of this instance\nBuilder for launching <code>reth</code>.\nA Reth instance. Will close the instance when dropped.\nAdds an argument to pass to <code>reth</code>.\nAdds multiple arguments to pass to <code>reth</code>.\nCreates a Reth builder which will execute <code>reth</code> at the …\nReturns the auth port of this instance.\nSets the auth port for the Reth instance. Note: this …\nSets the block time for the Reth instance. Parses strings …\nSets the chain id for the Reth instance.\nReturns the path to this instances’ data directory.\nSets the data directory for reth.\nEnable <code>dev</code> mode for the Reth instance.\nDisables discovery for the Reth instance.\nEnable IPC for the Reth instance.\nReturns the HTTP endpoint of this instance.\nReturns the HTTP endpoint url of this instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the Reth instance.\nReturns the HTTP port of this instance.\nSets the HTTP port for the Reth instance. Note: this …\nReturns the instance number of this instance.\nSets the instance number for the Reth instance. Set to 0 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPC endpoint of this instance.\nSets the IPC path for the socket.\nKeep the handle to reth’s stdout in order to read from …\nCreates an empty Reth builder.\nReturns the p2p port of this instance. If discovery is …\nSets the p2p port for the Reth instance. Note: this resets …\nSets the <code>path</code> to the <code>reth</code> executable\nConsumes the builder and spawns <code>reth</code>.\nTakes the stdout contained in the child process.\nConsumes the builder and spawns <code>reth</code>. If spawning fails, …\nReturns the Websocket endpoint of this instance.\nReturns the Websocket endpoint url of this instance.\nReturns the WS port of this instance.\nSets the WS port for the Reth instance. Note: this resets …\nRuns the given async closure with a temporary directory.\nRuns the given closure with a temporary directory.")