searchState.loadedDescShard("alloy_consensus", 0, "alloy-consensus\nRepresents an TrieAccount in the account trie.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nEthereum full block.\nA response to <code>GetBlockBodies</code>, containing bodies if any …\nTrait for extracting specific Ethereum block data from a …\nA commitment/proof serialized as 0x-prefixed hex string\nRoot hash of an empty trie.\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt type that knows its EIP-2718 encoding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nA boolean <code>statusCode</code> introduced by EIP-658.\nCaptures the result of a transaction execution.\nReceipt envelope with type flag 4, containing a EIP-7702 …\nA trait for ethereum like blocks.\nEthereum Block header\nEssential info extracted from a header.\nReceipt envelope with no type flag.\nThe associated log type.\nA pre-EIP-658 hash value.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nA collection of receipts organized as a two-dimensional …\nReceipt type that knows how to decode itself with a <code>Bloom</code> …\nReceipt type that knows how to encode itself with a <code>Bloom</code> …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nA transaction with a signature and hash seal.\nSimple coder that only uses the last 31 bytes of each …\nDerive macro for creating transaction envelope types.\nRepresents an TrieAccount in the account trie.\nReceipt is the result of a transaction execution.\nA trait that helps to determine the type of the …\nFallibly convert to the EIP-658 status code.\nFallibly convert to the post state.\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nReturn the mutable inner receipt with bloom. Currently …\nConverts from <code>&amp;Sealed&lt;T&gt;</code> to <code>Sealed&lt;&amp;T&gt;</code>.\nThe account’s balance.\nThe account’s balance.\nRetrieves the base fee per gas of the block, if available\nA scalar representing EIP1559 base fee which can move up …\nThe base fee per gas, added in the London upgrade with …\nRetrieves the beneficiary (miner) of the block\nThe 160-bit address to which all fees collected from the …\nBeneficiary (Coinbase or miner) is a address that have …\nReturns the blob corresponding to the versioned hash, if …\nReturns the blob fee for <em>this</em> block according to the …\nReturns the blob fee for <em>this</em> block according to the …\nReturns the blob fee for <em>this</em> block according to the …\nRetrieves the blob gas used by the block, if available\nThe total amount of blob gas consumed by the transactions …\nThe total amount of blob gas consumed by the transactions …\nReturns an iterator over all blob versioned hashes from …\nThe blob data.\nReturns the bloom filter for the logs in the receipt. This …\nReturn the receipt’s bloom.\nReturns the bloom filter for the logs in the receipt, if …\nReturns the bloom filter for the logs in the receipt, if …\nReturns a reference to the bloom.\nCalculates <code>Log</code>’s bloom filter. This is slow operation and\nBlock body.\nCalculate the ommers root for the block body.\nCalculate the withdrawals root for the block body, if …\nTrue if the Cancun hardfork is active.\nClone the inner item.\nMaps a <code>Sealed&lt;&amp;T&gt;</code> to a <code>Sealed&lt;T&gt;</code> by cloning the inner …\nCode a slice of data into the builder.\nThe hash of the code of the account.\nThe hash of the code of the account.\nReturns true if the transaction was successful OR if the …\nCoerce this variant into a <code>Eip658Value::Eip658</code> with …\nThe blob commitments.\nHelpers for conditional transactions.\nEthereum protocol-related constants\nConverts the transaction type to the given alternative …\nConverts the block’s transaction type to the given …\nCryptographic algorithms\nReturns the cumulative gas used in the block after this …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDecode all slices of data from the blobs.\nRetrieves the difficulty of the block\nA scalar value corresponding to the difficulty level of …\nThe difficulty of the block\nEIP-2718 decode the signed transaction.\nEIP-2718 decode the signed transaction with a specified …\nEIP-2718 encode the signed transaction.\nEIP-2718 encodes the receipt with the provided bloom …\nEIP-2718 encode the signed transaction with a specified …\nGet the length of the transaction when EIP-2718 encoded.\nEIP-2718 encoded length with the provided bloom filter.\nReturns an iterator over all blob transactions of the …\nEncodes the inner BlobTransactionSidecar fields as RLP …\nHelper errors.\nChecks if the block’s timestamp is in the future based …\nChecks if the block’s timestamp is in the future based …\nRetrieves the excess blob gas of the block, if available\nA running total of blob gas consumed in excess of the …\nA running total of blob gas consumed in excess of the …\nExtended transaction types\nRetrieves the block’s extra data field\nAn arbitrary byte array containing data relevant to this …\nFinish the sidecar, and commit to the data. This method …\nNo-op\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder and …\nCreate a new builder from a slice of data.\nCreate a new builder from a slice of data by calling …\nCreates the envelope for a given type and receipt.\nRetrieves the gas limit of the block\nA scalar value equal to the current limit of gas …\nThe gas limit of the block\nRetrieves the gas used by the block\nA scalar value equal to the total gas used in transactions …\nReturns whether or not the block body contains any blob …\nReturns whether or not the block body contains any …\nGet the hash.\nReturns a reference to the transaction hash.\nGet the hash.\nCalculate the seal hash, this may be slow.\nHeavy function that will calculate hash of data and will …\nBlock header.\nExtracts essential information into one container type.\nExtracts essential information into one container type.\nIngest a slice of data into the builder.\nGet the inner item.\nGet the length of the inner receipt in the 2718 encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Block</code> from the body and its header.\nCreate a <code>Block</code> from the body and its header.\nConsumes the block and returns the body.\nConsume the structure, returning the receipt and the bloom …\nConsumes the block and returns the header.\nUnseal the inner item, discarding the hash.\nConsumes the type and returns the logs.\nConsumes the type and returns the logs emitted by this …\nConsumes the type and returns the logs emitted by this …\nDecompose into parts.\nSplits the transaction into parts.\nConverts a <code>ReceiptEnvelope</code> with a custom log type into a …\nConverts a <code>Receipt</code> with a custom log type into a <code>Receipt</code> …\nConverts a <code>ReceiptWithBloom</code> with a custom log type into a …\nConsumes the type and returns the underlying <code>Receipt</code>.\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConsumes the type and converts it into <code>ReceiptWithBloom</code> …\nConverts the transactions in the block’s body to …\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the transaction was a post-[EIP-658] …\nReturns true if the type is an EIP-7702 transaction.\nCheck if the builder is empty.\nChecks if the header is considered empty - has no …\nChecks if the header is considered empty - has no …\nReturns <code>true</code> if the <code>Receipts</code> vector is empty.\nReturns true if the type is a legacy transaction.\nChecks if the nonce exists, and if it exists, if it’s …\nChecks if the nonce exists, and if it exists, if it’s …\nReturns true if the transaction was a pre-EIP-658 …\nReturn true if the transaction was successful.\nReturns true if the type matches the given type.\nChecks if the block’s difficulty is set to zero, …\nChecks if the block’s difficulty is set to zero, …\nCalculate the length of bytes used by field elements in …\nReturns the length of the <code>Receipts</code> vector.\nReturns the logs emitted by this transaction.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nRetrieves the logs bloom filter of the block\nReturn the receipt’s bloom.\nThe Bloom filter composed from indexable information …\nThe bloom filter.\nApplies the given closure to the inner transaction type.\nConverts the block’s header type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the body’s ommers type by applying a function …\nConverts the receipt type by applying the given closure to …\nConverts the block’s transaction type by applying a …\nMatches versioned hashes and returns an iterator of …\nConvenience function for <code>Self::next_block_blob_fee</code> with an …\nConvenience function for <code>Self::next_block_blob_fee</code> with an …\nConvenience function for <code>Self::next_block_excess_blob_gas</code> …\nConvenience function for <code>Self::next_block_excess_blob_gas</code> …\nRetrieves the mix hash of the block, if available\nA 256-bit hash which, combined with the nonce, proves that …\nThe output of the randomness beacon provided by the beacon …\nNetwork decode the signed transaction.\nNetwork decode the signed transaction with a specified …\nNetwork encode the signed transaction.\nNetwork encode the signed transaction with a specified …\nGet the length of the transaction when network encoded.\nInstantiate a new builder and new coder instance.\nConstructs a new BlobTransactionSidecar from a set of …\nCreates a new block with the given header and body.\nCreate new ReceiptWithBloom\nSeal the inner item.\nSeal the inner item, by reference.\nSeal a reference to the inner item with some function.\nInstantiate without performing the hash. This should be …\nInstantiate from a transaction and signature. Does not …\nInstantiate from a transaction and signature. Does not …\nSeal the inner item with some function.\nCalculate base fee for next block according to the …\nCalculate base fee for next block according to the …\nCalculate base fee for next block according to the …\nReturns the blob fee for the next block according to the …\nReturns the blob fee for the next block according to the …\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nCalculate excess blob gas for the next block according to …\nCalculate excess blob gas for the next block according to …\nRetrieves the nonce of the block, if available\nThe account’s nonce.\nThe account’s nonce.\nA 64-bit value which, combined with the mixhash, proves …\nReturns the block’s number and hash.\nReturns the block’s number and hash with the parent hash.\nRetrieves the block number\nA scalar value equal to the number of ancestor blocks. The …\nThe number of ancestor blocks of this block (block height).\nOmmers/uncles header.\nRetrieves the ommers hash of the block\nThe Keccak 256-bit hash of the ommers list portion of this …\nCheck if the ommers hash equals to empty hash list.\nReturns an iterator over the hashes of the ommers in the …\nRetrieves the parent beacon block root of the block, if …\nThe hash of the parent beacon block’s root is included …\nRetrieves the parent hash of the block\nThe Keccak 256-bit hash of the parent block’s header, in …\nReturns the parent block’s number and hash\nReturns the parent block’s number and hash\nReturns the parent block’s number and hash\nTrue if the Prague hardfork is active.\nHelper function for calculating Merkle proofs and hashes.\nThe blob proofs.\nPush a new vector of receipts into the <code>Receipts</code> collection.\nThe receipt.\nA two-dimensional vector of <code>Receipt</code> instances.\nRetrieves the receipts root hash of the block\nThe Keccak 256-bit hash of the root node of the trie …\nRetrieves the requests hash of the block, if available\nThe Keccak 256-bit hash of the an RLP encoded list with …\nCalculate the number of field elements required to store …\nDecodes the BlobTransactionSidecar from RLP bytes.\nRLP decode the signed transaction.\nRLP-decodes receipt’s field with a <code>Bloom</code>.\nRLP decodes receipt and <code>Bloom</code> into <code>ReceiptWithBloom</code> …\nEncodes the BlobTransactionSidecar as RLP bytes.\nRLP encode the signed transaction.\nRLP-encodes receipt fields with the given <code>Bloom</code> without an …\nRLP encodes the receipt with the provided bloom filter.\nReturns length of RLP-encoded receipt fields with the …\nCalculates the length of the BlobTransactionSidecar when …\nGet the length of the transaction when RLP encoded.\nReturns the length of the receipt payload with the …\nReturns RLP header for this receipt encoding with the …\nReturns the RLP encoded length of the block’s header and …\nCalculate the length of the rlp payload of the network …\nSeal the header with a known hash.\nGet the hash.\nSeal a borrowed object by calculating the hash. This may …\nInstantiate an unchecked seal. This should be used with …\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nTrue if the shanghai hardfork is active.\nReturns a reference to the signature.\nCalculate the signing hash for the transaction.\nCalculates a size heuristic for the in-memory size of the …\nCalculate a heuristic for the in-memory size of the Header.\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nRetrieves the state root hash of the block\nThe Keccak 256-bit hash of the root node of the state …\nReturns true if the transaction was successful OR if the …\nReturns the success status of the receipt’s transaction.\nIf transaction is executed successfully.\nReturns the status or post state of the transaction.\nThe hash of the storage account data.\nThe hash of the storage account data.\nReturns the transaction without signature.\nReturns a successful transaction status.\nTake the blobs from the builder, without committing them …\nRetrieves the timestamp of the block\nA scalar value equal to the reasonable output of Unix’s …\nThe timestamp of the block in seconds since the UNIX epoch\nTransaction types.\nCheck if the transaction root equals to empty root.\nReturns an iterator over all transactions.\nTransactions in this block.\nRetrieves the transactions root hash of the block\nThe Keccak 256-bit hash of the root node of the trie …\nCompute  hash as committed to in the MPT trie without …\nConverts the transaction to the given alternative that is …\nConverts the block’s transaction to the given …\nApplies the given fallible closure to the inner …\nConverts the block’s header type by applying a fallible …\nConverts the body’s ommers type by applying a fallible …\nConverts the block’s transaction type by applying a …\nReturns a reference to the transaction.\nReturns a mutable reference to the transaction.\nReturn the <code>TxType</code> of the inner receipt.\nReturns the EIP-2718 type flag.\nCreates a new empty uncle block.\nUnseal the inner item, discarding the hash. Alias for …\nUtilities for working with EIP-4844 field elements and …\nReturns the versioned hash for the blob at the given …\nReturns the index of the versioned hash in the commitments …\nReturns an iterator over the versioned hashes of the …\nCalculates the bloom filter for the receipt and returns the\nReturns <code>ReceiptWithBloom</code> with the computed bloom filter …\nReturns <code>ReceiptWithBloom</code> with the computed bloom filter …\nCreate a new builder with a pre-allocated capacity. This …\nReplaces the header of the block.\nReturns reference to withdrawals in the block if present\nBlock withdrawals.\nRetrieves the withdrawals root hash of the block, if …\nThe Keccak 256-bit hash of the withdrawals list portion of …\nContains attributes of a block that are relevant for block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BlockConditionalAttributes</code> with the given …\nThe number of the block.\nThe block’s timestamp\nTestnet genesis hash.\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nOmmer root of empty list.\nTransactions root of empty receipts set.\nRoot hash of an empty trie.\nTransactions root of empty transactions set.\nWithdrawals root of empty withdrawals set.\nMultiplier for converting ether to wei.\nMultiplier for converting finney (milliether) to wei.\nBase goerli genesis hash.\nGoerli genesis hash.\nOptimism goerli genesis hash.\nMultiplier for converting gwei to wei.\nHolesky genesis hash.\nHoodi genesis hash.\nKeccak256 over empty array.\nIdentifier for legacy transaction, however a legacy tx is …\nThe Ethereum mainnet genesis hash.\nMaximum extra data size in a block after genesis\nMultiplier for converting mgas to gas.\nThe first four bytes of the call data for a function call …\nSepolia genesis hash.\nError for signature S.\nOpaque error type for sender recovery.\nThe order of the secp256k1 curve, divided by two. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nHelper type that is <code>core::error::Error</code> and wraps a value …\nConverts the value to the given alternative that is <code>From&lt;T&gt;</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the underlying value.\nMaps the error’s value with the given closure.\nCreates a new error with the given value and error message.\nCreates a new error with a static error message.\nReturns a reference to the value.\nThe builtin transaction type.\nAn enum that combines two different transaction types.\nThe other transaction type.\nConverts only the built-in transaction type using <code>From</code>, …\nConverts only the other transaction type using <code>From</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps only the built-in transaction type using the provided …\nMaps only the other transaction type using the provided …\nAttempts to convert only the built-in transaction type …\nAttempts to convert only the other transaction type using …\nAttempts to map only the built-in transaction type using …\nAttempts to map only the other transaction type using the …\nCalculates the root hash for ommer/uncle headers.\nCalculates the receipt root.\nCalculate a transaction root.\nCalculates the root hash of the withdrawals.\nCompute a trie root of the collection of rlp encodable …\nCompute a trie root of the collection of items with a …\nCalculates the root hash of the state represented as MPT.\nHashes and sorts account keys, then proceeds to …\nHashes and sorts account keys, then proceeds to …\nSorts the hashed account keys and calculates the root hash …\nCalculates the root hash of account storage trie.\nHashes storage keys, sorts them and them calculates the …\nSorts and calculates the root hash of account storage trie.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nA commitment/proof serialized as 0x-prefixed hex string\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nTransaction type of <code>Signed &lt; TxEip1559 &gt;</code>.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nTransaction type of <code>Signed &lt; TxEip2930 &gt;</code>.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nTransaction type of <code>Signed &lt; Eip4844 &gt;</code>.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nTransaction type of <code>Signed &lt; TxEip7702 &gt;</code>.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nRe-export for convenience The enum <code>Either</code> with variants …\nThe Ethereum EIP-2718 Transaction Envelope.\nThe TypedTransaction enum represents all Ethereum …\nA value of type <code>L</code>.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nTransaction type of <code>Signed &lt; TxLegacy &gt;</code>.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nSigned object with recovered signer.\nA value of type <code>R</code>.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars.\nA signable transaction.\nA type that can recover the signer of a transaction.\nSimple coder that only uses the last 31 bytes of each …\nThe EIP-2718 transaction type.\nRepresents a minimal EVM transaction. Currently, EIP-1559, …\nA typed transaction envelope.\nAdditional fields in the context of a (maybe) pending …\nAdditional fields in the context of a block that contains …\nA transaction with a priority fee (EIP-1559).\nTransaction with an <code>AccessList</code> (EIP-2930).\nAn EIP-4844 transaction sidecar.\nA transaction with a priority fee (EIP-7702).\nThe Ethereum EIP-2718 Transaction Envelope.\nLegacy transaction.\nTransaction types supported by <code>EthereumTxEnvelope</code>.\nThe enum of transaction types.\nBasic typed transaction which can contain both <code>TxEip4844</code> …\nReturns the EIP-2930 <code>access_list</code> for the particular …\nThe accessList specifies a list of addresses and storage …\nThe access list. See EIP-2930.\nThe accessList specifies a list of addresses and storage …\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxEip4844Variant</code> variant if the transaction is …\nReturns the <code>TxEip7702</code> variant if the transaction is an …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConverts from <code>&amp;Recovered&lt;T&gt;</code> to <code>Recovered&lt;&amp;T&gt;</code>.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns the number of blobs of <code>SignedAuthorization</code> in this …\nReturns the <code>SignedAuthorization</code> list of the transaction.\nAuthorizations are used to temporarily set the code of its …\nBase fee of the block.\nBase fee of the block.\nReturns the number of blobs of this transaction.\nReturns the total gas for all blobs in this transaction.\nBlob versioned hashes for eip4844 transaction. For …\nThe blob data.\nHash of the block.\nHash of the block.\nNumber of the block.\nNumber of the block.\nGet <code>chain_id</code>.\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nEIP-155: Simple replay attack protection\nAdded as EIP-155: Simple replay attack protection\nClone the inner signed object.\nClone the inner transaction.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps a <code>Recovered&lt;&amp;T&gt;</code> to a <code>Recovered&lt;T&gt;</code> by cloning the …\nCode a slice of data into the builder.\nThe blob commitments.\nConverts the inner signed object to the given alternative …\nConverts the transaction type to the given alternative …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nHelper function to explicitly create a new copy of …\nDecode all slices of data from the blobs.\nReturns the effective gas price for the given base fee.\nReturns the effective tip for this transaction.\nReturn the inner EIP-1559 transaction if it exists.\nReturn the length of the inner txn, including type byte …\nReturn the inner EIP-2930 transaction if it exists.\n[EIP-4844] constants, helpers, and types.\nUtilities for working with EIP-4844 field elements and …\nReturn the inner EIP-7702 transaction if it exists.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nThis encodes the transaction <em>with</em> the signature, and an …\nRLP-encodes the transaction for signing.\nRLP-encodes the transaction for signing it. Used to …\nThe excess blob gas of the block.\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nFinish the sidecar, and commit to the data. This method …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper for decoding EIP-155 <code>v</code> value into <code>y_parity</code> boolean …\nReturns the first 4bytes of the calldata for a function …\nGet <code>gas_limit</code>.\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nGet <code>gas_price</code>.\nA scalar value equal to the number of Wei to be paid per …\nA scalar value equal to the number of Wei to be paid per …\nReference to transaction hash. Used to identify …\nHash of the transaction.\nIndex of the transaction in the block\nIndex of the transaction in the block\nReference to the inner recovered object.\nReference to the inner recovered object.\nGet <code>data</code>.\nInput has two uses depending if <code>to</code> field is Create or Call.\nInput has two uses depending if <code>to</code> field is Create or Call.\nAn unlimited size byte array specifying the input data of …\nInput has two uses depending if <code>to</code> field is Create or Call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes the inner type and returns the <code>WithEncoded</code> …\nReturns the <code>WithEncoded</code> representation of <code>Recovered</code> with …\nConverts the transaction into …\nExtract the value of an either over two equivalent types.\nReference to the inner signed object.\nConvert the inner value to an iterator.\nDissolve Self to its component\nConvert to a <code>Signed</code> object.\nConsumes the type into a <code>Signed</code>\nTransform back to the transaction.\nConsumes the type, removes the signature and returns the …\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nReturns true if the transaction type has dynamic fee.\nReturns true if the transaction type is EIP-1559.\nReturns true if the transaction is an EIP-1559 transaction.\nReturns true if the transaction type is EIP-2930.\nReturns true if the transaction is an EIP-2930 transaction.\nReturns true if the transaction type is EIP-4844.\nReturns true if the transaction is an EIP-4844 transaction.\nReturns true if the transaction type is EIP-7702.\nReturns true if the transaction is an EIP-7702 transaction.\nReturn true if the value is the <code>Left</code> variant.\nReturns true if the transaction type is Legacy.\nReturns true if the transaction is a legacy transaction.\nReturns true if the transaction is replay protected.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nReturns the transaction kind.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nReturn the inner legacy transaction if it exists.\nMap <code>f</code> over the contained value and return the result in the\nApplies the given closure to the inner signed object.\nConverts the EIP-4844 variant of this transaction with the …\nConverts the EIP-4844 variant of this transaction with the …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApplies the given closure to the inner transaction type.\nMax fee per blob gas for EIP-4844 transaction.\nFor dynamic fee transactions returns the maximum fee per …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nFor dynamic fee transactions returns the Priority fee the …\nMax Priority fee that transaction is paying\nMax Priority fee that transaction is paying\nCreates a new signed transaction from the given …\nCreates a new signed transaction from the given …\nCreate <code>Recovered</code> from the given transaction and <code>Address</code> of …\nCreates a new signed transaction from the given typed …\nGet <code>nonce</code>.\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nOutputs the length of the signature RLP encoding for the …\nDefines the exact transaction variant that are allowed to …\nReturn the max priority fee per gas if the transaction is …\nThe blob proofs.\nRecover signer from signature and hash.\nRecover signer from signature and hash <em>without ensuring </em>…\nSame as <code>SignerRecoverable::recover_signer_unchecked</code> but …\nSame as <code>SignerRecoverable::recover_signer_unchecked</code> but …\nCalculate the number of field elements required to store …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nSets <code>chain_id</code>.\nSet <code>chain_id</code> if it is not already set. Checks that the …\nReturn the reference to signature.\nCalculate the signing hash for the transaction.\nCalculate the signing hash for the transaction.\nHelper module for encoding signatures of transactions …\nSigner of the object recovered from signature\nReference to the signer of the object recovered from …\nCalculate a size heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nThe block’s timestamp.\nGet the transaction’s address of the contract that will …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient.\nThe 160-bit address of the message call’s recipient or, …\nHelper for encoding <code>y_parity</code> boolean and optional <code>chain_id</code> …\nConverts the inner signed object to the given alternative …\nConverts the transaction to the given alternative that is …\nConsumes the type and returns the <code>TxEip2930</code>if this …\nConsumes the type and returns the EIP-4844 if this …\nConsumes the type and returns the EIP-4844 if this …\nConsumes the type and returns the <code>TxLegacy</code> if this …\nAttempts to convert the envelope into the pooled variant.\nAttempts to convert the envelope into the pooled variant.\nConverts from an EIP-4844 transaction to a …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via …\nRecover the signer via …\nApplies the given fallible closure to the inner signed …\nApplies the given fallible closure to the inner …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via <code>SignerRecoverable::recover_signer</code> …\nRecover the signer via …\nRecover the signer via …\nReturns a reference to the transaction.\nReturn the hash of the inner Signed.\nCalculate the transaction hash for the given signature.\nHash of the transaction.\nGet the transaction type\nGet the transaction type.\nGet the transaction type.\nReturn the <code>TxType</code> of the inner txn.\nReturn the <code>TxType</code> of the inner txn.\nHelper module for deserializing legacy transactions and …\nReturns the left value\nReturns the right value\nGet <code>value</code>.\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nEIP-4844 Blob Transaction\nA standalone transaction with blob hashes and max blob fee.\nEIP-4844 Blob Transaction\nEIP-4844 Blob Transaction\nA transaction with a sidecar, which contains the blob …\nThe accessList specifies a list of addresses and storage …\nReturns the <code>TxEip4844WithSidecar</code> if it has a sidecar\nReturns the total gas for all blobs in this transaction.\nIt contains a vector of fixed size hash(32 bytes)\nAdded as EIP-pub 155: Simple replay attack protection\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes the TxEip4844WithSidecar and returns the inner …\nReturns the argument unchanged.\nConstructs a new TxEip4844WithSidecar from a TxEip4844 and …\nA scalar value equal to the maximum amount of gas that …\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the TxEip4844WithSidecar and returns the inner …\nConsumes the TxEip4844WithSidecar and returns the inner …\nMax fee per data gas\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nA scalar value equal to the number of transactions sent by …\nReturns the sidecar if this is …\nGet access to the inner sidecar.\nThe sidecar.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nThe 160-bit address of the message call’s recipient.\nTries to unwrap the <code>TxEip4844WithSidecar</code> returns the …\nGet access to the inner tx TxEip4844.\nGet access to the inner tx TxEip4844.\nThe actual transaction.\nGet the transaction type.\nGet transaction type.\nGet the transaction type.\nA scalar value equal to the number of Wei to be …\nAttaches the blob sidecar to the transaction\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nA <code>TxEip1559</code> tagged with type 2.\nA <code>TxEip2930</code> tagged with type 1.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nA <code>TxEip7702</code> tagged with type 4.\nAn untagged <code>TxLegacy</code>.\nAll possible transactions that can be included in a …\nDeserializes signed transaction expecting <code>v</code> key for …\nSerializes signed transaction with <code>v</code> key for signature …\nDeserializes a legacy transaction without a tag.\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nInstantiate a new <code>WholeFe</code> from a slice of bytes, if it is …")