searchState.loadedDescShard("linera_execution", 0, "This module manages the execution of the system …\nHow to access the balance of an account.\nAn implementation of the runtime API used to access the …\nThe state of a blob of binary data.\nThis message is a receipt automatically created when the …\nAn implementation of the system API made available to …\nA type for errors happening during execution.\nConfiguration options for the execution runtime available …\nRequirements for the <code>extra</code> field in our state views (and …\nA view accessing the execution state of a chain.\nAttempts to create an invalid <code>WasmRuntime</code> instance from a …\nThe <code>Linera.sol</code> library code to be included in solidity …\nA message to be sent and possibly executed in the receiver…\nThe kind of outgoing message being sent.\nAn operation to be executed in a block.\nA posted message together with routing information.\nThe message cannot be skipped nor rejected. No receipt is …\nAn query to be sent and possibly executed in the receiver…\nThe outcome of the execution of a query.\nThe response to a query.\nA collection of prices and limits associated with block …\nThe resources used so far by an execution process. Acts as …\nCommon host data used as the <code>UserData</code> of the system API …\nAn implementation of the system API made available to …\nHow to interact with a long-lived service runtime.\nA request to the service runtime actor.\nThe message can be skipped or rejected. No receipt is …\nA system operation.\nA system message.\nA system query.\nA system response.\nThe message cannot be skipped but can be rejected. A …\nThe <code>TransactionTracker</code> contents after a transaction has …\nTracks oracle responses and execution outcomes of an …\nA user operation (in serialized form).\nA user message (in serialized form).\nA user query (in serialized form).\nA user response (in serialized form).\nThe public entry points provided by the contract part of …\nAn implementation of <code>UserContractModule</code>.\nAn implementation of <code>UserContract</code>.\nA factory trait to obtain a <code>UserContract</code> from a …\nThe public entry points provided by the service part of an …\nAn implementation of <code>UserServiceModule</code>.\nAn implementation of <code>UserService</code>.\nA factory trait to obtain a <code>UserService</code> from a …\nA user contract in a compiled WebAssembly module.\nErrors that can occur when executing a user application in …\nThe runtime to use for running the application.\nA user service in a compiled WebAssembly module.\nTrait used to select a default <code>WasmRuntime</code>, if one is …\nThe account paying for the resource usage.\nCreates a policy where all categories have a small …\nThe current application creator’s chain ID.\nThe current application ID.\nThe current application parameters.\nReturns a reference to the <code>SystemOperation</code> in this …\nEnsures that the current time at block validation is …\nAsserts the existence of a data blob with the given hash.\nThe optional authenticated caller application ID, if it …\nThe authenticated owner for this execution, if there is …\nThe authenticated owner of the operation, if any.\nThe authenticated owner of the operation that created the …\nThe authenticated owner of the operation, if any.\nThe user authentication carried by the message, if any.\nObtains the balance of the account. The only possible …\nThe price to publish a blob, per byte.\nThe price to read a blob, per byte.\nThe number of blob bytes published.\nThe number of blob bytes read.\nThe base price to publish a blob.\nThe base price to read a blob.\nBlobs created by contracts.\nThe number of blobs published.\nBlobs published by this transaction.\nThe number of blobs read.\nThe current block height.\nThe <code>BlockHeight</code> of the chain that published the change\nThe total size of the block so far.\nThe price of reading a byte.\nThe price of accessing one byte from the runtime.\nThe price of increasing storage by a byte.\nThe price of writing a byte\nThe number of bytes read.\nThe size of bytes read from runtime.\nThe change in the number of bytes being stored by user …\nThe number of bytes written.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe <code>ChainId</code> of the chain that published the change\nReads the current ownership configuration for this chain.\nChanges the application permissions on the current chain.\nChecks if the service has exceeded its execution time …\nClaims amount from source to destination.\nCloses the current chain.\nConsumes some of the execution fuel.\nTests whether a key exists in the key-value store\nCreates the promise to test whether a key exists in the …\nResolves the promise to test whether a key exists in the …\nTests whether multiple keys exist in the key-value store\nCreates the promise to test whether multiple keys exist in …\nResolves the promise to test whether multiple keys exist …\nCreates a new application on chain.\nCreates a new data blob and returns its hash.\nThe destination of the message.\nAdds a new item to an event stream. Returns the new event…\nEpoch of the <code>last_used_by</code> certificate (if any).\nThe number of event bytes published.\nThe number of event bytes read.\nEvents recorded by contracts’ <code>emit</code> calls.\nThe number of events published.\nThe number of events read.\nSupport for user applications compiled for the EVM\nThe EVM fuel used so far.\nThe price per unit of fuel (aka gas) for EVM execution.\nApplies a message originating from a cross-chain message.\nApplies an operation from the current block.\nHandle requests from the synchronous execution thread of …\nFinishes execution of the current transaction.\nReads the data from the key/values having a specific …\nCreates the promise to access key/values having a specific …\nResolves the promise to access key/values having a …\nCreates the promise to access keys having a specific prefix\nResolves the promise to access keys having a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>WasmContractModule</code> using the WebAssembly …\nCreates a new <code>WasmServiceModule</code> using the WebAssembly …\nCreates a new <code>WasmContractModule</code> using Wasmer with the …\nCreates a new <code>WasmServiceModule</code> using Wasmer with the …\nCreates a new <code>WasmContractModule</code> using Wasmtime with the …\nCreates a new <code>WasmServiceModule</code> using Wasmtime with the …\nA grant to pay for the message execution.\nThe amount allocated to message grants.\nExecutes unmetered read-only queries on the state of this …\nThe current block height.\nThe current block height.\nThe current block height.\nThe current block height.\nThe price for a performing an HTTP request.\nThe list of hosts that contracts and services can send …\nThe maximum amount of time allowed to wait for an HTTP …\nThe number of HTTP requests performed.\nHow to receive requests.\nInstantiate the application state on the chain that owns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the message was rejected by the original receiver …\nReturns whether this operation is allowed regardless of …\nReturns whether this error is caused by an issue in the …\nThe kind of message being sent.\nHash of the last <code>Certificate</code> that published or used this …\nThe local time in the node executing the query.\nThe maximum size of a blob.\nThe maximum size of a block proposal.\nThe maximum size of a block. This includes the block …\nThe maximum size of decompressed contract or service …\nThe maximum data to read per block\nThe maximum data to write per block\nThe maximum amount of EVM fuel a block can consume.\nReturns the maximum gas fuel per block.\nThe maximum fuel per block according to the <code>VmRuntime</code>.\nThe maximum size in bytes of a received HTTP response.\nThe maximum size in bytes of an oracle response.\nThe maximum number of published blobs per block.\nThe maximum time in milliseconds that a block can spend …\nThe maximum amount of Wasm fuel a block can consume.\nOperates a 3-way merge by transferring the difference …\nThe base price of sending a message from a block.\nThe message itself.\nThe additional price for each byte in the argument of a …\nThe total size of the arguments of outgoing user messages.\nIf the current message (if there is one) was rejected by …\nThe chain ID where the current message originated from, if …\nThe number of outgoing messages created (system and user).\nCreates a new <code>ServiceSyncRuntime</code> ready to execute using a …\nCreates a new <code>RuntimeApiData</code> using the provided <code>runtime</code> to …\nCreates a new resource controller with the given policy …\nCreates a new <code>WasmContractModule</code> using the WebAssembly …\nCreates a new <code>WasmServiceModule</code> using the WebAssembly …\nCreates a new simple outgoing message with no grant and no …\nCreates a new <code>TransactionTracker</code> for testing, with default …\nCreates a new <code>TransactionTracker</code> for testing, with default …\nCreates a new <code>ServiceSyncRuntime</code> ready to execute using a …\nThe height of the next block on this chain.\nCreates a policy with no cost for anything.\nCreates a policy with no cost for anything except fuel.\nOpens a new chain.\nThe base price of adding an operation to a block.\nThe additional price for each byte in the argument of a …\nThe total size of the arguments of user operations.\nOperation result.\nThe number of operations executed.\nIn replay mode, returns the next recorded oracle response. …\nThe chain ID where the message originated from.\nMakes an HTTP request to the given URL and returns the …\nReturns a reference to the policy.\nReacts to new events on streams this application …\nPublishes a module with contract and service bytecode and …\nReturns the IDs of all blobs published in this operation.\nQueries a service.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads balance owners.\nReads the balance of the chain.\nReads a data blob specified by a given hash.\nReads an event from a stream. Returns the event’s value.\nReads several keys from the key-value store\nCreates the promise to access several keys from the …\nResolves the promise to access several keys from the …\nThe price of one read operation.\nThe number of read operations.\nReads the owner balance.\nReads the balances from all owners.\nReads the system timestamp.\nReads the key from the key-value store\nCreates the promise to access a key from the key-value …\nResolves the promise to access a key from the key-value …\nWhere to send a refund for the unused part of each grant …\nWhere to send a refund for the unused part of the grant …\nReturns the amount of execution fuel remaining before …\nAdds the oracle response to the record. If replaying, it …\nThe consensus round number, if this is a block that gets …\nThe consensus round number, if this is a block that gets …\nThe consensus round number, if this is a block that gets …\nThe consensus round number, if this is a block that gets …\nRuns the service runtime actor, waiting for …\nReturns a mutable reference the system API <code>Runtime</code>.\nHow to query the runtime.\nSchedules an operation to be included in the block …\nSchedules a message to be sent.\nThe price per query to a service as an oracle.\nThe time spent executing services as oracles.\nThe number of calls to services as oracles.\nSimulates the instantiation of an application.\nSpawns a thread running the <code>ServiceSyncRuntime</code> actor.\nSubscribes this application to an event stream.\nSystem application.\nCreates a policy that matches the Testnet.\nThe timestamp of the block containing the operation.\nThe timestamp of the block executing the message.\nThe timestamp of the current block.\nTracks a number of blob bytes published.\nTracks the serialized size of a block, or parts of it.\nTracks the serialized size of a block, or parts of it.\nTracks the allocation of a grant.\nTracks the execution of an HTTP request.\nTracks the creation of an outgoing message.\nTracks the execution of an operation in block.\nReturns a reference to the tracker.\nHow the resources were used so far.\nTransfers amount from source to destination.\nCalls another application. Forwarded sessions will now be …\nQueries another application.\nNote that queries are not available from writable contexts.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUnsubscribes this application from an event stream.\nCreates a new user application operation following the …\nCreates a new user application message assuming that the …\nCreates a new user application query following the …\nCreates a new user application operation assuming that the …\nCreates a new user application query assuming that the …\nUser applications.\nReturns the round in which this block was validated.\nThe Wasm fuel used so far.\nThe price per unit of fuel (aka gas) for Wasm execution.\nThis assumes that the current directory is one of the …\nReturns the same message, with the specified authenticated …\nReturns the same message, with the specified kind.\nProvides a reference to the current execution state and …\nProvides a reference to the current execution state as …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites a batch of changes.\nThe price of one write operation.\nThe number of write operations.\nA set of validators (identified by their public keys) and …\nThe identity of a validator.\nPublic state of a validator.\nThe public key of the account associated with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe network address (in a string format understood by the …\nReturns a mutable reference to this committee’s …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe validators in the committee.\nThe voting power.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCode specific to the usage of the Revm runtime.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA user service in a compiled EVM module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>EvmContractModule</code> using the EVM module in …\nCreates a new <code>EvmServiceModule</code> using the EVM module in …\nCreates a new <code>EvmContractModule</code> using Revm with the …\nCreates a new <code>EvmServiceModule</code> using Revm with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EvmContractModule</code> using the EVM module with …\nCreates a new <code>EvmServiceModule</code> using the EVM module with …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nRequests to the execution state.\nActor for handling requests to the execution state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new execution state actor.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nOperations that are only allowed on the admin chain.\nOperations that are only allowed on the admin chain.\nChanges the application permissions configuration on this …\nChanges the ownership of the chain.\nClaims <code>amount</code> units of value from the given owner’s …\nCloses the chain.\nCreates a new application.\nRegisters a new committee. Other chains can then migrate …\nCredits <code>amount</code> units of value to the account <code>target</code> – …\nThe event stream name for new epochs and committees.\nThe applications subscribing to a particular stream, and …\nCreates (or activates) a new chain. This will …\nThe initial configuration for a new chain.\nProcesses an event about a new epoch and committee.\nProcesses an event about a removed epoch and committee.\nPublishes a new committee as a blob. This can be assigned …\nPublishes a new data blob.\nPublishes a new application module.\nThe event stream name for removed epochs.\nRemoves a committee. Other chains should execute …\nA view accessing the execution state of the system of a …\nA system message meant to be executed on a remote chain.\nA system operation.\nA query to the system state.\nThe response to a system query.\nTransfers <code>amount</code> units of value from the given owner’s …\nUpdates the event stream trackers.\nOptional user message attached to a transfer.\nVerifies that the given blob exists. Otherwise the block …\nWithdraws <code>amount</code> units of value from the account and …\nThe admin of the chain.\nPermissions for applications on this chain.\nThe initial application permissions.\nThe applications that are subscribed to this stream.\nBalance of the chain. (Available to any user able to …\nThe initial chain balance.\nBalances attributed to a given owner.\nWhether this chain has been closed.\nThe committees that we trust, indexed by epoch number.\nReturns the current committee, if any.\nRetrieves an application’s description.\nHow the chain was created. May be unknown for inactive …\nThe number identifying the current configuration.\nThe event stream subscriptions of applications on this …\nExecutes a cross-chain message that represents the …\nExecutes the sender’s side of an operation and returns a …\nRetrieves the recursive dependencies of applications and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>InitialChainConfig</code> based on this <code>OpenChainConfig</code>…\nInitializes the system application state on a newly opened …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvariant for the states of active chains.\nThe next event index, i.e. the total number of events in …\nReturns the messages to open a new chain, and subtracts …\nOwnership of the chain.\nThe ownership configuration of the new chain.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe number of events in the streams that this chain is …\nThe timestamp of the most recent block.\nBlobs that have been used or published on this chain.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe number of initial rounds after 0 in which all owners …\nWhether the multi-leader rounds are unrestricted, i.e. not …\nThe regular owners, with their weights that determine how …\nSuper owners can propose fast blocks in the first round, …\nThe timeout configuration: how long fast, multi-leader and …\nAn expected call to <code>UserContract::execute_message</code>.\nAn expected call to <code>UserContract::execute_operation</code>.\nAn expected call to a <code>MockApplicationInstance</code>.\nAn expected call to <code>UserContract::finalize</code>.\nAn expected call to <code>UserService::handle_query</code>.\nAn expected call to <code>UserContract::instantiate</code>.\nA mocked implementation of a user application.\nA mocked implementation of a user application instance.\nAn expected call to <code>UserContract::process_streams</code>.\nRegistration of <code>MockApplication</code>s to use in tests.\nA system execution state, not represented as a view but as …\nPanics if there are still expected calls in one of the …\nPanics if there are still expected calls left in this …\nCreates a vector of <code>OracleResponse</code>s for the supplied <code>BlobId</code>…\nCreates a dummy <code>MessageContext</code> to use in tests.\nCreates a dummy <code>OperationContext</code> to use in tests.\nCreates a dummy <code>QueryContext</code> to use in tests.\nCreates a dummy <code>ApplicationDescription</code> for use in tests.\nCreates a new <code>MockApplicationInstance</code>, forwarding the …\nReturns the chain to use for the creation of the …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nQueues an expected call to the <code>MockApplication</code>.\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRegisters a new <code>MockApplication</code> and returns it with the …\nRegisters a new <code>MockApplication</code> associated with a …\nCode for compiling solidity smart contracts for testing …\nCreates a <code>Strategy</code> for creating a <code>BTreeMap</code> of <code>AccountOwner</code>…\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")