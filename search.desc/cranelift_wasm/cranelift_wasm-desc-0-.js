searchState.loadedDescShard("cranelift_wasm", 0, "Performs translation from a wasm module in binary format …\nThe common supertype of all internal references.\nThis is a constant global with a value known at compile …\nA constant expression.\nThe subset of Wasm opcodes that are constant.\nThis is a global variable that needs to be handled by the …\nWebAssembly page sizes are 64KiB by default.\nWebAssembly page sizes are 64KiB (or <code>2**16</code>) by default.\nIndex type of a passive data segment inside the …\nIndex type of a defined function inside the WebAssembly …\nIndex type of a defined global inside the WebAssembly …\nIndex type of a defined memory inside the WebAssembly …\nIndex type of a defined table inside the WebAssembly …\nA dynamic heap can be relocated to a different base …\nResizable table.\nIndex type of a passive element segment inside the …\nAn index within an engine, canonicalized among all modules …\nIndex type of a canonicalized recursive type group inside …\nAn interned type index, either at the module or engine …\nAn index of an entity.\nA type of an item in a wasm module where an item is …\nContains the error value\nThe common supertype of all external references.\nF32 type\nF64 type\nThe common supertype of all function references.\nEnvironment affecting the translation of a single …\nIndex type of a function (imported or defined) inside the …\nContains information passed along during a function’s …\nWebAssembly to Cranelift IR function translator.\nFunction index.\nA function type where the index points to the type section …\nTemporary object used to build a single Cranelift IR …\nA WebAssembly global.\nGlobal index.\nA global variable with the specified content type\nIndex type of a global variable (imported or defined) …\nThe value of a WebAssembly global variable.\nAn opaque reference to a <code>HeapData</code>.\nA heap implementing a WebAssembly linear memory.\nStyle of heap including style-specific information.\nThe storage type is i16.\nI32 type\nI64 type\nThe storage type is i8.\nAn implementation limit was exceeded.\nThe input WebAssembly code is invalid.\nWebAssembly linear memory.\nThis is a variable in memory that should be referenced …\nMemory index.\nA linear memory with the specified limits\nIndex type of a linear memory (imported or defined) inside …\nAn index within the current Wasm module, canonicalized …\nAn object satisfying the <code>ModuleEnvironment</code> trait can be …\nIndex type of a canonicalized recursive type group inside …\nA canonicalized type index for a type within a single …\nContains the success value\nIndex type of a defined memory inside the WebAssembly …\nAn index within the containing type’s rec group. This is …\nA canonicalized type index referencing a type within a …\nReference type\nA static heap has a fixed base address and a number of …\nNon-resizable table.\nIndex into the global list of modules found within an …\nWebAssembly table.\nTable index.\nA table with the specified element type and limits\nAn implementation of a WebAssembly table.\nIndex type of a table (imported or defined) inside the …\nSize of a WebAssembly table, in elements.\nWebAssembly event.\nAn event definition.\nIndex type of an event inside the WebAssembly module.\nEnvironment affecting the translation of a WebAssembly.\nHelpers used to convert a <code>wasmparser</code> type to a type in …\nIndex type of a type (imported or defined) inside the …\nA trait for things that can trace all type-to-type edges, …\nA feature used by the WebAssembly code is not supported by …\nAny user-defined error.\nV128 type\nVersion number of this crate.\nA canonicalized type index into an engine’s shared type …\nThe storage type is a value type.\nMaximum size, in bytes, of 32-bit memories (4G)\nA concrete array type.\nA function, array, or struct type.\nA WebAssembly translation error.\nThe type of a struct field or array element.\nWebAssembly function type – equivalent of <code>wasmparser</code>’s …\nA top heap type.\nWebAssembly heap type – equivalent of <code>wasmparser</code>’s …\nA recursive type group.\nWebAssembly reference type – equivalent of <code>wasmparser</code>’…\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nRepresents storage types introduced in the GC spec for …\nA concrete struct type.\nA concrete, user-defined (or host-defined) Wasm type.\nWebAssembly value type – equivalent of …\nCreates a <code>String</code> using interpolation of runtime …\nCalled after the locals for a function have been parsed, …\nCalled after the locals for a function have been parsed, …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nCreates a parameter for a specific <code>Block</code> by appending it …\nAppend parameters to the given <code>Block</code> corresponding to the …\nAppend parameters to the given <code>Block</code> corresponding to the …\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nGet the underlying engine-level type index, if any.\nGet the underlying module-level type index, if any.\nGet the underlying recgroup-level type index, if any.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nThe address of the start of the heap’s storage.\nGlobal value giving the address of the start of the table.\nInserts code before a load.\nInserts code before a load.\nInserts code before memory.grow.\nInserts code before memory.grow.\nInserts code before a store.\nInserts code before a store.\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FuncEnvironment</code> performing this …\nOptional callback for the <code>FuncEnvironment</code> performing this …\nReturns the underlying bits of the index.\nRetrieves all the parameters for a <code>Block</code> currently …\nCreate a <code>Block</code> with the given Wasm parameters.\nGet the parameter and result types for the given Wasm …\nGet a CLIF value representing the current bounds of this …\nThe size of the table, in elements.\nCalls libc.memcmp\nCalls libc.memcpy\nCalls libc.memmove\nCalls libc.memset\nCanonicalize <code>self</code> by rewriting all type references inside …\nCanonicalize <code>self</code> by rewriting all type references inside …\nChanges the destination of a jump instruction after …\nThe array, function, or struct that is defined.\nReturns the underlying <code>FunctionBuilderContext</code> that this …\nConverts a wasmparser function type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser heap type to a wasmtime type\nConverts a wasmparser reference type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser value type to a wasmtime type\nCreates a new <code>Block</code> and returns its reference.\nCreates a dynamic stack slot in the function, to be used by\nDeclares a global value accessible to the function.\nCreates a jump table in the function, to be used by …\nCreates a sized stack slot in the function, to be used by …\nGet the block that this builder is currently at.\nReturns a <code>FuncCursor</code> pointed at the current position ready …\nIndicates that a custom section has been found in the wasm …\nIndicates that a custom section has been found in the wasm …\nFills a declared memory with bytes at module instantiation.\nIndicates that a declarative element segment was seen in …\nIndicates that a declarative element segment was seen in …\nDeclares a function export to the environment.\nDeclares a function import to the environment.\nDeclares the name of a function to the environment.\nDeclares the name of a function to the environment.\nDeclares the type (signature) of a local function in the …\nDeclares a global to the environment.\nDeclares a global export to the environment.\nDeclares a global import to the environment.\nDeclares the name of a function’s local to the …\nDeclares the name of a function’s local to the …\nDeclares a memory to the environment\nDeclares a memory export to the environment.\nDeclares a memory import to the environment.\nDeclares the name of a module to the environment.\nDeclares the name of a module to the environment.\nDeclare a passive data segment.\nDeclare a passive element segment.\nDeclares the optional start function.\nDeclares a table to the environment.\nFills a declared table with references to functions in the …\nDeclares a table export to the environment.\nDeclares a table import to the environment.\nDeclares an tag to the environment\nDeclares an tag to the environment\nDeclares an tag export to the environment.\nDeclares an tag export to the environment.\nDeclares an tag import to the environment.\nDeclares an tag import to the environment.\nDeclares a function signature to the environment.\nDeclare that the given value is a GC reference that …\nDeclares the type of a variable, panicking if it is …\nDeclare that all uses of the given variable must be …\nRegister a new definition of a user variable. The type of …\nProvides the contents of a function body.\nThe size of a table element, in bytes.\nThe field’s element type.\nOptimised <code>Self::call_memcmp</code> for small copies.\nOptimised memcpy or memmove for small copies.\nCalls libc.memset\nMake sure that the current block is inserted in the layout.\nTurns a <code>wasmparser</code> <code>f32</code> into a <code>Cranelift</code> one.\nTurns a <code>wasmparser</code> <code>f64</code> into a <code>Cranelift</code> one.\nDeclare that translation of the current function is …\nNotifies the implementation that all exports have been …\nNotifies the implementation that all exports have been …\nNotifies the implementation that all imports have been …\nNotifies the implementation that all imports have been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>BinaryReaderError</code> to a <code>WasmError</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new const expression from a <code>wasmparser</code> const …\nConvert a <code>wasmparser::Operator</code> to a <code>ConstOp</code>.\nThe function currently being built. This field is public …\nDoes the given result require inclusion in stack maps?\nSpecial VMContext value label. It is tracked as …\nInserts code before a function return.\nInserts code before a function return.\nWhether or not the target being translated for has a …\nWhether or not the target being translated for has a …\nWhether to enable Spectre mitigations for heap accesses.\nGet the heaps for this function environment.\nDeclare an external function import.\nAdds a signature which can later be used to declare an …\nThe index type for the heap.\nReturns an object with the <code>InstBuilder</code> trait that allows …\nInsert <code>block</code> in the layout <em>after</em> the existing block <code>after</code>.\nReturns the result values of an instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this type canonicalized for hash consing?\nIs this type canonicalized for runtime usage?\nIs this an engine-level type index?\nWhether this type is forbidden from being the supertype of …\nIs this an module-level type index?\nIs this an recgroup-level type index?\nIs this function type compatible with trampoline usage in …\nReturns <code>true</code> if and only if the current <code>Block</code> is sealed …\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs the given parameter of the given function a wasm-level …\nIs the given parameter of the given function a wasm-level …\nIs the given return of the given function a wasm-level …\nIs the given return of the given function a wasm-level …\nReturns whether this is an x86 target, which may alter …\nReturns whether this is an x86 target, which may alter …\nConverts the specified type index from a heap type into a …\nConverts the specified type index from a heap type into a …\nSet up an external function definition in the preamble of …\nSet up the necessary preamble definitions in <code>func</code> to …\nSet up the necessary preamble definitions in <code>func</code> to …\nSet up a signature definition in the preamble of <code>func</code> that …\nThe maximum heap size in bytes.\nReturns the maximum size memory is allowed to be only …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nReturns the maximum size, in bytes, that this memory is …\nWhether or not this is a 64-bit memory\nThe memory type for the pointed-to memory, if using …\nGuaranteed minimum heap size in bytes. Heap accesses …\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nReturns the minimum size, in bytes, that this memory must …\nA flag indicating whether the value may change at runtime.\nWhether this field can be mutated or not.\nCreates a new <code>FunctionBuilder</code> structure that will operate …\nCreate a new translator.\nCreate a new <code>VMSharedTypeIndex</code>.\nCreate a new const expression from the given opcodes.\nHow many <code>externref</code>s are in this function’s params?\nHow many <code>externref</code>s are in this function’s returns?\nSize in bytes of the offset-guard pages following the heap.\nGet the opcodes that make up this const expression.\nGet the size of this memory’s pages, in bytes.\nThe log2 of this memory’s page size.\nThe log2 of this memory’s page size, in bytes.\nDoes the given parameter require inclusion in stack maps?\nFunction params types.\nGet the size of a native pointer, in bytes.\nGet the size of a native pointer, in bytes.\nGet the Cranelift integer type to use for native pointers.\nGet the Cranelift integer type to use for native pointers.\nRust module prelude for Wasmtime crates.\nReturn a CLIF value containing a native pointer to the …\nWhether to add proof-carrying-code facts to verify memory …\nIs this ConstExpr a provably nonzero integer value?\nTrue if the current translation state expresses reachable …\nGet the Cranelift reference type to use for the given Wasm …\nWhether or not to force relaxed simd instructions to have …\nWhether or not to force relaxed simd instructions to have …\nProvides the number of data initializers up front. By …\nProvides the number of data initializers up front. By …\nProvides the number of exports up front. By default this …\nProvides the number of exports up front. By default this …\nProvides the number of defined functions up front. By …\nProvides the number of defined functions up front. By …\nIndicates how many functions the code section reports and …\nIndicates how many functions the code section reports and …\nProvides the number of defined globals up front. By …\nProvides the number of defined globals up front. By …\nProvides the number of imports up front. By default this …\nProvides the number of imports up front. By default this …\nProvides the number of defined memories up front. By …\nProvides the number of defined memories up front. By …\nProvides the number of passive data segments up front.\nProvides the number of passive data segments up front.\nProvides the number of element initializers up front. By …\nProvides the number of element initializers up front. By …\nProvides the number of defined tables up front. By default …\nProvides the number of defined tables up front. By default …\nProvides the number of defined tags up front. By default …\nProvides the number of defined tags up front. By default …\nProvides the number of types up front. By default this …\nProvides the number of types up front. By default this …\nReturns params types.\nEffectively calls seal_block on all unsealed blocks in the …\nDeclares that all the predecessors of this block are known.\nMark a block as “cold”.\nSet the source location that should be assigned to all new …\nSet label for <code>Value</code>\nWhether the memory may be shared between multiple threads.\nDoes the given result require inclusion in stack maps?\nRetrieves the signature with reference <code>sigref</code> previously …\nHeap style, with additional style-specific info.\nThis type’s supertype, if any.\nAfter the call to this function, new instructions will be …\nGet the information needed to produce Cranelift IR for the …\nGet this type’s top type.\nVisit each edge.\nTrace all <code>VMSharedTypeIndex</code> edges, ignoring other edges.\nVisit each edge, mutably.\nGet the version of this function type that is suitable for …\nTranslate an <code>atomic.notify</code> WebAssembly instruction. The …\nTranslate an <code>i32.atomic.wait</code> or <code>i64.atomic.wait</code> …\nTranslate a binary WebAssembly function from a <code>FunctionBody</code>…\nTranslate a <code>call</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>call</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>call_indirect</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>call_ref</code> WebAssembly instruction at the builder…\nTranslate a <code>global.get</code> WebAssembly instruction at <code>pos</code> for …\nTranslate a <code>global.set</code> WebAssembly instruction at <code>pos</code> for …\nTranslate a <code>data.drop</code> WebAssembly instruction.\nTranslate a <code>elem.drop</code> WebAssembly instruction.\nSign-extend an <code>i31ref</code> into an <code>i32</code>.\nZero-extend an <code>i31ref</code> into an <code>i32</code>.\nEmit code at the beginning of every wasm loop.\nEmit code at the beginning of every wasm loop.\nTranslate a <code>memory.copy</code> WebAssembly instruction.\nTranslate a <code>memory.fill</code> WebAssembly instruction.\nTranslate a <code>memory.grow</code> WebAssembly instruction.\nTranslate a <code>memory.init</code> WebAssembly instruction.\nTranslates a <code>memory.size</code> WebAssembly instruction.\nTranslate a sequence of bytes forming a valid Wasm binary …\nTranslate a <code>ref.func</code> WebAssembly instruction.\nTranslate an <code>i32</code> value into an <code>i31ref</code>.\nTranslate a <code>ref.is_null</code> WebAssembly instruction.\nTranslate a <code>ref.null T</code> WebAssembly instruction.\nTranslate a <code>return_call</code> WebAssembly instruction at the …\nTranslate a <code>return_call</code> WebAssembly instruction at the …\nTranslate a <code>return_call_indirect</code> WebAssembly instruction …\nTranslate a <code>return_call_ref</code> WebAssembly instruction at the …\nTranslate a <code>table.copy</code> WebAssembly instruction.\nTranslate a <code>table.fill</code> WebAssembly instruction.\nTranslate a <code>table.get</code> WebAssembly instruction.\nTranslate a <code>table.grow</code> WebAssembly instruction.\nTranslate a <code>table.init</code> WebAssembly instruction.\nTranslate a <code>table.set</code> WebAssembly instruction.\nTranslate a <code>table.size</code> WebAssembly instruction.\nDeclares the type of a variable.\nRegisters a new definition of a user variable. This …\nReturns the Cranelift IR necessary to use a previously …\nThe event signature type.\nTranslates a type index to its signature index, only …\nTranslates a type index to its signature index, only …\nThe types inside of this recgroup.\nGet the underlying engine-level type index, or panic.\nAssert that this entity is a function\nAssert that this entity is a global\nAssert that this entity is a memory\nGet the underlying module-level type index, or panic.\nGet the underlying module-level type index, or panic.\nAssert that this entity is a table\nAssert that this entity is a tag\nInserts code before updating a global.\nInserts code before updating a global.\nReturns the Cranelift IR value corresponding to the …\nReturns whether the CLIF <code>x86_blendv</code> instruction should be …\nReturns whether the CLIF <code>x86_blendv</code> instruction should be …\nReturns whether the CLIF <code>x86_pmaddubsw</code> instruction should …\nReturns whether the CLIF <code>x86_pmaddubsw</code> instruction should …\nReturns whether the CLIF <code>x86_pmulhrsw</code> instruction should …\nReturns whether the CLIF <code>x86_pmulhrsw</code> instruction should …\nReturns whether the CLIF <code>x86_pshufb</code> instruction should be …\nReturns whether the CLIF <code>x86_pshufb</code> instruction should be …\nReturns the list of enabled wasm features this translation …\nReturns the list of enabled wasm features this translation …\nThe Wasm type of the value stored in the global.\nThe table elements’ Wasm type.\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nThe address of the global variable storage.\nAn offset to add to the address.\nThe global variable’s type.\nHeap bound in bytes. The offset-guard pages are allocated …\nGlobal value providing the current bound of the heap in …\nNon-resizable tables have a constant size known at compile …\nResizable tables declare a Cranelift global value to load …\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nA pointer type that uniquely owns a heap allocation of …\nConvenience trait for converting <code>Result&lt;T, E&gt;</code> into …\nA hash table where the iteration order of the key-value …\nA default set of values.\nConvenience trait to convert a value into <code>anyhow::Error</code>\nThe resulting type after obtaining ownership.\nA UTF-8–encoded, growable string.\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw mutable pointer to the vector’s buffer, or …\nExtracts a mutable slice of the entire vector.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nExtracts a string slice containing the entire <code>String</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nReturns the total number of elements the vector can hold …\nReturns this <code>String</code>’s capacity, in bytes.\nClears the vector, removing all values.\nTruncates this <code>String</code>, removing all contents.\nClears the <code>IndexMap</code>, removing all elements.\nClears the <code>IndexSet</code>, removing all elements.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nOverwrites the contents of <code>self</code> with a clone of the …\nClones the contents of <code>source</code> into <code>self</code>.\nUses borrowed data to replace owned data, usually by …\nReturns true if the <code>IndexSet</code> contains an element equal to …\nReturns true if <code>key</code> is contains in the <code>IndexMap</code>.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty <code>String</code>.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nRemoves the subslice indicated by the given range from the …\nRemoves the specified range from the string in bulk, …\nGets the given key’s corresponding entry in the <code>IndexMap</code> …\nConvert <code>self</code> to <code>anyhow::Result&lt;T&gt;</code>.\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCopies elements from <code>src</code> range to the end of the string.\nCreates an iterator which uses a closure to determine if …\nCreates a <code>String</code> using interpolation of runtime …\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nCreates a boxed <code>Path</code> from a reference.\nConverts a vector into a boxed slice.\nCreates a boxed <code>Path</code> from a reference.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nReturns the argument unchanged.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a boxed slice into a vector by transferring …\nConverts a clone-on-write slice into a vector.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nAllocates an owned <code>String</code> from a single character.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nConverts a clone-on-write string to an owned instance of …\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nReturns the argument unchanged.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a new <code>String</code> from a pointer, a length and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nDecode a native endian UTF-16–encoded vector <code>v</code> into a …\nDecode a native endian UTF-16–encoded slice <code>v</code> into a …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nReturns a reference to the value corresponding to the <code>key</code>.\nReturns a reference to the element in the <code>IndexSet</code>, if …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value entry at the given <code>index</code> if any.\nReturns the mutable key-value entry at the given <code>index</code> if …\nReturn the index of the item provided, if it exists.\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturns a mutable reference to the value corresponding to …\nInserts an element at position <code>index</code> within the vector, …\nInserts a character into this <code>String</code> at a byte position.\nInserts a key-value pair into the <code>IndexMap</code>.\nAdds <code>value</code> to the <code>IndexSet</code>.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an <code>anyhow::Error</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nConverts a <code>String</code> into an iterator over the <code>char</code>s of the …\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates a consuming iterator, that is, one that moves each …\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>String</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nReturns <code>true</code> if the <code>IndexMap</code> contains no elements.\nReturns <code>true</code> if the <code>IndexSet</code> contains no elements.\nReturns <code>true</code> if the <code>IndexSet</code> is a subset of another, i.e., …\nReturns <code>true</code> if the <code>IndexSet</code> is a superset of another, …\nReturns an iterator that yields the items in the <code>IndexMap</code>.\nReturns an iterator that yields the items in the <code>IndexSet</code>.\nReturns an iterator that yields the mutable items in the …\nReturns an iterator that yields the keys in the <code>IndexMap</code>.\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the vector, also …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nReturns the number of elements in the <code>IndexMap</code>.\nReturns the number of elements in the <code>IndexSet</code>.\nAllocates memory on the heap and then places <code>x</code> into it.\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nCreates a new empty <code>String</code>.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nRemoves and returns the last element from a vector if the …\nAppends an element to the back of a collection.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nAdds a value to the <code>IndexSet</code>, replacing the existing …\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nReserves the minimum capacity for at least <code>additional</code> …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of this <code>String</code> to match its length.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nSplits the string into two at the given byte index.\nRemoves an element from the vector and returns it.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove the value from the <code>IndexSet</code>, and return <code>true</code> if it …\nRemove and return the key-value pair equivalent to <code>key</code>.\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>String</code> to the specified length.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nConverts a <code>CString</code> into a <code>String</code> if it contains valid …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nReturns an iterator that yields the values in the <code>IndexMap</code>.\nReturns a mutable iterator that yields the values in the …\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nCreates an empty <code>vec::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep unyielded elements in the source <code>Vec</code>.\nThis symbol represents an absolute address.\nA non-nullable reference to any object aka <code>(ref any)</code>.\nA nullable reference to any object aka <code>(ref null any)</code> aka …\nA non-nullable reference to an array aka <code>(ref array)</code>.\nA nullable reference to an array aka <code>(ref null array)</code> aka …\nAn abstract heap type; e.g., <code>anyref</code>.\nAn abstract heap type.\nFor a load, it acquires; this orders all operations before …\nThe data segment is active.\nThe element segment is active.\nRelocation entry includes a 32-bit addend.\nRelocation entry includes a 64-bit addend.\nThe component type declaration is for an alias.\nThe instance type declaration is for an alias.\nEquivalent of <code>catch_all</code>\nEquivalent of <code>catch_all_ref</code>\nThe abstract <code>any</code> heap type.\nThe type is for an array.\nThe abstract <code>array</code> heap type.\nRepresents a type of an array in a WebAssembly module.\nThis is a local symbol (this is exclusive with […\nThis is a weak symbol.\nThe WebAssembly bulk memory operations proposal. Defaults …\nA binary reader of the WebAssembly structures and types.\nA binary reader for WebAssembly modules.\nA Wasm <code>block</code> control block.\nRepresents a block type.\nThe type is a boolean.\nA borrowed handle to a resource.\nA br_table entries representation.\nA hint for a single branch.\nBranch hints for a single function.\nA reader for the <code>metadata.code.branch_hint</code> custom section.\nThe WebAssembly component model proposal. Defaults to <code>true</code>.\nSupport for more than 32 flags per-type in the component …\nSupport for multiple return values in a component model …\nSupport for the nested namespaces and projects in …\nSupport for the <code>value</code> type in the component model proposal.\nThe WebAssembly custom-page-sizes proposal. Defaults to …\nRepresents a canonical function in a WebAssembly component.\nRepresents options for component functions.\nCatch clauses that can be specified in <code>TryTable</code>.\nThe type is a Unicode character.\nA successful return payload from <code>Parser::parse</code>.\nAn entry of the code section, a function, was parsed from …\nA reader for the code section of a WebAssembly module.\nIndicator of the start of the code section of a …\nRepresents COMDAT data in the linking custom section.\nThe COMDAT groups of associated linking objects.\nRepresents a reader for COMDAT data from the linking …\nRepresents a symbol that is part of a comdat.\nRepresents a symbol kind.\nThe string types in the function signature are compact …\nThe encoding format is a WebAssembly component.\nThe alias is to a component.\nThe external kind is a component.\nThe reference is to a component type.\nThe type is a component type.\nRepresents an alias in a WebAssembly component.\nA component alias section was received and the provided …\nSection reader for the component alias section\nA component canonical section was received and the …\nA reader for the canonical section of a WebAssembly …\nRepresents a defined type in a WebAssembly component.\nRepresents an export in a WebAssembly component.\nRepresents the name of a component export.\nA component export section was received, and the provided …\nA reader for the export section of a WebAssembly component.\nRepresents the kind of an external items of a WebAssembly …\nRepresents the result type of a component function.\nRepresents a type of a function in a WebAssembly component.\nRepresents an import in a WebAssembly component\nRepresents the name of a component import.\nA component import section was received and the provided …\nA reader for the import section of a WebAssembly component.\nRepresents an instance in a WebAssembly component.\nA component instance section was received and the provided …\nA reader for the component instance section of a …\nRepresents an argument to instantiating a WebAssembly …\nRepresents a name read from the names custom section.\nType used to iterate and parse the contents of the …\nRepresents the kind of an outer alias in a WebAssembly …\nA component section from a WebAssembly component was …\nRepresents the start function in a WebAssembly component.\nA component start section was received.\nRepresents a type in a WebAssembly component.\nRepresents part of a component type declaration in a …\nRepresents a reference to a component type.\nA component type section was received and the provided …\nA reader for the type section of a WebAssembly component.\nRepresents a value type in a WebAssembly component.\nA <code>CompositeType</code> can contain one of these types.\nRepresents a composite type in a WebAssembly module.\nA concrete, user-defined type.\nRepresents an initialization expression.\nA single instance from a coredump instances section\nA custom section representing the instances involved in a …\nThe data portion of a “coremodules” custom section. …\nThe data portion of a custom section representing a core …\nA single stack frame from a core dump\nThe data portion of a custom section representing a core …\nLocal and stack values are encoded using one byte for the …\nThe alias is to an export of a module instance.\nThe alias is to a core module.\nRepresents a core type in a WebAssembly component.\nThe alias is to a core type.\nThe component type declaration is for a core type.\nThe component type declaration is for a core type.\nA core type section was received and the provided parser …\nA reader for the core type section of a WebAssembly …\nA module or component custom section was received.\nA reader for custom sections of a WebAssembly module.\nRepresents a data segment in a core WebAssembly module.\nThe symbol is a data segment.\nThe symbol is a data symbol.\nThe name is for the data segments.\nA module data count section was received.\nThe kind of data segment.\nA module data section was received and the provided reader …\nA reader for the data section of a WebAssembly module.\nThe element segment is declared.\nThe type is a component defined type.\nRepresents the metadata about a data symbol defined in the …\nParser for the dynamic linking <code>dylink.0</code> custom section.\nPossible subsections of the <code>dylink.0</code> custom section.\nA non-nullable reference to an eq object aka <code>(ref eq)</code>.\nA nullable reference to an eq object aka <code>(ref null eq)</code> aka …\nThe WebAssembly exception handling proposal. Defaults to …\nA non-nullable reference to an exn object aka <code>(ref exn)</code>.\nAlias for the wasm <code>exnref</code> type.\nA nullable reference to an exception object aka …\nThis symbol uses an explicit symbol name, rather than …\nThis symbol is intended to be exported from the wasm …\nThe WebAssembly extended_const proposal. Defaults to <code>true</code>.\nA non-nullable reference to an extern object aka …\nAlias for an unshared <code>extern</code> heap type.\nAlias for the wasm <code>externref</code> type.\nA nullable reference to an extern object aka …\nRepresents a core WebAssembly element segment.\nThe name is for the element segments.\nRepresents the items of an element segment.\nThe kind of element segment.\nA module element section was received and the provided …\nA reader for the element section of a WebAssembly module.\nA Wasm <code>else</code> control block.\nThe block produces consumes nor produces any values.\nThe supported encoding formats for the parser.\nThe end of the WebAssembly module or component was reached.\nThe end payload was validated and the types known to the …\nThe type is an enum with the given tags.\nThe type is bounded by equality.\nThe abstract <code>eq</code> heap type.\nContains the error value\nThe symbol is an event.\nThe symbol is an event.\nAn event index encoded as a 5-byte varuint32. Used for the …\nThe tag is an exception type.\nThe abstraction <code>exception</code> heap type.\nRepresents an export in a WebAssembly module.\nThe module type definition is for an export.\nThe component type declaration is for an export.\nThe instance type declaration is for an export.\nA module export section was received, and the provided …\nA reader for the export section of a WebAssembly module.\nEach element in the table is initialized with the …\nThis element contains constant expressions used to …\nThe abstract, external heap type.\nExternal types as defined here.\nThe type is a 32-bit floating point number with only one …\nAn f32 value\nThe value type is f32.\nThe type is a 64-bit floating point number with only one …\nAn f64 value\nThe value type is f64.\nWhether or not floating-point instructions are enabled.\nA non-nullable untyped function reference aka <code>(ref func)</code>.\nAlias for an unshared <code>func</code> heap type.\nAlias for the wasm <code>funcref</code> type.\nA nullable untyped function reference aka <code>(ref null func)</code> …\nThe WebAssembly typed function references proposal. …\nThe name is for fields.\nRepresents a field type of an array or a struct.\nThe type is flags with the given names.\nA Wasm control flow block on the control flow stack during …\nThe kind of a control flow <code>Frame</code>.\nThe instance is a from exporting local items.\nThe instance is a from exporting local items.\nA trait implemented for items that can be decoded directly …\nA function was found to be validate.\nThe external kind is a function.\nThe reference is to a function type.\nThe type is a function type.\nThe external kind is a function.\nThe type is a function.\nThe symbol is a function.\nThe symbol is a function.\nThe type is for a function.\nThe abstract, untyped (any) function.\nResources necessary to perform validation of a function.\nRepresents a type of a function in a WebAssembly module.\nThe block is described by a function type.\nValidation context for a WebAssembly function.\nExternal handle to the internal allocations used during …\nThe name is for the functions.\nRepresents a WebAssembly function body.\nA function index encoded as a uint32. Used in custom …\nA function index encoded as a 5-byte varuint32. Used for …\nA byte offset within code section for the specific …\nThe 64-bit counterpart of <code>FunctionOffsetI32</code>. A byte offset …\nA module function section was received and the provided …\nA reader for the function section of a WebAssembly module.\nThis element contains function indices.\nThe WebAssembly gc proposal. Defaults to <code>true</code>.\nWhether or not gc types are enabled.\nRepresents a core WebAssembly global.\nThe external kind is a global.\nThe type is a global.\nThe symbol is a global.\nThe symbol is a global.\nThe name is for the globals.\nA global index encoded as uint32. (since LLVM 11.0)\nA global index encoded as a 5-byte varuint32, e.g. the …\nA module global section was received and the provided …\nA reader for the global section of a WebAssembly module.\nRepresents a global’s type.\nA heap type.\nThe storage type is i16.\nThe abstract <code>i31</code> heap type.\nA non-nullable reference to an i31 object aka <code>(ref i31)</code>.\nA nullable reference to an i31 object aka <code>(ref null i31)</code> …\nAn i32 value\nThe value type is i32.\nAn i64 value\nThe value type is i64.\nThe storage type is i8.\nA type identifier.\nAn IEEE binary32 immediate floating point value, …\nAn IEEE binary64 immediate floating point value, …\nA Wasm <code>if</code> control block.\nRepresents an import in a WebAssembly module.\nThe module type definition is for an import.\nThe component type declaration is for an import.\nA module import section was received and the provided …\nA reader for the import section of a WebAssembly module.\nRepresents a reader for indirect names from the names …\nRepresents an indirect name in the names custom section.\nRepresents an init function in the linking custom section.\nRepresents a reader for init functions from the linking …\nA list of constructor functions to be called at startup.\nRepresents an instance of a WebAssembly module.\nThe external kind is an instance.\nThe reference is to an instance type.\nThe instantiation argument is a core instance.\nThe type is an instance type.\nThe alias is to an export of a component instance.\nA core instance section was received and the provided …\nA reader for the core instance section of a WebAssembly …\nRepresents an instance type declaration in a WebAssembly …\nThe instance is from instantiating a WebAssembly module.\nThe instance is from instantiating a WebAssembly component.\nRepresents an argument to instantiating a WebAssembly …\nRepresents the kind of an instantiation argument for a …\nReturn value of <code>CustomSectionReader::as_known</code>.\nThe WebAssembly legacy exception handling proposal (phase …\nThe name is for the function labels.\nA Wasm legacy <code>catch</code> control block.\nA Wasm legacy <code>catch_all</code> control block.\nA Wasm legacy <code>try</code> control block.\nThe function lifts a core WebAssembly function to the …\nRepresents a subsection read from the linking custom …\nA reader for the <code>linking</code> custom section of a WebAssembly …\nThe type is a list of the given value type.\nThe name is for the function locals.\nAn iterator over locals in a function body.\nA reader for a function body’s locals.\nA Wasm <code>loop</code> control block.\nThe function lowers a canonical ABI function to a core …\nThe WebAssembly memory64 proposal. Defaults to <code>false</code>.\nThe WebAssembly memory control proposal. Defaults to <code>false</code>.\nThe WebAssembly multi memory proposal. Defaults to <code>true</code>.\nThe WebAssembly multi-value proposal. Defaults to <code>true</code>.\nThe WebAssembly <code>mutable-global</code> proposal. Defaults to <code>true</code>.\nRepresents a memory immediate in a WebAssembly memory …\nRepresents a <code>WASM_DYLINK_MEM_INFO</code> field\nThe memory to use if the lifting or lowering of a function …\nThe external kind is a memory.\nThe type is a memory.\nThe name is for the memories.\nA linear memory index encoded as a uint32, e.g. taking the …\nThe 64-bit counterpart of <code>MemoryAddrI32</code>. A 64-bit linear …\nA linear memory index encoded as a 5-byte varuint32. Used …\nThe 64-bit counterpart of <code>MemoryAddrLeb</code>. A 64-bit linear …\nA byte offset between the relocating address and a linear …\nA memory address relative to the __memory_base wasm …\nThe 64-bit counterpart of <code>MemoryAddrRelSleb</code>.\nA linear memory index encoded as a 5-byte varint32. Used …\nThe 64-bit counterpart of <code>MemoryAddrSleb</code>. A 64-bit linear …\nAn offset from the __tls_base symbol encoded as a 5-byte …\nThe 64-bit counterpart of <code>MemoryAddrTlsSleb</code>. (in LLVM 13.0)\nA module memory section was received and the provided …\nA reader for the memory section of a WebAssembly module.\nRepresents a memory’s type.\nA missing value (usually missing because it was optimized …\nThe encoding format is a WebAssembly module.\nThe external kind is a core module.\nThe reference is to a core module type.\nThe type is for a core module.\nThe name is for the module.\nAn index into a Wasm module’s types space.\nA core module section was received and the provided parser …\nRepresents a module type declaration in a WebAssembly …\nA non-nullable reference to a noexn object aka <code>(ref noexn)</code>.\nA non-nullable reference to a noextern object aka …\nA non-nullable reference to a nofunc object aka …\nA non-nullable reference to no object aka <code>(ref none)</code>.\nThis symbol is intended to be included in the linker …\nA nullable reference to a noexn object aka <code>(ref null noexn)</code>…\nA nullable reference to a noextern object aka …\nA nullable reference to a nofunc object aka …\nA nullable reference to no object aka <code>(ref null none)</code> aka …\nRepresents a name read from the names custom section.\nRepresents a name map from the names custom section.\nA reader for the name custom section of a WebAssembly …\nThe function returns zero or more named types.\nRepresents a name for an index from the names section.\nThis can be returned at any time and indicates that more …\nThe abstract <code>noexn</code> heap type.\nThe abstract <code>noextern</code> heap type.\nThe abstract <code>nofunc</code> heap type.\nRelocation entry does not include an addend.\nThe abstract <code>none</code> heap type.\nContains the success value\nThe payload validated, no further action need be taken.\nEquivalent of <code>catch</code>\nEquivalent of <code>catch_ref</code>\nInstructions as defined here.\nAn iterator over a function’s operators.\nAn iterator over a function’s operators with offsets.\nA reader for a core WebAssembly function’s operators.\nThe type is an option of the given value type.\nRepresents the memory ordering for atomic instructions.\nThe alias is to an outer item.\nThe module type declaration is for an outer alias.\nRepresents the kind of an outer core alias in a …\nThe result type of the visitor.\nAn owned handle to a resource.\nA packed representation of a type index.\nA chunk was successfully parsed.\nAn incremental parser of a binary WebAssembly module or …\nThe payload validated, but it started a nested module or …\nThe data segment is passive.\nThe element segment is passive.\nValues that can be parsed from a WebAssembly module or …\nThe post-return function to use if the lifting of a …\nThe value type is a primitive type.\nThe type is one of the primitive value types.\nRepresents a primitive value type.\nA field from the producers custom section.\nRepresents a field value in the producers custom section.\nA reader for the producers custom section of a WebAssembly …\nThe WebAssembly reference types proposal. Defaults to <code>true</code>.\nThe WebAssembly Relaxed SIMD proposal. Defaults to <code>true</code>.\nThe realloc function to use if the lifting or lowering of …\nRepresents a recursive type group in a WebAssembly module.\nAn index into the containing recursion group’s elements.\nThe type is a record with the given fields.\nThe value type is a reference.\nThe table is initialized to all null elements.\nA reference type.\nIndicates the kind of addend that applies to a relocation …\nReader for reloc.* sections as defined by …\nSingle relocation entry within a <code>reloc.*</code> section, as …\nReader for relocation entries within a <code>reloc.*</code> section.\nRelocation entry type. Each entry type corresponds to one …\nThe type is a fresh new resource type.\nA function which is used to drop resource handles of the …\nA function which creates a new owned handle to a resource.\nA function which returns the underlying i32-based …\nThe result for <code>BinaryReader</code> operations.\nThe type is a result type.\nThe type is a signed 16-bit integer.\nThe type is a signed 32-bit integer.\nThe type is a signed 64-bit integer.\nThe type is a signed 8-bit integer.\nThe WebAssembly <code>saturating-float-to-int</code> proposal. Defaults …\nThe WebAssembly shared-everything-threads proposal; …\nThe WebAssembly <code>sign-extension-ops</code> proposal. Defaults to …\nThe WebAssembly SIMD proposal. Defaults to <code>true</code>.\nThe segment contains only null-terminated strings, which …\nA non-nullable reference to a struct aka <code>(ref struct)</code>.\nA nullable reference to a struct aka <code>(ref null struct)</code> aka …\nThe symbol is a section.\nThe symbol is a section.\nA generic structure for reading a section of a WebAssembly …\nA consuming iterator of a <code>SectionLimited</code>.\nAn iterator over a limited section iterator.\nA byte offset from start of the specified section encoded …\nRepresents extra metadata about the data segments.\nFlags for WebAssembly segments.\nExtra metadata about the data segments.\nRepresents a reader for segments from the linking custom …\nLike <code>AcqRel</code> but all threads see all sequentially …\nA module start section was received.\nRepresents storage types introduced in the GC spec for …\nThe type is a string.\nThe type is for a struct.\nThe abstract <code>struct</code> heap type.\nRepresents a type of a struct in a WebAssembly module.\nThe type is for a core subtype.\nA fresh resource type,\nRepresents a subtype of possible other types in a …\nA trait implemented for subsections of another outer …\nIterator/reader over the contents of a section which is …\nFlags for WebAssembly symbols.\nRepresents extra information about symbols in the linking …\nRepresents a reader for symbol info from the linking …\nExtra information about the symbols present in the module.\nThe WebAssembly tail-call proposal. Defaults to <code>true</code>.\nThe WebAssembly threads proposal. Defaults to <code>true</code>.\nThis symbol resides in thread local storage.\nThe segment contains thread-local data.\nType information about a table defined in the table …\nThe external kind if a table.\nThe type is a table.\nThe symbol is a table.\nThe symbol is a table.\nThe name is for the tables.\nA function table index encoded as a uint32, e.g. taking …\nThe 64-bit counterpart of <code>TableIndexI32</code>. A function table …\nA function address (table index) relative to the __…\nThe 64-bit counterpart of <code>TableIndexRelSleb</code>. A function …\nA function table index encoded as a 5-byte varint32. Used …\nThe 64-bit counterpart of <code>TableIndexSleb</code>. A function table …\nDifferent modes of initializing a table.\nA table number encoded as a 5-byte varuint32. Used for the …\nA module table section was received and the provided …\nA reader for the table section of a WebAssembly module.\nRepresents a table’s type.\nThe external kind is a tag.\nThe type is a tag.\nThe name is for tags.\nRepresents a tag kind.\nA module tag section was received, and the provided reader …\nA reader for the tags section of a WebAssembly module.\nA tag’s type.\nA <code>try_table</code> entries representation.\nA Wasm <code>try</code> control block.\nThe type is a tuple of the given value types.\nThe alias is to a component type.\nThe external kind is a type.\nThe reference is to a bounded type.\nThe alias is to a core type.\nThe module type definition is for a type.\nThe value type is a reference to a defined type.\nThe component type declaration is for a type.\nThe instance type declaration is for a type.\nThe name is for the types.\nThe block produces a singular value of the given type ([] …\nRepresents the type bounds for imports and exports.\nA type index encoded as a 5-byte varuint32, e.g. the type …\nRepresents a reference to a type definition in a …\nA module type section was received and the provided reader …\nA reader for the type section of a WebAssembly module.\nThe type is an unsigned 16-bit integer.\nThe type is an unsigned 32-bit integer.\nThe type is an unsigned 64-bit integer.\nThe type is an unsigned 8-bit integer.\nThis symbol is not defined.\nThe string types in the function signature are UTF-16 …\nThe string types in the function signature are UTF-8 …\nAn unknown name subsection.\nAn unknown linking subsection.\nAn unknown name subsection.\nAn unknown section was found.\nThe function returns a singular, unnamed type.\nThe uncompressed form of a <code>PackedIndex</code>.\nRepresents a 128-bit vector value.\nThe value type is v128.\nThis is a hidden symbol.\nThe storage type is a value type.\nRepresents the types of values in a WebAssembly module.\nPossible return values from <code>Validator::payload</code>.\nValidator for a WebAssembly binary module or component.\nA unique identifier for a particular <code>Validator</code>.\nThe implementation of <code>WasmModuleResources</code> used by <code>Validator</code>…\nThe external kind is a value.\nThe reference is to a value type.\nThe type is a variant with the given cases.\nRepresents a case in a variant type.\nIndicates the header of a WebAssembly module or component.\nTrait implemented by types that can visit all <code>Operator</code> …\nThe feature set associated with the 1.0 version of the …\nThe feature set associated with the 2.0 version of the …\nThe feature set associated with the 3.0 version of the …\nFlags for features that are enabled for validation.\nInflated version of <code>WasmFeatures</code> that allows for …\nTypes that qualify as Wasm validation database.\nAddend to add to the address, or <code>0</code> if not applicable. The …\nIndicates if this relocation type has an associated …\nAlignment, stored as <code>n</code> where the actual alignment is <code>2^n</code>\nThe required alignment of the segment, encoded as a power …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe start function arguments.\nReturns the body of this function as a list of bytes.\nGet the underlying <code>CoreTypeId</code>, if any.\nGet the underlying <code>CoreTypeId</code>, if any.\nAttempts to match and see if this custom section is …\nGet the underlying index into a module’s types space, if …\nGet the underlying index into a module’s types space, if …\nGet the non-nullable version of this ref type.\nGet the underlying index into the containing recursion …\nGet the underlying index into the containing recursion …\nGet the underlying reference type, if any.\nIf this <code>Payload</code> represents a section in the original wasm …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGets the underlying bits of the 32-bit float.\nGets the underlying bits of the 64-bit float.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe type signature of this frame, represented as a …\nReturns whether this feature is enabled in this feature …\nThe WebAssembly bulk memory operations proposal. Defaults …\nGets the bytes of the vector value.\nReturns the number of bytes remaining in the <code>BinaryReader</code>.\nOuter blocks which will receive exceptions.\nChecks that a <code>HeapType</code> is valid and then additionally …\nCheck and canonicalize a reference type.\nCheck and canonicalize a value type.\nValidates <code>Payload::CodeSectionEntry</code>.\nValidates <code>Payload::CodeSectionStart</code>.\nThe instruction’s offset relative to the function’s …\nType definitions for maps and sets used by the <code>wasmparser</code> …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nValidates <code>Payload::ComponentAliasSection</code>.\nValidates <code>Payload::ComponentCanonicalSection</code>.\nValidates <code>Payload::ComponentExportSection</code>.\nValidates <code>Payload::ComponentImportSection</code>.\nValidates <code>Payload::ComponentInstanceSection</code>.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly component model proposal. Defaults to <code>true</code>.\nReturns whether this feature is enabled in this feature …\nSupport for more than 32 flags per-type in the component …\nReturns whether this feature is enabled in this feature …\nSupport for multiple return values in a component model …\nReturns whether this feature is enabled in this feature …\nSupport for the nested namespaces and projects in …\nReturns whether this feature is enabled in this feature …\nSupport for the <code>value</code> type in the component model proposal.\nValidates <code>Payload::ComponentSection</code>.\nValidates <code>Payload::ComponentStartSection</code>.\nValidates <code>Payload::ComponentTypeSection</code>.\nThe composite type of the subtype.\nCreate a reference to a concrete Wasm-defined type at the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe global’s type.\nReturns the number of frames on the control flow stack.\nValidates <code>Payload::CoreTypeSection</code>.\nReturns the count of total items within this section.\nReturns the <code>BinaryReader</code>’s current position.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly custom-page-sizes proposal. Defaults to …\nThe actual contents of the custom section.\nThe data of the data segment.\nReturns the number of bytes in the Wasm data section.\nValidates <code>Payload::DataCountSection</code>.\nThe offset, relative to the start of the original module …\nValidates <code>Payload::DataSection</code>.\nReturns the default target of this <code>br_table</code> instruction.\nDefines locals into this validator.\nReturns a simple string description of this kind.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCompute the type difference between the two given ref …\nReturns the number of elements.\nValidates <code>Payload::ElementSection</code>.\nArray element type.\nThe table’s element type.\nReturns the element type at the given index.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nValidates <code>Payload::End</code>.\nEnsures the reader is at the end.\nThe relocation entries.\nReturns whether the <code>BinaryReader</code> has reached the end of …\nDetermines if the reader is at the end of the operators.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly exception handling proposal. Defaults to …\nValidates <code>Payload::ExportSection</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly extended_const proposal. Defaults to <code>true</code>.\nIndicates the number of bytes that this relocation type …\nReturns the currently active set of wasm features that …\nReturns the currently active set of wasm features that …\nReturns the wasm features used for this validator.\nThe Wasm features enabled to validate the function.\nStruct fields.\nFunction that must be called after the last opcode has …\nThe flags for the segment.\nThe flags.\nReturns whether this feature is enabled in this feature …\nWhether or not floating-point instructions are enabled.\nA helper macro to conveniently iterate over all opcodes …\nThe stack frames for the core dump\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConstruct a <code>PackedIndex</code> from the given <code>CoreTypeId</code>.\nConstruct a bit-packed <code>WasmFeatures</code> from the inflated …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConstruct a <code>PackedIndex</code> from an index into a module’s …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAttempts to read <code>Self</code> from the provided binary reader, …\nConverts the section identifier provided with the section …\nConstruct a <code>PackedIndex</code> from an index into the index’s …\nThe function that these branch hints apply to.\nThe index to the start function.\nThe byte offset, from the start of the function’s body, …\nThe function type this tag uses.\nThe function index in the module\nReturns whether this feature is enabled in this feature …\nThe WebAssembly typed function references proposal. …\nValidates <code>Payload::FunctionSection</code>.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly gc proposal. Defaults to <code>true</code>.\nReturns whether this feature is enabled in this feature …\nWhether or not gc types are enabled.\nGets a binary reader for this function body.\nGets a binary reader for the initialization expression.\nGets a binary reader from this operators reader.\nReturns a shared reference to the control flow <code>Frame</code> of the\nGets the count of locals in the function body.\nReturns the type of the local variable at the given <code>index</code> …\nGets the locals reader for this function body.\nReturns the optional value type of the value operand at …\nGets the operators reader for this function body.\nGets an operators reader for the initialization expression.\nReturns the global variable at given index.\nValidates <code>Payload::GlobalSection</code>.\nWhich of the coredump’s globals are this instance’s …\nGet the heap type that this is a reference to.\nThe index, below which, this frame cannot modify the …\nThe branch hints available for this function.\nGets a signed 128-bit integer value from the vector’s …\nGet this validator’s unique identifier.\nValidates <code>Payload::ImportSection</code>.\nThe index of the function within the module’s function …\nThe index of the exported item.\nThe index of the argument item.\nThe index of the argument item.\nThe index of the exported item.\nThe index of the symbol. Must not be an import.\nThe index of the data segment.\nThe index being named.\nThe indirect index of the name.\nIndex in the symbol table contained in the linking section …\nThe core Wasm function index being validated.\nGets the index type for the table.\nGets the index type for the memory.\nInflate these bit-packed features into a struct with a …\nThe initialization expression for the table.\nThe global’s initialization expression.\nThe number of initializations in the stack at the time of …\nInitial size of this table, in elements.\nInitial size of this memory, in wasm pages.\nThe type defined inside the composite type.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nValidates <code>Payload::InstanceSection</code>.\nThe instance that this stack frame belongs to.\nThe instances for the coredump\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this validator and returns the underlying …\nReads content of the code section.\nReturns an iterator over this type section which will only …\nReturns an iterator which yields not only each item in …\nConverts to an iterator of operators paired with offsets.\nReturns an owning iterator of all subtypes in this …\nReturns an owning iterator of all subtypes in this …\nConverts this <code>FuncToValidate</code> into a <code>FuncValidator</code> using the\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nIs this the abstract untyped array reference type aka …\nIs this index in canonical form?\nIs this index in canonical form?\nTests whether <code>bytes</code> looks like a WebAssembly component.\nIs this a reference to an concrete type?\nTests whether <code>bytes</code> looks like a core WebAssembly module.\nWhether the type is defaultable, i.e. it is not a …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns whether <code>BrTable</code> doesn’t have any labels apart …\nReturns whether there is an <code>end</code> opcode followed by eof …\nReturns whether there is an <code>end</code> opcode followed by eof …\nIs this an explicit recursion group?\nIs this the abstract external reference type aka …\nIs the subtype final.\nIs this the abstract untyped function reference type aka …\nReturns whether the function index is referenced in the …\nIs this ref type nullable?\nIs this a packed storage type, i.e. one that must be sign- …\nReturns whether this value type is a “reference type”.\nIs the given reference type <code>shared</code>?\nIs this the abstract untyped struct reference type aka …\nIs <code>a</code> a subtype of <code>b</code>?\nDetermines if primitive value type <code>a</code> is a subtype of <code>b</code>.\nThe initial elements of the element segment.\nYield a set of contained flags values.\nIterates over the types returned by the function.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns the corresponding <code>ComponentExternalKind</code> for this …\nThe kind of the export.\nThe kind of the module argument.\nThe kind of the component argument.\nThe kind of data segment.\nThe kind of the element segment.\nThe kind of the export.\nThe kind of the symbol.\nThe kind of tag\nIndicator for what kind of instruction pushed this frame.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly legacy exception handling proposal (phase …\nReturns the number of <code>br_table</code> entries, not including the …\nReturns the number of defined local variables in the …\nThe locals for this stack frame (including function …\nMaximum alignment, stored as <code>n</code> where the actual alignment …\nOptional maximum size of the table, in elements.\nOptional maximum size of this memory, in wasm pages.\nWhich of the coredump’s memories are this instance’s …\nThe index of the memory this immediate points to.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly memory64 proposal. Defaults to <code>false</code>.\nWhether or not this is a 64-bit memory, using i64 as an …\nThe required alignment of the memory area, in bytes, …\nReturns the linear memory at given index.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly memory control proposal. Defaults to <code>false</code>.\nValidates <code>Payload::MemorySection</code>.\nSize of the memory area the loader should reserve for the …\nGet this error’s message.\nThe module being imported from.\nThe module that this is an instance of, as an index into a …\nValidates <code>Payload::ModuleSection</code>.\nA list of module names, which may be URLs, file paths, or …\nReturns whether this feature is enabled in this feature …\nThe WebAssembly multi memory proposal. Defaults to <code>true</code>.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly multi-value proposal. Defaults to <code>true</code>.\nAre elements mutable.\nWhether or not the global is mutable.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly <code>mutable-global</code> proposal. Defaults to <code>true</code>.\nThe name of the custom section.\nThe name of the process that created the core dump\nThe thread name\nThe name of the exported item.\nThe name of the imported item.\nThe name of the module argument.\nThe name of the component argument.\nThe name of the variant case.\nThe name of the exported item.\nThe name of the imported item.\nThe name for the segment.\nThe name of this comdat.\nThe name for the index.\nThe name of the field.\nThe field name.\nDefinitions of name-related helpers and newtypes, …\nThe map of names within the <code>index</code> prior.\nParses this section from the provided <code>reader</code>, derived from …\nParses this section from the provided <code>reader</code>, derived from …\nParses this section from the provided <code>reader</code>, derived from …\nCreates a new section reader from the provided contents.\nCreates a new reader for the specified section contents …\nCreates a new binary reader which will parse the <code>data</code> …\nCreates a new parser.\nConstructs a new <code>FunctionBody</code> for the given data and …\nParses this section from the provided <code>reader</code>, derived from …\nConstructs a new <code>CustomSectionReader</code> for the given data …\nConstructs a new <code>ConstExpr</code> from the given data and offset.\nCreates a new reader for the linking section contents …\nCreates a new reader for a <code>reloc.*</code> section starting at …\nCreates a new <code>FuncType</code> from the given <code>params</code> and <code>results</code>.\nCreate a new <code>RefType</code>.\nCreates a new <code>Validator</code> ready to validate a WebAssembly …\nCreates a new binary reader which will parse the <code>data</code> …\nCreates a new <code>Validator</code> which has the specified set of wasm\nReads content of the code section with offsets.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the nullable version of this ref type.\nGet the offset within the Wasm binary where the error …\nThe offset within the segment. Must be &lt;= the segment’s …\nA fixed byte-offset that this memory immediate specifies.\nOffset in bytes from the start of the section indicated by …\nValidates the next operator in a function.\nGet the current height of the operand stack.\nGets the original position of the reader.\nReturns whether the original byte offset of this section.\nReturns the current byte offset of the section within this …\nReturns whether the original byte offset of this section.\nGets the original position of the binary reader.\nReturns the original byte offset of this section.\nGets the original position of the reader.\nCompress this index into its packed form.\nThe log base 2 of the memory’s custom page size.\nReturns a shared slice to the parameter types of the …\nThe function parameters.\nAttempts to parse a chunk of data.\nConvenience function that can be used to parse a module or …\nConvenience function to validate a single <code>Payload</code>.\nThe priority of the init function.\nReturns the range, as byte offsets, of this section within …\nReturns the range, as byte offsets, of this section within …\nReturns a range from the starting offset to the end of the …\nGets the range of the function body.\nThe range of bytes that specify this whole custom section …\nReturns the range, as byte offsets, of this section within …\nThe byte range of the entire section.\nThe range of the data segment.\nThe range of the the element segment.\nReads an item from the reader.\nReads a value of type <code>T</code> from this binary reader, advancing …\nReads an operator from the reader.\nAdvances the <code>BinaryReader</code> <code>size</code> bytes, and returns a slice …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads a variable-length 32-bit size from the byte stream …\nReads the local definitions from the given <code>BinaryReader</code>, …\nReads the next available <code>Operator</code>.\nReads a length-prefixed list of bytes from this reader and …\nReads a variable-length 32-bit size from the byte stream …\nReads a WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> four bytes and returns a <code>u32</code>.\nAdvances the <code>BinaryReader</code> eight bytes and returns a <code>u64</code>.\nAdvances the <code>BinaryReader</code> a single byte.\nReads a unlimited WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to eight bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads an operator with its offset.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly reference types proposal. Defaults to <code>true</code>.\nThe index of the variant case that is refined by this one.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly Relaxed SIMD proposal. Defaults to <code>true</code>.\nByte range relative to the start of the section indicated …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset this validator’s state such that it is ready to …\nReturns the underlying module resources that this …\nReusable, heap allocated resources to drive the Wasm …\nReturns a shared slice to the result types of the <code>FuncType</code>.\nThe number of expected results for the start function.\nThe function result.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly <code>saturating-float-to-int</code> proposal. Defaults …\nIndex of section to which the relocations apply.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the wasm features active while parsing to the <code>features</code>…\nSets the wasm features active while parsing to the <code>features</code>…\nGet the shared version of this ref type as long as it is …\nIs the composite type shared? This is part of the …\nWhether this table is shared or not.\nWhether or not this is a “shared” memory, indicating …\nWhether or not the global is shared.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly shared-everything-threads proposal; …\nReturns whether this feature is enabled in this feature …\nThe WebAssembly <code>sign-extension-ops</code> proposal. Defaults to …\nReturns whether this feature is enabled in this feature …\nThe WebAssembly SIMD proposal. Defaults to <code>true</code>.\nThe size of the data, which can be zero. <code>offset + size</code> …\nExecutes <code>f</code> to skip some data in this binary reader and …\nSkip parsing the code section entirely.\nAdvances the <code>BinaryReader</code> past a WebAssembly string. This …\nThe values on the stack\nValidates <code>Payload::StartSection</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>SubType</code> associated with the given type index.\nReturns the iterator for advancing through the subsections.\nThe list of supertype indexes. As of GC MVP, there can be …\nThe symbol index of init function (<em>not</em> the function index).\nThe member symbols of this comdat.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWhether or not this is a 64-bit table.\nThe required alignment of the table area, in elements, …\nReturns the table at given index if any.\nValidates <code>Payload::TableSection</code>.\nSize of the table area the loader should reserve for the …\nReturns the tag at given index.\nValidates <code>Payload::TagSection</code>.\nReturns whether this feature is enabled in this feature …\nThe WebAssembly tail-call proposal. Defaults to <code>true</code>.\nWhether or not the branch is hinted to be taken or not.\nReturns the list of targets that this <code>br_table</code> instruction …\nReturns whether this feature is enabled in this feature …\nThe WebAssembly threads proposal. Defaults to <code>true</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the top type for the given heap type.\nAn optionally specified type ascribed to this export.\nThe type reference for the import.\nThe value type of the variant case.\nThe global’s type.\nThe type of the imported item.\nThe block type describing the try block itself.\nRelocation entry type.\nThe type of this table, including its element type and its …\nThe core Wasm type index of the function being validated, …\nGets the count of types returned by the function.\nReturns the type ID associated with the given function …\nIf this is a reference to a concrete Wasm-defined type, …\nReturns the type index associated with the given function …\nValidates <code>Payload::TypeSection</code>.\nTypes relating to type information provided by validation.\nReturns the list of subtypes in the recursive type group.\nGets the types known by the validator so far within the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nValidates <code>Payload::UnknownSection</code>.\nUncompress this packed index into an actual <code>enum</code> that can …\nUnpack this storage type into the valtype that it is …\nWhether this frame is unreachable so far.\nUnwrap an <code>ArrayType</code> or panic.\nUnwrap a <code>ArrayType</code> or panic.\nUnwrap an <code>FuncType</code> or panic.\nUnwrap a <code>FuncType</code> or panic.\nUnwrap an <code>StructType</code> or panic.\nUnwrap a <code>StructType</code> or panic.\nTest whether the given buffer contains a valid WebAssembly …\nConvenience function to validate an entire function’s …\nValidates an entire in-memory module or component with …\nThe values specified for this field\nReturns the version of linking metadata contained in this …\nValidates <code>Payload::Version</code>.\nThe field version.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nVisit the next available operator with the specified …\nVisit a single operator with the specified <code>VisitOperator</code> …\nGet the operator visitor for the next operator in the …\nThe index of the core WebAssembly function to lift.\nThe index of the function to lower.\nThe canonical options for the function.\nThe canonical options for the function.\nThe type index of the resource that’s being created.\nThe type index of the resource that’s being dropped.\nThe type index of the resource that’s being accessed.\nThe index of the lifted function’s type.\nThis many bytes of the <code>data</code> input to <code>Parser::parse</code> were …\nThe value that we actually parsed.\nThe outward count, starting at zero for the current …\nThe index of the item within the outer component.\nThe instance index.\nThe instance index.\nThe alias kind.\nThe alias kind.\nThe alias kind.\nThe export name.\nThe export name.\nThe type returned for failure.\nThe type returned for success.\nThe component’s instantiation arguments.\nThe component index.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nAn optionally-specified destructor to use for when this …\nThe representation of this resource type in core …\nThe name of the export.\nThe type reference for the export.\nThe memory index for the data segment.\nThe initialization expression for the data segment.\nThe initial expression of the element segment.\nThe index of the table being initialized.\nWhether the type is shared.\nThe actual heap type.\nThe module’s instantiation arguments.\nThe module index.\nThe name of the export.\nThe type reference for the export.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe outward count, starting at zero for the current type.\nThe index of the item within the outer type.\nThe alias kind.\nThe name of the exported item.\nThe type reference of the export.\nThe contents of this subsection.\nThe specified name.\nThe byte range that <code>name</code> occupies in the original binary.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this section.\nThe number of data segments.\nThe number of functions in this section.\nThe encoding format being parsed.\nThe start function index\nThe 8-bit identifier for this section.\nThe version number found in the header.\nThe parser for the nested module.\nThe parser for the nested component.\nThe range of bytes that were parsed to consume the header …\nThe range of bytes that specify the <code>func</code> field, specified …\nThe range of bytes that specify the <code>count</code> field, specified …\nThe range of bytes that represent this section, specified …\nThe range of bytes that specify the <code>start</code> field.\nThe range of bytes, relative to the start of the original …\nThe size, in bytes, of the remaining contents of this …\nThe start function description.\nThe range of bytes that represent the nested module in the …\nThe range of bytes that represent the nested component in …\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe index of the function corresponding to this symbol.\nThe index of the global corresponding to this symbol.\nThe index of the event corresponding to this symbol.\nThe index of the table corresponding to this symbol.\nThe name for the function, if it is defined or uses an …\nThe name for the symbol.\nThe name for the global, if it is defined or uses an …\nThe name for the event, if it is defined or uses an …\nThe name for the table, if it is defined or uses an …\nThe index of the function corresponding to this symbol.\nThe definition of the data symbol, if it is defined.\nA hash table where the iteration order of the key-value …\nA default set of values.\nA default key-value mapping.\nA default set of values.\nClears the <code>Map</code>, removing all elements.\nClears the <code>Set</code>, removing all elements.\nReturns true if the <code>Set</code> contains an element equal to the …\nReturns true if <code>key</code> is contains in the <code>Map</code>.\nVisits the values representing the difference, i.e., the …\nGets the given key’s corresponding entry in the <code>Map</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the <code>key</code>.\nReturns a reference to the element in the <code>Set</code>, if any, …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nUtilities for hashmap initialization based on random …\nType definitions for an ordered map.\nType definitions for an ordered set.\nInserts a key-value pair into the <code>Map</code>.\nAdds <code>value</code> to the <code>Set</code>.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the <code>Map</code> contains no elements.\nReturns <code>true</code> if the <code>Set</code> contains no elements.\nReturns <code>true</code> if the <code>Set</code> is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the <code>Set</code> is a superset of another, i.e., …\nReturns an iterator that yields the items in the <code>Map</code>.\nReturns an iterator that yields the items in the <code>Set</code>.\nReturns a mutable iterator that yields the items in the <code>Map</code>…\nReturns an iterator that yields the keys in the <code>Map</code>.\nReturns the number of elements in the <code>Map</code>.\nReturns the number of elements in the <code>Set</code>.\nType definitions for a default map.\nCreates a new empty <code>Map</code>.\nRemoves a key from the <code>Map</code>, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves a key from the <code>Map</code>, returning the stored key and …\nAdds a value to the <code>Set</code>, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nType definitions for a default set.\nVisits the values representing the symmetric difference, …\nRemoves and returns the element in the <code>Set</code>, if any, that …\nVisits the values representing the union, i.e., all the …\nReturns an iterator that yields the values in the <code>Map</code>.\nReturns a mutable iterator that yields the values in the …\nWasmparser’s hashing state stored per-map.\nWasmparser’s hasher type used with <code>RandomState</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view into a single entry in a <code>IndexMap</code>, which may either …\nA hash table where the iteration order of the key-value …\nAn iterator over the owned items of an <code>IndexMap</code>.\nAn iterator over the items of a <code>IndexMap</code>.\nAn iterator over the mutable items of a <code>IndexMap</code>.\nAn iterator over the keys of a <code>IndexMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>IndexMap</code>.\nA vacant entry.\nA view into a vacant entry in a <code>IndexMap</code>.\nAn iterator over the values of a <code>IndexMap</code>.\nAn mutable iterator over the values of a <code>IndexMap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nA default set of values.\nAn iterator over the owned items of an <code>IndexSet</code>.\nAn iterator over the items of a <code>IndexSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view into a single entry in a <code>Map</code>, which may either be …\nAn iterator over the owned items of an <code>Map</code>.\nAn iterator over the owned keys of a <code>Map</code>.\nAn iterator over the owned values of a <code>Map</code>.\nAn iterator over the items of a <code>Map</code>.\nAn iterator over the mutable items of a <code>Map</code>.\nAn iterator over the keys of a <code>Map</code>.\nA default key-value mapping.\nAn occupied entry.\nA view into an occupied entry in a <code>Map</code>.\nA vacant entry.\nA view into a vacant entry in a <code>Map</code>.\nAn iterator over the values of a <code>Map</code>.\nAn mutable iterator over the values of a <code>Map</code>.\nProvides in-place mutable access to an occupied <code>Entry</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nReturns a reference to this <code>Entry</code>’s key.\nEnsures a value is in the <code>Entry</code> by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the <code>Entry</code> by inserting the result of …\nEnsures a value is in the <code>Entry</code> by inserting, if empty, …\nTakes the value of the entry out of the <code>Map</code>, and returns …\nTake ownership of the key and value from the <code>Map</code>.\nA lazy iterator producing elements in the difference of <code>Set</code>…\nA lazy iterator producing elements in the intersection of …\nAn iterator over the owned items of an <code>Set</code>.\nAn iterator over the items of a <code>Set</code>.\nA default set of values.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>Set</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn import or export name in the component model which is …\nCreated via <code>ComponentName::kind</code> and classifies a name.\n<code>[constructor]a-b</code>\n<code>locked-dep=foo:bar/baz</code>\nA dependency on an implementation either as <code>locked-dep=...</code> …\n<code>integrity=sha256:...</code>\nA dependency on an implementation either as <code>integrity=...</code>.\n<code>wasi:http/types@2.0</code>\nAn interface name, stored as <code>a:b/c@1.2.3</code>\nRepresents a kebab string slice used in validation.\nRepresents an owned kebab string for validation.\n<code>a-b-c</code>\n<code>[method]a-b.c-d</code>\nA resource name and its function, stored as <code>a.b</code>.\n<code>[static]a-b.c-d</code>\n<code>url=https://...</code>\nA dependency on an implementation either as <code>url=...</code>\nConverts the kebab string to a kebab string slice.\nGets the underlying string slice.\nGets the underlying string.\nReturns the raw underlying name as a string.\nReturns the the underlying string as <code>a.b</code>\nReturns the entire underlying string.\nReturns entire underlying import string\nReturns entire underlying import string\nReturns entire underlying import string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>d</code> in <code>a:b:c/d/e</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>ComponentNameKind</code> corresponding to this name.\nReturns the <code>a:b</code> in <code>a:b:c/d/e</code>\nCreates a new kebab string slice.\nCreates a new kebab string.\nAttempts to parse <code>name</code> as a valid component name, …\nAttempts to parse <code>name</code> as a valid component name, …\nReturns the <code>c</code> in <code>a:b:c/d/e</code>\nReturns the <code>d/e</code> in <code>a:b:c/d/e</code>\nReturns the resource name or the <code>a</code> in <code>a.b</code>\nConverts the slice to an owned string.\nReturns the <code>1.2.3</code> in <code>a:b:c/d/e@1.2.3</code>\nA type that can be aliased in the component model.\nAn aliasable resource identifier.\nAn identifier pointing to any kind of type, component or …\nThe type is a borrowed handle to the specified resource.\nA component type.\nThe type is a component type with the specified id.\nThe entity is a component.\nAn identifier for any kind of component type.\nRepresents a unique identifier for a component’s core …\nRepresents a unique identifier for a component’s core …\nAn identifier for a core type or a core module’s type.\nRepresents a component defined type.\nRepresents a unique identifier for a component type type …\nThe entity type for imports and exports of a component.\nRepresents a type of a component function.\nRepresents a unique identifier for a component function …\nRepresents a type of a component instance.\nRepresents a unique identifier for a component instance …\nRepresents a type of a component.\nRepresents a unique identifier for a component type known …\nA component value type.\nRepresents a unique identifier for a component value type …\nA core type.\nRepresents the kind of module instance type.\nA core WebAssembly type, in the core WebAssembly types …\nRepresents a unique identifier for a core type type known …\nThe data pointed to by this type of id.\nThe type is a defined type with the specified id.\nThe entity type for imports and exports of a module.\nThe type is an enumeration.\nThe instance type is the result of instantiating from …\nThe type is a set of flags.\nThe type is a function type with the specified id.\nThe entity is a function.\nThe entity is a function.\nThe entity is a global.\nThe identifier for this type data.\nThe type is an instance type with the specified id.\nThe entity is a component instance.\nRepresents a module instance type.\nThe instance type is the result of instantiating a module …\nThe type is a list.\nThe entity is a memory.\nA module type.\nA core module’s type.\nThe entity is a core module.\nRepresents a core module type.\nThe type is an <code>option</code>.\nThe type is an owned handle to the specified resource.\nThe value type is one of the primitive types.\nThe type is a primitive value type.\nRepresents a unique identifier for a recursion group type …\nThe type is a record.\nRepresents a record type.\nA helper trait to provide the functionality necessary to …\nUtility for mapping equivalent <code>ResourceId</code>s to each other …\nThe type is a resource with the specified id.\nAn opaque identifier intended to be used to distinguish …\nThe type is a <code>result</code>.\nA sub type.\nA core type.\nA helper typed used purely during subtyping as part of …\nHelper structure used to perform subtyping computations.\nThe entity is a table.\nThe entity is a tag.\nThe type is a tuple.\nRepresents a tuple type.\nThe type is represented with the given type identifier.\nThe entity is a type.\nA trait shared by all types within a <code>Types</code>.\nA trait shared by all type identifiers.\nRepresents the types known to a <code>crate::Validator</code> once …\nRepresents the types known to a <code>crate::Validator</code> during …\nThe entity is a value.\nThe type is a variant.\nRepresents a variant case.\nRepresents a variant type.\nLookup arena for first type argument\nAdd a mapping from the specified old resource ID to the …\nGets a reference to this validation type information.\nLookup arena for second type argument\nThe map of variant cases.\nGets a component WebAssembly type at the given type index.\nGets a type id from a type index.\nTests whether <code>a</code> is a subtype of <code>b</code>.\nGets the type of a component at the given component index.\nGets the type of a component at the given component index.\nGets the count of imported, exported, or aliased …\nReturns the number of components defined so far.\nGets a component type from the given component type index.\nGets a type id from a type index.\nTests whether <code>a</code> is a subtype of <code>b</code>.\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nTests whether <code>a</code> is a subtype of <code>b</code>.\nGets the type of a component function at the given …\nGets the type of a component function at the given …\nGets the count of imported, exported, or aliased component …\nReturns the number of component functions defined so far.\nGets the type of an component instance at the given …\nGets the type of an component instance at the given …\nGets the count of imported, exported, or aliased component …\nReturns the number of component instances defined so far.\nTests whether <code>a</code> is a subtype of <code>b</code>.\nTests whether <code>a</code> is a subtype of <code>b</code>.\nGets a component type at the given type index.\nGets a component type id from a type index.\nReturns the number of component types defined so far.\nSame as <code>TypesRef::core_exports</code>\nReturns an iterator over the core wasm exports found.\nGets the type of a core function at the given function …\nGets the type of a core function at the given function …\nGets the count of core functions defined so far.\nSame as <code>TypesRef::core_imports</code>\nReturns an iterator over the core wasm imports found.\nGets the type of a module instance at the given module …\nGets the type of a module instance at the given module …\nGets the count of imported, exported, or aliased core …\nReturns the number of core wasm instances defined so far.\nGets a core WebAssembly type at the given type index.\nGets a core WebAssembly type id from a type index.\nReturns the number of core types defined so far.\nThe dual of the <code>imported_resources</code>, or the set of defined …\nThe list of “defined resources” or those which are …\nGets the type of an element segment at the given element …\nGets the type of an element segment at the given element …\nGets the count of element segments.\nReturns the number of elements defined so far.\nGets the entity type from the given export.\nGets the entity type from the given export.\nGets the entity type from the given import.\nGets the entity type for the given import.\nThe set of all resources which are explicitly exported by …\nThe list of all resources that are explicitly exported …\nGets the exports of the instance type.\nThe exports of the module type.\nThe exports of the component type.\nThe list of exports, keyed by name, that this instance has.\nThe map of record fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the count of core functions defined so far.\nGets a type based on its type id.\nGets a type based on its type id.")