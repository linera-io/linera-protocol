searchState.loadedDescShard("revm_state", 0, "Optimism-specific constants, types, and helpers.\nAccount type used inside Journal to track changed to state.\nAccount information that contains balance, nonce, code …\nAccount status flags. Generated by bitflags crate.\nMain bytecode structure with all variants.\nused to mark account as cold\nWhen account is newly created we will not access database …\nEIP-7702 delegated bytecode\nEthereum Object Format\nEVM State is a mapping from addresses to accounts.\nAn account’s Storage is a mapping from 256-bit integer …\nThis type keeps track of the current value of a storage …\nThe bytecode has been analyzed for valid jump destinations.\nWhen account is loaded but not touched or interacted with. …\nused only for pre spurious dragon hardforks where existing …\nIf account is marked for self destruction.\nOnly when account is marked as touched we will save it to …\nStructure used for EIP-1153 transient storage\nGet a flags value with all known bits set.\nAccount balance.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns a reference to the bytecode.\nPointer to the executable bytecode.\nReturns bytes.\nReturns raw bytes reference.\nReturns raw bytes slice.\nReturns an iterator over the storage slots that have been …\n<code>Bytecode</code> data associated with this account.\nReturns bytecode hash associated with this account.\nHash of the raw bytes in <code>code</code>, or <code>KECCAK_EMPTY</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns a copy of this account with the <code>Bytecode</code> removed.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns reference to the EOF if bytecode is EOF.\nReturns <code>true</code> if the account is not empty.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes an <code>AccountInfo</code> with the given balance, setting …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nInitializes an <code>AccountInfo</code> with the given bytecode, …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns <code>true</code> if account has no nonce and code.\nCalculates hash of the bytecode.\nBalance, nonce, and code\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the present value differs from the …\nRepresents if the storage slot is cold\nIs account newly created in this transaction.\nReturns <code>true</code> if bytecode is EIP-7702.\nReturns if an account is empty.\nIs account empty, check if nonce and balance are zero and …\nWhether all bits in this flags value are unset.\nReturns whether the bytecode is empty.\nReturns true if the code hash is the Keccak256 hash of the …\nReturns <code>true</code> if bytecode is EOF.\nIs account loaded as not existing from database.\nIs account marked for self destruct.\nIf account status is marked as touched.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an iterator over the opcodes in this bytecode, …\nReturns jump table if bytecode is analyzed.\nReturns the length of the original bytes.\nMarks the account as cold.\nMarks the storage slot as cold.\nMarks the account as newly created.\nMarks the account as self destructed.\nMarks the account as touched\nMarks the account as warm and return true if it was …\nMarks the storage slot as warm and returns a bool …\nCreates a new <code>AccountInfo</code> with the given fields.\nCreates a new legacy analyzed <code>Bytecode</code> with exactly one …\nCreates a new <em>unchanged</em> <code>EvmStorageSlot</code> for the given value.\nCreate new checked bytecode.\nCreates a new <em>changed</em> <code>EvmStorageSlot</code>.\nCreates a new EIP-7702 <code>Bytecode</code> from <code>Address</code>.\nCreates a new legacy <code>Bytecode</code>.\nCreates new account and mark it as non existing.\nCreates a new raw <code>Bytecode</code>.\nCreates a new raw <code>Bytecode</code>.\nAccount nonce.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the original bytecode as a byte slice.\nReturns the original bytecode.\nReturns the original value of the storage slot.\nOriginal value of the storage slot\nReturns the current value of the storage slot.\nPresent value of the storage slot\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the <code>AccountInfo</code> <code>balance</code>.\nReplaces the <code>AccountInfo</code> bytecode and recalculates …\nSets the bytecode and its hash.\nSets the <code>AccountInfo</code> <code>code_hash</code> and clears any cached …\nSets the <code>AccountInfo</code> <code>nonce</code>.\nChecks if account is empty and check if empty state before …\nAccount status flags\nStorage cache\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTakes bytecode from account.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmarks the created flag.\nUnmarks the account as self destructed.\nUnmarks the touch flag.\nCreates a new <code>AccountInfo</code> with the given balance.\nCreates a new <code>AccountInfo</code> with the given code.\nCreates a new <code>AccountInfo</code> with the given code and code …\nCreates a new <code>AccountInfo</code> with the given code hash.\nMarks the account as cold and returns self for method …\nMarks the account as newly created and returns self for …\nSets account info and returns self for method chaining.\nCreates a new <code>AccountInfo</code> with the given nonce.\nMarks the account as self destructed and returns self for …\nPopulates storage from an iterator of storage slots and …\nMarks the account as touched and returns self for method …\nVariant of with_warm_mark that doesn’t return the …\nMarks the account as warm (not cold) and returns self for …\nStrips the <code>Bytecode</code> from this account and drop it.")