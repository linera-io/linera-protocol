searchState.loadedDescShard("cargo_metadata", 0, "Structured access to the output of <code>cargo metadata</code> and …\nRun cargo with <code>--features-all</code>\nA compiler-generated file.\nThe kind of debug information included in the artifact.\nProfile settings used to determine which compiler flags to …\nThose used in build scripts only\nFinal result of a build.\nThe build has finished.\nOutput of a build script execution.\nA build script successfully executed.\nError during execution of <code>cargo metadata</code>\nCargo features flags\nThe compiler generated an artifact\nMessage left by the compiler\nThe compiler wants to display a message\nInformation about a dependency kind.\nA dependency of the main crate\nDependencies can come in three kinds\nThose used in tests only\nEdition 2015\nEdition 2018\nEdition 2021\nThe Rust edition\nContains the error value\nError output of <code>cargo metadata</code> was not valid utf8\nError returned when executing/parsing <code>cargo metadata</code> fails.\nFull debug information.\nIO Error during execution of <code>cargo metadata</code>\nDeserialization error (structure of json did not match …\nDebug information without type or variable-level …\nLine directives only.\nLine tables only.\nA cargo message\nAn iterator of Messages.\nStarting point for metadata returned by <code>cargo metadata</code>\nA builder for configurating <code>cargo metadata</code> invocation.\nRun cargo with <code>--no-default-features</code>\nThe output did not contain any json\nA node in a dependencies graph\nA dependency in a node\nNo debug information.\nThe ‘normal’ kind\nContains the success value\nOne or more crates described by a single <code>Cargo.toml</code>\nAn “opaque” identifier for a package.\nA dependency graph\nCustom result type for <code>cargo_metadata::Error</code>\nRun cargo with <code>--features &lt;FEATURES&gt;</code>\nThe source of a package such as crates.io.\nA single target (lib, bin, example, …) provided by a …\nA line of text which isn’t a cargo or compiler message. …\nAn unknown integer level.\nAn unknown string level.\nOutput of <code>cargo metadata</code> was not valid utf8\nA list of default workspace members.\nReturn the string representation of the edition\nThe <code>authors</code> field as specified in the <code>Cargo.toml</code>\nBuilds a command for <code>cargo metadata</code>.  This is the first …\nPath to <code>cargo</code> executable.  If not set, this will use the …\nThe <code>categories</code> field as specified in the <code>Cargo.toml</code>\nVarious <code>--cfg</code> flags to pass to the compiler\nAlmost the same as <code>kind</code>, except when an example is a …\nCurrent directory of the <code>cargo metadata</code> process.\nState of the <code>cfg(debug_assertions)</code> directive, enabling …\nThe kind of debug information.\nThe <code>default-run</code> field as given in the <code>Cargo.toml</code> The …\nThe kinds of dependencies.\nList of opaque identifiers for this node’s dependencies. …\nList of dependencies of this particular package\nDependencies in a structured format.\nThe <code>description</code> field as specified in the <code>Cargo.toml</code>\nThis module contains <code>Diagnostic</code> and the types/functions it …\nWhether or not this target is documented by <code>cargo doc</code>.\nWhether or not this target has doc tests enabled, and the …\nThe <code>documentation</code> URL as specified in the <code>Cargo.toml</code>.\nThe default Rust edition for the package (either what’s …\nRust edition for this target\nArbitrary environment variables to set when running <code>cargo</code>. …\nThe environment variables to add to the compilation\nRuns configured <code>cargo metadata</code> and returns parsed <code>Metadata</code>.\nPath to the executable file\nWhich features to include.\nThe list of features enabled for this dependency.\nThe enabled features for this artifact\nFeatures enabled on the crate\nFeatures provided by the crate, mapped to the features …\nThe full paths to the generated artifacts (e.g. binary …\nIf true, then the files were already generated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>homepage</code> URL as specified in the <code>Cargo.toml</code>.\nAn opaque identifier for a package\nAn opaque identifier for a package\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this target is of kind “bench”.\nReturn true if this target is of kind “bin”.\nReturns true if the source is crates.io.\nReturn true if this target is of kind “custom-build”.\nReturn true if this target is of kind “example”.\nReturn true if this target is of kind “lib”.\nReturn true if this target is of kind “test”.\nThe <code>keywords</code> field as specified in the <code>Cargo.toml</code>\nThe kind of dependency this is\nThe kind of dependency.\nKind of target (“bin”, “example”, “test”, “…\nThe <code>license</code> field as specified in the <code>Cargo.toml</code>\nFull path to the license file if one is present in the …\nThe <code>license-file</code> field as specified in the <code>Cargo.toml</code>. If …\nThe libs to link\nThe paths to search when resolving libs\nThe name of a native library the package is linking to.\nPath to <code>Cargo.toml</code>\nPath to the <code>Cargo.toml</code> file\nPath containing the <code>Cargo.toml</code>\nThe message the compiler sent.\nContents of the free form <code>package.metadata</code> section.\nName as given in the <code>Cargo.toml</code>\nThe name of the dependency’s library target. If the …\nThe <code>name</code> field as given in the <code>Cargo.toml</code>\nName as given in the <code>Cargo.toml</code> or generated from the file …\nCreates a default <code>cargo metadata</code> command, which will look …\nOutput information only about workspace members and don’…\nNodes in a dependencies graph\nOptimization level. Possible values are 0-3, s or z.\nWhether this dependency is required or optional\nArbitrary command line flags to pass to <code>cargo</code>.  These will …\nThe <code>OUT_DIR</code> environment variable where this script places …\nState of the overflow checks.\nThe package this artifact belongs to\nThe package this message belongs to\nThe package this build script execution belongs to\nA list of all crates referenced by this crate (and the …\nParses <code>cargo metadata</code> output.  <code>data</code> must have been …\nCreates an iterator of Message from a Read outputting a …\nCreates an iterator of Message from a Read outputting a …\nThe file system path for a local path dependency.\nPackage ID (opaque unique identifier)\nThe profile this artifact was compiled with\nList of registries to which this package may be published …\nFull path to the readme file if one is present in the …\nThe <code>readme</code> field as specified in the <code>Cargo.toml</code>\nThe URL of the index of the registry where this dependency …\nIf the dependency is renamed, this is the new name for the …\nThe <code>repository</code> URL as specified in the <code>Cargo.toml</code>\nThe underlying string representation of id.\nThe underlying string representation of a source.\nThe required version\nThis target is built only if these features are enabled. …\nDependencies graph\nThe crate for which the metadata was read.\nGet the workspace’s root package of this metadata …\nThe <code>rust-version</code> field as specified in the <code>Cargo.toml</code>. The …\nThe source of dependency\nThe source of the package, e.g. crates.io or <code>None</code> for …\nPath to the main source file of the target\nWhether or not the build finished successfully.\nThe target this dependency is specific to.\nThe target this artifact was compiled for\nThe target this message is aimed at\nThe target platform for the dependency.\nBuild directory\nTargets provided by the crate (lib, bin, example, test, ……\nWhether this profile is a test\nWhether or not this target is tested by default by …\nWhether the default features in this dependency are used.\nSet whether to show stderr\nThe <code>version</code> field as specified in the <code>Cargo.toml</code>\nThe list of default workspace members\nGet the workspace default packages.\nA list of all workspace members\nThe workspace-level metadata object. Null if non-existent.\nGet the workspace packages.\nWorkspace root\nstderr returned by the <code>cargo metadata</code> command\nWhether a suggestion can be safely applied.\nA diagnostic message generated by rustc\nThe error code associated to this diagnostic.\nThe diagnostic level\nA section of the source code associated with a Diagnostic\nA line of code associated with the Diagnostic\nMacro expansion information associated with a diagnostic.\nError\nFailure note\nThe suggested replacement has placeholders that will need …\nHelp\nInternal compiler error\nThe suggested replacement can be applied automatically …\nThe suggested replacement may be incorrect in some …\nNote\nThe suggested replacement will probably not work.\nWarning\nThe byte offset in the file where this diagnostic ends.\nThe byte offset in the file where this diagnostic starts …\nAssociated diagnostic messages.\nThe code itself.\nThe associated error code for this diagnostic\n1-based, character offset.\n1-based, character offset.\nspan where macro was defined (if known)\nMacro invocations that created the code at this span, if …\nAn explanation for the code\nThe file name or the macro name this diagnostic comes from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnd of the section of the line to highlight. 1-based, …\nStart of the section of the line to highlight. 1-based, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a “primary” span – meaning the point, or one …\nLabel that should be placed at this location (if any)\n“error: internal compiler error”, “error”, “…\n1-based. The line in the file.\n1-based. The line in the file.\nname of macro that was applied (e.g., “foo!” or “#[…\nThe error message of this diagnostic.\nThe message as rustc would render it\nspan where macro was applied to generate this code; note …\nA list of source code spans this diagnostic is associated …\nIf we are suggesting a replacement, this will contain text …\nIf the suggestion is approximate\nThe line of code associated with the error\nSource text from the start of line_start to the end of …")