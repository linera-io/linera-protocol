searchState.loadedDescShard("secp256k1_sys", 0, "secp256k1-sys FFI bindings\nA trait for producing pointers that will always be valid …\nA Secp256k1 context, containing various precomputed values …\nHash function to use to post-process an ECDH point to get …\nLibrary-internal representation of a ElligatorSwift …\nA hash function used by <code>ellswift_ecdh</code> to hash the final …\nA nonce generation function. Ordinary users of the library …\nNo value.\nNo value.\nNo value.\nNo value.\nLibrary-internal representation of a Secp256k1 public key\nFlag for keys to indicate compressed serialization format\nFlag for keys to indicate uncompressed serialization format\nFlag for context to enable no precomputation\nFlag for context to enable signing precomputation\nFlag for context to enable verification precomputation\nSame as secp256k1_nonce function with the exception of …\nData structure that contains additional arguments for …\nLibrary-internal representation of a Secp256k1 signature\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new public key usable for the FFI interface from …\nCreate a new signature usable for the FFI interface from …\nCreate a new x-only public key usable for the FFI …\nCreate a new keypair usable for the FFI interface from raw …\nImplement methods and traits for types that contain an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SchnorrSigExtraParams properly initialized.\nCreates an “uninitialized” FFI public key which is …\nCreates an “uninitialized” FFI signature which is …\nCreates an “uninitialized” FFI x-only public key which …\nCreates an “uninitialized” FFI keypair which is zeroed …\nAttempts to erase the contents of the underlying array.\nDoes a best attempt at secure erasure using Rust …\nFFI of the recovery module\nA reimplementation of the C function …\n<strong>This function is an override for the C function, this is </strong>…\n<strong>This function is an override for the C function, this is </strong>…\nA reimplementation of the C function …\nA reimplementation of the C function …\nDefault ECDH hash function\nDefault ECDH hash function for BIP324 key establishment\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nLibrary-internal representation of a Secp256k1 signature + …\nGets a reference to the underlying array\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new (zeroed) signature usable for the FFI …\nA type that is as aligned as the biggest alignment for …\nA static zeroed out AlignedType for use in static …\nThis might not match C’s <code>c_char</code> exactly. The way we use …\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")