searchState.loadedDescShard("bincode", 0, "Bincode is a crate for encoding and decoding using a tiny …\nA custom error message from Serde.\nSerde has a deserialize_any method that lets the format …\nContains the error value\nAn error that can be produced during (de)serializing.\nThe kind of error that can be produced during a …\nReturned if the deserializer attempts to deserialize a …\nReturned if the deserializer attempts to deserialize a …\nReturned if the deserializer attempts to deserialize the …\nReturned if the deserializer attempts to deserialize a …\nIf the error stems from the reader/writer that is being …\nContains the success value\nThe result of a serialization or deserialization operation.\nBincode can not encode sequences of unknown length (like …\nAn Serializer that encodes values directly into a Writer.\nIf (de)serializing a message takes more than the provided …\n<code>bincode</code> uses a Builder-pattern to configure the …\nGet a default configuration object.\nDeserialize bincode data to a Rust data structure.\nDeserializes a slice of bytes into an instance of <code>T</code> using …\nDeserializes an object directly from a <code>Read</code>er using the …\nDeserializes an object from a custom <code>BincodeRead</code>er using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Serializer with the given <code>Write</code>r.\nGet a default configuration object.\nSerializes a serializable object into a <code>Vec</code> of bytes using …\nSerializes an object directly into a <code>Writer</code> using the …\nReturns the size that an object would be if serialized …\nA TrailingBytes config that will allow trailing bytes in …\nBig-endian byte ordering.\nA SizeLimit that restricts serialized or deserialized …\nA configuration builder whose options Bincode will use …\nThe default options for bincode …\nFixed-size integer encoding.\nA SizeLimit without a limit! Use this if you don’t care …\nLittle-endian byte ordering.\nThe native byte ordering of the current system.\nA configuration builder trait whose options Bincode will …\nA TrailingBytes config that will cause bincode to produce …\nVariable-size integer encoding (excepting [ui]8).\nA configuration struct with a user-specified endian order\nA configuration struct with a user-specified length …\nA configuration struct with a user-specified byte limit\nA configuration struct with a user-specified trailing …\nSets the deserializer to allow trailing bytes\nSets the endianness to big-endian\nDeserializes a slice of bytes into an instance of <code>T</code> using …\nDeserializes a slice of bytes into an instance of <code>T</code> using …\nDeserializes an object directly from a <code>Read</code>er using this …\nDeserializes an object directly from a <code>Read</code>er using this …\nDeserializes an object from a custom <code>BincodeRead</code>er using …\nDeserializes an object from a custom <code>BincodeRead</code>er using …\nDeserializes an object from a custom <code>BincodeRead</code>er with …\nDeserializes an object from a custom <code>BincodeRead</code>er with …\nDeserializes an object directly from a <code>Read</code>er with state …\nDeserializes an object directly from a <code>Read</code>er with state …\nDeserializes a slice of bytes with state <code>seed</code> using this …\nDeserializes a slice of bytes with state <code>seed</code> using this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the byte limit to <code>limit</code>.\nSets the endianness to little-endian This is the default.\nSets the endianness to the the machine-native endianness\nGet a default configuration object.\nSets the byte limit to be unlimited. This is the default.\nSets the deserializer to reject trailing bytes\nSerializes a serializable object into a <code>Vec</code> of bytes using …\nSerializes a serializable object into a <code>Vec</code> of bytes using …\nSerializes an object directly into a <code>Writer</code> using this …\nSerializes an object directly into a <code>Writer</code> using this …\nReturns the size that an object would be if serialized …\nReturns the size that an object would be if serialized …\nSets the endianness to big-endian\nSets the length encoding to be fixed\nSets the byte limit to <code>limit</code>.\nSets the endianness to little-endian This is the default.\nSets the endianness to the the machine-native endianness\nSets the byte limit to be unlimited. This is the default.\nSets the length encoding to varint\nA Deserializer that reads bytes from a buffer.\nReturns the argument unchanged.\nCreates a new Deserializer that will read from the given …\nCalls <code>U::from(self)</code>.\nSpecialized ways to read data into bincode.\nCreates a new Deserializer with the given <code>BincodeRead</code>er\nCreates a new Deserializer with a given <code>Read</code>er and options.\nAn optional Read trait for advanced Bincode usage.\nA BincodeRead implementation for <code>io::Read</code>ers\nA BincodeRead implementation for byte slices\nPass a slice of the next <code>length</code> bytes on to the serde …\nCheck that the next <code>length</code> bytes are a valid string and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransfer ownership of the next <code>length</code> bytes to the caller.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")