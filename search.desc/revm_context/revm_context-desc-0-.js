searchState.loadedDescShard("revm_context", 0, "Optimism-specific constants, types, and helpers.\nTrait for retrieving block information required for …\nBlock type\nA transaction that calls a contract or transfer.\nConfiguration type\nChain type\nTrait that defines the context of the EVM execution.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>\nCreate scheme of <code>CREATE2</code>\nCreate scheme\nCustom scheme where we set up the original address\nCustom type means that the transaction trait was extended …\nDatabase error marker is needed to implement From …\nEVM database interface.\nDatabase type\nEIP-1559 Fee market change transaction type\nEIP-2930 Access List transaction type\nEIP-4844 Blob transaction type\nEIP-7702 Set EOA account code transaction type\nThe database error type.\nJournal type\nTrait that contains database and journal of all changes …\nLegacy transaction type\nLocal context type\nLocal context used for caching initcode from Initcode …\nTransaction destination\nMain Transaction trait that abstracts and specifies all …\nTransaction types of all Ethereum transaction\nTransaction type\nAccess list for the transaction.\nList of authorizations, that contains the signature that …\nReturns length of the authorization list.\nThe base fee per gas, added in the London upgrade with …\nGets basic account information.\nBeneficiary (Coinbase, miner) is a address that have …\nReturn <code>blob_excess_gas</code> header field. See EIP-4844.\nExcess blob gas and blob gasprice. See also …\nSee EIP-4844 and <code>calc_blob_gasprice</code>.\nReturns the blob target and max count for the given spec …\nReturns the blob target and max count for the given spec …\nReturns vector of fixed size hash(32 bytes)\nThis module contains <code>BlockEnv</code> and it implements <code>Block</code> …\nGet the block\nGets block hash by block number.\nCalculates the maximum [EIP-4844] <code>data_fee</code> of the …\nCaller aka Author aka transaction signer.\nThis module contains <code>CfgEnv</code> and implements <code>Cfg</code> trait for …\nGet the configuration\nGet the chain\nChain Id is optional for legacy transactions.\nGet the chain reference\nCreates a checkpoint of the current state. State can be …\nCommits the changes made since the last checkpoint.\nReverts the changes made since the last checkpoint.\nCalled at the end of the transaction to clean all residue …\nClear the local context.\nReturns account code bytes and if address is cold loaded.\nGets account code by its hash.\nGets code hash of account.\nThis module contains <code>Context</code> struct and implements …\nCreates a checkpoint of the account creation.\nReturns the mutable database.\nGet the database\nReturns the database.\nGet the database reference\nReturns the depth of the journal.\nThe difficulty of the block.\nReturns the effective balance that is going to be spent …\nReturns effective gas price is gas price field for Legacy …\nGet the error\nThis module contains <code>Evm</code> struct.\nDoes cleanup and returns modified state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas limit of the block.\nThe maximum amount of gas the transaction can use.\nGas price for the transaction. It is only applicable for …\nGet validated initcode by hash. if initcode is not …\nIncrements the nonce of the account.\nReturns the input data of the transaction.\nGet the local context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contains <code>Journal</code> struct and implements …\nGet the journal\nGet the journal reference\nTransaction kind. It can be Call or Create.\nLoads the account.\nLoads the account code.\nLoads the account delegated.\nLocal context that is filled by execution.\nGet the local context\nLogs the log in Journal state.\nReturns the maximum balance that can be spent by the …\nMax fee per data gas\nReturns maximum fee that can be paid for the transaction.\nMaximum priority fee per gas.\nCreates new Journaled state.\nThe nonce of the transaction.\nThe number of ancestor blocks of this block (block height).\nReturns the addresses of the precompiles.\nThe output of the randomness beacon provided by the beacon …\nMarks the account for selfdestruction and transfers all …\nSets bytecode and calculates hash.\nSets bytecode with hash. Assume that account is warm.\nSets the spec id.\nInterpreter shared memory buffer. A reused memory buffer …\nSlice of the shared memory buffer returns None if range is …\nReturns the storage value from Journal state.\nStores the storage value in Journal state.\nGets storage value of address at index.\nThe timestamp of the block in seconds since the UNIX epoch.\nLoads transient storage value.\nTotal gas for all blobs. Max number of blocks is already …\nTouches the account.\nTransfers the balance from one account to another.\nStores transient storage value.\nThis module contains <code>TxEnv</code> struct and implements …\nGet the transaction\nGet the transaction and journal. It is used to efficiently …\nGet the transaction and local context. It is used to …\nReturns the transaction type.\nThe value sent to the receiver of <code>TxKind::Call</code>.\nWarms the account.\nWarms the account and storage.\nWarms the precompiles.\nSalt\nThe block environment\nThe base fee per gas, added in the London upgrade with …\nBeneficiary (Coinbase or miner) is a address that have …\nExcess blob gas and blob gasprice\nThe difficulty of the block\nReturns the argument unchanged.\nThe gas limit of the block\nCalls <code>U::from(self)</code>.\nThe number of ancestor blocks of this block (block height)\nThe output of the randomness beacon provided by the beacon …\nTakes <code>blob_excess_gas</code> saves it inside env and calculates …\nThe timestamp of the block in seconds since the UNIX epoch\nEVM configuration\nReturns the blob target and max count for the given spec …\nBlob max count. EIP-7840 Add blob schedule to EL config …\nChain ID of the EVM\nClears the blob target and max count over hardforks.\nSkips the nonce validation against the account’s nonce\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the block gas limit is disabled.\nIf some it will effects EIP-170: Contract code size limit.\nCreates new <code>CfgEnv</code> with default values.\nCreate new <code>CfgEnv</code> with default values and specified spec.\nSets the blob target\nSpecification for EVM represent the hardfork\nSets the blob target\nConsumes <code>self</code> and returns a new <code>CfgEnv</code> with the specified …\nConsumes <code>self</code> and returns a new <code>CfgEnv</code> with the specified …\nEVM context contains data that EVM needs for execution.\nBlock information.\nConfigurations.\nInner context.\nError that happened during execution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEVM State with journaling support and database.\nLocal context that is filled by execution.\nModifies the context block.\nModifies the context block.\nModifies the context configuration.\nModifies the context configuration.\nModifies the context chain.\nModifies the context chain.\nModifies the context database.\nModifies the context database.\nModifies the context journal.\nModifies the context journal.\nModifies the context transaction.\nModifies the context transaction.\nCreates a new context with a new database type.\nTransaction information.\nCreates a new context with a new block type.\nCreates a new context with a new chain type.\nCreates a new context with a new chain type.\nCreates a new context with a new database type.\nCreates a new context with a new journal type. New journal …\nCreates a new context with a new <code>DatabaseRef</code> type.\nCreates a new context with a new transaction type.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nProvides methods for converting a type <code>Self</code> into either a …\nIterator that maps left or right iterators to …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nEvaluate the provided expression for both <code>Either::Left</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nUntagged serialization/deserialization support for Either&lt;…\nUntagged serialization/deserialization support for Option&lt;…\nMacro for unwrapping the left side of an <code>Either</code>, which …\nDual to <code>try_left!</code>, see its documentation for more …\nReturns the left value\nReturns the right value\nMain EVM structure that contains all data needed for …\n<code>context_interface::ContextTr</code> of the EVM it is used to …\nReturns the argument unchanged.\nInspector of the EVM it is used to inspect the EVM. Its …\nInstructions provider of the EVM it is used to execute …\nCalls <code>U::from(self)</code>.\nConsumes self and returns inner Inspector.\nCreate a new EVM instance with a given context, …\nCreate a new EVM instance with a given context, inspector, …\nPrecompile provider of the EVM it is used to execute …\nConsumed self and returns new Evm type with given …\nConsumes self and returns new Evm type with given …\nA journal of state changes internal to the EVM\nOutput of the journal after finalizing.\nDatabase\nReturns call depth.\nContains the journal entry trait and implementations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule containing the <code>JournalInner</code> that is part of …\nInner journal state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Journal</code> and returns <code>JournalInner</code>.\nLogs that were emitted by contract calls.\nCreates a new JournaledState by copying state data from a …\nChanges or touched accounts that loads, created or changed …\nCreates a new <code>JournalInner</code> by cloning all internal state …\nCreate account: Actions: Mark account as created Revert: …\nMark account to be destroyed and journal balance to be …\nLoading account does not mean that account will need to be …\nUsed to mark account that is warm inside EVM in regard to …\nTransfer balance between two accounts Action: Transfer …\nCode changed Action: Account code changed Revert: Revert …\nJournal entries that are used to track changes to the …\nTrait for tracking and reverting state changes in the EVM. …\nIncrement nonce Action: Increment nonce by one Revert: …\nEntry used to track storage changes Action: Storage change …\nEntry used to track storage warming introduced by EIP-2929.\nIt is used to track an EIP-1153 transient storage change. …\nCreates a journal entry for when a new account is created\nCreates a journal entry for when an account is destroyed …\nCreates a journal entry for when an account is “touched…\nCreates a journal entry for when an account is accessed …\nCreates a journal entry for a balance transfer between …\nCreates a journal entry for when an account’s code is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a journal entry for when an account’s nonce is …\nReverts the state change recorded by this journal entry\nCreates a journal entry for when a storage slot is modified\nCreates a journal entry for when a storage slot is …\nCreates a journal entry for when a transient storage slot …\nAddress of warmed account.\nAddress of account to be destroyed.\nAddress of account that is touched.\nAddress of account that had its nonce changed. Nonce is …\nAddress of account that is created. On revert, this …\nAddress of account that had its storage changed.\nAddress of account that had its storage warmed. By SLOAD …\nAddress of account that had its transient storage changed.\nAddress of account that had its code changed.\nBalance that is transferred.\nAddress of account that sent the balance.\nBalance of account got transferred to target.\nPrevious value of storage slot.\nPrevious value of transient storage slot.\nKey of storage slot that is changed.\nKey of storage slot that is warmed.\nKey of transient storage slot that is changed.\nAddress of account that received the balance.\nAddress of account that received the balance.\nWhether the account had already been destroyed before this …\nInner journal state that contains journal and state …\nReturns the <em>loaded</em> Account for the given address.\nMakes a checkpoint that in case of Revert can bring back …\nCommits the checkpoint.\nReverts all changes to state until given checkpoint.\nTake the <code>JournalOutput</code> and clears the journal by resetting …\nCreates account or returns false if collision is detected.\nThe current call stack depth\nReturns the argument unchanged.\nIncrements the nonce of the account.\nInitial load of account. This load will not be tracked …\nCalls <code>U::from(self)</code>.\nThe journal of state changes, one for each call\nLoads account into memory. return if it is cold or warm …\nLoads account into memory. If account is EIP-7702 type it …\nLoads account. If account is already loaded it will be …\nLoads account. If account is already loaded it will be …\nLoads account and its code. If account is already loaded …\nPushes log into subroutine.\nEmitted logs\nCreates new <code>JournalInner</code>.\nPrecompile addresses\nPerforms selfdestruct action. Transfers balance from …\nUse it only if you know that acc is warm.\nSet code and its hash to the account.\nSets SpecId.\nLoads storage slot.\nLoads storage slot with account.\nThe spec ID for the EVM. Spec is required for some journal …\nStores storage slot.\nReturn reference to state.\nThe current state\nRead transient storage tied to the account.\nMark account as touched as only touched accounts will be …\nTransfers balance from two accounts. Returns error if …\nTransient storage that is discarded after every …\nStore transient storage tied to the account.\nWarm loaded addresses are used to check if loaded address …\nResult of the account load from Journal state\nCreate collision.\nSubRoutine checkpoint that will help us to go back from …\nTrait that contains database and journal of all changes …\nCaller does not have enough funds\nOverflow in target account\nState load information that contains the data and if the …\nTransfer and creation result\nCreates a checkpoint of the current state. State can be …\nCommits the changes made since the last checkpoint.\nReverts the changes made since the last checkpoint.\nCalled at the end of the transaction to clean all residue …\nReturns account code bytes and if address is cold loaded.\nGets code hash of account.\nCreates a checkpoint of the account creation.\nReturned data\nReturns the mutable database.\nReturns the database.\nReturns the depth of the journal.\nDoes cleanup and returns modified state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrements the nonce of the account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs account is cold loaded\nDoes account have delegate code and delegated account is …\nIs account empty, if <code>true</code> account is not created\nLoads the account.\nLoads the account code.\nLoads the account delegated.\nLogs the log in Journal state.\nMaps the data of the <code>StateLoad</code> to a new value.\nCreates new Journaled state.\nReturns a new <code>StateLoad</code> with the given data and cold load …\nReturns the addresses of the precompiles.\nMarks the account for selfdestruction and transfers all …\nSets bytecode and calculates hash.\nSets bytecode with hash. Assume that account is warm.\nSets the spec id.\nReturns the storage value from Journal state.\nStores the storage value in Journal state.\nLoads transient storage value.\nTouches the account.\nTransfers the balance from one account to another.\nStores transient storage value.\nWarms the account.\nWarms the account and storage.\nWarms the precompiles.\nInitcode with validation status.\nStatus of the initcode.\nInitcode is invalid this can mean decoding failed or …\nLocal context that is filled by execution.\nInitcode is pending validation.\nInitcode is valid, it was decoded into EOF and validated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMapping of initcode hash that contains raw bytes ready for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new local context, initcodes are hashes and …\nCreates a new initcode with validation set to false.\nInterpreter shared memory buffer. A reused memory buffer …\nValidates the initcode and sets the status to valid if it …\nAccess list is not supported for blocks before the Berlin …\nEIP-7702 transaction has invalid fields set.\nEIP-7702 is not enabled.\nBlob transaction can’t be a create transaction.\nBlock <code>blob_gas_price</code> is greater than tx-specified …\nBlob transaction contains a versioned hash with an …\n<code>blob_hashes</code>/<code>blob_versioned_hashes</code> is not supported for …\nInitial gas for a Call is bigger than <code>gas_limit</code>.\n<code>gas_limit</code> in the tx is bigger than <code>block_gas_limit</code>.\nCreate init code size exceeds limit (runtime).\nError on created contract that begins with EF\nEIP-3860: Limit and meter initcode\nEIP-3860: Limit and meter initcode. Initcode size limit …\nCustom error\nDatabase error\nMain EVM error\nEIP-1559 is not supported.\nEIP-2930 is not supported.\nEIP-4844 is not supported.\nEIP-7702 is not supported.\nEIP-7873 initcode transaction should have <code>to</code> address.\nEIP-7873 is not supported.\nEmpty Authorization List is not allowed.\nThere should be at least one blob in Blob transaction.\nAux data overflow, new aux data is larger than u16 max …\nAux data is smaller than already present data size.\nEOF create should have <code>to</code> address\n<code>excess_blob_gas</code> is not set for Cancun and above.\nResult of a transaction execution\nGas floor calculated from EIP-7623 Increase calldata cost …\nEIP-1559: <code>gas_price</code> is less than <code>basefee</code>.\nReverted for various reasons and spend all gas\nIndicates that the EVM has experienced an exceptional halt.\nHeader validation error\nTransaction chain id does not match the config chain id.\nCheck for target address validity is only done inside …\nErrors related to misconfiguration of a <code>crate::Block</code>.\nTransaction validation error.\nTransaction account does not have enough amount of ether …\n<code>max_fee_per_blob_gas</code> is not supported for blocks before …\nNonce overflows in transaction.\nOutput of a transaction execution\nOverflow payment in transaction.\n<code>prevrandao</code> is not set for Merge and above.\nWhen using the EIP-1559 fee model introduced in the London …\nEIP-3607 Reject transactions from senders with deployed …\nReverted by <code>REVERT</code> opcode that doesn’t spend all gas\nEOF Subroutine stack overflow\nReturned successfully\nReason a transaction successfully completed.\nTransaction has more then <code>max</code> blobs\nTransaction validation error\nReturns the created address, if any.\nReturns created address if execution is Create transaction …\nReturns the output data of the execution output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gas used.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the output data of the execution output.\nConsumes <code>self</code> and returns the logs if execution is …\nConsumes the type and returns the output data of the …\nReturns true if execution result is a Halt.\nReturns if transaction execution is successful.\nReturns the logs if execution is successful, or an empty …\nMaps a <code>DBError</code> to a new error type using the provided …\nMaps a <code>DBError</code> to a new error type using the provided …\nMaps a <code>DBError</code> to a new error type using the provided …\nReturns the output data of the execution.\nStatus of execution\nState that got updated\nHalting will spend all the gas, and will be equal to …\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list type is introduced in EIP-2930, and every …\nAn unsigned EIP-7702 authorization.\nAuthorization trait.\nCustom type means that the transaction trait was extended …\nEIP-1559 Fee market change transaction type\nEIP-2930 Access List transaction type\nEIP-4844 Blob transaction type\nEIP-7702 Set EOA account code transaction type\nIndicates a failed recovery attempt where no valid address …\nLegacy transaction type\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nMain Transaction trait that abstracts and specifies all …\nTransaction validity error types.\nTransaction types of all Ethereum transaction\nIndicates a successfully recovered authority address.\nAccess list for the transaction.\nAdds an address to the access list and returns <code>true</code> if the …\nReturns account address.\nReturns the address that this account is delegated to.\nReturns an optional address if valid.\nGet the <code>address</code> for the authorization.\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nAuthority address.\nReturns an optional address based on the current state of …\nList of authorizations, that contains the signature that …\nReturns length of the authorization list.\nReturns vector of fixed size hash(32 bytes)\nCalculates the maximum [EIP-4844] <code>data_fee</code> of the …\nCaller aka Author aka transaction signer.\nReturns authorization the chain id.\nChain Id is optional for legacy transactions.\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nReturns the effective balance that is going to be spent …\nReturns effective gas price is gas price field for Legacy …\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe maximum amount of gas the transaction can use.\nGas price for the transaction. It is only applicable for …\nReturns the inner <code>Authorization</code>.\nReturns the input data of the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nSplits the authorization into parts.\nRecover the authority and transform the signed …\nConvert to a signed authorization by adding a signature.\nReturns true if the authority is invalid.\nReturns true if the authority is valid.\nTransaction kind. It can be Call or Create.\nReturns the maximum balance that can be spent by the …\nMax fee per data gas\nReturns maximum fee that can be paid for the transaction.\nMaximum priority fee per gas.\nCreates a new signed authorization from raw signature …\nInstantiate without performing recovery. This should be …\nReturns the nonce.\nThe nonce of the transaction.\nGet the <code>nonce</code> for the authorization.\nThe nonce for the authorization.\nReturns the signature <code>r</code> value.\nRecover the authority for the authorization.\nReturns the signature <code>s</code> value.\nGets the <code>signature</code> for the authorization. Returns …\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nKeys of storage that would be loaded at the start of …\nReturns the total number of storage keys in this access …\nReturns storage slot keys.\nReturns the inner <code>Authorization</code>.\nTotal gas for all blobs. Max number of blocks is already …\nReturns the transaction type.\nThe value sent to the receiver of <code>TxKind::Call</code>.\nReturns the signature parity value.\nAccess list type is introduced in EIP-2930, and every …\nReturns account address.\nReturns storage slot keys.\nAuthorization trait.\nReturns the address that this account is delegated to.\nAuthority address.\nReturns authorization the chain id.\nReturns the nonce.\nCustom type means that the transaction trait was extended …\nEIP-1559 Fee market change transaction type\nEIP-2930 Access List transaction type\nEIP-4844 Blob transaction type\nEIP-7702 Set EOA account code transaction type\nLegacy transaction type\nTransaction types of all Ethereum transaction\nDerive tx type error\nError type for deriving transaction type used as error in …\nMissing authorization list for EIP-7702\nMissing blob hashes for EIP-4844\nMissing priority fee for EIP-1559\nMissing target for EIP-4844\nMissing target for EIP-4844\nMissing target for EIP-7702\nMissing target for EIP-7873\nThe Transaction Environment is a struct that contains all …\nError type for building <code>TxEnv</code>\nBuilder for constructing <code>TxEnv</code> instances\nSet the access list\nA list of addresses and storage keys that the transaction …\nSet the authorization list\nList of authorizations\nSet the blob hashes\nThe list of blob versioned hashes\nBuild the final <code>TxEnv</code>, returns error if some fields are …\nBuild the final <code>TxEnv</code> with default values for missing …\nCreate a new builder for constructing a <code>TxEnv</code>\nSet the caller address\nCaller aka Author aka transaction signer\nSet the chain ID\nThe chain ID of the transaction\nSet the transaction data\nThe data of the transaction\nDerives tx type from transaction fields and sets it to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the gas limit\nThe gas limit of the transaction.\nSet the gas price\nThe gas price of the transaction.\nSet the gas priority fee\nThe priority fee per gas\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the transaction kind\nThe destination of the transaction\nSet the max fee per blob gas\nThe max fee per blob gas\nSet the max fee per gas.\nCreate a new builder with default values\nSet the transaction nonce\nThe nonce of the transaction\nInsert a list of recovered authorizations into the …\nInsert a list of signed authorizations into the …\nSet the transaction type\nTransaction type\nSet the transaction value\nThe value sent to <code>transact_to</code>")