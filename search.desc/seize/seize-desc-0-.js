searchState.loadedDescShard("seize", 0, "<code>seize</code>\nA type that can be pointer-cast to and from a <code>Link</code>.\nFast, efficient, and robust memory reclamation.\nA batch of pointers to be reclaimed in the future.\nA guard that enables protected loads of concurrent objects.\nA link to the collector.\nA value linked to a collector.\nA guard that keeps the current thread marked as active.\nA guard that protects objects for it’s lifetime, …\nA dummy guard object.\nSets the number of values that must be in a batch before …\nReturns <code>true</code> if this guard belongs to the given collector.\nReturns <code>true</code> if this guard belongs to the given collector.\nReturns <code>true</code> if this guard belongs to the given collector.\nUnprotected guards aren’t tied to a specific collector, …\nCast this <code>link</code> to it’s underlying type.\nCreates a new, independent collector with the same …\nAdd an object to the batch.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nReclaims the pointer immediately.\nMarks the current thread as active, returning a guard that …\nCreate an owned guard that protects objects for it’s …\nSets the frequency of epoch advancement.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nThis method is a no-op.\nRun a function for each object in the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA quick-start guide for working with <code>seize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Link</code> that can be used to link an object to the …\nCreate a <code>Link</code> that can be used to link an object to the …\nLinks a value to the collector and allocates it with <code>Box</code>.\nCreates a new <code>Linked</code> object with the given value.\nCreates a new collector.\nCreate a new batch of deferred objects.\nProtects the load of an atomic pointer.\nProtects the load of an atomic pointer.\nProtects the load of an atomic pointer.\nLoads the pointer directly, using the given ordering.\nCommon memory reclaimers.\nReclaim any values that have been retired.\nRefreshes the guard.\nRefreshes the guard.\nRefreshes the guard.\nThis method is a no-op.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a batch of values, running <code>reclaim</code> when no threads …\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReturns a dummy guard object.\nReclaims memory allocated with <code>Box</code>.\nReclaims memory by dropping the value in place.")