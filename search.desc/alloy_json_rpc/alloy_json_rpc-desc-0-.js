searchState.loadedDescShard("alloy_json_rpc", 0, "Alloy JSON-RPC data types.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nAn object that can be both sent and received over RPC, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSON-RPC 2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized.\nAn item received over an Ethereum pubsub transport.\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSON-RPC 2.0 response object containing a <code>ResponsePayload</code>…\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSON-RPC 2.0 response payload.\nAn object that can be received over RPC, borrowing from the\nAn RPC error.\nAn object that can be both sent and received over RPC.\nAn object that can be received over RPC.\nThe result of a JSON-RPC request.\nAn object that can be sent over RPC.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA string.\nA subscription ID.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nReturns the batch of <code>SerializedRequest</code> if this packet is …\nReturns the batch of <code>Response</code> if this packet is …\nExtracts revert data and tries decoding it into custom …\nExtracts revert data and tries decoding it into given …\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nFallible conversion to an error response.\nReturns the ID as a number, if it is one.\nAttempt to extract revert data from the JsonRpcError be …\nReturns the <code>SerializedRequest</code> if this packet is …\nReturns the <code>Response</code> if this packet is …\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nInstantiate a new <code>DeserError</code> from a <code>serde_json::Error</code> and …\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nInstantiate a new <code>ErrorResp</code> from an error response.\nReturns the error code if this a <code>ResponsePayload::Failure</code>\nReturns the error code if the payload of this response is …\nReturns the error data if this a <code>ResponsePayload::Failure</code>\nReturns a reference to the request extensions.\nReturns a mutable reference to the request extensions.\nReturns the first error code in this packet if it contains …\nReturns the first error data in this packet if it contains …\nReturns the first error message in this packet if it …\nReturns the first <code>ResponsePayload</code> in this packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>HeaderMap</code> from the request metadata if …\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCreate a new error payload for an internal error.\nCreate a new error payload for an internal error.\nCreate a new response with an internal error payload.\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCreate a new error payload for an invalid params error.\nCreate a new error payload for an invalid params error.\nCreate a new response with an invalid params error payload.\nCreate a new error payload for an invalid request.\nCreate a new error payload for an invalid request.\nCreate a new response with an invalid request error …\nCheck if the error is a deserialization error.\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nCheck if the error is an error response.\nCheck if the error is a local usage error.\nReturns <code>true</code> if the ID is <code>None</code>.\nCheck if the error is a null response.\nReturns <code>true</code> if the ID is a number.\nAnalyzes the ErrorPayload and decides if the request …\nCheck if the error is a serialization error.\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nCheck if the error is a transport error.\nCheck if the error is an unsupported feature error.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nInstantiate a new <code>LocalUsageError</code> from a custom error.\nInstantiate a new <code>LocalUsageError</code> from a custom error …\nChange the metadata of the request.\nChange type of the request parameters.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns a mutable reference to the request metadata (ID …\nReturns the request method.\nThe method name.\nReturns an iterator over the requests’ method names\nCreate a new error payload for a method not found error.\nCreate a new error payload for a method not found error.\nCreate a new response with a method not found error …\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nCreate a new error payload for a parse error.\nCreate a new error payload for a parse error.\nCreate a new response with a parsed error payload.\nReturns the payload of this response\nThe response payload.\nThe response payload.\nReturns an iterator over the responses’ payloads.\nPush a request into the packet.\nReturns all <code>SerializedRequest</code>.\nReturns a mutable reference to all <code>SerializedRequest</code>.\nReturns an iterator over the responses’ identifiers.\nReturns a all <code>Response</code>.\nFind responses by a list of IDs.\nThe notification payload.\nInstantiate a new <code>SerError</code> from a <code>serde_json::Error</code>. This …\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nSerialize the inner data into a <code>RawValue</code>.\nConvert the inner types into a <code>RawValue</code> by serializing …\nSerialize the payload of this response.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nReturns the <code>ResponsePayload</code> if this packet is …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nConverts this type into a <code>Result</code> returning the <code>ErrorPayload</code>…\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.")