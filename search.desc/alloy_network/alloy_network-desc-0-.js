searchState.loadedDescShard("alloy_network", 0, "alloy-networks\nBlock header representation with certain fields made …\nReceipt envelope, as defined in EIP-2718.\nA catch-all header type for handling headers on multiple …\nAlias for a catch-all receipt type.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA wallet capable of signing any transaction for the …\nA unifying trait for asynchronous Ethereum signers that …\nA unifying trait for synchronous Ethereum signers that …\nHeader type\nThe network header type.\nThe JSON body of a header response.\nA trait for converting a signer into a <code>NetworkWallet</code>.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nThe wallet type for the network.\nContains the success value\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nTypes for handling unknown network types.\nApply a function to the builder, returning the modified …\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nBlob gas used\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nReturn the receipt’s bloom.\nReturn a reference to the receipt’s bloom.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nDifficulty\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExcess blob gas\nExtra data\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGas Limit\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nGas Used\nReturn true if the signer contains a credential for the …\nHash of the block\nBlock header\nUtility to implement IntoWallet for signer over the …\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nConverts this header into a <code>Header</code> with default values for …\nConvert the error into an unbuilt transaction error.\nConvert the signer into a wallet.\nReturns whether this is a legacy receipt (type 0)\nReturn true if the transaction was successful.\nGet the kind of transaction.\nReturn the receipt logs.\nLogs bloom\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMix Hash\nCreate a new signer with the given signer as the default …\nGet the nonce for the transaction.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nEIP-4788 parent beacon block root\nHash of the parent\nTrim any conflicting keys and populate any computed fields …\nTransactions receipts root hash\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nThe original request that failed to build.\nEIP-7685 requests hash.\nCalculate the length of the rlp payload of the network …\nSeal the header with a known hash.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nSets the default signer to the given address.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the input data for the transaction, respecting the …\nSet the input data for the transaction, respecting the …\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nInteger the size of this block in bytes.\nThe post-transaction state root (pre Byzantium)\nState root hash\nStatus of the transaction.\nReturns the success status of the receipt’s transaction.\nTakes the nonce out of the transaction, clearing it.\nTimestamp\nAddress of the receiver.\nGet the recipient for the transaction.\nGet the recipient for the transaction.\nTotal difficulty\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nTransactions root hash\nApply a fallible function to the builder, returning the …\nApply a fallible function to the builder, returning the …\nAttempts to convert this header into a <code>Header</code>.\nHash of the transaction\nThe transaction type.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data, …\nBuilder-pattern method for setting the input data, …\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nBuilder-pattern method for setting the value.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nTakes the nonce out of the transaction, clearing it.\nTakes the nonce out of the transaction, clearing it.\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA wrapper for <code>AnyRpcBlock</code> that allows for handling unknown …\nA catch-all header type for handling headers on multiple …\nA wrapper for <code>AnyRpcTransaction</code> that allows for handling …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxEip4844Variant</code> variant if the transaction is …\nReturns the <code>TxEip7702</code> variant if the transaction is an …\nReturns the inner Ethereum transaction envelope, if it is …\nReturns the inner transaction <code>TxEnvelope</code> if inner tx type …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nReturns the inner <code>UnknownTxEnvelope</code> if it is an unknown …\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas used\nConverts the transaction type to the given alternative …\nDifficulty\nError types for converting between <code>Any</code> types.\nExcess blob gas\nExtra data\nAdditional fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas Limit\nGas Used\nHash of the block\nTransaction hash.\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nTransaction type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the wrapped rpc block.\nConsumes the outer layer for this transaction and returns …\nSplit the transaction into its parts.\nConsumes the type and returns an iterator over the …\nReturns true if this is the ethereum transaction variant\nReturns true if this is the unknown transaction variant\nLogs bloom\nApplies the given closure to the inner transaction type.\nMemoization for deserialization.\nMix Hash\nCreate a new <code>AnyRpcBlock</code>.\nCreate a new <code>AnyRpcTransaction</code>.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nEIP-4788 parent beacon block root\nHash of the parent\nTransactions receipts root hash\nEIP-7685 requests hash.\nInteger the size of this block in bytes.\nState root hash\nTimestamp\nTotal difficulty\nTransactions root hash\nConverts the transaction to the given alternative that is …\nAttempts to convert the inner RPC <code>Block</code> into a consensus …\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\nAttempts to convert the <code>AnyRpcTransaction</code> into …\nReturns the inner Ethereum transaction envelope, if it is …\nReturns the inner Ethereum transaction envelope, if it is …\nTries to convert inner transactions into a vector of …\nReturns the inner <code>UnknownTxEnvelope</code>, if it is an unknown …\nApplies the given fallible closure to the inner …\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\nAttempts to convert the <code>UnknownTxEnvelope</code> into …\nTransaction type.\nThe transaction type.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nA ConversionError that can capture any error type that …\nReturns a reference to the underlying error value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnyConversionError</code> wrapping the given error …\nDecoding trait for EIP-2718 envelopes. These envelopes …\nIdentifier for an EIP1559 transaction.\nIdentifier for an EIP2930 transaction.\nIdentifier for an EIP4844 transaction.\nIdentifier for an EIP7702 transaction.\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nTrait for checking if a transaction envelope supports a …\nIdentifier for legacy transaction, however a legacy tx is …\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nA trait that helps to determine the type of the …\nGot an unexpected type flag while decoding.\nGeneric wrapper with encoded Bytes, such as transaction …\nDecode the transaction according to EIP-2718 rules. First …\nDecode a transaction according to EIP-2718, ensuring no …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nGet the encoded bytes\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps the value with the <code>Encodable2718::encoded_2718</code> bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA convenience function that encodes the value in the 2718 …\nReturns ownership of the encoded bytes.\nReturns ownership of the underlying value.\nReturns true if the type is an EIP-1559 transaction.\nReturns true if the type is an EIP-2930 transaction.\nReturns true if the type is an EIP-4844 transaction.\nReturns true if the type is an EIP-7702 transaction.\nReturns true if the type is a legacy transaction.\nReturns true if the given type ID corresponds to a …\nReturns true if the type matches the given type.\nMaps the inner value to a new value using the given …\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nWraps the value with the bytes.\nSeal the encodable, by encoding and hashing it.\nSplit the wrapper into <code>Bytes</code> and value tuple\nTransform the value\nreturns <code>None</code> if the inner value is <code>None</code>, otherwise returns …\nCompute the hash as committed to in the MPT trie. This …\nReturns the EIP-2718 type flag.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nGet the underlying value")