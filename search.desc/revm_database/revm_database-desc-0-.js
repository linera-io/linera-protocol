searchState.loadedDescShard("revm_database", 0, "Database implementations.\nError type for implementation of <code>TryDatabaseCommit</code> on <code>Arc</code>.\nDatabase error marker is needed to implement From …\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nAn empty database that always returns default values when …\nAn empty database that always returns default values when …\nError type for when <code>TryDatabaseCommit::try_commit</code> fails.\nThe database error type.\nThe database error type.\nEVM database commit interface that can fail.\nWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.\nGets basic account information.\nGets basic account information.\nGets block hash by block number.\nGets block hash by block number.\nGets account code by its hash.\nGets account code by its hash.\nCommit changes to the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets storage value of address at index.\nGets storage value of address at index.\nAttempt to commit changes to the database.\nAn empty database that always returns default values when …\nAn empty database that always returns default values when …\nCustom benchmarking DB that only has account info for the …\nA cache used in CacheDB. Its kept separate so it can be …\nA Database implementation that stores all state changes in …\nCALLER address\nBYTECODE address\nA Database implementation that stores all state changes in …\nEVM didn’t interacted with this account\nBefore Spurious Dragon hardfork there was a difference …\nEVM cleared storage of this account, mostly by …\nEVM touched this account. For newer hardfork this means it …\nIf account is selfdestructed or newly created, storage …\nAccount info where None means it is not existing. Not …\nGet basic account information.\nAll cached block hashes from the DatabaseRef.\nThe cache that stores all state changes.\nThe cache that stores all state changes.\nGet account code by its hash\nTracks all contracts by their code hash.\nThe underlying database (DatabaseRef) that is used to load …\nThe underlying database (DatabaseRef) that is used to load …\nDiscards the outer cache and return the inner cache.\nFlattens a nested cache by applying the outer cache to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts account info but not override storage\nInserts account storage without overriding account info\nInserts the account’s code into the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if EVM cleared storage of this account\nReturns the account for the given address.\nAll logs that were committed via DatabaseCommit::commit.\nWraps the cache in a CacheDB, creating a nested cache.\nCreates a new cache with the given external database.\nReplaces account storage without overriding account info\nGet the value in an account’s storage slot.\nGet storage value of address at index.\nStorage slots\nAccount status for Block and Bundle states.\nAccountStatus represents the various states an account can …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAccount is modified but not destroyed. This means that …\nAccount is not modified and just loaded from database.\nThis means storage is known, it can be newly created or …\nReturns the next account status on change.\nReturns the next account status on creation.\nReturns the next account status on selfdestruct.\nReturns the next account status on touched or created …\nReturns the next account status on touched empty account …\nTransition to other state while preserving invariance of …\nAccount was destroyed by calling SELFDESTRUCT. This means …\nAccount information focused on creating of database …\nFetch account info if it exists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true if contract was changed\nReturn true of account info was changed.\nCreate new BundleAccount.\nRevert account to previous state and return true if …\nThe approximate size of changes needed to store this …\nAccount status.\nContains both original and present state. When extracting …\nReturn storage slot if it exists.\nUpdate to new state and generate AccountRevert that if …\nWas this account destroyed.\nThis builder is used to help to facilitate the …\nBundle retention policy for applying substate to the …\nBundle state contain only values that got changed\nDoesn’t check original values, see the implementation of …\nOption for <code>BundleState</code> when converting it to the plain …\nOnly plain state is updated.\nBoth, plain state and reverts, are retained\nChecks changed with original values that BundleState has.\nGets account from state.\nApplies a transformation to the builder.\nApplies a mutable transformation to the builder.\nConsumes <code>TransitionState</code> by applying the changes and …\nCreates <code>BundleState</code> instance based on collected …\nReturns builder instance for further manipulation.\nGets bytecode from state.\nCollects contracts info.\nAll created contracts in this block.\nExtends the state with state that is build on top of it.\nExtends the bundle with other state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutable getter for <code>contracts</code> field\nMutable getter for <code>revert_account</code> field\nMutable getter for <code>revert_range</code> field\nMutable getter for <code>revert_storage</code> field\nMutable getter for <code>reverts</code> field\nMutable getter for <code>state_original</code> field\nMutable getter for <code>state_present</code> field\nMutable getter for <code>state_storage</code> field\nGetter for <code>states</code> field\nMutable getter for <code>states</code> field\nReturns <code>true</code> if reverts should be retained.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the bundle state into a <code>StateChangeset</code>.\nConsumes the bundle state and split it into a …\nChecks whether bundle state is empty.\nOriginal value is not known for sure.\nReturn number of changed accounts.\nCreates builder instance.\nCreates it with new and old values of both Storage and …\nPrepends present the state with the given BundleState.\nReverts the state changes by N transitions back.\nCollects account info of BundleState reverts.\nCollects address info of BundleState reverts.\nReverts the state changes of the latest transition.\nCollects storage info of BundleState reverts.\nChanges to revert\nThe size of reverts in the bundle state\nSets contracts info.\nSets account info of BundleState reverts.\nSets address info of BundleState reverts.\nSets storage info of BundleState reverts.\nSets address info of BundleState state.\nSets original account info of BundleState state.\nSets present account info of BundleState state.\nSets storage info of BundleState state.\nReturns the approximate size of changes in the bundle …\nReturns reference to the state.\nAccount state\nCollects address info of BundleState state.\nCollects account info of BundleState state.\nCollects account info of BundleState state.\nThe size of the plain state in the bundle state\nCollects storage info of BundleState state.\nReturns and clears all reverts from BundleState.\nTakes first N raw reverts from the BundleState.\nGenerate a <code>StateChangeset</code> from the bundle state without …\nGenerates a <code>StateChangeset</code> and <code>PlainStateReverts</code> from the …\nCache state contains both modified and original values\nBlock state account with account state\nApplies output of revm execution and create account …\nCreated contracts\nReturns the argument unchanged.\nHas EIP-161 state clear enabled (Spurious Dragon hardfork)\nInserts Loaded (Or LoadedEmptyEip161 if account is empty) …\nSimilar to <code>insert_account</code> but with storage.\nInserts not existing account.\nCalls <code>U::from(self)</code>.\nCreates a new default state.\nSets state clear flag. EIP-161.\nHelper function that returns all accounts.\nCache account contains plain state that gets updated at …\nFetches account info if it exists.\nDrain balance from account and return drained amount and …\nReturns the argument unchanged.\nIncrement balance by <code>balance</code> amount. Assume that balance …\nCalls <code>U::from(self)</code>.\nDissolves account into components.\nReturns true if account is some.\nCreates changed account.\nCreates account that is destroyed.\nCreates new account that is loaded from database.\nCreates new account that is loaded empty from database.\nLoaded not existing account.\nCreates new account that is newly created.\nNewly created account.\nConsumes self and make account as destroyed.\nReturns storage slot if it exists.\nAccount got touched and before EIP161 state clear this …\nTouch empty account, related to EIP-161 state clear.\nPlain state reverts are used to easily store reverts into …\nPlain storage changeset.\nPlain Storage Revert.\n<code>accounts</code>/<code>storages</code>/<code>contracts</code> for inclusion into database.\nStorage reverts\nVector of <strong>not</strong> sorted accounts information.\nVector of account with removed contracts bytecode.\nAddress of account\nAddress of account\nVector of contracts by bytecode hash. <strong>not</strong> sorted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVector of <strong>not</strong> sorted storage.\nStorage key value pairs\nVector of storage with its address.\nContains the storage key and old values of that storage\nWipe storage\nWhether storage is wiped in this revert\nConstructs new <code>PlainStateReverts</code> with pre-allocated …\nSimple plain storage that does not have previous value. …\nThis type keeps track of the current value of a storage …\nThis storage represent values that are before block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the present value differs from the …\nCreates a new <em>unchanged</em> <code>StorageSlot</code> for the given value.\nCreates a new <em>changed</em> <code>StorageSlot</code>.\nReturns the original value of the storage slot.\nReturns the current value of the storage slot.\nWhen loaded with sload present value is set to original …\nThe value of the storage slot before it was changed.\nDepending on previous state of account info this will tell …\nAssumption is that Revert can return full state from any …\nAccount was created and on revert we need to remove it …\nNothing changed\nAccount was changed and on revert we need to put old state.\nSo storage can have multiple types:\nContains reverts of multiple account in multiple …\nCompare two Reverts instances, ignoring the order of …\nExtends reverts with other reverts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume reverts and create <code>PlainStateReverts</code>.\nReturns <code>true</code> if there is nothing to revert, by checking …\nCreates new reverts.\nCreate new selfdestruct revert.\nVery similar to new_selfdestructed but it will add …\nCreates revert for states that were before selfdestruct.\nThe approximate size of changes needed to store this …\nSorts account inside transition by their address.\nGenerates a <code>PlainStateReverts</code>.\nDatabase boxed with a lifetime and Send\nState of blockchain\nMore constrained version of State that uses Boxed database …\nApplies evm transitions to transition state.\nIf EVM asks for block hash, we will first check if they …\nIf EVM asks for block hash, we will first check if they …\nReturn the builder that build the State.\nReturns the size hint for the inner bundle state.\nAfter block is finishes we merge those changes inside …\nAfter block is finishes we merge those changes inside …\nCached state contains both changed from evm execution and …\nCached state contains both changed from evm execution and …\nOptional database that we use to fetch data from\nOptional database that we use to fetch data from\nDrains balances from given account and return those values.\nReturns the argument unchanged.\nIterates over received balances and increment all account …\nCalls <code>U::from(self)</code>.\nGet a mutable reference to the <code>CacheAccount</code> for the given …\nTake all transitions and merge them inside bundle state.\nState clear EIP-161 is enabled in Spurious Dragon hardfork.\nTakess the <code>BundleState</code> changeset from the <code>State</code>, replacing …\nBlock state, it aggregates transactions transitions into …\nBlock state, it aggregates transactions transitions into …\nAddition layer that is going to be used to fetched values …\nAddition layer that is going to be used to fetched values …\nAllows building of State and initializing it with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new builder with an empty database.\nCreate a new builder with the given database.\nStarts the thread that will take transitions and do merge …\nAllows setting prestate that is going to be used for …\nMakes transitions and update bundle state.\nIt will use different cache for the state.\nSet the database.\nWith boxed version of database.\nTakes DatabaseRef and wraps it with WrapDatabaseRef.\nBy default state clear flag is enabled but for initial …\nAccount Created when EVM state is merged to cache state. …\nConsume Self and create account revert from it.\nReturn the balance of account after transition.\nReturns the argument unchanged.\nReturn new contract bytecode if it is changed or newly …\nCalls <code>U::from(self)</code>.\nCreate new LoadedEmpty account.\nPresent bundle account\nReturn the balance of account before transition.\nPrevious account info is needed for account that got …\nMostly needed when previous status Loaded/LoadedEmpty.\nStorage contains both old and new account\nIf there is transition that clears the storage we should …\nUpdate new values of transition. Don’t override old …\nAdd transitions to the transition state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new transition state containing one …\nTake the contents of this <code>TransitionState</code> and replace it …\nBlock state account with account state\nError type for implementation of <code>TryDatabaseCommit</code> on <code>Arc</code>.\nError type for when <code>TryDatabaseCommit::try_commit</code> fails.\nEVM database commit interface that can fail.\nAttempt to commit changes to the database.")