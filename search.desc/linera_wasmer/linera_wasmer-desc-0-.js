searchState.loadedDescShard("linera_wasmer", 0, "<code>Wasmer</code> is the most popular WebAssembly runtime for Rust. …\nApple Aarch64 platforms use their own variant of the …\nThe “architecture” field, which in some cases also …\nThe array type that can hold all the represented values.\nA compiled wasm module, ready to be instantiated.\nHelper trait for a value that is convertible to a <code>EngineRef</code>…\nHelper trait for a value that is convertible to a <code>StoreMut</code>.\nHelper trait for a value that is convertible to a <code>StoreRef</code>.\nAtomic operations are disabled.\nError that can occur during atomic operations. …\nThe memory does not support atomic operations.\nTunable parameters for WebAssembly compilation. This is …\nUnits of WebAssembly memory in terms of 8-bit bytes.\nThe C type (a struct) that can hold/represent all the …\nThe calling convention, which specifies things like which …\nA compilation error occured.\nA compilation error\nThe WebAssembly.CompileError object indicates an error …\nThe binary was valid, but we got an error when trying to …\nThe global is constant and its value does not change\nThe provided binary is corrupted\nThe operation would cause the size of the memory to exceed …\nThe nomenclature is inspired by the <code>cpuid</code> crate. The list …\nThe module was compiled with a CPU feature that is not …\nThe Deserialize error can occur when loading a compiled …\nImport from a different Store. This error occurs when an …\nImport from a different <code>Store</code>. This error occurs when an …\nThe engine type\nThe Builder contents of <code>Engine</code>\nA temporary handle to an <code>Engine</code> EngineRef can be used to …\nContains the error value\nThe <code>ExportError</code> can happen when trying to get a specific …\nAn entity to export.\nA descriptor for an exported WebAssembly value.\nThis trait is used to mark types as gettable from an …\nExports is a special kind of map that allows easily …\nAn iterator over exports.\nAn <code>Extern</code> is the runtime representation of an entity that …\nAn opaque reference to some data. This reference can be …\nAn <code>externref</code> value which can hold opaque data to the wasm …\nA reference to opaque data in the Wasm instance.\nA list of all possible types which can be externally …\nA 32-bit float.\nFloating point 32 bit integer.\nAn <code>f32.const</code>.\nA 64-bit float.\nFloating point 64 bit integer.\nAn <code>f64.const</code>.\nControls which experimental features will be enabled.\nWill return the result of the invocation\nDescription of a frame in a backtrace.\nA trait to convert a Rust value to a <code>WasmNativeType</code> value, …\nA first-class reference to a WebAssembly function.\nA reference to a Wasm function.\nA WebAssembly <code>function</code> instance.\nA external <code>Function</code>.\nFunction export.\nThis external type is the type of a WebAssembly function.\nAn opaque reference to a function environment. The …\nA temporary handle to a <code>FunctionEnv</code>.\nThe signature of a function that is either implemented in …\nA generic serialization error\nA generic deserialization error\nA user defined error value, used for error cases not …\nA generic error.\nA <code>global.get</code> of another global.\nA WebAssembly <code>global</code> instance.\nA external <code>Global</code>.\nGlobal export.\nThis external type is the type of a WebAssembly global.\nGlobals are initialized via the <code>const</code> operators or by …\nWebAssembly global.\nThe <code>Triple</code> of the current host.\nMemory access is outside heap bounds.\nThe <code>HostFunction</code> trait represents the set of functions that\nA 32-bit integer.\nSigned 32 bit integer.\nAn <code>i32.const</code>.\nA 64-bit integer.\nSigned 64 bit integer.\nAn <code>i64.const</code>.\nAn implementation limit was exceeded.\nAn error occurred when checking the import types.\nA descriptor for an imported value into a wasm module.\nAll of the import data used when instantiating.\nIncompatible serialized binary\nAn error than occurs when the exported type and the …\nA WebAssembly Instance is a stateful, executable instance …\nAn error while instantiating a module.\nConvert binary data into <code>bytes::Bytes</code>.\nInput artifact bytes have an invalid length\nInvalid memory was provided.\nThe input WebAssembly code is invalid.\nWill call the function again\nAn IO error\nAn IO error\nAn IO error\nIO Error on a Module Compilation\nA linking ocurred during instantiation.\nThe WebAssembly.LinkError object indicates an error during …\nIndex type of a function defined locally inside the …\nCaller asked for a maximum memory greater than we can give …\nA WebAssembly <code>memory</code> instance.\nA external <code>Memory</code>.\nMemory export.\nThis external type is the type of a WebAssembly memory.\nMarker trait for 32-bit memories.\nMarker trait for 64-bit memories.\nError for invalid <code>Memory</code> access.\nError type describing things that can go wrong when …\nLocation in a WebAssembly memory.\nReturned when a shared memory is required, but the given …\nTrait for the <code>Memory32</code> and <code>Memory64</code> marker types.\nA descriptor for a WebAssembly memory type.\nA WebAssembly <code>memory</code> view.\nAn error from the middleware error.\nA error in the middleware.\nMiddleware error occurred.\nCaller asked for more minimum memory than we can give them.\nThis error arises when an export is missing\nThe provided string feature doesn’t exist\nA WebAssembly Module contains stateless WebAssembly code …\nIndicator of whether a global is mutable or not\nType used to pass this value as an argument or return …\nNative Wasm type.\n<code>NativeWasmTypeInto</code> performs conversions from and into …\nString is not valid UTF-8.\nOne value used for counting.\nType used to represent an offset into a memory. This is <code>u32</code>…\nContains the success value\nAfter the stack is unwound via asyncify what should the …\nCall handler for a store.\nThe “operating system” field, which sometimes implies …\nAddress calculation overflow.\nUnits of WebAssembly pages (as specified to be 65,536 …\nThe error that can happen while parsing a <code>str</code> to retrieve …\nA <code>ref.func &lt;index&gt;</code>.\nA <code>ref.null</code>.\nLow level error with mmap.\nInsufficient resources available for linking.\nInsufficient resources available for execution.\nA struct representing an aborted instruction execution, …\nThe Serialize error can occur when serializing a compiled …\nA handle that exposes operations only relevant for shared …\nA runtime error occured while invoking the start function\nThe store represents all global state that can be …\nUnique ID to identify a context.\nA temporary handle to a <code>Store</code>.\nSet of objects managed by a context.\nA temporary handle to a <code>Store</code>.\n“System V”, which is used on most Unix-like platfoms. …\nA WebAssembly <code>table</code> instance.\nA external <code>Table</code>.\nTable export.\nThis external type is the type of a WebAssembly table.\nA descriptor for a table in a WebAssembly module.\nThis is the target that we will use for compiling the …\nTo many waiter for address.\nA trap ocurred during linking.\nTraps with an error\nFunction which may handle custom signals while processing …\nA target “triple”. Historically such things had three …\nAn engine delegates the creation of memories, tables, and …\nA list of all possible value types in WebAssembly.\nA WebAssembly function that can be called natively (using …\nAtomic operations are not supported by this memory.\nA feature used by the WebAssembly code is not supported by …\nThe compiler doesn’t support a Wasm feature\nReturned when trying to call a memory operation that is …\nThe compiler cannot compile for the given target. This can …\nA 128-bit number\nA 128 bit number.\nA <code>v128.const</code>.\nVersion number of this crate.\nConfiguration for the runtime VM Currently only the stack …\nThe module did not pass validation.\nWebAssembly computations manipulate values of basic value …\nTrait for a Value type. A Value type is a type that is …\nThe value of the global can change over time\nThe number of pages we can have before we run out of byte …\nThe minimum number of pages allowed.\nWebAssembly page sizes are fixed to be 64KiB. Note: large …\nA Wasm translation error occured.\nThe WebAssembly C ABI. …\nA WebAssembly translation error.\nA zero-cost type that represents a pointer to something in …\nAlias for `WasmPtr&lt;T, Memory64&gt;.\nReference to a value in Wasm memory.\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nReference to an array of values in Wasm memory.\nProvides direct memory access to a piece of memory that is …\nIterator over the elements of a <code>WasmSlice</code>.\nThe <code>WasmTypeList</code> trait represents a tuple (list) of Wasm …\n“Windows Fastcall”, which is used on Windows. Note …\nx86_64 target that only supports Haswell-compatible Intel …\nZero value used for <code>WasmPtr::is_null</code>.\nCreates a <code>WasmAccess</code>\nGains direct access to the memory of this slice\nGains direct access to the memory of this slice\nCalculates an offset from the current pointer address. The …\nThe “architecture” (and sometimes the subarchitecture).\nReturns a <code>EngineRef</code> pointing to the underlying context.\nBorrows a new mutable reference\nGet the data as mutable\nReturns a mutable slice that is not yet initialized\nGet a <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 32-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 64-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 64-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nConverts the <code>Value</code> into a <code>RawValue</code>.\nBorrows a new immmutable reference\nGet the data as reference\nGet a <code>SharedMemory</code>.\nReturns a <code>StoreMut</code> pointing to the underlying context.\nReturns a <code>StoreRef</code> pointing to the underlying context.\nReturn an vector of all globals and converted to u128\nReturn the underlying index value as a <code>u32</code>.\nThe “binary format” (rarely used).\nBulk Memory proposal should be enabled\nCalculate number of bytes from pages.\nCall the <code>Function</code> function.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nGet the pointer to the function call trampoline.\nGet the pointer to the function call trampoline.\nCasts this <code>WasmPtr</code> to a <code>WasmPtr</code> of a different type.\nChecked addition. Computes <code>self + rhs</code>, returning <code>None</code> if …\nReturns true if the <code>Exports</code> contains the given export name.\nReturns true if the Imports contains namespace with the …\nCopies the <code>len</code> elements of <code>src_table</code> starting at <code>src_index</code> …\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nCopies a range of the memory and returns it as a vector of …\nCopies the memory to another new memory object\nAttempts to duplicate this memory (if its clonable) in a …\nCopies the memory and returns it as a vector of bytes\nThe triple associated for the target.\nCreate a global with an unset value.\nCreate a global with an unset value.\nCreate a global with an unset value.\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nAllocate memory for just the globals of the current module,\nAllocate memory for just the globals of the current module,\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the memories of the current …\nAllocate memory for just the memories of the current …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nAllocate memory for just the tables of the current module.\nAllocate memory for just the tables of the current module.\nAllocate memory for just the tables of the current module.\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nGet the custom sections of the module given a <code>name</code>.\nReturns a reference to the host state in this function …\nBorrows a new mutable reference of both the attached Store …\nThe C data model for a given target. If the model is not …\nReturns a mutable- reference to the host state in this …\nReturns the size (in bytes) of the <code>Memory</code>.\nReturn the default calling convention for the given target …\nAdd a single import with a namespace <code>ns</code> and name <code>name</code>.\nCreates a <code>WasmRef</code> from this <code>WasmPtr</code> which allows reading …\nDeserializes a WebAssembly module which was previously …\nDeserializes a serialized Module binary into a <code>Module</code>.\nLoad a serialized WebAssembly module from a file and …\nDeserializes a serialized Module located in a <code>Path</code> into a …\nLoad a serialized WebAssembly module from a file and …\nDeserializes a serialized Module located in a <code>Path</code> into a …\nDeserializes a WebAssembly module which was previously …\nDeserializes a serialized module binary into a <code>Module</code>.\nReturns the deterministic id of this engine\nDisable atomics for this memory.\nAttempts to downcast the <code>RuntimeError</code> to a concrete type.\nTry to downcast to the given value.\nAttempts to downcast the <code>RuntimeError</code> to a concrete type.\nThe size in bytes of the offset guard for dynamic heaps.\nAllocates and return an empty array of type <code>Array</code> that …\nReturn the endianness of this architecture.\nReturn the endianness of this target’s architecture.\nGet inner <code>Engine</code>\nReturns the <code>Engine</code>.\nReturns the <code>Engine</code>.\nReturns the <code>Engine</code>.\nReturns mutable reference to <code>Engine</code>\nThe “environment” on top of the operating system …\nWasm exceptions proposal should be enabled\nReturns if an export exist for a given module and name.\nReturns an iterator over the exported types in the Module.\nThe exports for an instance.\nExtended constant expressions proposal should be enabled\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nRetrieves the features for the current Host\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>Self</code> based on an array of values.\nCreates a new WebAssembly module from a Wasm binary.\nCreates a new WebAssembly module from a Wasm binary, …\nBuilds a tuple (list) of values from a C struct of type …\nCreates a new WebAssembly module from a file path.\nConvert a value of kind <code>Self::Native</code> to <code>Self</code>.\nConvert to self from raw value representation.\nConverts a <code>RawValue</code> to a <code>Value</code>.\nConstructs <code>Self</code> based on a slice of values.\nCreate a new instance from a <code>u32</code>.\nCreate an <code>Extern</code> from an <code>wasmer_engine::Export</code>.\nAttempt to return the underlying type of this external …\nReturns the WebAssembly function index for this frame.\nReturns the offset from the original wasm module’s …\nAttempt to access the underlying value of this <code>Value</code>, …\nGet the pointer to the function body.\nReturns a descriptive name of the function for this frame, …\nGet only the functions.\nGet an export given a <code>name</code>.\nRetrieves the current value <code>Value</code> that the Global has.\nRetrieves an element of the table at the provided <code>index</code>.\nReturns a pair of mutable references from two handles.\nGets an export given a module and a name\nGet an export as an <code>Extern</code>.\nGet an export as a <code>Func</code>.\nGet an export as a <code>Global</code>.\nGet an export as a <code>Memory</code>.\nReturns the contents of a namespace as an <code>Exports</code>.\nImplementation of how to get the export corresponding to …\nGet an export as a <code>Table</code>.\nGet an export as a <code>TypedFunction</code>.\nHack to get this working with nativefunc too\nAttempt to return the underlying type of this external …\nGet only the globals.\nGrow memory by the specified amount of WebAssembly <code>Pages</code> …\nGrows the size of the <code>Table</code> by <code>delta</code>, initializating the …\nGrows the memory to at least a minimum size. If the memory …\nReturn the architecture for the current host.\nReturn the operating system for the current host.\nReturn the triple for the current host.\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nReturns the ID of this context.\nReturns the ID of this store\nReturns an iterator over the imported types in the Module.\nGenerate an <code>Imports</code> easily with the <code>imports!</code> macro.\nResolve and return a vector of imports in the order they …\nGet a <code>WasmRef</code> to an element in the slice.\nInsert a new export into this <code>Exports</code> map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds and returns an array of type <code>Array</code> from a tuple …\nConvert binary data into <code>bytes::Bytes</code>.\nBuilds and returns a C struct of type <code>CStruct</code> from a tuple …\nConvert it into a <code>FunctionEnvMut</code>\nConvert self to raw value representation.\nConvert into a string\nConvert into a string\nReturns true if the <code>RuntimeError</code> is the same as T\nTrue if the memory is 64-bit\nChecks if this Architecture is some variant of Clever-ISA\nCheck if two externs are compatible\nIf the slice is empty\nReturn whether or not there are no exports\nReturns <code>true</code> if the number of elements is 0.\nReturns whether the given value is from the given store.\nReturns whether the given value is from the given store.\nChecks whether this <code>ExternRef</code> can be used with the given …\nChecks whether this <code>Function</code> can be used with the given …\nChecks whether this <code>Global</code> can be used with the given …\nChecks whether this <code>Memory</code> can be used with the given …\nChecks whether this <code>Table</code> can be used with the given …\nChecks whether this <code>Extern</code> can be used with the given …\nChecks whether a value can be used with the given context.\nReturns a boolean indicating if the enum is set to mutable.\nCheck if target is a native (eq to host) or not\nChecks whether the <code>WasmPtr</code> is null.\nReturns true if <code>Type</code> matches any of the numeric types. …\nReturns true if <code>Type</code> matches either of the reference types.\nCheck if the provided bytes are wasm-like\nReturns an iterator of all the elements in the slice\nGet an iterator over the exports.\nIterates through all the imports in this structure\nGet an iterator over the elements in this slice.\nReturn an immutable iterator over all globals\nReturns an iterator of all the elements in the slice\nNumber of elements in this slice\nReturn the number of exports in the <code>Exports</code> map.\nGet the number of elements in this slice.\nReturns the largest value that can be represented by the …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nGet only the memories.\nGet the underlying memory.\nAttempt to return the underlying type of this external …\n64-bit Memory proposal should be enabled\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nReturns a reference the <code>message</code> stored in <code>Trap</code>.\nThe error message\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nGets the <code>Module</code> associated with this instance.\nReturns the module name that this import is expected to …\nModule Linking proposal should be enabled\nReturns the identifer of the module that this frame is for.\nReturns the offset within the original wasm module this …\nMulti Memory proposal should be enabled\nMulti Value proposal should be enabled\nA flag indicating whether the value may change at runtime.\nReturns the name of the current module.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known by.\nThe name of the middleware where the error was created\nConvert a <code>Native</code> to an <code>Offset</code>.\nCreate an EngineRef from an Engine\nCreate a new <code>WasmPtr</code> at the given offset.\nCreates a new <code>Store</code> with a specific <code>Engine</code>.\nCreates a new generic <code>RuntimeError</code> with the given <code>message</code>.\nCreates a new <code>Exports</code>.\nMake a new extern reference\nCreates a new host <code>Function</code> (dynamic) with the provided …\nCreate a new <code>Global</code> with the initial value <code>Value</code>.\nCreates a new host <code>Memory</code> from the provided <code>MemoryType</code>.\nCreates a new <code>Table</code> with the provided <code>TableType</code> definition.\nMake a new FunctionEnv\nCreate a new <code>Imports</code>.\nCreates a new <code>Instance</code> from a WebAssembly <code>Module</code> and a set …\nCreates a new <code>WasmRef</code> at the given offset in a memory.\nCreates a new <code>WasmSlice</code> starting at the given offset in …\nCreates a new WebAssembly Module given the configuration …\nCreates a new target given a triple\nCreate a new <code>MiddlewareError</code>\nCreates a new FrameInfo, useful for testing.\nCreates a new Function Type with the given parameter and …\nCreate a new Global variable\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a WebAssembly memory given …\nCreates a new import descriptor which comes from <code>module</code> …\nCreates a new export which is exported with the given <code>name</code> …\nCreate a new memory location for a 32bit memory.\nCreates a new <code>Instance</code> from a WebAssembly <code>Module</code> and a …\nCreate a memory object from an existing memory and …\nCreates <code>RuntimeError</code> from an error and a WasmTrace\nCreate a mutable <code>Global</code> with the initial value <code>Value</code>.\nCreates a new host <code>Function</code> from a native function.\nCreates a new host <code>Function</code> with an environment from a …\nCreates a new host <code>Function</code> (dynamic) with the provided …\nNotify up to <code>count</code> waiters waiting for the memory location.\nReturns a null <code>UserPtr</code>.\nReturns a null <code>externref</code> value.\nReturns the ObjectMutable\nGet the offset into Wasm linear memory for this <code>WasmPtr</code>.\nGet the offset into Wasm linear memory for this <code>WasmRef</code>.\nGet the offset into Wasm linear memory for this <code>WasmSlice</code>.\nConvert an <code>Offset</code> to a <code>Native</code>.\nSets the unwind callback which will be invoked when the …\nThe “operating system” (sometimes also the …\nReturns the number of parameters that this function takes.\nParameter types.\nReturn the pointer bit width of this target’s …\nReturn the pointer width of this target’s architecture.\nReads the address pointed to by this <code>WasmPtr</code> in a memory.\nSafely reads bytes from the memory at the given offset.\nReads the location pointed to by this <code>WasmRef</code>.\nReads an element of this slice.\nReads the entire slice into the given buffer.\nReads the entire slice into the given uninitialized buffer.\nReads this <code>WasmSlice</code> into a <code>BytesMut</code>\nReads this <code>WasmSlice</code> into a <code>slice</code>.\nReads this <code>WasmSlice</code> into a <code>Vec</code>.\nSafely reads a single byte from memory at the given offset\nSafely reads bytes from the memory at the given offset.\nReads a sequence of values from this <code>WasmPtr</code> until a value …\nReads a UTF-8 string from the <code>WasmPtr</code> with the given …\nReads a null-terminated UTF-8 string from the <code>WasmPtr</code>.\nReference Types proposal should be enabled\nRegister a list of externs into a namespace.\nRelaxed SIMD proposal should be enabled\nResets the memory back to zero length\nReturns the number of results this function produces.\nReturn types.\nChecks whether two stores are identical. A store is …\nChecks whether two stores are identical. A store is …\nChecks whether two stores are identical. A store is …\nSerializes a module into a binary representation that the …\nSerializes a module into a file that the <code>Engine</code> can later …\nSets a custom value <code>Value</code> to the runtime Global.\nSets an element <code>val</code> in the Table at the provided <code>index</code>.\nRetrieves an empty set of <code>CpuFeature</code>s.\nSet a global, at index idx. Will panic if idx is out of …\nSets the ID of this store\nSets the name of the current module. This is normally …\nSet the trap handler in this store.\nAttempts to clone this memory (if its clonable) in a new …\nWhether the memory may be shared between multiple threads.\nThe signal handler\nSIMD proposal should be enabled\nThe size of the array\nReturns the size (in <code>Pages</code>) of the <code>Memory</code>.\nRetrieves the size of the <code>Table</code> (in elements)\nCreates a <code>WasmSlice</code> starting at this <code>WasmPtr</code> which allows …\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nCalculates an offset from the current pointer address. The …\nGet a <code>WasmSlice</code> for a subslice of this slice.\nsys\nAttempt to return the underlying type of this external …\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGet only the tables.\nTail call proposal should be enabled\nThreads proposal should be enabled\nConvert self to <code>Self::Native</code>.\nReturns trap code, if it’s a Trap\nTo <code>VMExtern</code>.\nReturns a list of function frames in WebAssembly code that …\nThe triple associated for the target.\nAttempts to clone this memory (if its clonable)\nReturns the <code>FunctionType</code> of the <code>Function</code>.\nReturns the <code>GlobalType</code> of the <code>Global</code>.\nReturns the <code>MemoryType</code> of the <code>Memory</code>.\nReturns the <code>TableType</code> of the <code>Table</code>.\nReturn the underlying type of the inner <code>Extern</code>.\nReturns the corresponding <code>Type</code> for this <code>Value</code>.\nReturns the expected type of this import.\nReturns the type of this export.\nThe type of the value stored in the global.\nThe type of data stored in elements of the table.\nTransform this WebAssembly function into a typed function. …\nReturn a <code>Triple</code> with all unknown fields.\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Value</code>, panicking if it…\nCreates a custom user Error.\nAttempt to access the underlying value of this <code>Value</code>, …\nValidates a new WebAssembly Module given the configuration …\nThe “vendor” (whatever that means).\nCreates a view into the memory that then allows for read …\nThe <code>vm</code> module re-exports wasmer-vm types.\nGet the VMConfig for this tunables Currently, VMConfig …\nGet the VMConfig for this tunables Currently, VMConfig …\nGet the VMConfig for this tunables Currently, VMConfig …\nGet the VMConfig for this tunables Currently, VMConfig …\nWait for the memory location to be notified.\nWake up all atomic waiters.\nOptionnal stack size (in byte) of the VM. Value lower than …\nGet the Wasm types for the tuple (list) of currently …\nCreates a new <code>Exports</code> with capacity <code>n</code>.\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nSafely writes bytes to the memory at the given offset.\nWrites to the location pointed to by this <code>WasmRef</code>.\nWrites to an element of this slice.\nWrites the contents of a C struct to an array of <code>RawValue</code>.\nWrite the given slice into this <code>WasmSlice</code>.\nSafely writes a single byte from memory at the given offset\nThis method is passed a byte slice which contains the byte …\nHow many bytes were expected\nHow many bytes the artifact contained\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nA compiled wasm module, ready to be instantiated.\nTunable parameters for WebAssembly compilation. This is …\nThe compiler configuration options.\nGlobal configuration options used to create an …\nPossible optimization levels for the Cranelift codegen …\nThe Builder contents of <code>Engine</code>\nControls which experimental features will be enabled. …\nA function middleware specialized for a single function.\nThe state of the binary reader. Exposed to middlewares to …\nA shared builder for function middlewares.\nThe custom trait to access to all the <code>sys</code> function in the …\nNo optimizations performed, minimizes compilation time by …\nGenerates the fastest possible code, but may take longer.\nSimilar to <code>speed</code>, but also performs transformations aimed …\nAn engine delegates the creation of memories, tables, and …\nConfiguration for the runtime VM Currently only the stack …\nThis indicates if the Artifact is allocated and can be run …\nConfigures whether the WebAssembly bulk memory operations …\nBulk Memory proposal should be enabled\nEnable NaN canonicalization.\nEnable NaN canonicalization.\nEnable NaN canonicalization.\nEnable NaN canonicalization.\nGets the custom compiler config\nTransform it into the compiler\nTransform it into the compiler\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nGets the default features for this compiler in the given …\nGets the default features for this compiler in the given …\nGets the default features for this compiler in the given …\nGets the default features for this compiler in the given …\nDeserialize a serialized artifact.\nLoad a serialized WebAssembly module from a memory mapped …\nLoad a serialized WebAssembly module from a memory mapped …\nDeserialize a ArtifactBuild from an object file\nDeserialize a serialized artifact.\nThe size in bytes of the offset guard for dynamic heaps.\nEnable Position Independent Code (PIC).\nEnable Position Independent Code (PIC).\nEnable Position Independent Code (PIC).\nEnable compiler IR verification.\nEnable compiler IR verification.\nEnable compiler IR verification.\nBuild the <code>Engine</code> for this configuration\nWasm exceptions proposal should be enabled\nExtended constant expressions proposal should be enabled\nThe Wasm features\nProcesses the given operator.\nFinishes the instantiation of a just created <code>VMInstance</code>.\nReturns the dynamic function trampolines allocated in …\nReturns the function call trampolines allocated in memory …\nReturns the functions allocated in memory or this <code>Artifact</code> …\nGenerates the flags for the compiler\nGet the <code>BaseTunables</code> for a specific Target\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>ArtifactBuild</code> from component parts.\nGenerates a <code>FunctionMiddleware</code> for a given function.\nGet the default config for the sys Engine\nCreate a headless <code>Engine</code>\nCreate a new headless Backend\nA unique identifier for this object.\nCrate an <code>Instance</code> from this <code>Artifact</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provided bytes look like a serialized …\nGenerates the ISA for the provided target\nConfigures whether the WebAssembly 64-bit memory proposal …\n64-bit Memory proposal should be enabled\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nGet a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nConfigures whether the WebAssembly module linking proposal …\nModule Linking proposal should be enabled\nConfigures whether the WebAssembly multi-memory proposal …\nMulti Memory proposal should be enabled\nConfigures whether the WebAssembly multi-value proposal …\nMulti Value proposal should be enabled\nCreate a new <code>Engine</code> with the given config\nCompile a data buffer into a <code>ArtifactBuild</code>, which may then …\nCreate a new builder with pre-made components\nCreates a new configuration object with the default …\nCreates a new configuration object with the default …\nCreate a new feature\nThe optimization levels when optimizing the IR.\nDo preinstantiation logic that is executed before …\nPushes a middleware onto the back of the middleware chain.\nPushes a middleware onto the back of the middleware chain.\nPushes a middleware onto the back of the middleware chain.\nPush an operator.\nConfigures whether the WebAssembly reference types …\nReference Types proposal should be enabled\nRegister thie <code>Artifact</code> stack frame information into the …\nRelaxed SIMD proposal should be enabled\nSet the features\nSets the hash algorithm\nSet the hashing algorithm\nSet the target\nAttach a Tunable to this engine\nReturns the associated VM signatures for this <code>Artifact</code>.\nConfigures whether the WebAssembly SIMD proposal will be …\nSIMD proposal should be enabled\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGet a <code>TableStyle</code> for the provided <code>TableType</code>.\nConfigures whether the WebAssembly tail-call proposal will …\nTail call proposal should be enabled\nThe GlobalFrameInfoRegistration needs to be transfered to …\nGets the target\nThe target\nConfigures whether the WebAssembly threads proposal will …\nThreads proposal should be enabled\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nGet a reference to attached Tunable of this engine\nGet the VMConfig for this tunables Currently, VMConfig …\nOptionnal stack size (in byte) of the VM. Value lower than …\nThe memory does not support atomic operations.\nSignatures are stored in the table and checked in the …\nThe operation would cause the size of the memory to exceed …\nThe actual memory can be resized and moved.\nA user defined error value, used for error cases not …\nInvalid memory was provided.\nRepresents memory that is used by the WebAsssembly module\nCaller asked for a maximum memory greater than we can give …\nError type describing things that can go wrong when …\nReturned when a shared memory is required, but the given …\nImplementation styles for WebAssembly linear memory.\nCaller asked for more minimum memory than we can give them.\nLow level error with mmap.\nAddress space is allocated up front.\nImplementation styles for WebAssembly tables.\nReturned when trying to call a memory operation that is …\nConfiguration for the runtime VM Currently only the stack …\nA function export value.\nA Global instance\nRepresents linear memory that can be either owned or shared\nThe fields compiled code needs to access to utilize a …\nA shared linear memory instance.\nA table instance.\nThe fields compiled code needs to access to utilize a …\nPointer to the <code>VMCallerCheckedAnyfunc</code> which contains data …\nPointer to the table data.\nThe start address which is always valid, even if the …\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nCopies this global\nCopies the table into a new table\nCopy <code>len</code> elements from <code>table[src_index..]</code> to …\nThe current number of elements in the table.\nThe current logical size of this linear memory in bytes.\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nAdd current thread to the waiter hash, and wait until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates VMMemory from a custom implementation - the …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear table instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nGet reference to the specified element.\nReturns the number of pages in the allocated memory block\nReturns the size of the table\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow table by the specified amount of elements.\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nAssociated data owned by a host function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe function kind (specifies the calling convention for the\nCreate a new, zero bit-pattern initialized global from a …\nCreate a new linear memory instance with specified minimum …\nCreates a new linear memory instance of the correct type …\nCreate a new linear table instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nReturns the offset-guard size\nResets the memory back to zero length\nResets the memory down to a zero size\nResets the memory down to a zero size\nSet reference to the specified element.\nThe function type, used for compatibility checking.\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the number of allocated elements.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the style for this Table.\nAccess the internal atomics handler.\nAttempts to clone this memory (if its clonable)\nShared memory can always be cloned\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nGet the type of the global.\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this Table.\nGet a pointer to the underlying definition used by the …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMTableDefinition</code> for exposing the table to …\nOptionnal stack size (in byte) of the VM. Value lower than …\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.")