searchState.loadedDescShard("stdext", 0, "Additional features for the Rust standard library.\n<code>compile_warning</code> macro is a brother of <code>std::compile_error</code>, …\nThis macro returns the name of the enclosing function, …\nFreestanding version of <code>std::default::Default::default()</code>.\nExtension traits for <code>std::time::Duration</code>.\nThis macro returns the name of the enclosing function. As …\nVarious helper macros.\nExtensions for the built-in numeric types.\nExtension traits for <code>std::Option</code>.\nA “prelude” module which re-exports all the extension …\nExtension traits for <code>std::Result</code>.\nChecks whether supplied <code>Result</code> variable is <code>Ok</code> and if so, …\nChecks whether supplied <code>Option</code> variable is <code>Some</code> and if so, …\nExtension traits for <code>str</code> primitive type.\nExtension traits for the standard synchronization …\nAttempts to get variant from the enum variable.\nSimilar to <code>try_match</code> but additionally unwraps the result.\nExtension traits for <code>std::Vec</code>.\nFreestanding version of <code>std::default::Default::default()</code>.\nExtension trait with useful methods for <code>std::time::Duration</code>…\nAdds the specified amount of days to the <code>Duration</code> object.\nAdds the specified amount of hours to the <code>Duration</code> object.\nAdds the specified amount of microseconds to the <code>Duration</code> …\nAdds the specified amount of milliseconds to the <code>Duration</code> …\nAdds the specified amount of minutes to the <code>Duration</code> …\nAdds the specified amount of nanoseconds to the <code>Duration</code> …\nAdds the specified amount of seconds to the <code>Duration</code> …\nReturns the number of <em>whole</em> hours contained by this …\nReturns the number of <em>whole</em> hours contained by this …\nReturns the number of <em>whole</em> minutes contained by this …\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nExtensions for the built-in floating point types.\nExtensions for built-in integer traits.\nSet of methods to safely convert floating number into an …\nCeils the floating number and attempts to convert it into …\nFloors the floating number and attempts to convert it into …\nRounds the floating number and attempts to convert it into …\nBehaves the same as <code>number.ceil() as &lt;type&gt;</code>. See <code>f32::ceil</code> …\nBehaves the same as <code>number.floor() as &lt;type&gt;</code>. See …\nBehaves the same as <code>number.round() as &lt;type&gt;</code>. See …\nThe size of this integer type in bits.\nBuilt-in integers interface exposed as a trait.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nSee <code>u128::checked_add</code>.\nSee <code>u128::checked_div</code>.\nSee <code>u128::checked_div_euclid</code>.\nSee <code>u128::checked_mul</code>.\nSee <code>u128::checked_neg</code>.\nSee <code>u128::checked_pow</code>.\nSee <code>u128::checked_rem</code>.\nSee <code>u128::checked_rem_euclid</code>.\nSee <code>u128::checked_shl</code>.\nSee <code>u128::checked_shr</code>.\nSee <code>u128::checked_sub</code>.\nSee <code>u128::count_ones</code>.\nSee <code>u128::count_zeros</code>.\nSee <code>u128::div_euclid</code>.\nSee <code>u128::from_be</code>.\nSee <code>u128::from_le</code>.\nSee <code>u128::from_str_radix</code>.\nSee <code>u128::leading_ones</code>.\nSee <code>u128::leading_zeros</code>.\nSee <code>u128::overflowing_add</code>.\nSee <code>u128::overflowing_div</code>.\nSee <code>u128::overflowing_div_euclid</code>.\nSee <code>u128::overflowing_mul</code>.\nSee <code>u128::overflowing_neg</code>.\nSee <code>u128::overflowing_pow</code>.\nSee <code>u128::overflowing_rem</code>.\nSee <code>u128::overflowing_rem_euclid</code>.\nSee <code>u128::overflowing_shr</code>.\nSee <code>u128::overflowing_sub</code>.\nSee <code>u128::pow</code>.\nSee <code>u128::rem_euclid</code>.\nSee <code>u128::reverse_bits</code>.\nSee <code>u128::rotate_left</code>.\nSee <code>u128::rotate_right</code>.\nSee <code>u128::saturating_add</code>.\nSee <code>u128::saturating_mul</code>.\nSee <code>u128::saturating_pow</code>.\nSee <code>u128::saturating_sub</code>.\nSee <code>u128::swap_bytes</code>.\nSee <code>u128::to_be</code>.\nSee <code>u128::to_le</code>.\nSee <code>u128::trailing_ones</code>.\nSee <code>u128::trailing_zeros</code>.\nSee <code>u128::wrapping_add</code>.\nSee <code>u128::wrapping_div</code>.\nSee <code>u128::wrapping_div_euclid</code>.\nSee <code>u128::wrapping_mul</code>.\nSee <code>u128::wrapping_neg</code>.\nSee <code>u128::wrapping_pow</code>.\nSee <code>u128::wrapping_rem</code>.\nSee <code>u128::wrapping_rem_euclid</code>.\nSee <code>u128::wrapping_shl</code>.\nSee <code>u128::wrapping_shr</code>.\nSee <code>u128::wrapping_sub</code>.\nExtension trait with useful methods for <code>std::option::Option</code>…\nCombines <code>self</code> and another <code>Option</code>.\nCombines <code>self</code> and another <code>Option</code> with function <code>f</code>.\nExtension trait with useful methods for <code>std::result::Result</code>…\nCombines <code>self</code> and another <code>Result</code>.\nCombines <code>self</code> and another <code>Result</code> with function <code>f</code>.\nExtension trait with useful methods for primitive type <code>str</code>.\nVersion of <code>str::splitn</code> which expects the <strong>exact</strong> amount of …\nExtension traits for <code>std::sync::Mutex</code>.\nExtension traits for <code>std::sync::RwLock</code>.\nExtension trait with useful methods for <code>std::sync::Mutex</code>.\nShorthand for <code>mutex.lock().unwrap()</code> with a better panic …\nExtension trait with useful methods for <code>std::sync::RwLock</code>.\nShorthand for <code>lock.read().unwrap()</code> with a better panic …\nShorthand for <code>lock.write().unwrap()</code> with a better panic …\nExtension trait with useful methods for <code>std::vec::Vec</code>.\nExtension trait with useful methods for <code>std::vec::Vec</code>.\nRemoves the first instance of <code>item</code> from the vector if the …\nResizes the <code>Vec</code> in-place if the provided <code>new_len</code> is <strong>greater</strong>…\nResizes the <code>Vec</code> in-place if the provided <code>new_len</code> is <strong>greater</strong>…")