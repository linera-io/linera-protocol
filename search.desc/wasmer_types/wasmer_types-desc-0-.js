searchState.loadedDescShard("wasmer_types", 0, "This are the common types and utility tools for using …\nAlignment of the metadata.\nThe ABI for this type (i32, i64, f32, f64)\nAddend to add to the symbol value.\nApple Aarch64 platforms use their own variant of the …\nThe “architecture” field, which in some cases also …\nAn archived <code>DataInitializerLocation</code>\nAn archived <code>OwnedDataInitializer</code>\nAn archived <code>SerializableCompilation</code>\nAn archived <code>SerializableModule</code>\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nThe “binary format” field, which is usually omitted, …\nUnits of WebAssembly memory in terms of 8-bit bytes.\nCurrent ABI version. Increment this any time breaking …\nSignatures are stored in the table and checked in the …\nThe calling convention, which specifies things like which …\nceil.f32\nceil.f64\nOffset in bytes from the beginning of the function.\nThe global is constant and its value does not change\nA custom vendor. “Custom” in this context means that …\nIndex type of a custom section inside a WebAssembly module.\ndata.drop\nIndex type of a passive data segment inside the …\nA data initializer for linear memory.\nAny struct that acts like a <code>DataInitializer</code>.\nA memory index and offset within that memory where a data …\nAny struct that acts like a <code>DataInitializerLocation</code>.\nThe actual memory can be resized and moved.\nelem.drop\nIndex type of a passive element segment inside the …\nThe target memory endianness.\nThe “environment” field, which specifies an ABI …\nAn entity to export.\nA descriptor for an exported WebAssembly value.\nThis iterator allows us to iterate over the exports and …\nA reference to opaque data in the Wasm instance.\nA list of all possible types which can be externally …\nFloating point 32 bit integer.\nAn <code>f32.const</code>.\nFloating point 64 bit integer.\nAn <code>f64.const</code>.\nControls which experimental features will be enabled. …\nWill return the result of the invocation\nfloor.f32\nfloor.f64\nDescription of a frame in a backtrace.\nref.func\nA reference to a Wasm function.\nFunction export.\nFunction import.\nThis external type is the type of a WebAssembly function.\nIndex type of a function (imported or local) inside the …\nThe signature of a function that is either implemented in …\nA <code>global.get</code> of another global.\nGlobal export.\nGlobal import.\nThis external type is the type of a WebAssembly global.\nIndex type of a global variable (imported or local) inside …\nGlobals are initialized via the <code>const</code> operators or by …\nWebAssembly global.\nHashing algorithm to be used for the module info\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nA <code>heap_addr</code> instruction was misaligned.\nSigned 32 bit integer.\nAn <code>i32.const</code>.\nSigned 64 bit integer.\nAn <code>i64.const</code>.\nAn entity to import.\nHash key of an import\nA descriptor for an imported value into a wasm module.\nmemory.atomic.botify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nThis iterator allows us to iterate over the imports and …\nIndirect call to a null table entry.\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nWill call the function again\nLength of the metadata header.\nThe name of a runtime library routine.\nIndex type of a function defined locally inside the …\nIndex type of a global defined locally inside the …\nIndex type of a memory defined locally inside the …\nIndex type of a table defined locally inside the …\nMemory export.\nMemory import.\nThis external type is the type of a WebAssembly memory.\nMarker trait for 32-bit memories.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nMarker trait for 64-bit memories.\nIndex type of a linear memory (imported or local) inside …\nTrait for the <code>Memory32</code> and <code>Memory64</code> marker types.\nImplementation styles for WebAssembly linear memory.\nA descriptor for a WebAssembly memory type.\nMetadata header which holds an ABI version and the length …\nThe hash of a WebAssembly module.\nA translated WebAssembly module, excluding the function …\nIndicator of whether a global is mutable or not\nType used to pass this value as an argument or return …\n<code>NativeWasmType</code> represents a Wasm type that has a direct …\nnearest.f32\nnearest.f64\nOne value used for counting.\nType used to represent an offset into a memory. This is <code>u32</code>…\nAfter the stack is unwound via asyncify what should the …\nThe “operating system” field, which sometimes implies …\nAs <code>DataInitializer</code> but owning the data rather than holding …\nThe only error that can happen when converting <code>Bytes</code> to …\nUnits of WebAssembly pages (as specified to be 65,536 …\nThe width of a pointer (in the default address space).\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nRaw representation of a WebAssembly value.\nA <code>ref.func &lt;index&gt;</code>.\nA <code>ref.null</code>.\nThe compilation related data for a serialized modules\nSerializable struct that is able to serialize from and to …\nSha256\nsha256\nIndex type of a signature (imported or local) inside the …\nA source location.\nThe current stack space was exhausted.\nAddress space is allocated up front.\nUnique ID to identify a context.\n“System V”, which is used on most Unix-like platfoms. …\nTable export.\nTable import.\nThis external type is the type of a WebAssembly table.\nA <code>table_addr</code> instruction detected an out-of-bounds error.\ntable.copy\ntable.fill\ntable.get for local tables\ntable.grow for local tables\nIndex type of a table (imported or local) inside the …\ntable.init\nA WebAssembly table initializer.\ntable.set for local tables\ntable.size for local tables\nImplementation styles for WebAssembly tables.\nA descriptor for a table in a WebAssembly module.\nTarget specific type for shared signature index.\nTraps with an error\nA trap code describing the reason for a trap.\nInformation about trap.\nA target “triple”. Historically such things had three …\ntrunc.f32\ntrunc.f64\nA list of all possible value types in WebAssembly.\nAn atomic memory access was attempted with an unaligned …\nCode that was supposed to have been unreachable was …\nThe WebAssembly V128 type\nA 128 bit number.\nA <code>v128.const</code>.\nVersion number of this crate.\nAn index type for builtin functions.\nThis class computes offsets to fields within VMContext and …\nTrait for a Value type. A Value type is a type that is …\nThe value of the global can change over time\nThe “vendor” field, which in practice is little more …\nThe number of pages we can have before we run out of byte …\nThe minimum number of pages allowed.\nWebAssembly page sizes are fixed to be 64KiB. Note: large …\nType for this <code>NativeWasmType</code>.\nThe WebAssembly C ABI. …\n“Windows Fastcall”, which is used on Windows. Note …\nx86_64 target that only supports Haswell-compatible Intel …\nXXHash\nxxhash\nZero value used for <code>WasmPtr::is_null</code>.\nThe “architecture” (and sometimes the subarchitecture).\nSafety\nDeserialize an archived module.\nGet the raw hash.\nConvert the immediate into a slice.\nExtracts a string slice.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nOptionally, a global variable giving a base index.\nThe archived counterpart of <code>DataInitializerLocation::base</code>\nOptionally a Global variable base to initialize at.\nThe “binary format” (rarely used).\nReturn the number of bits in a pointer.\nRead the bits of this source location.\nReturns the total number of builtin functions.\nConfigures whether the WebAssembly bulk memory operations …\nBulk Memory proposal should be enabled\nReturn the number of bytes in a pointer.\nGet the bytes corresponding to the V128 value\nCalculate number of bytes from pages.\nChecked addition. Computes <code>self + rhs</code>, returning <code>None</code> if …\nThe offset of the trapping instruction in native code. It …\nTypes for compilation.\nThe archived counterpart of <code>SerializableModule::compilation</code>\nThe main serializable compilation object\nThe archived counterpart of …\nCompilation informations\nReturns the CPU features for this Artifact\nThe archived counterpart of …\nCPU Feature flags for this compilation\nCreate a <code>ModuleInfo</code> for instantiation\nThe archived counterpart of …\nGet the custom sections of the module given a <code>name</code>.\nCustom sections in the module.\nThe archived counterpart of …\nThe data for each CustomSection in the module.\nThe initialization data.\nThe archived counterpart of <code>OwnedDataInitializer::data</code>\nThe initialization owned data.\nReturns data initializers to pass to <code>VMInstance::initialize</code>\nThe archived counterpart of …\nDatas initializers\nThe C data model for a given target. If the model is not …\nThe archived counterpart of <code>SerializableCompilation::debug</code>\nReturn the default calling convention for the given target …\nDeserialize a Module from a slice. The slice must have the …\nDeserialize a compilation module from an archive\nDeserialize a Module from a slice. The slice must have the …\nThe archived counterpart of …\nThe values to write into the table elements.\nReturn the endianness of this architecture.\nReturn the endianness of this architecture.\nReturn the endianness of this target’s architecture.\nThe entity module, with common helpers for Rust structures\nMacro which provides the common implementation of a 32-bit …\nThe “environment” on top of the operating system …\nThe WebAssembly possible errors\nWasm exceptions proposal should be enabled\nGet the exported signatures of the module\nGet the export types of the module\nExported entities.\nExtended constant expressions proposal should be enabled\nReturns the features for this Artifact\nField name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nAttempt to return the underlying type of this external …\nConvert a <code>LocalFunctionIndex</code> into a <code>FunctionIndex</code>.\nReturns the WebAssembly function index for this frame.\nReturns the offset from the original wasm module’s …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nReturns a descriptive name of the function for this frame, …\nWebAssembly function names.\nThe archived counterpart of …\nGet only the functions\nGet only the functions\nWebAssembly functions (imported and local).\nReturns an index for wasm’s <code>data.drop</code> instruction.\nReturns an index for wasm’s <code>elem.drop</code>.\nReturns an index for wasm’s <code>func.ref</code> instruction.\nReturns an index for wasm’s imported <code>memory.grow</code> builtin …\nReturns an index for wasm’s imported <code>memory.size</code> builtin …\nReturns an index for wasm’s imported <code>memory.atomic.notify</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait32</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait64</code>…\nReturns an index for wasm’s <code>memory.copy</code> for imported …\nReturns an index for wasm’s <code>memory.fill</code> for imported …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nReturns an index for wasm’s <code>memory.grow</code> builtin function.\nReturns an index for wasm’s <code>memory.size</code> builtin function.\nReturns an index for wasm’s local <code>memory.atomic.notify</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait32</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait64</code> …\nReturns an index for wasm’s <code>memory.copy</code> for locally …\nReturns an index for wasm’s <code>memory.fill</code> for locally …\nReturns an index for wasm’s <code>memory.init</code> instruction.\nGet the given passive element, if it exists.\nReturns an index for wasm’s <code>raise_trap</code> instruction.\nReturns an index for wasm’s <code>table.copy</code> when both tables …\nReturns an index for wasm’s <code>table.fill</code> instruction for …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.init</code>.\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nAttempt to return the underlying type of this external …\nConvert a <code>LocalGlobalIndex</code> into a <code>GlobalIndex</code>.\nWebAssembly global initializers.\nGet only the globals\nGet only the globals\nWebAssembly global variables (imported and local).\nReturns the module hash if available\nhash of the module\nReturn the architecture for the current host.\nReturn the vendor for the current host.\nReturn the operating system for the current host.\nReturn the environment for the current host.\nReturn the binary format for the current host.\nReturn the triple for the current host.\nA unique identifier (within this process) for this module.\nImport index\nGet the imported function types of the module.\nGet the import types of the module\nImported entities with the (module, field, …\nReturn the index as an u32 number.\nReturns index value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the header into its bytes representation.\nConvert into a string\nConvert into a string\nConvert into a string\nConvert into a string\nConvert into a string\nTrue if the memory is 64-bit\nChecks if this Architecture is some variant of Clever-ISA\nCheck if two externs are compatible\nIs this the default source location?\nTest whether the given function index is for an imported …\nTest whether the given global index is for an imported …\nTest whether the given memory index is for an imported …\nTest whether the given table index is for an imported …\nReturns a boolean indicating if the enum is set to mutable.\nReturns true if <code>Type</code> matches any of the numeric types. …\nReturns true if <code>Type</code> matches either of the reference types.\nTest if this architecture uses the Thumb instruction set.\nCheck if the provided bytes are wasm-like\nIterate over the bytes in the constant.\nThe <code>lib</code> module defines a <code>std</code> module that is identical …\nThe archived counterpart of …\nThe archived counterpart of …\nConvert a <code>FunctionIndex</code> into a <code>LocalFunctionIndex</code>. Returns …\nConvert a <code>GlobalIndex</code> into a <code>LocalGlobalIndex</code>. Returns …\nConvert a <code>MemoryIndex</code> into a <code>LocalMemoryIndex</code>. Returns …\nConvert a <code>TableIndex</code> into a <code>LocalTableIndex</code>. Returns None …\nThe location where the initialization is to be performed.\nThe archived counterpart of <code>OwnedDataInitializer::location</code>\nThe location where the initialization is to be performed.\nReturns the largest value that can be represented by the …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nGet only the memories\nGet only the memories\nWebAssembly linear memories (imported and local).\nAttempt to return the underlying type of this external …\nConfigures whether the WebAssembly 64-bit memory proposal …\n64-bit Memory proposal should be enabled\nConvert a <code>LocalMemoryIndex</code> into a <code>MemoryIndex</code>.\nThe archived counterpart of …\nThe index of the memory to initialize.\nReturns the memory styles associated with this <code>Artifact</code>.\nGets the message for this trap code\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nReturns the module name that this import is expected to …\nModule name\nReturns the <code>ModuleInfo</code> for instantiation\nConfigures whether the WebAssembly module linking proposal …\nModule Linking proposal should be enabled\nReturns the identifer of the module that this frame is for.\nReturns the offset within the original wasm module this …\nConfigures whether the WebAssembly multi-memory proposal …\nMulti Memory proposal should be enabled\nConfigures whether the WebAssembly multi-value proposal …\nMulti Value proposal should be enabled\nA flag indicating whether the value may change at runtime.\nGet the Module name\nReturns the field name of the module that this import is …\nReturns the name by which this export is known by.\nThe name of this wasm module, often found in the wasm file.\nConvert a <code>Native</code> to an <code>Offset</code>.\nCreate a new <code>ExportsIterator</code> for a given iterator and size\nCreate a new <code>ImportsIterator</code> for a given iterator and size\nCreate a new feature\nCreates a new <code>OwnedDataInitializer</code> from a <code>DataInitializer</code>.\nAllocates the module data structures.\nCreates a new header for metadata of the given length.\nCreates a new FrameInfo, useful for testing.\nCreate a new source location with the given bits.\nCreates a new Function Type with the given parameter and …\nCreate a new Global variable\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a WebAssembly memory given …\nCreates a new import descriptor which comes from <code>module</code> …\nCreates a new export which is exported with the given <code>name</code> …\nReturn a new <code>VMOffsets</code> instance, for a given pointer size.\nConstructs <code>TargetSharedSignatureIndex</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size …\nNumber of imported functions in the module.\nNumber of imported globals in the module.\nNumber of imported memories in the module.\nNumber of imported tables in the module.\nNumber of local memories defined in the module\nNumber of local tables defined in the module\nThe offset to add to the base.\nThe archived counterpart of <code>DataInitializerLocation::offset</code>\nA constant offset to initialize at.\nReturns the offset-guard size\nConvert an <code>Offset</code> to a <code>Native</code>.\nThe “operating system” (sometimes also the …\nParameter types.\nParses the header and returns the length of the metadata …\nWebAssembly passive data segments.\nWebAssembly passive elements.\nReturn the pointer bit width of this target’s …\nReturn the pointer bit width of this target’s …\nReturn the pointer width of this target’s architecture.\nConfigures whether the WebAssembly reference types …\nReference Types proposal should be enabled\nRelaxed SIMD proposal should be enabled\nReturn types.\nSerialize a Compilation into bytes The bytes will have the …\nSerialize a Module into bytes The bytes will have the …\nGenerate a new [<code>ModuleCache</code>] based on the Sha256 hash of …\nCreate a new <code>ModuleHash</code> from the raw sha256 hash.\nParse a Sha256 hash from a hex-encoded string.\nWhether the memory may be shared between multiple threads.\nWebAssembly function signatures.\nConfigures whether the WebAssembly SIMD proposal will be …\nSIMD proposal should be enabled\nReturn the size of <code>VMFuncRef</code>.\nReturn the size of <code>VMCallerCheckedAnyfunc</code>.\nReturn the size of the <code>VMContext</code> allocation.\nReturn the size of <code>VMDynamicFunctionContext</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMFunctionImport</code>.\nReturn the size of <code>VMGlobalImport</code>.\nReturn the size of a pointer to a <code>VMGlobalDefinition</code>;\nReturn the size of <code>VMMemoryDefinition</code>.\nThe size of the <code>current_length</code> field.\nReturn the size of <code>VMMemoryImport</code>.\nReturn the size of <code>VMSharedSignatureIndex</code>.\nReturn the size of <code>VMTableDefinition</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMTableImport</code>.\nThe module “start” function, if present.\nAttempt to return the underlying type of this external …\nConvert a <code>LocalTableIndex</code> into a <code>TableIndex</code>.\nThe index of a table to initialize.\nWebAssembly table initializers.\nReturns the table plans associated with this <code>Artifact</code>.\nGet only the tables\nGet only the tables\nWebAssembly tables (imported and local).\nConfigures whether the WebAssembly tail-call proposal will …\nTail call proposal should be enabled\nConfigures whether the WebAssembly threads proposal will …\nThreads proposal should be enabled\nReturn the function name associated to the libcall.\nConvert the immediate into a vector.\nCode of the trap.\nReturns the expected type of this import.\nReturns the type of this export.\nThe type of the value stored in the global.\nThe type of data stored in elements of the table.\nReturn a <code>Triple</code> with all unknown fields.\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nThe “vendor” (whatever that means).\nThe offset to the pointer to the anyfunc inside the ref.\nThe offset of the <code>call_trampoline</code> field.\nThe offset of the <code>func_ptr</code> field.\nThe offset of the <code>type_index</code> field.\nThe offset of the <code>vmctx</code> field.\nReturn the offset to builtin function in …\nThe offset of the builtin functions array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>signature_ids</code> array.\nThe offset of the <code>tables</code> array.\nReturn the offset to <code>VMFunctionImport</code> index <code>index</code>.\nReturn the offset to the <code>body</code> field in …\nReturn the offset to the <code>vmctx</code> field in …\nReturn the offset to the <code>VMGlobalDefinition</code> index <code>index</code>.\nReturn the offset to <code>VMGlobalImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMGlobalImport</code> …\nReturn the offset to <code>VMMemoryDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMMemoryDefinition</code> …\nReturn the offset to the <code>current_length</code> field in …\nReturn the offset to <code>VMMemoryImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMMemoryImport</code> …\nReturn the offset to the <code>vmctx</code> field in <code>VMMemoryImport</code> …\nReturn the offset to <code>VMSharedSignatureIndex</code> index <code>index</code>.\nReturn the offset to <code>VMTableDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMTableDefinition</code> …\nReturn the offset to the <code>current_elements</code> field in …\nReturn the offset to <code>VMTableImport</code> index <code>index</code>.\nReturn the offset to the <code>definition</code> field in <code>VMTableImport</code> …\nThe offset of the <code>address</code> field.\nThe offset of the <code>ctx</code> field.\nThe offset of the <code>body</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>vmctx</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_length</code> field.\nThe offset of the <code>from</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_elements</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nGenerate a new [<code>ModuleCache</code>] based on the XXHash hash of …\nCreate a new <code>ModuleHash</code> from the raw xxhash hash.\nParse a XXHash hash from a hex-encoded string.\nThis method is passed a byte slice which contains the byte …\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nData structures to provide transformation of the source\nA <code>Compilation</code> contains the compiled function bodies for a …\nTypes for modules.\nRelocation is the process of assigning load addresses for …\nThis module define the required structures to emit custom …\nThis module define the required structures for compilation …\nTarget configuration\nA <code>CompiledFunctionUnwindInfo</code> contains the function unwind …\nAn archived <code>FunctionAddressMap</code>\nAn archived <code>InstructionAddressMap</code>\nFunction and its instructions addresses mappings.\nThe resolver for an archived <code>FunctionAddressMap</code>\nSingle source location to generated address mapping.\nThe resolver for an archived <code>InstructionAddressMap</code>\nThe archived counterpart of <code>FunctionAddressMap::body_len</code>\nGenerated function body length.\nThe archived counterpart of <code>FunctionAddressMap::body_offset</code>\nGenerated function body offset if applicable, otherwise 0.\nThe archived counterpart of <code>InstructionAddressMap::code_len</code>\nGenerated instructions length.\nThe archived counterpart of …\nGenerated instructions offset.\nThe archived counterpart of <code>FunctionAddressMap::end_srcloc</code>\nFunction end source location.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nInstructions maps. The array is sorted by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>InstructionAddressMap::srcloc</code>\nOriginal source location.\nThe archived counterpart of …\nFunction start source location (normally declaration).\nAn archived <code>CompiledFunction</code>\nAn archived <code>CompiledFunctionFrameInfo</code>\nAn archived <code>FunctionBody</code>\nThe result of compiling a WebAssembly module’s functions.\nThe result of compiling a WebAssembly function.\nThe frame info for a Compiled function.\nThe resolver for an archived <code>CompiledFunctionFrameInfo</code>\nThe resolver for an archived <code>CompiledFunction</code>\nThe custom sections for a Compilation.\nThe DWARF information for this Compilation.\nThe resolver for an archived <code>Dwarf</code>\nThe function body.\nAny struct that acts like a <code>FunctionBody</code>.\nThe resolver for an archived <code>FunctionBody</code>\nThe compiled functions map (index in the Wasm -&gt; function)\nThe archived counterpart of …\nThe address map.\nThe archived counterpart of <code>FunctionBody::body</code>\nThe function body bytes.\nThe archived counterpart of <code>CompiledFunction::body</code>\nThe function body.\nCustom sections for the module. It will hold the data, for …\nSection ids corresponding to the Dwarf debug info\nTrampolines to call a dynamic function defined in a host, …\nThe section index in the <code>Compilation</code> that corresponds to …\nThe archived counterpart of <code>CompiledFunction::frame_info</code>\nThe frame information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrampolines to call a function defined locally in the wasm …\nCompiled code for the function bodies.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Dwarf</code> struct with the corresponding indices for …\nThe archived counterpart of <code>CompiledFunction::relocations</code>\nThe relocations (in the body)\nThe archived counterpart of …\nThe traps (in the function body).\nThe archived counterpart of <code>FunctionBody::unwind_info</code>\nThe function unwind info\nAn archived <code>CompileModuleInfo</code>\nThe required info for compiling a module.\nThe resolver for an archived <code>CompileModuleInfo</code>\nThe archived counterpart of <code>CompileModuleInfo::features</code>\nThe features used for compiling the module\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nThe memory styles used for compiling.\nThe archived counterpart of <code>CompileModuleInfo::module</code>\nThe module information\nThe archived counterpart of <code>CompileModuleInfo::table_styles</code>\nThe table plans used for compiling.\nThe resolver for <code>RelocationKind::Abs4</code>\nabsolute 4-byte\nThe resolver for <code>RelocationKind::Abs8</code>\nabsolute 8-byte\nAn archived <code>Relocation</code>\nThe resolver for <code>RelocationKind::Arm32Call</code>\nArm32 call target\nThe resolver for <code>RelocationKind::Arm64Call</code>\nArm64 call target\nThe resolver for <code>RelocationKind::Arm64Movw0</code>\nArm64 movk/z part 0\nThe resolver for <code>RelocationKind::Arm64Movw1</code>\nArm64 movk/z part 1\nThe resolver for <code>RelocationKind::Arm64Movw2</code>\nArm64 movk/z part 2\nThe resolver for <code>RelocationKind::Arm64Movw3</code>\nArm64 movk/z part 3\nThe resolver for <code>RelocationTarget::CustomSection</code>\nCustom sections generated by the compiler\nThe resolver for <code>RelocationKind::ElfX86_64TlsGd</code>\nElf x86_64 32 bit signed PC relative offset to two GOT …\nThe resolver for <code>RelocationTarget::LibCall</code>\nA compiler-generated libcall.\nThe resolver for <code>RelocationTarget::LocalFunc</code>\nA relocation to a function defined locally in the wasm …\nA record of a relocation to perform.\nRelocation kinds for every ISA.\nThe resolver for an archived <code>RelocationKind</code>\nAny struct that acts like a <code>Relocation</code>.\nThe resolver for an archived <code>Relocation</code>\nDestination function. Can be either user function or some …\nThe resolver for an archived <code>RelocationTarget</code>\nRelocations to apply to function bodies.\nThe resolver for <code>RelocationKind::RiscvCall</code>\nRISC-V call target\nThe resolver for <code>RelocationKind::RiscvPCRelHi20</code>\nRISC-V PC-relative high 20bit\nThe resolver for <code>RelocationKind::RiscvPCRelLo12I</code>\nRISC-V PC-relative low 12bit, I-type\nThe resolver for <code>RelocationKind::X86CallPCRel4</code>\nx86 call to PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86CallPLTRel4</code>\nx86 call to PLT-relative 4-byte\nThe resolver for <code>RelocationKind::X86GOTPCRel4</code>\nx86 GOT PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86PCRel4</code>\nx86 PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86PCRel8</code>\nx86 PC-relative 8-byte\nThe archived counterpart of <code>Relocation::addend</code>\nThe addend to add to the relocation value.\nDisplay trait implementation drops the arch, since its …\nGiven a function start address, provide the relocation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>Relocation::kind</code>\nThe relocation kind.\nThe archived counterpart of <code>Relocation::offset</code>\nThe offset where to apply the relocation.\nThe archived counterpart of <code>Relocation::reloc_target</code>\nRelocation target.\nAn archived <code>CustomSection</code>\nAn archived <code>SectionBody</code>\nA Section for a <code>Compilation</code>.\nAny struct that acts like a <code>CustomSection</code>.\nCustom section Protection.\nThe resolver for an archived <code>CustomSectionProtection</code>\nThe resolver for an archived <code>CustomSection</code>\nThe resolver for <code>CustomSectionProtection::Read</code>\nA custom section with read permission.\nThe resolver for <code>CustomSectionProtection::ReadExecute</code>\nA custom section with read and execute permissions.\nThe bytes in the section.\nThe resolver for an archived <code>SectionBody</code>\nIndex type of a Section defined inside a WebAssembly …\nThe resolver for an archived <code>SectionIndex</code>\nReturns a raw pointer to the section’s buffer.\nDereferences into the section’s buffer.\nReturn the underlying index value as a <code>u32</code>.\nThe archived counterpart of <code>CustomSection::bytes</code>\nThe bytes corresponding to this section.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a <code>u32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the section body is empty.\nReturns whether or not the section body is empty.\nReturns the length of this section in bytes.\nReturns the length of this section in bytes.\nCreate a new section body with the given contents.\nThe archived counterpart of <code>CustomSection::protection</code>\nMemory protection that applies to this section.\nThe archived counterpart of <code>CustomSection::relocations</code>\nRelocations that apply to this custom section.\nAn archived <code>ModuleMetadata</code>\nThe resolver for <code>Symbol::DynamicFunctionTrampoline</code>\nThe dynamic function trampoline for a given function.\nThe resolver for <code>Symbol::FunctionCallTrampoline</code>\nThe function call trampoline for a given signature.\nThe resolver for <code>Symbol::LocalFunction</code>\nA function defined in the wasm.\nThe resolver for <code>Symbol::Metadata</code>\nA metadata section, indexed by a unique prefix (usually …\nSerializable struct that represents the compiled metadata.\nThe resolver for an archived <code>ModuleMetadata</code>\nA simple metadata registry\nThe resolver for <code>Symbol::Section</code>\nA wasm section.\nThe kinds of wasmer_types objects that might be found in a …\nThis trait facilitates symbol name lookups in a native …\nThe resolver for an archived <code>Symbol</code>\nThe archived counterpart of <code>ModuleMetadata::compile_info</code>\nCompile info\nThe archived counterpart of <code>ModuleMetadata::cpu_features</code>\nCPU features used (See <code>CpuFeature</code>)\nThe archived counterpart of …\nData initializers\nDeserialize a Module from a slice. The slice must have the …\nDeserialize a compilation module from an archive\nDeserialize a Module from a slice. The slice must have the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nThe function body lengths (used to find function by …\nReturns symbol registry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a name it returns the <code>Symbol</code> for that name in the …\nSymbol prefix stirng\nThe archived counterpart of <code>ModuleMetadata::prefix</code>\nPrefix for function etc symbols\nSerialize a Module into bytes The bytes will have the …\nGet mutable ref to compile info and a copy of the registry\nGiven a <code>Symbol</code> it returns the name for that symbol in the …\nApple Aarch64 platforms use their own variant of the …\nThe “architecture” field, which in some cases also …\nThe “binary format” field, which is usually omitted, …\nThe calling convention, which specifies things like which …\nThe nomenclature is inspired by the <code>cpuid</code> crate. The list …\nA custom vendor. “Custom” in this context means that …\nThe target memory endianness.\nThe “environment” field, which specifies an ABI …\nThe “operating system” field, which sometimes implies …\nThe width of a pointer (in the default address space).\n“System V”, which is used on most Unix-like platfoms. …\nThis is the target that we will use for compiling the …\nA target “triple”. Historically such things had three …\nThe “vendor” field, which in practice is little more …\nThe WebAssembly C ABI. …\n“Windows Fastcall”, which is used on Windows. Note …\nx86_64 target that only supports Haswell-compatible Intel …\nThe “architecture” (and sometimes the subarchitecture).\nThe “binary format” (rarely used).\nThe triple associated for the target.\nThe “environment” on top of the operating system …\nRetrieves the features for the current Host\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if target is a native (eq to host) or not\nCreates a new target given a triple\nThe “operating system” (sometimes also the …\nRetrieves an empty set of <code>CpuFeature</code>s.\nThe triple associated for the target.\nThe “vendor” (whatever that means).\nAn archived <code>CompiledFunctionUnwindInfo</code>\nCompiled function unwind information.\nAny struct that acts like a <code>CompiledFunctionUnwindInfo</code>.\nGeneric reference to data in a <code>CompiledFunctionUnwindInfo</code>\nThe resolver for an archived <code>CompiledFunctionUnwindInfo</code>\nThe resolver for <code>CompiledFunctionUnwindInfo::Dwarf</code>\nThe archived counterpart of …\nThe unwind info is added to the Dwarf section in …\nThe resolver for <code>CompiledFunctionUnwindInfo::WindowsX64</code>\nThe archived counterpart of …\nWindows UNWIND_INFO.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archived <code>PrimaryMap</code>\nA slice mapping <code>K -&gt; V</code> allocating dense entity references.\nA type wrapping a small integer index should implement …\nIterate over all keys in order.\nIterate over all keys in order.\nIterate over all keys in order.\nA primary mapping <code>K -&gt; V</code> allocating dense entity …\nA mapping <code>K -&gt; V</code> for densely indexed entity references.\nReturns the number of elements the map can hold without …\nRemove all entries from this map.\nRemove all entries from this map.\nMacro which provides the common implementation of a 32-bit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new slice from a raw pointer. A safer way to …\nGet the element at <code>k</code> if it exists.\nGet the element at <code>k</code> if it exists.\nGet the element at <code>k</code> if it exists.\nGet the element at <code>k</code> if it exists.\nGet the element at <code>k</code> if it exists, mutable version.\nGet the element at <code>k</code> if it exists, mutable version.\nGet the index that was used to create this entity …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>PrimaryMap</code> and produces a <code>BoxedSlice</code>.\nIs this map completely empty?\nIs this map completely empty?\nIs this map completely empty?\nCheck if <code>k</code> is a valid key in the map.\nCheck if <code>k</code> is a valid key in the map.\nIterate over all the keys and values in this map.\nIterate over all the keys and values in this map.\nIterate over all the keys and values in this map.\nIterate over all the keys and values in this map.\nIterate over all the keys and values in this map, mutable …\nIterate over all the keys and values in this map, mutable …\nIterate over all the keys and values in this map, mutable …\nIterate over all the keys in this map.\nIterate over all the keys in this map.\nIterate over all the keys in this map.\nReturns the last element that was inserted in the map.\nReturns the last element that was inserted in the map.\nGet the total number of entity references created.\nGet the total number of entity references created.\nCreate a new entity reference from a small integer. This …\nCreate an <code>Iter</code> iterator that visits the <code>PrimaryMap</code> keys …\nCreate an <code>IterMut</code> iterator that visits the <code>PrimaryMap</code> keys …\nCreate a new empty map.\nCreate a new empty map.\nGet the key that will be assigned to the next pushed value.\nCompact representation of <code>Option&lt;T&gt;</code> for types with a …\nAppend <code>v</code> to the mapping, assigning a new key which is …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for exactly <code>additional</code> more …\nResize the map to have <code>n</code> entries by adding default entries …\nShrinks the capacity of the <code>PrimaryMap</code> as much as possible.\nIterate over all the values in this map.\nIterator over all values in the <code>ArchivedPrimaryMap</code>\nIterate over all the values in this map.\nIterate over all the values in this map.\nIterate over all the values in this map, mutable edition.\nIterate over all the values in this map, mutable edition.\nIterate over all the values in this map, mutable edition.\nCreate a new empty map with the given capacity.\nCreate a new, empty map with the specified capacity.\nCreate a new empty map with a specified default value.\nCreate a <code>Keys</code> iterator that visits <code>len</code> entities starting …\nPacked representation of <code>Option&lt;T&gt;</code>.\nTypes that have a reserved value which can’t be created …\nCreate a default packed option representing <code>None</code>.\nExpand the packed option into a normal <code>Option</code>.\nUnwrap a packed <code>Some</code> value or panic.\nReturns the argument unchanged.\nConvert <code>t</code> into a packed <code>Some(x)</code>.\nConvert an option into its packed equivalent.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the packed option is a <code>None</code> value.\nChecks whether value is the reserved one.\nReturns <code>true</code> if the packed option is a <code>Some</code> value.\nMaps a <code>PackedOption&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function …\nCreate an instance of the reserved value.\nTakes the value out of the packed option, leaving a <code>None</code> …\nUnwrap a packed <code>Some</code> value or panic.\nThe memory does not support atomic operations.\nA compilation error occured.\nThe WebAssembly.CompileError object indicates an error …\nThe binary was valid, but we got an error when trying to …\nThe provided binary is corrupted\nThe operation would cause the size of the memory to exceed …\nThe module was compiled with a CPU feature that is not …\nThe Deserialize error can occur when loading a compiled …\nContains the error value\nA generic serialization error\nA generic deserialization error\nA user defined error value, used for error cases not …\nA generic error.\nAn implementation limit was exceeded.\nAn ImportError.\nIncompatible serialized binary\nIncompatible Import Type. This error occurs when the …\nInput artifact bytes have an invalid length\nInvalid memory was provided.\nThe input WebAssembly code is invalid.\nAn IO error\nAn IO error\nCaller asked for a maximum memory greater than we can give …\nError type describing things that can go wrong when …\nMemory Error\nReturned when a shared memory is required, but the given …\nAn error from the middleware error.\nA error in the middleware.\nMiddleware error occurred.\nCaller asked for more minimum memory than we can give them.\nThe provided string feature doesn’t exist\nContains the success value\nThe error that can happen while parsing a <code>str</code> to retrieve …\nAn error while preinstantiating a module.\nLow level error with mmap.\nInsufficient resources available for execution.\nThe Serialize error can occur when serializing a compiled …\nUnknown Import. This error occurs when an import was …\nA feature used by the WebAssembly code is not supported by …\nThe compiler doesn’t support a Wasm feature\nReturned when trying to call a memory operation that is …\nThe compiler cannot compile for the given target. This can …\nThe module did not pass validation.\nA Wasm translation error occured.\nA WebAssembly translation error.\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error message\nThe name of the middleware where the error was created\nCreate a new <code>MiddlewareError</code>\nHow many bytes were expected\nHow many bytes the artifact contained\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nCustom <code>std</code> module.\nUtilities for dynamic typing or type reflection.\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nShareable mutable containers.\nUtilities for comparing and ordering values.\nTraits for conversions between types.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nGeneric hashing support.\nComposable external iteration.\nPrimitive traits and types representing basic properties …\nBasic functions for dealing with memory.\nOverloadable operators.\nManually manage memory through raw pointers.\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nA UTF-8–encoded, growable string.\nUseful synchronization primitives.\nRedundant constants module for the <code>u32</code> primitive type.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nA trait to emulate dynamic typing.\nA <code>TypeId</code> represents a globally unique identifier for a …\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns a mutable reference to the inner value as type …\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns a reference to the inner value as type <code>dyn T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns the <code>TypeId</code> of the generic type parameter.\nGets the <code>TypeId</code> of <code>self</code>.\nReturns the name of a type as a string slice.\nReturns the type name of the pointed-to value as a string …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nReturns the argument unchanged.\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nMoves the string into a <code>Cow::Owned</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nCreates a clone-on-write pointer from an owned instance of …\nCreates a clone-on-write pointer from a reference to …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConstructs a <code>Box&lt;T&gt;</code> by calling the <code>exchange_malloc</code> lang …\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a vector into a boxed slice.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nReturns the argument unchanged.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nUnlike <code>Vec</code>, <code>Box&lt;[Z]&gt;</code> cannot reallocate, so we can be sure …\nAn error returned by <code>RefCell::try_borrow</code>.\nAn error returned by <code>RefCell::try_borrow_mut</code>.\nA mutable memory location.\nA value which is initialized on the first access.\nA cell which can nominally be written to only once.\nWraps a borrowed reference to a value in a <code>RefCell</code> box. A …\nA mutable memory location with dynamically checked borrow …\nA wrapper type for a mutably borrowed value from a …\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nReturns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>\nGet an exclusive reference to the value within the …\nReturns a raw pointer to the underlying data in this cell.\nReturns a raw pointer to the underlying data in this cell.\nGet a shared reference to the value within the <code>UnsafeCell</code>.\nReturns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value.\nPanics\nCopies a <code>Ref</code>.\nPanics\nPanics\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nPanics\nMakes a new <code>Ref</code> for an optional component of the borrowed …\nMakes a new <code>RefMut</code> for an optional component of the …\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nCreates a new <code>OnceCell&lt;T&gt;</code> which already contains the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Cell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nCreates a new <code>RefCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nPanics\nReturns a reference to the value if initialized, or <code>None</code> …\nGets the reference to the underlying value.\nReturns a copy of the contained value.\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the value if initialized, …\nGets the mutable reference to the underlying value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nGets the mutable reference of the contents of the cell, …\nGets the mutable reference of the contents of the cell, …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>LazyCell</code> returning the stored value.\nConsumes the cell, returning the wrapped value.\nUnwraps the value, consuming the cell.\nConsumes the <code>RefCell</code>, returning the wrapped value.\nUnwraps the value, consuming the cell.\nUnwraps the value, consuming the cell.\nPanics\nConverts into a reference to the underlying data.\nConverts into a mutable reference to the underlying data.\nPanics\nMakes a new <code>Ref</code> for a component of the borrowed data.\nMakes a new <code>RefMut</code> for a component of the borrowed data, …\nSplits a <code>Ref</code> into multiple <code>Ref</code>s for different components …\nSplits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …\nCreates a new lazy value with the given initializing …\nCreates a new uninitialized cell.\nCreates a new <code>Cell</code> containing the given value.\nCreates a new <code>RefCell</code> containing <code>value</code>.\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nPanics\nGets a mutable pointer to the wrapped value. The …\nGets a mutable pointer to the wrapped value.\nReplaces the contained value with <code>val</code>, and returns the old …\nReplaces the wrapped value with a new one, returning the …\nReplace the value in this <code>UnsafeCell</code> and return the old …\nReplaces the wrapped value with a new one computed from <code>f</code>, …\nInitializes the contents of the cell to <code>value</code>.\nSets the contained value.\nSwaps the values of two <code>Cell</code>s.\nSwaps the wrapped value of <code>self</code> with the wrapped value of …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nTakes the value of the cell, leaving <code>Default::default()</code> in …\nTakes the wrapped value, leaving <code>Default::default()</code> in its …\nImmutably borrows the wrapped value, returning an error if …\nMutably borrows the wrapped value, returning an error if …\nImmutably borrows the wrapped value, returning an error if …\nInitializes the contents of the cell to <code>value</code> if the cell …\nUndo the effect of leaked guards on the borrow state of …\nUpdates the contained value using a function and returns …\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nRestrict a value to a certain interval.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nTests for <code>!=</code>. The default implementation is almost always …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReverses the <code>Ordering</code>.\nChains two orderings.\nChains the ordering with the given function.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nReturns the argument unchanged.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nPerforms the conversion.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nSpecifies whether the <code>Debug</code> trait should use …\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nOptions for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\nUse lower-case hexadecimal integers for the <code>Debug</code> trait …\n<code>e</code> formatting.\n<code>x</code> formatting.\nRepresents the <code>-</code> flag.\n<code>o</code> formatting.\nContains the success value\nRepresents the <code>+</code> flag.\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\nThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).\nUse upper-case hexadecimal integers for the <code>Debug</code> trait …\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nReturns a flag indicating what form of alignment was …\nSets or removes the alignment.\nDetermines if the <code>#</code> flag was specified.\nSets or unsets the <code>#</code> flag.\nGets the formatted string, if it has no arguments to be …\nCreates a <code>Formatter</code> that writes its output to the given …\nSpecifies whether the <code>Debug</code> trait should use …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nSame as <code>FormattingOptions::new()</code>.\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nReturns the character used as ‘fill’ whenever there is …\nSets the fill character.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nMarks the tuple struct as non-exhaustive, indicating to …\nMarks the set as non-exhaustive, indicating to the reader …\nMarks the list as non-exhaustive, indicating to the reader …\nMarks the map as non-exhaustive, indicating to the reader …\nReturns flags for formatting.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nTakes an <code>Arguments</code> struct and returns the resulting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nReturns the current alignment.\nReturns the current <code>#</code> flag.\nReturns the current precision.\nReturns the current fill character.\nReturns the current precision.\nReturns the current sign (the <code>+</code> or the <code>-</code> flag).\nReturns the current <code>0</code> flag.\nReturns the current width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nCreates a new formatter with given <code>FormattingOptions</code>.\nConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> …\nReturns the formatting options this formatter corresponds …\nTakes a string slice and emits it to the internal buffer …\nPerforms the correct padding for an integer which has …\nReturns the optionally specified precision for numeric …\nSets or removes the precision.\nReturns the sign of this formatter (<code>+</code> or <code>-</code>).\nSets or removes the sign (the <code>+</code> or the <code>-</code> flag).\nDetermines if the <code>0</code> flag was specified.\nSets or unsets the <code>0</code> flag.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nReturns the optionally specified integer width that the …\nSets or removes the width.\nCreates a new formatter based on this one with given …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …\nA trait for creating instances of <code>Hasher</code>.\nUsed to create a default <code>BuildHasher</code> instance for types …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nAn implementation of SipHash 2-4.\nCreates a new hasher.\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nReturns the hash value for the values written so far.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFeeds this value into the given <code>Hasher</code>.\nCalculates the hash of a single value.\nFeeds a slice of this type into the given <code>Hasher</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nCreates a new BuildHasherDefault for Hasher <code>H</code>.\nCreates a new <code>SipHasher</code> with the two initial keys set to 0.\nCreates a <code>SipHasher</code> that is keyed off the provided keys.\nWrites some data into this <code>Hasher</code>.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a length prefix into this hasher, as part of being …\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nAn iterator over <code>N</code> elements of the iterator at a time.\nLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that repeats endlessly.\nAn iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the current count and the element …\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator that flattens one level of nesting in an …\nAn iterator over the values yielded by an underlying …\nAn iterator where each iteration calls the provided …\nConversion from an <code>Iterator</code>.\nAn iterator that yields <code>None</code> forever after the underlying …\nAn iterator that always continues to yield <code>None</code> when …\nAn iterator that calls a function with a reference to each …\nAn iterator adapter that places a separator between all …\nAn iterator adapter that places a separator between all …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator over the mapped windows of another iterator.\nAn iterator that yields an element exactly once.\nAn iterator that yields a single element of type <code>A</code> by …\nAn iterator with a <code>peek()</code> that returns an optional …\nTrait to represent types that can be created by …\nAn iterator that repeats an element endlessly.\nAn iterator that repeats an element an exact number of …\nAn iterator that repeats elements of type <code>A</code> endlessly by …\nA double-ended iterator with the direction inverted.\nAn iterator to maintain state while iterating another …\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that rejects elements while <code>predicate</code> returns …\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nA new iterator where each successive item is computed …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nBorrows an iterator, rather than consuming it.\nConverts the arguments to iterators and links them …\nTakes two iterators and creates a new iterator over both …\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.\nCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.\nCreates a <code>Cloned</code> iterator from the default value of <code>I</code>\nCreates a <code>Copied</code> iterator from the default value of <code>I</code>\nCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>\nCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.\nCreates a <code>Rev</code> iterator from the default value of <code>I</code>\nCreates an iterator that yields nothing.\nCreates an iterator which gives the current iteration …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates an iterator with the provided closure …\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nOverflow Behavior\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReturns a reference to the next() value without advancing …\nReturns a mutable reference to the next() value without …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nTakes an iterator and generates <code>Self</code> from the elements by …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nReturns the bounds on the number of <em>successor</em> steps …\nCreates a new iterator where each successive item is …\nTakes an iterator and generates <code>Self</code> from the elements by …\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nConverts an iterator of pairs into a pair of containers.\nConverts the arguments to iterators and zips them.\n‘Zips up’ two iterators into a single iterator of …\nMarker trait for the types that are allowed in union …\nDerive macro that makes a smart pointer usable with trait …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker for types which can be used as types of <code>const</code> …\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA marker for types that can be dropped.\nThe type of the discriminant, which must satisfy the trait …\nCompiler-internal trait used to indicate the type of enum …\nA common trait implemented by all function pointers.\nUsed to determine whether a type contains any <code>UnsafeCell</code> …\nZero-sized type used to mark a type parameter as …\nZero-sized type used to mark a lifetime as contravariant.\nZero-sized type used to mark a type parameter as covariant.\nZero-sized type used to mark a lifetime as covariant.\nZero-sized type used to mark things that “act like” …\nZero-sized type used to mark a type parameter as invariant.\nZero-sized type used to mark a lifetime as invariant.\nA marker type which does not implement <code>Unpin</code>.\nA marker for pointer-like types.\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nRequired trait for constants used in pattern matches.\nTypes for which it is safe to share references between …\nA marker for tuple types.\nTypes that do not require any pinning guarantees.\nTypes that can be “unsized” to a dynamically-sized …\nA marker for types which can be used as types of <code>const</code> …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker trait for phantom variance types.\nReturns the address of the function pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstruct a variance marker; equivalent to <code>Default::default</code>…\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nConfigurable proof assumptions of <code>TransmuteFrom</code>.\nOpaque type representing the discriminant of an enum.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nWith this, <code>TransmuteFrom</code> does not assume you have ensured …\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nMarks that <code>Src</code> is transmutable into <code>Self</code>.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nCombine the assumptions of <code>self</code> and <code>other_assumptions</code>.\nExtracts the values from an array of <code>MaybeUninit</code> …\nReturns the contents of this <code>MaybeUninit</code> as a slice of …\nReturns the contents of this <code>MaybeUninit</code> as a mutable …\nGets a mutable pointer to the contained value. Reading …\nGets a pointer to the contained value. Reading from this …\nExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …\nDrops the contained value in place.\nGets a mutable (unique) reference to the contained value.\nReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …\nGets a shared reference to the contained value.\nRemove <code>other_assumptions</code> the obligations of <code>self</code>; e.g.:\nDeprecated version of <code>slice::write_clone_of_slice</code>.\nBitwise-copies a value.\nDeprecated version of <code>slice::write_copy_of_slice</code>.\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nManually drops the contained value.\nFills a slice with elements by cloning <code>value</code>, returning a …\nFills a slice with elements yielded by an iterator until …\nFills a slice with elements returned by calling a closure …\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the value from the <code>ManuallyDrop</code> container.\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nWrap a value to be manually dropped.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nDeprecated version of <code>slice::as_bytes</code>.\nDeprecated version of <code>slice::as_bytes_mut</code>.\nGets a mutable pointer to the first element of the array.\nGets a pointer to the first element of the array.\nDeprecated version of <code>slice::assume_init_mut</code>.\nDeprecated version of <code>slice::assume_init_ref</code>.\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nTakes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.\nReinterprets the bits of a value of one type as another …\nTransmutes a <code>Src</code> value into a <code>Self</code>.\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nTransposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.\nCreates a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the number of variants in the enum type <code>T</code>.\nSets the value of the <code>MaybeUninit&lt;T&gt;</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nThe bitwise AND operator <code>&amp;</code>.\nThe bitwise AND assignment operator <code>&amp;=</code>.\nThe bitwise OR operator <code>|</code>.\nThe bitwise OR assignment operator <code>|=</code>.\nThe bitwise XOR operator <code>^</code>.\nThe bitwise XOR assignment operator <code>^=</code>.\nAn endpoint of a range of keys.\nExit the operation without running subsequent phases.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nTrait that indicates that this is a pointer or a wrapper …\nThe coroutine completed with a return value.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nThe trait implemented by builtin coroutine types.\nThe result of a coroutine resumption.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nPerma-unstable marker trait. Indicates that the type has a …\n<code>DispatchFromDyn</code> is used in the implementation of …\nThe division operator <code>/</code>.\nThe division assignment operator <code>/=</code>.\nCustom code within the destructor.\nThe range is bounded exclusively from above and is …\nThe range is bounded inclusively from above and is …\nAn exclusive bound.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to specify which residuals can be converted into …\nAn inclusive bound.\nUsed for indexing operations (<code>container[index]</code>) in …\nUsed for indexing operations (<code>container[index]</code>) in mutable …\nUsed to convert a range into start and end bounds, …\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe unary logical negation operator <code>!</code>.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nAn internal helper for <code>split_off</code> functions indicating …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nOutput type of the called closure’s future.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe type of the value produced by <code>?</code> when <em>not</em> …\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe returned type after indexing.\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nIndicates that a struct can be used as a method receiver. …\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe type of value this coroutine returns.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe range is bounded inclusively from below and is …\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nThe target type on which the method may be called.\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nAn infinite endpoint. Indicates that there is no bound in …\nImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …\nThe type of value this coroutine yields.\nThe coroutine suspended with a value.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nAn internal-only helper function for <code>split_off</code> and …\nUsed in <code>?</code> to decide whether the operator should produce a …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nReturns the upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the type from its <code>Output</code> type.\nConstructs the type from a compatible <code>Residual</code> type.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nDestructures the <code>RangeInclusive</code> into (lower bound, upper …\nReturns <code>true</code> if this is a <code>Break</code> variant.\nReturns <code>true</code> if this is a <code>Continue</code> variant.\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nCreates a new inclusive range. Equivalent to writing …\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nResumes the execution of this coroutine.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nReturns the lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nAdds an offset to a pointer (convenience for …\nGets the “address” portion of the pointer.\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nComputes the offset that needs to be applied to the …\nReturns a unique reference to the value. If the value may …\nReturns a raw pointer to the slice’s buffer.\nReturns a non-null pointer to the slice’s buffer.\nReturns the alignment as a NonZero&lt;usize&gt;.\nAcquires the underlying <code>*mut</code> pointer.\nReturns a shared reference to the value. If the value may …\nReturns a unique references to the value. In contrast to …\nReturns a shared references to the value. In contrast to …\nReturns a shared reference to a slice of possibly …\nReturns a unique reference to a slice of possibly …\nReturns the alignment as a <code>usize</code>.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers within the …\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the distance between two pointers within the …\nCasts to a pointer of another type.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new <code>NonNull</code> that is dangling, but well-aligned.\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nExposes the “provenance” part of the pointer for …\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nConverts a mutable reference to a <code>NonNull</code> pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>std::ptr::from_raw_parts</code>…\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nConverts a reference to a <code>NonNull</code> pointer.\nReturns a raw pointer to an element or subslice, without …\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if the non-null raw slice has a length of 0.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the length of a non-null raw slice.\nReturns the base-2 logarithm of the alignment.\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates a new <code>NonNull</code>.\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nAdds an offset to a pointer.\nCalculates the distance between two pointers within the …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>src</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nCreates a non-null raw slice from a thin pointer and a …\nForms a raw mutable slice from a pointer and a length.\nSubtracts an offset from a pointer (convenience for …\nCalculates the distance between two pointers within the …\nSwaps the values at two mutable locations of the same …\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nDecompose a (possibly wide) pointer into its data pointer …\nCreates a new pointer with the given address and the …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nInvokes memset on the specified pointer, setting …\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nPerforms a volatile write of a memory location with the …\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Rc&lt;[T]&gt;</code>.\nConverts to <code>Rc&lt;T&gt;</code>.\nMakes a clone of the <code>Rc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Rc</code>s.\nComparison for two <code>UniqueRc</code>s.\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCreates an empty CStr inside an Rc\nCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Rc\nCreates an empty <code>[T]</code> inside an Rc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nAttempts to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nDowncasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nCreates a new <code>Weak</code> pointer to this allocation.\nCreates a new weak reference to the <code>UniqueRc</code>.\nDrops the <code>Rc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Rc</code>s.\nEquality for two <code>UniqueRc</code>s.\nAllocates a reference-counted slice and fills it by …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nAllocates a reference-counted string slice and copies <code>v</code> …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nAllocates a reference-counted string slice and copies <code>v</code> …\nConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …\nConverts a reference-counted string slice into a byte …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted slice and fills it by …\nConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …\nMove a boxed object to a new, reference counted, …\nCreates a reference-counted pointer from a clone-on-write …\nReturns the argument unchanged.\nConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;mut CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …\nConverts a raw pointer previously created by <code>into_raw</code> back …\n‘Greater than or equal to’ comparison for two <code>Rc</code>s.\n‘Greater than or equal to’ comparison for two <code>UniqueRc</code>…\nReturns a mutable reference into the given <code>Rc</code>, if there are\nReturns a mutable reference into the given <code>Rc</code>, without any …\nGreater-than comparison for two <code>Rc</code>s.\nGreater-than comparison for two <code>UniqueRc</code>s.\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the reference-counted slice into a …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nConsumes the <code>Rc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Rc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nConverts the <code>UniqueRc</code> into a regular <code>Rc</code>.\n‘Less than or equal to’ comparison for two <code>Rc</code>s.\n‘Less than or equal to’ comparison for two <code>UniqueRc</code>s.\nLess-than comparison for two <code>Rc</code>s.\nLess-than comparison for two <code>UniqueRc</code>s.\nMakes a mutable reference into the given <code>Rc</code>.\nInequality for two <code>Rc</code>s.\nInequality for two <code>UniqueRc</code>s.\nConstructs a new <code>Rc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new <code>UniqueRc</code>.\nConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Rc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Rc</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, …\nCreates a new <code>UniqueRc</code> in the provided allocator.\nConstructs a new <code>Rc</code> with uninitialized contents.\nConstructs a new <code>Rc</code> with uninitialized contents in the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nPartial comparison for two <code>Rc</code>s.\nPartial comparison for two <code>UniqueRc</code>s.\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…\nReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nGets the number of strong (<code>Rc</code>) pointers to this allocation.\nGets the number of strong (<code>Rc</code>) pointers pointing to this …\nConstructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …\nConstructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, …\nConstructs a new <code>Rc</code> with uninitialized contents, returning …\nConstructs a new <code>Rc</code> with uninitialized contents, in the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets the number of <code>Weak</code> pointers pointing to this …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nThe error type returned by <code>get_disjoint_mut</code>.\nAn index provided was out-of-bounds for the slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nTwo indices provided were overlapping.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nViews the underlying data as a mutable subslice of the …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nReturns a slice which contains items not yet handled by …\nImplementation of <code>[T]::concat</code>\nCreates an empty slice iterator.\nCreates an empty slice iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …")