searchState.loadedDescShard("num_complex", 0, "Complex numbers.\nA complex number in Cartesian form.\nAlias for a <code>Complex&lt;f32&gt;</code>\nAlias for a <code>Complex&lt;f64&gt;</code>\nGeneric trait for floating point complex numbers.\nA constant <code>Complex</code> <em>i</em>, the imaginary unit.\nA constant <code>Complex</code> 1.\nThe type used to represent the real coefficients of this …\nA constant <code>Complex</code> 0.\nReturns the absolute value of the number. See also …\nComputes the arccosine of a number. Return value is in …\nComputes the principal value of the inverse cosine of <code>self</code>.\nInverse hyperbolic cosine function.\nComputes the principal value of inverse hyperbolic cosine …\nComputes the argument of the number.\nCalculate the principal Arg of self.\nComputes the arcsine of a number. Return value is in …\nComputes the principal value of the inverse sine of <code>self</code>.\nInverse hyperbolic sine function.\nComputes the principal value of inverse hyperbolic sine of …\nComputes the arctangent of a number. Return value is in …\nComputes the principal value of the inverse tangent of <code>self</code>…\nInverse hyperbolic tangent function.\nComputes the principal value of inverse hyperbolic tangent …\nCreate a new <code>Complex&lt;f32&gt;</code> with arguments that can convert …\nCreate a new <code>Complex&lt;f64&gt;</code> with arguments that can convert …\nTake the cubic root of a number.\nComputes the principal value of the cube root of <code>self</code>.\nCreate a new Complex with a given phase: <code>exp(i * phase)</code>. …\nComputes the complex conjugate of the number.\nReturns the complex conjugate. i.e. <code>re - i im</code>\nComputes the cosine of a number (in radians).\nComputes the cosine of <code>self</code>.\nHyperbolic cosine function.\nComputes the hyperbolic cosine of <code>self</code>.\nReturns <code>e^(self)</code>, (the exponential function).\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nReturns <code>2^(self)</code>.\nComputes <code>2^(self)</code>.\nReturns <code>base^(self)</code>.\nRaises a floating point number to the complex power <code>self</code>.\nReturns <code>self/other</code> using floating-point operations.\nReturns <code>1/self</code> using floating-point operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a polar representation into a complex number.\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nReturns the imaginary unit.\nReturns the imaginary part of the number.\nImaginary portion of the complex number\nImaginary portion of the complex number\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>1/self</code>\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nChecks if the given complex number is finite\nReturns <code>true</code> if this value is positive infinity or …\nChecks if the given complex number is infinite\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nChecks if the given complex number is NaN\nReturns <code>true</code> if the number is neither zero, infinite, …\nChecks if the given complex number is normal\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nReturns the natural logarithm of the number.\nComputes the principal value of natural logarithm of <code>self</code>.\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nReturns the base 10 logarithm of the number.\nComputes the principal value of log base 10 of <code>self</code>.\nReturns the base 2 logarithm of the number.\nComputes the principal value of log base 2 of <code>self</code>.\nCreate a new <code>Complex</code>\nCalculate |self|\nReturns the square of the norm (since <code>T</code> doesn’t …\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a real power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a signed integer power.\nRaises <code>self</code> to a signed integer power.\nRaises <code>self</code> to an unsigned integer power.\nReturns the real part of the number.\nReal portion of the complex number\nReal portion of the complex number\nReal portion of the complex number\nTake the reciprocal (inverse) of a number, <code>1/x</code>. See also …\nMultiplies <code>self</code> by the scalar <code>t</code>.\nComputes the sine of a number (in radians).\nComputes the sine of <code>self</code>.\nHyperbolic sine function.\nComputes the hyperbolic sine of <code>self</code>.\nTake the square root of a number.\nComputes the principal value of the square root of <code>self</code>.\nComputes the tangent of a number (in radians).\nComputes the tangent of <code>self</code>.\nHyperbolic tangent function.\nComputes the hyperbolic tangent of <code>self</code>.\nConvert to polar form (r, theta), such that …\nDivides <code>self</code> by the scalar <code>t</code>.")