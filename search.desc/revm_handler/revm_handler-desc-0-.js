searchState.loadedDescShard("revm_handler", 0, "Optimism-specific constants, types, and helpers.\nThe <code>PrecompileProvider</code> for ethereum precompiles.\nCall frame trait\nFrame Data\nFrame Result\nTrait used to initialize Context with default mainnet …\nBlock information.\nConfigurations.\nInner context.\nJournal checkpoint.\nCheck if the address is a precompile.\nReturns whether the address is a precompile.\nReturns created address if frame is create otherwise …\n[<code>context_interface::ContextTr</code>] of the EVM it is used to …\nError that happened during execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns reference to gas.\nReturns mutable reference to interpreter result.\nInput data for the frame.\nInspector of the EVM it is used to inspect the EVM. Its …\nInstructions provider of the EVM it is used to execute …\nReturn Instruction result.\nInterpreter.\nReturns reference to interpreter result.\nReturns mutable reference to interpreter result.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCasts frame result to interpreter result.\nReturns true if frame is call frame.\nReturns true if frame is create frame.\nEVM State with journaling support and database.\nLocal context that is filled by execution.\nMake call frame\nMake create frame.\nMake create frame.\nReturns execution output.\nHandles related to the main function of the EVM.\nPrecompile provider of the EVM it is used to execute …\nContains precompiles for the current spec.\nRun the precompile.\nSets the spec id and returns true if the spec id was …\nCurrent spec. None means that spec was not set yet.\nTransaction information.\nGet the warm addresses.\nReturns addresses of the precompiles.\nBlock type.\nCommit output of transaction execution.\nExtension of the <code>ExecuteEvm</code> trait that adds a method that …\nExecute EVM transactions. Main trait for transaction …\nOutput of transaction execution.\nTransaction type.\nTransact the transaction that is set in the context.\nTransact the transaction and commit to the state.\nSet the block.\nSet the transaction.\nTransact the given transaction.\nTransact the transaction and commit to the state.\nThe context type that implements ContextTr to provide …\nA trait that integrates context, instruction set, and …\nThe instruction set type that implements …\nThe type containing the available precompiled contracts\nReturns a mutable reference to the execution context\nReturns mutable references to both the context and …\nReturns mutable references to both the context and …\nReturns an immutable reference to the execution context\nExecutes the interpreter loop for the given interpreter …\nCreates the first <code>FrameInput</code> from the transaction, spec …\nThe error type returned by this handler.\nThe EVM type containing Context, Instruction, and …\nThe Frame type containing data for frame execution. …\nThe halt reason type included in the output\nThe main implementation of Ethereum Mainnet transaction …\nProcesses the authorization list, validating authority …\nProcesses the authorization list, validating authority …\nHandles cleanup when an error occurs during execution.\nValidates that the minimum gas floor requirements are …\nCreates and executes the initial frame, then processes the …\nInitializes the first frame from the provided frame input.\nCreates initial frame input using transaction parameters, …\nExecutes a frame and returns either input for a new frame …\nInitializes a new frame from the provided frame input and …\nProcesses a frame’s result by inserting it into the …\nProcesses the result of the initial call and handles …\nLoads access list and beneficiary account, marking them as …\nProcesses the final execution output.\nHandles the final steps of transaction execution.\nPrepares the EVM state for execution.\nCalculates the final gas refund amount, including any …\nReturns unused gas costs to the transaction sender’s …\nTransfers transaction fees to the block beneficiary’s …\nThe main entry point for transaction execution.\nExecutes the main frame processing loop.\nRuns the system call.\nCalled by <code>Handler::run</code> to execute the core handler logic.\nValidates the execution environment and transaction …\nDeducts maximum possible fee and transfer value from caller…\nValidates block, transaction and configuration fields.\nCalculates initial gas costs based on transaction type and …\nContext type.\nEthereum instruction contains list of mainnet instructions …\nStores instructions for EVM.\nInterpreter types.\nReturns the argument unchanged.\nInserts a new instruction into the instruction table.s\nReturns the instruction table that is used by EvmTr to …\nCalls <code>U::from(self)</code>.\nRerurns new <code>EthInstructions</code> with custom instruction table.\nReturns <code>EthInstructions</code> with mainnet spec.\nCalculate last gas spent and transform internal reason to …\nApply EIP-7702 auth list and return number gas refund on …\nExtension of the <code>SystemCallEvm</code> trait that adds a method …\nAPI for executing the system calls. System calls dont …\nCreates the system transaction with default values and set …\nCreates new transaction for system call.\nSystem call is a special transaction call that is used to …\nTransact the system call and commit to the state.\nValidate EIP-4844 transaction.\nValidate initial transaction gas.\nValidate transaction that has EIP-1559 priority fee\nValidate transaction against block and configuration for …")