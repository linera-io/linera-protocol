searchState.loadedDescShard("papaya", 0, "A fast and ergonomic concurrent hash-table for read-heavy …\nAbort the operation with the given value.\nThe operation was aborted with the given value.\nAll writes to the map must wait till the resize completes …\nThe result of a <code>compute</code> operation.\nKey equivalence trait.\nA guard that enables protected loads of concurrent objects.\nA concurrent hash table.\nA builder for a <code>HashMap</code>.\nA pinned reference to a <code>HashMap</code>.\nA concurrent hash set.\nA builder for a <code>HashSet</code>.\nA pinned reference to a <code>HashSet</code>.\nWriters copy a constant number of key/value pairs to the …\nInsert the given value.\nThe given entry was inserted.\nAn iterator over a map’s entries.\nAn iterator over a map’s keys.\nA guard that keeps the current thread marked as active.\nAn error returned by <code>try_insert</code> when the key already …\nAn operation to perform on given entry in a <code>HashMap</code>.\nA guard that protects objects for it’s lifetime, …\nRemove the entry from the map.\nThe given entry was removed.\nResize behavior for a <code>HashMap</code>.\nThe entry was updated.\nAn iterator over a map’s values.\nReturns <code>true</code> if this guard belongs to the given collector.\nReturns <code>true</code> if this guard belongs to the given collector.\nReturns <code>true</code> if this guard belongs to the given collector.\nConstruct a <code>HashMap</code> from the builder, using the configured …\nConstruct a <code>HashSet</code> from the builder, using the configured …\nReturns a builder for a <code>HashMap</code>.\nReturns a builder for a <code>HashSet</code>.\nSet the initial capacity of the map.\nSet the initial capacity of the set.\nClears the map, removing all key-value pairs.\nClears the map, removing all key-value pairs.\nClears the set, removing all values.\nClears the set, removing all values.\nSet the <code>seize::Collector</code> used for garbage collection.\nSet the <code>seize::Collector</code> used for garbage collection.\nUpdates an entry with a compare-and-swap (CAS) function.\nSee <code>HashMap::compute</code> for details.\nReturns <code>true</code> if the set contains a value for the specified …\nReturns <code>true</code> if the set contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nThe value in the map that was already present.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nCompare self to <code>key</code> and return <code>true</code> if they are equal.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nReturns a reference to the value corresponding to the key, …\nReturns a reference to the value corresponding to the key, …\nReturns a reference to the value corresponding to the key, …\nReturns a reference to the value corresponding to the key, …\nReturns a guard for use with this map.\nReturns a guard for use with this set.\nSet the hash builder used to hash keys.\nSet the hash builder used to hash keys.\nInserts a key-value pair into the map.\nInserts a key-value pair into the map.\nInserts a value into the set.\nInserts a key-value pair into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the map is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the set is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the set is empty. Otherwise returns <code>false</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all values in arbitrary order.\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all keys in arbitrary order. The …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of entries in the map.\nReturns the number of entries in the map.\nReturns the number of entries in the set.\nReturns the number of entries in the set.\nCreate a <code>Link</code> that can be used to link an object to the …\nReturns a reference to the inner <code>HashMap</code>.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nThe value which was not inserted, because the entry was …\nReturns an owned guard for use with this map.\nReturns an owned guard for use with this set.\nReturns a pinned reference to the map.\nReturns a pinned reference to the set.\nReturns a pinned reference to the map.\nReturns a pinned reference to the set.\nProtects the load of an atomic pointer.\nProtects the load of an atomic pointer.\nProtects the load of an atomic pointer.\nRefreshes the guard.\nRefreshes the guard.\nRefreshes the guard.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the set, returning the value at the key …\nRemoves a key from the set, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRemoves a key from the map, returning the stored key and …\nConditionally removes a key from the map based on the …\nConditionally removes a key from the map based on the …\nTries to reserve capacity for <code>additional</code> more elements to …\nTries to reserve capacity for <code>additional</code> more elements to …\nTries to reserve capacity for <code>additional</code> more elements to …\nTries to reserve capacity for <code>additional</code> more elements to …\nSet the resizing mode of the map. See <code>ResizeMode</code> for …\nSet the resizing mode of the set. See <code>ResizeMode</code> for …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nReturns a reference to the inner <code>HashSet</code>.\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nTries to insert a key-value pair into the map, and returns …\nTries to insert a key-value pair into the map, and returns …\nTries to insert a key and value computed from a closure …\nTries to insert a key and value computed from a closure …\nUpdates an existing entry atomically.\nUpdates an existing entry atomically.\nUpdates an existing entry or inserts a default value.\nUpdates an existing entry or inserts a default value.\nUpdates an existing entry or inserts a default value …\nUpdates an existing entry or inserts a default value …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values in arbitrary order. The …\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates an empty <code>HashSet</code> which will use the given hash …\nThe entry that was inserted.\nThe entry that was replaced.")