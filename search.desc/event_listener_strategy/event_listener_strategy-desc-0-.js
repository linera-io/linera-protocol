searchState.loadedDescShard("event_listener_strategy", 0, "A strategy for using the [<code>event-listener</code>] crate in both …\nA strategy that blocks the current thread until the event …\nThe context needed to poll the future.\nA future that runs using the [<code>event-listener</code>] crate.\nThe future returned by the <code>Strategy::wait</code> method.\nA wrapper around an <code>EventListenerFuture</code> that implements …\nA strategy that uses polling to efficiently wait for an …\nThe type of value produced on completion.\nA strategy for polling an <code>EventListenerFuture</code> or an …\nA wrapper around an <code>EventListenerFuture</code> that can be easily …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner future.\nGet a pinned mutable reference to the inner future.\nGet a pinned reference to the inner future.\nGet a reference to the inner future.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>FutureWrapper</code>, returning the inner future.\nCreate a new <code>FutureWrapper</code> from the provided future.\nPoll the event listener until it is ready.\nPoll the future using the provided strategy.\nWait for the event listener to become ready.\nWait for the future to complete, blocking the current …")