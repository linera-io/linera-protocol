searchState.loadedDescShard("alloy_trie", 0, "alloy-trie\nRoot hash of an empty trie.\nKeccak256 over empty array.\nRepresents an TrieAccount in the account trie.\nA struct representing a mask of 16 bits, used for Ethereum …\nThe account’s balance.\nThe hash of the code of the account.\nReturns the number of bits set in the mask.\nReturns the index of the first bit set in the mask, or <code>None</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TrieMask</code> from the given nibble.\nReturns the inner value of the <code>TrieMask</code>.\nThe implementation of the hash builder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a given bit is set in a mask.\nReturns <code>true</code> if the mask is empty.\nReturns <code>true</code> if the current <code>TrieMask</code> is a subset of <code>other</code>.\nCreates a new <code>TrieMask</code> from the given inner value.\nVarious branch nodes produced by the hash builder.\nThe account’s nonce.\nProof verification logic.\nSet bit at a specified index.\nThe hash of the storage account data.\nCompute  hash as committed to in the MPT trie without …\nUnset bit at a specified index.\nValue of the leaf node.\nHash of adjacent nodes.\nA component used to construct the root hash of the trie.\nHash builder value.\nHash builder value reference.\nAdds a new branch element and its hash to the trie hash …\nAdds a new leaf element and its value to the trie hash …\nAdds a new leaf element and its value to the trie hash …\nReturns the value as a reference.\nReturns the value as a slice.\nReturns the value as a slice.\nClears the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty value.\nPrint the current stack of the Hash Builder.\nReturns the current root hash of the trie builder.\nLike <code>set_from_ref</code>, but takes ownership of the bytes.\nSets the value from the given bytes.\nEnables the Hash Builder to store updated branch nodes.\nSplits the HashBuilder into a HashBuilder and hash builder …\nTake and return retained proof nodes.\nThe number of total updates accrued. Returns <code>0</code> if …\nEnable specified proof retainer.\nEnables the Hash Builder to store updated branch nodes.\nVariant representing a BranchNode.\nA branch node in an Ethereum Merkle Patricia Trie.\nA struct representing a branch node in an Ethereum trie.\nA reference to BranchNode and its state mask. NOTE: The …\nThe range of valid child indexes.\nThe flag representing the even number of nibbles in the …\nThe flag representing the even number of nibbles in the …\nVariant representing empty root node.\nVariant representing a ExtensionNode.\nAn extension node in an Ethereum Merkle Patricia Trie.\nReference to the extension node. See ExtensionNode from …\nVariant representing a LeafNode.\nA leaf node represents the endpoint or terminal node in …\nReference to the leaf node. See LeafNode from more …\nThe flag representing the odd number of nibbles in the …\nThe flag representing the odd number of nibbles in the …\nAn RLP-encoded node.\nEnum representing an MPT trie node.\nReturns hash if this is an RLP-encoded hash\nReturn branch node as BranchNodeRef.\nReturn extension node as ExtensionNodeRef.\nReturn leaf node as LeafNodeRef.\nReturns the RLP-encoded node as a slice.\nA pointer to the child node.\nA pointer to the child node.\nGiven the hash mask of children, return an iterator over …\nReturns an iterator over children of the branch node.\nEncodes a given path leaf as a compact array of bytes.\nReturns the stack index of the first child for this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new RLP-encoded node from the given data.\nCreates a new RLP-encoded node from the given data.\nGiven an RLP-encoded node, returns it either as <code>rlp(node)</code> …\nReturns the hash associated with the given nibble.\nThe bitmask representing the hashed branch children nodes …\nCollection of hashes associated with the children of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is an RLP-encoded hash.\nThe key for this extension node.\nThe key for this leaf node.\nThe key for this extension node.\nThe key for this leaf node.\nCreates a new extension node with the given key and a …\nCreates a new leaf node with the given key and value.\nCreates a new branch node with the given stack and state …\nCreate a new branch node from the stack of nodes.\nCreates a new BranchNodeCompact from the given parameters.\nCreates a new extension node with the given key and a …\nCreates a new leaf node with the given key and value.\nRLP-encodes the node and returns either <code>rlp(node)</code> or …\nRLP-encodes the node and returns either <code>rlp(node)</code> or …\nRLP-encodes the node and returns either <code>rlp(node)</code> or …\nRLP-encodes the node and returns either <code>rlp(node)</code> or …\nGiven an RLP-encoded node, returns it either as <code>rlp(node)</code> …\nAn optional root hash of the subtree rooted at this branch …\nThe collection of RLP encoded children.\nReference to the collection of RLP encoded nodes. NOTE: …\nThe bitmask indicating the presence of children at the …\nReference to bitmask indicating the presence of children at\nThe bitmask indicating the presence of children at the …\nThe bitmask representing the children at the respective …\nThe node value.\nThe node value.\nOptimization for quick RLP-encoding of a 32-byte word.\nRLP-encodes the given word and returns it as a new RLP …\nA wrapper struct for trie node key to RLP encoded trie …\nProof retainer is used to store proofs during merkle trie …\nA wrapper struct for trie node key to RLP encoded trie …\nProof retainer is used to store proofs during merkle trie …\nError during proof verification.\nError during RLP decoding of trie node.\nState root does not match the expected.\nEncountered unexpected empty root node.\nThe node value does not match at specified path.\nExtends with the elements of another <code>DecodedProofNodes</code>.\nExtends with the elements of another <code>ProofNodes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert the trie node at key.\nInsert the RLP encoded trie node at key.\nInsert the RLP encoded trie nodoe at key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert wrapper struct into inner map.\nConvert wrapper struct into inner map.\nConvert into sorted vec of all proof nodes.\nConvert into sorted vec of all proof nodes.\nReturns all collected proofs.\nReturns all collected proofs.\nReturns <code>true</code> if the given prefix matches the retainer …\nReturns <code>true</code> if the given prefix matches the retainer …\nReturn the vec of proof nodes that match the target.\nReturn the vec of proof nodes that match the target.\nReturn iterator over proof nodes that match the target.\nReturn iterator over proof nodes that match the target.\nReturn the sorted vec of proof nodes that match the target.\nReturn the sorted vec of proof nodes that match the target.\nCreate new retainer with target nibbles.\nCreate new retainer with target nibbles.\nReturn the sorted vec of all proof nodes.\nReturn the sorted vec of all proof nodes.\nRetain the proof if the key matches any of the targets.\nRetain the proof if the key matches any of the targets.\nVerify the proof for given key value pair against the …\nState root provided to verify function.\nExpected value.\nComputed state root.\nValue in the proof.\nPath at which error occurred.\nAdjust the index of an item for rlp encoding.\nCompute a trie root of the collection of rlp encodable …\nCompute a trie root of the collection of items with a …\nEthereum specific trie root functions. Calculates the root …\nEthereum specific trie root functions. Hashes and sorts …\nEthereum specific trie root functions. Hashes and sorts …\nEthereum specific trie root functions. Sorts the hashed …\nEthereum specific trie root functions. Calculates the root …\nEthereum specific trie root functions. Hashes storage …\nEthereum specific trie root functions. Sorts and …")