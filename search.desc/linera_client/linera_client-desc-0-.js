searchState.loadedDescShard("linera_client", 0, "This module provides a convenient library for writing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nCloses the chain that was created for the benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a fungible token transfer operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>ChainListener</code> is a process that listens to notifications …\nWait after processing any notification (useful for rate …\nWait before processing any notification (useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new chain listener given client chains.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the chain listener.\nDo not create blocks automatically to receive incoming …\nGets the timing sender for benchmarking, if available.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nResults from querying a validator about version, network …\nApplies the given function to the chain client.\nThe validator’s chain info (if valid and signature check …\nRetrieve the default account. Current this is the common …\nRetrieve the default chain.\nReturns a vector of references to all errors in the query …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe validator’s genesis config hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrints validator information to stdout.\nQuery the local node for version info, network …\nQuery a validator for version info, network description, …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRemembers the new chain and its owner (if any) in the …\nThe validator’s version information.\nReturns a reference to the wallet.\nReturns the wallet as a mutable reference.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nSmoothing factor for Exponential Moving Averages (0 &lt; …\nThe duration of the first single-leader and all …\nThe policy for handling incoming messages.\nThe delay when downloading a blob, after which we try a …\nMaximum number of entries in the cache.\nTime-to-live for cached responses in milliseconds.\nThese applications are allowed to call services as oracles …\nThe delay when downloading a batch of certificates, after …\nMaximum number of certificates that we download at a time …\nThe duration in milliseconds after which an idle chain …\nThese applications are allowed to change the application …\nEnable OpenTelemetry Chrome JSON exporter for trace data …\nOutput file path for Chrome trace JSON format. Can be …\nThese applications are allowed to close the current chain …\nIf present, only operations from the specified …\nThe age of an incoming tracked or protected message after …\nThe duration of the fast round, in milliseconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn additional delay, after reaching a quorum, to wait for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the file storing the keystore state.\n(EXPERIMENTAL) Whether application services can persist in …\nThese applications are allowed to make HTTP requests on …\nAt least one operation or incoming message from each of …\nMaximum expected latency in milliseconds for score …\nMaximum number of tasks that can are joined concurrently …\nThe maximum number of incoming message bundles to include …\nMaximum latency for an in-flight request before we stop …\nNumber of times to retry connecting to a validator.\nThe number of rounds in which every owner can propose …\nWhether the multi-leader rounds are unrestricted, i.e. not …\nOpenTelemetry OTLP exporter endpoint (requires …\nWeights for the new owners.\nThe new regular owners.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nTimeout for receiving responses (milliseconds)\nA set of chains to restrict incoming messages from. By …\nDelay increment for retrying to connect to a validator.\nTimeout for sending queries (milliseconds)\nMaximum number of sender certificates we try to download …\nThe duration, in milliseconds, after which an idle sender …\nThe new super owners.\nThe number of milliseconds by which the timeout increases …\nInterval in seconds between timing reports (defaults to 5)\nEnable timing reports during operations\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWhether to wait until a quorum of validators has confirmed …\nSets the file storing the private state of user chains (an …\nGiven an ASCII alphanumeric parameter <code>X</code>, read the wallet …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe (public) configuration for all validators.\nThe public configuration of a validator.\nThe private configuration of a validator service.\nThe account key of the validator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe network configuration for the validator.\nCreates a <code>GenesisConfig</code> with the first chain being the …\nThe public key of the validator.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns after the specified time or if we receive a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a user chain that we own.\nCreates an entry for a chain that we don’t own. The …\nReturns the list of all chain IDs for which we have a …\nThe owner of the chain, if we own it.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")