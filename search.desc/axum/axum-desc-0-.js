searchState.loadedDescShard("axum", 0, "axum is a web application framework that focuses on …\nAlias for a type-erased error type.\nErrors that can happen when using axum.\nExtractor and response for extensions.\nURL encoded extractor and response.\nJSON Extractor / Response.\nExtension trait that adds additional methods to <code>Request</code>.\nExtension trait that adds additional methods to <code>Parts</code>.\nThe router type for composing handlers and services.\nExtension trait that adds additional methods to any <code>Service</code>…\nHTTP body utilities.\nError handling model and utilities\nTypes and traits for extracting data from requests.\nApply an extractor to this <code>Request</code>.\nApply an extractor to this <code>Parts</code>.\nApply a parts extractor to this <code>Request</code>.\nApply a parts extractor that requires some state to this …\nApply an extractor that requires some state to this <code>Request</code>…\nApply an extractor that requires some state to this <code>Parts</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Json&lt;T&gt;</code> from a byte slice. Most users should …\nConvert this service into a <code>HandleError</code>, that will handle …\nConvert this service into a <code>HandleError</code>, that will handle …\nAsync functions that can be used to handle requests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an <code>Error</code> back into the underlying boxed trait …\nConsumes the request, returning the body wrapped in …\nConvert this service into a <code>MakeService</code>, that is a <code>Service</code> …\nConvert this service into a <code>MakeService</code>, that will store <code>C</code>…\nUtilities for writing middleware\nCreate a new <code>Error</code> from a boxable error.\nTypes and traits for generating responses.\nRouting between <code>Service</code>s and handlers.\nServe services.\nServe the service with the supplied listener.\nApply the default body limit.\nThe body type used in axum requests and responses.\nA stream of data frames.\nCreate an empty body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Body</code> from a <code>Stream</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the body into a <code>Stream</code> of data frames.\nCreate a new <code>Body</code> that wraps another <code>http_body::Body</code>.\nConverts <code>Body</code> into <code>Bytes</code> and limits the maximum size of …\nA <code>Service</code> adapter that handles errors by converting them …\n<code>Layer</code> that applies <code>HandleError</code> which is a <code>Service</code> adapter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>HandleErrorLayer</code>.\nCreate a new <code>HandleError</code>.\nResponse future for [<code>HandleError</code>].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtractor for getting connection information produced by a …\nLayer for configuring the default request body limit.\nUsed to do reference-to-value conversions thus not …\nTypes that can be created from requests.\nTypes that can be created from request parts.\nAccess the path in the router that matches the request.\nAccess the path the matched the route is nested at.\nCustomize the behavior of <code>Option&lt;Self&gt;</code> as a <code>FromRequest</code> …\nCustomize the behavior of <code>Option&lt;Self&gt;</code> as a …\nExtractor that gets the original request URI regardless of …\nExtractor that will get captures from the URL and parse …\nExtractor that deserializes query strings into some type.\nExtractor that extracts raw form requests.\nExtractor that will get captures from the URL without …\nExtractor that extracts the raw query string, without …\nIf the extractor fails, it will use this “rejection” …\nIf the extractor fails, it will use this “rejection” …\nIf the extractor fails it’ll use this “rejection” …\nIf the extractor fails it’ll use this “rejection” …\nType alias for <code>http::Request</code> whose body type defaults to …\nExtractor for state.\nExtractor for establishing WebSocket connections.\nReturns a <code>str</code> representation of the path.\nReturns a <code>str</code> representation of the path.\nExtractor for getting connection information from a client.\nDisable the default request body limit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts to this type from a reference to the input type.\nPerform the extraction.\nPerform the extraction.\nPerform the extraction.\nPerform the extraction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the default request body limit.\nExtractor that will get captures from the URL and parse …\nRejection response types.\nAttempts to construct a <code>Query</code> from a reference to a <code>Uri</code>.\nHandle WebSocket connections.\nExtractor for getting connection information produced by a …\nTrait that connected IO resources implement and use to …\nA <code>MakeService</code> created from a router.\nMiddleware used to mock <code>ConnectInfo</code> during tests.\nResponse future for <code>IntoMakeServiceWithConnectInfo</code>.\nCreate type holding information about the connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFailed to deserialize the value with a custom …\nThe kinds of errors that can happen we deserializing into …\nRejection type for <code>Path</code> if the captured routes params …\nRejection used by <code>RawPathParams</code> if a parameter contained …\nA parameter contained text that, once percent decoded, wasn…\nCatch-all variant for errors that don’t fit any other …\nFailed to parse a value into the expected type.\nFailed to parse the value at a specific index into the …\nFailed to parse the value at a specific key into the …\nExtractor that will get captures from the URL and parse …\nExtractor that will get captures from the URL without …\nAn iterator over raw path parameters.\nTried to serialize into an unsupported type such as nested …\nThe URI contained the wrong number of parameters.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this error into the underlying error kind.\nGet an iterator over the path parameters.\nGet a reference to the underlying error kind.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe number of expected parameters.\nThe expected type of the value.\nThe expected type of the value.\nThe expected type of the value.\nThe number of actual parameters in the URI.\nThe index at which the value was located.\nThe key at which the value was located.\nThe key at which the invalid value was located.\nThe key at which the invalid value was located.\nThe deserializaation failure message.\nThe name of the unsupported type.\nThe value from the URI.\nThe value from the URI.\nThe value from the URI.\nThe value that failed to deserialize.\nRejection used for <code>Bytes</code>.\nRejection used for <code>Extension</code>.\nRejection type for extractors that buffer the request …\nRejection type used if the <code>Form</code> extractor is unable to …\nRejection type used if the <code>Form</code> extractor is unable to …\nRejection type used if the <code>Query</code> extractor is unable to …\nRejection used for <code>Form</code>.\nRejection type for <code>Form</code> or <code>RawForm</code> used if the <code>Content-Type</code>…\nRejection type used when buffering the request into a …\nRejection type for <code>Json</code>.\nRejection used for <code>Json</code>.\nRejection type for <code>Json</code>.\nEncountered some other error when buffering the body.\nRejection if no matched path could be found.\nRejection used for <code>MatchedPath</code>.\nRejection type for <code>Extension</code> if an expected request …\nRejection type for <code>Json</code> used if the <code>Content-Type</code> header is …\nRejection type used if axum’s internal representation of …\nRejection type for <code>NestedPath</code>.\nRejection used for <code>Path</code>.\nRejection used for <code>Query</code>.\nRejection used for <code>RawForm</code>.\nRejection used for <code>RawPathParams</code>.\nRejection used for <code>String</code>.\nEncountered an unknown error when buffering the body.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nA binary WebSocket message\nA close message with the optional close frame.\nStatus code used to indicate why an endpoint is closing …\nA struct representing the close command.\nThe default <code>OnFailedUpgrade</code> used by <code>WebSocketUpgrade</code>.\nA WebSocket message.\nWhat to do when a connection upgrade fails.\nA ping message with the specified payload\nA pong message with the specified payload\nA text WebSocket message\nUTF-8 wrapper for Bytes.\nA stream of WebSocket messages.\nExtractor for establishing WebSocket connections.\nAllow server to accept unmasked frames (defaults to false)\nReturns as a string slice.\nCreate a new binary WebSocket message by converting to …\nCall the callback.\nConstants for <code>CloseCode</code>s.\nThe reason as a code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates from a static str.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the WebSocket and return it as binary data.\nAttempt to consume the WebSocket message and convert it to …\nSet the maximum frame size (defaults to 16 megabytes)\nSet the maximum message size (defaults to 64 megabytes)\nThe max size of the write buffer in bytes. Setting this …\nProvide a callback to call if upgrading the connection …\nFinalize upgrading the connection and call the provided …\nReturn the selected WebSocket subprotocol, if one has been …\nSet the known protocols.\nRead buffer capacity. The default value is 128KiB\nThe reason as text string.\nReceive another message.\nWebSocket specific rejections.\nReturn the selected WebSocket subprotocol, if one has been …\nSend a message.\nCreate a new text WebSocket message from a stringable.\nAttempt to get a &amp;str from the WebSocket message, this …\nThe target minimum size of the write buffer to reach …\nIndicates an abnormal closure.\nIndicates that the server is overloaded and the client …\nIndicates that an endpoint is “going away”, such as a …\nIndicates that a server is terminating the connection …\nIndicates that an endpoint (client) is terminating the …\nIndicates that an endpoint is terminating the connection …\nIndicates a normal closure, meaning that the purpose for …\nIndicates that an endpoint is terminating the connection …\nIndicates that an endpoint is terminating the connection …\nIndicates that the server is restarting.\nIndicates that an endpoint is terminating the connection …\nIndicates that no status code was included in a closing …\nIndicates that an endpoint is terminating the connection …\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection type for <code>WebSocketUpgrade</code>.\nRejection used for <code>WebSocketUpgrade</code>.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe type of future calling this handler returns.\nTrait for async functions that can be used to handle …\nAn adapter that makes a <code>Handler</code> into a <code>Service</code>.\nExtension trait for <code>Handler</code>s that don’t have state.\nA <code>Service</code> created from a <code>Handler</code> by applying a Tower …\nCall the handler with the given request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler future types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the handler into a <code>MakeService</code> and no state.\nConvert the handler into a <code>MakeService</code>.\nConvert the handler into a <code>MakeService</code> which stores …\nConvert the handler into a <code>MakeService</code> which stores …\nConvert the handler into a <code>Service</code> and no state.\nApply a <code>tower::Layer</code> to the handler.\nGet a reference to the state.\nConvert the handler into a <code>Service</code> by providing the state\nThe response future for <code>IntoService</code>.\nThe response future for <code>Layered</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMiddleware for adding some shareable value to request …\nMiddleware that runs an extractor and discards the value.\n<code>Layer</code> that applies <code>FromExtractor</code> that runs an extractor and\nA middleware created from an async function.\nA <code>tower::Layer</code> from an async function.\nTrait implemented by types that can be returned from …\nA middleware created from an async function that …\nA <code>tower::Layer</code> from an async function that transforms a …\nA middleware created from an async function that …\nA <code>tower::Layer</code> from an async function that transforms a …\nThe remainder of a middleware stack, including the handler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a middleware from an extractor.\nCreate a middleware from an extractor with the given state.\nCreate a middleware from an async function.\nCreate a middleware from an async function with the given …\nFuture types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the conversion.\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nCreate a middleware from an async function that transforms …\nExecute the remaining middleware stack.\nResponse future for <code>FromExtractor</code>.\nResponse future for <code>FromFn</code>.\nResponse future for <code>MapRequest</code>.\nResponse future for <code>MapResponse</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppend headers to a response.\nContains the error value\nThe type returned in the event of an error.\nAn <code>IntoResponse</code>-based error type\nAn HTML response.\nTrait for generating responses.\nTrait for adding headers and extensions to a response.\nAn empty response with 204 No Content status.\nContains the success value\nResponse that redirects the request to another location.\nType alias for <code>http::Response</code> whose body type defaults to …\nParts of a response.\nAn <code>IntoResponse</code>-based result type that uses <code>ErrorResponse</code> …\nAn SSE response\nGets a reference to the response extensions.\nGets a mutable reference to the response extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the response headers.\nGets a mutable reference to the response headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a response.\nSet parts of the response\nCreate a new <code>Redirect</code> that uses a <code>308 Permanent Redirect</code> …\nServer-Sent Events (SSE) responses.\nCreate a new <code>Redirect</code> that uses a <code>307 Temporary Redirect</code> …\nCreate a new <code>Redirect</code> that uses a <code>303 See Other</code> status …\nServer-sent event\nConfigure the interval between keep-alive messages, the …\nAn SSE response\nSet the event’s comment field (<code>:&lt;comment-text&gt;</code>).\nSet the event’s data data field(s) (<code>data: &lt;content&gt;</code>)\nSet the event’s name field (<code>event:&lt;event-name&gt;</code>).\nCustomize the event of the keep-alive message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the event’s identifier field (<code>id:&lt;identifier&gt;</code>).\nCustomize the interval between keep-alive messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the event’s data field to a value serialized as …\nConfigure the interval between keep-alive messages.\nCreate a new <code>Sse</code> response that will respond with the given …\nCreate a new <code>KeepAlive</code>.\nSet the event’s retry timeout field (<code>retry:&lt;timeout&gt;</code>).\nCustomize the text of the keep-alive message.\nMatch <code>CONNECT</code> requests.\nMatch <code>DELETE</code> requests.\nMatch <code>GET</code> requests.\nMatch <code>HEAD</code> requests.\nA <code>MakeService</code> that produces axum router services.\nA filter that matches one or more HTTP methods.\nMatch <code>OPTIONS</code> requests.\nMatch <code>PATCH</code> requests.\nMatch <code>POST</code> requests.\nMatch <code>PUT</code> requests.\nHow routes are stored inside a <code>Router</code>.\nThe router type for composing handlers and services.\nA <code>Router</code> converted into a borrowed <code>Service</code> with a fixed …\nA <code>Router</code> converted into an owned <code>Service</code> with a fixed body …\nMatch <code>TRACE</code> requests.\nConvert the router into a borrowed <code>Service</code> with a fixed …\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback <code>Service</code> to the router.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types.\nTrue if the router currently has at least one route added.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this router into a <code>MakeService</code>, that is a <code>Service</code> …\nConvert this router into a <code>MakeService</code>, that will store <code>C</code>…\nConvert the router into an owned <code>Service</code> with a fixed …\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge the paths and fallbacks of two routers into a single …\nAdd a fallback <code>Handler</code> for the case where a route exists, …\nRoute to services and handlers based on HTTP methods.\nNest a <code>Router</code> at some path.\nLike <code>nest</code>, but accepts an arbitrary <code>Service</code>.\nCreate a new <code>Router</code>.\nPerforms the OR operation between the <code>MethodFilter</code> in <code>self</code> …\nReset the fallback to its default.\nAdd another route to the router.\nApply a <code>tower::Layer</code> to the router that will only run if …\nAdd another route to the router that calls a <code>Service</code>.\nProvide the state for the router. State passed to this …\nTurn off checks for compatibility with route matching …\nA <code>RouteFuture</code> that always yields a <code>Response</code>.\nResponse future for <code>IntoMakeService</code>.\nResponse future for <code>Route</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Service</code> that accepts requests based on a <code>MethodFilter</code> and\nRoute requests with the given handler regardless of the …\nRoute requests to the given service regardless of its …\nRoute <code>CONNECT</code> requests to the given handler.\nChain an additional handler that will only accept <code>CONNECT</code> …\nRoute <code>CONNECT</code> requests to the given service.\nChain an additional service that will only accept <code>CONNECT</code> …\nRoute <code>DELETE</code> requests to the given handler.\nChain an additional handler that will only accept <code>DELETE</code> …\nRoute <code>DELETE</code> requests to the given service.\nChain an additional service that will only accept <code>DELETE</code> …\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback service to the router.\nReturns the argument unchanged.\nRoute <code>GET</code> requests to the given handler.\nChain an additional handler that will only accept <code>GET</code> …\nRoute <code>GET</code> requests to the given service.\nChain an additional service that will only accept <code>GET</code> …\nApply a <code>HandleErrorLayer</code>.\nRoute <code>HEAD</code> requests to the given handler.\nChain an additional handler that will only accept <code>HEAD</code> …\nRoute <code>HEAD</code> requests to the given service.\nChain an additional service that will only accept <code>HEAD</code> …\nCalls <code>U::from(self)</code>.\nConvert the router into a <code>MakeService</code>.\nConvert the router into a <code>MakeService</code> which stores …\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge two routers into one.\nCreate a default <code>MethodRouter</code> that will respond with …\nRoute requests with the given method to the handler.\nChain an additional handler that will accept requests …\nRoute requests with the given method to the service.\nChain an additional service that will accept requests …\nRoute <code>OPTIONS</code> requests to the given handler.\nChain an additional handler that will only accept <code>OPTIONS</code> …\nRoute <code>OPTIONS</code> requests to the given service.\nChain an additional service that will only accept <code>OPTIONS</code> …\nRoute <code>PATCH</code> requests to the given handler.\nChain an additional handler that will only accept <code>PATCH</code> …\nRoute <code>PATCH</code> requests to the given service.\nChain an additional service that will only accept <code>PATCH</code> …\nRoute <code>POST</code> requests to the given handler.\nChain an additional handler that will only accept <code>POST</code> …\nRoute <code>POST</code> requests to the given service.\nChain an additional service that will only accept <code>POST</code> …\nRoute <code>PUT</code> requests to the given handler.\nChain an additional handler that will only accept <code>PUT</code> …\nRoute <code>PUT</code> requests to the given service.\nChain an additional service that will only accept <code>PUT</code> …\nApply a <code>tower::Layer</code> to the router that will only run if …\nRoute <code>TRACE</code> requests to the given handler.\nChain an additional handler that will only accept <code>TRACE</code> …\nRoute <code>TRACE</code> requests to the given service.\nChain an additional service that will only accept <code>TRACE</code> …\nProvide the state for the router.\nThe listener’s address type.\nAn incoming stream.\nThe listener’s IO type.\nTypes that can listen for connections.\nExtensions to <code>Listener</code>.\nFuture returned by <code>serve</code>.\nReturn type of <code>ListenerExt::tap_io</code>.\nServe future with graceful shutdown enabled.\nAccept a new incoming connection to this listener.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a reference to the inner IO type.\nReturns the local address that this listener is bound to.\nReturns the local address this server is bound to.\nReturns the local address this server is bound to.\nReturns the remote address that this stream is bound to.\nServe the service with the supplied listener.\nRun a mutable closure on every accepted <code>Io</code>.\nRun a mutable closure on every accepted <code>Io</code>.\nPrepares a server to handle graceful shutdown when the …")