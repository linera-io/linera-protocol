searchState.loadedDescShard("aws_smithy_json", 0, "JSON Abstractions for Smithy\nAn iterator over a <code>&amp;[u8]</code> that yields <code>Result&lt;Token, Error&gt;</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJSON token parser as a Rust iterator\nReturns a custom error without an offset.\nReturns a custom error with an error source without an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds an offset to the error.\nNew-type around <code>&amp;str</code> that indicates the string is an …\nRepresents the location of a token\nEnum representing the different JSON tokens that can be …\nReturns the escaped string value\nCreates a custom error from the offset\nBuilds an error from the token’s offset\nExpects a Token::ValueString or Token::ValueNull. If the …\nExpects a Token::ValueBool or Token::ValueNull, and …\nExpects and parses a complete document value.\nExpects a Token::ValueString, Token::ValueNumber or …\nExpects a Token::StartArray token and returns an error if …\nExpects a Token::StartObject token and returns an error if …\nExpects a Token::ValueString or Token::ValueNull, and …\nExpects a Token::ValueNull, Token::ValueString, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssumes a start object/array token has already been …\nSkips an entire value in the token stream. Errors if it isn…\nUnescapes the string and returns it. If the string doesn’…\nWrites the boolean <code>value</code>.\nWrites a date-time <code>value</code> with the given <code>format</code>.\nWrites a document <code>value</code>.\nFinishes the object.\nFinishes the array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStarts a value with the given <code>key</code>.\nWrites a null value.\nWrites a number <code>value</code>.\nStarts an array.\nStarts an object.\nWrites a string <code>value</code>.\nWrites a string <code>value</code> without escaping it.\nStarts a new value in the array.")