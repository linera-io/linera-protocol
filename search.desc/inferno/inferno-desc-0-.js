searchState.loadedDescShard("inferno", 0, "Inferno is a set of tools that let you to produce flame …\nStack collapsing for various input formats.\nTool for creating an output required to generate …\nTools for producing flame graphs from folded stack traces.\nThe abstract behavior of stack collapsing.\nCollapses the contents of the provided <code>reader</code> and writes …\nCollapses the contents of the provided file (or of STDIN …\nCollapses the contents of the provided file (or of STDIN …\nStack collapsing for the output of <code>dtrace</code>.\nStack collapsing for the output of the GHC’s built-in …\nAttempts to use whichever Collapse implementation is …\nReturns whether this implementation is appropriate for the …\nStack collapsing for the output of <code>perf script</code>.\nCollapse direct recursive backtraces.\nStack collapsing for the output of <code>sample</code> on macOS.\nStack collapsing for the output of the Visual Studio …\nStack collapsing for the output of <code>VTune</code>.\nStack collapsing for the output of the xctrace.\nA stack collapser for the output of dtrace <code>ustrace()</code>.\n<code>dtrace</code> folder configuration options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude function offset (except leafs).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of threads to use.\nThe bytes column representing individual bytes allocated\nA stack collapser for the output of <code>ghc</code>’s prof files.\n<code>ghcprof</code> folder configuration options.\nThe indivial %time column representing individual time as …\nWhich prof column to use as the cost centre of the output …\nThe ticks column representing individual runtime ticks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for start line of a call graph.\nColumn to source associated value from, default is …\nA collapser that tries to find an appropriate …\nFolder configuration options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of threads to use.\nA stack collapser for the output of <code>perf script</code>.\n<code>perf</code> folder configuration options.\nAnnotate JIT functions with a <code>_[j]</code> suffix.\nAnnotate kernel functions with a <code>_[k]</code> suffix.\nOnly consider samples of the given event type (see …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude raw addresses (e.g., <code>0xbfff0836</code>) where symbols can…\nInclude PID in the root frame. If disabled, the root frame …\nInclude TID and PID in the root frame. Implies <code>include_pid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of threads to use.\nIf a stack function name is equal to any of the specified …\nA “middleware” folder that receives and outputs the …\nRecursive backtrace folder configuration options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of threads to use.\nA stack collapser for the output of <code>sample</code> on macOS.\n<code>sample</code> folder configuration options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for start and end lines of a call graph.\nDon’t include modules with function names.\nA stack collapser for the output of the Visual Studio …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA stack collapser for CSV call graphs created with the …\n<code>vtune</code> folder configuration options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for header\nDon’t include modules with function names.\nContext of collapsing a xctrace’s <code>Time Profiler</code> xml\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigure the generated output.\nReturns the argument unchanged.\nProduce an output that can be used to generate a …\nProduce an output that can be used to generate a …\nCalls <code>U::from(self)</code>.\nNormalize the first profile count to match the second.\nStrip hex numbers (addresses) of the form “0x45ef2173” …\nThe direction the plot should grow.\nProvides a way to customize the attributes on the SVG …\nStacks grow from the top to the bottom.\nTruncate text on the left.\nConfigure the flame graph.\nTruncate text on the right.\nStacks grow from the bottom to the top.\nThe direction text is truncated when it’s too long.\nBase symbols\nThe background color for the plot.\nColor palettes and options for flame graph generation.\nDiffusion-based color: the wider the frame, the more red …\nThe color palette to use when plotting.\nCount type label for the flame graph.\nDefault values for <code>Options</code>.\nChoose names based on the hashes of function names, …\nWhether to plot a plot that grows top-to-bottom or …\nFactor to scale sample counts by in the flame graph.\nProduce a flame chart (sort by time, do not merge stacks)\nFont size for the flame graph.\nThe font type for the flame graph.\nFont width for the flame graph.\nHeight of each frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse frame attributes from a file.\nProduce a flame graph from files that contain folded stack …\nProduce a flame graph from an iterator over folded stack …\nProduce a flame graph from a reader that contains a …\nParse frame attributes from a <code>BufRead</code>.\nProduce a flame graph from a set of readers that contain …\nAssign extra attributes to particular functions.\nChoose names based on the hashes of function names.\nWidth of the flame graph\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimal width to omit smaller functions\nName type label for the flame graph.\nBy default, if differential samples are included in the …\nDon’t sort the input lines.\nThe notes for the flame graph.\nStore the choice of color for each function so that later …\nPretty print XML with newlines and indentation.\nGenerate stack-reversed flame graph.\nThe search color for flame graph.\nThe stroke color for flame graph.\nThe subtitle for the flame graph.\nWhen text doesn’t fit in a frame, should we cut off left …\nThe title for the flame graph.\nThe color of UI text such as the search and reset view …\nA palette in which colors are chosen from an aqua-tinted …\nA flame graph background color.\nA plain color palette in which the color is not chosen …\nA plain color palette in which the color is not chosen …\nA blue gradient from <code>#EEEEEE</code> to <code>#E0E0FF</code>.\nA palette in which colors are chosen from a blue spectrum.\nA re-export of <code>RGB8</code> from the <code>rgb</code> crate.\nColor of the stroke\nA flag background color with the given RGB components.\nA green gradient from <code>#EEF2EE</code> to <code>#E0FFE0</code>.\nA palette in which colors are chosen from a green spectrum.\nA grey gradient from <code>#F8F8F8</code> to <code>#E8E8E8</code>.\nA palette in which colors are chosen from a red-yellow …\nA palette in which colors are chosen from a wide blue …\nUse Java semantics to color frames.\nUse JavaScript semantics to color frames.\nA palette in which colors are chosen from a green-blue …\nA semantic color palette in which different hues are used …\nA semantic color palette in which different hues are used …\nNo color for the stroke\nA palette in which colors are chosen from a orange …\nA flame graph color palette.\nMapping of the association between a function name and the …\nUse Perl semantics to color frames.\nA palette in which colors are chosen from a purple …\nUse Python semantics to color frames.\nA palette in which colors are chosen from a red spectrum.\nUse Rust semantics to color frames.\n<code>SearchColor::default()</code> is <code>rgb(230,0,230)</code>.\n<code>StrokeColor::default()</code> is <code>None</code>.\nThe valid set of palettes (via <code>FromStr</code>).\nEquivalent to <code>BasicPalette::Aqua</code> with <code>BackgroundColor::Blue</code>…\nA yellow gradient from <code>#EEEEEE</code> to <code>#EEEEB0</code>.\nA palette in which colors are chosen from a yellow …\nBlue Component\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a mapping based on the inputs given by the reader.\nGreen Component\nReturns the color value corresponding to the given …\nInserts a function name/color pair in the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides an iterator over the elements of the map.\nUtility function to load a palette map from a file.\nParses a string as a hex color, returning None if it is an …\nRed Component\nUtility function to save a palette map to a file.\nWrites the palette map using the given writer.\n“Flame Chart”\n“hot”\n“samples”\n1.0\n12\n“monospace”\n0.59\n16\n0.01\n“Function:”\n“#e600e6”\n“none”\n“Flame Graph”\n“#000000”")