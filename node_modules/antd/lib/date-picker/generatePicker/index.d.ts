/// <reference types="react" />
import type { GenerateConfig } from 'rc-picker/lib/generate/index';
import type { AnyObject } from '../../_util/type';
export type { PickerLocale, PickerProps } from './interface';
declare function generatePicker<DateType extends AnyObject>(generateConfig: GenerateConfig<DateType>): (<ValueType = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, import("./interface").PickerProps<DateType>, ValueType>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
    displayName?: string | undefined;
} & {
    displayName?: string | undefined;
    WeekPicker: (<ValueType_1 = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, Omit<import("./interface").PickerProps<DateType>, "picker">, ValueType_1>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
        displayName?: string | undefined;
    };
    MonthPicker: (<ValueType_1 = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, Omit<import("./interface").PickerProps<DateType>, "picker">, ValueType_1>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
        displayName?: string | undefined;
    };
    YearPicker: (<ValueType_1 = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, Omit<import("./interface").PickerProps<DateType>, "picker">, ValueType_1>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
        displayName?: string | undefined;
    };
    RangePicker: import("react").ForwardRefExoticComponent<Omit<import("rc-picker").RangePickerProps<DateType>, "locale" | "generateConfig" | "hideHeader"> & {
        locale?: import("./interface").PickerLocale | undefined;
        size?: import("../../button").ButtonSize;
        placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | undefined;
        bordered?: boolean | undefined;
        status?: "" | "warning" | "error" | undefined;
        variant?: "filled" | "outlined" | "borderless" | undefined;
        dropdownClassName?: string | undefined;
        popupClassName?: string | undefined;
        rootClassName?: string | undefined;
        popupStyle?: import("react").CSSProperties | undefined;
    } & import("react").RefAttributes<import("rc-picker").PickerRef>>;
    TimePicker: (<ValueType_2 = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, Omit<Omit<import("./interface").PickerProps<DateType>, "picker" | "showTime">, "picker">, ValueType_2>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
        displayName?: string | undefined;
    };
    QuarterPicker: (<ValueType_2 = DateType>(props: import("./interface").PickerPropsWithMultiple<DateType, Omit<Omit<import("./interface").PickerProps<DateType>, "picker" | "showTime">, "picker">, ValueType_2>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & {
        displayName?: string | undefined;
    };
};
export default generatePicker;
