syntax = "proto3";
package rpc.v1;

import "google/protobuf/empty.proto";

// A service run by the Proxy which listens for incoming connections
// from workers and then notifies clients.
service NotifierService {
  // Notify a client that there has been an update for a `ChainId`.
  rpc Notify(Notification) returns (google.protobuf.Empty);
}

// Interface provided by each physical shard (aka "worker") of a validator or a local node.
// * All commands return either the current chain info or an error.
// * Repeating commands produces no changes and returns no error.
// * Some handlers may return cross-chain requests, that is, messages
//   to be communicated to other workers of the same validator.
service ValidatorWorker {
  // Propose a new block.
  rpc HandleBlockProposal(BlockProposal) returns (ChainInfoResult);

  // Process a certificate without value.
  rpc HandleLiteCertificate(LiteCertificate) returns (ChainInfoResult);

  // Process a certificate.
  rpc HandleCertificate(CertificateWithDependencies) returns (ChainInfoResult);

  // Handle information queries for this chain.
  rpc HandleChainInfoQuery(ChainInfoQuery) returns (ChainInfoResult);

  // Handle a (trusted!) cross-chain request.
  rpc HandleCrossChainRequest(CrossChainRequest) returns (google.protobuf.Empty);
}

// How to communicate with a validator or a local node.
service ValidatorNode {
  // Propose a new block.
  rpc HandleBlockProposal(BlockProposal) returns (ChainInfoResult);

  // Process a certificate without value.
  rpc HandleLiteCertificate(LiteCertificate) returns (ChainInfoResult);

  // Process a certificate.
  rpc HandleCertificate(CertificateWithDependencies) returns (ChainInfoResult);

  // Handle information queries for this chain.
  rpc HandleChainInfoQuery(ChainInfoQuery) returns (ChainInfoResult);

  // Subscribe to notifications for a set of Chain Ids.
  rpc Subscribe(SubscriptionRequest) returns (stream Notification);
}

// A request for client to subscribe to notifications for a given `ChainId`
message SubscriptionRequest {
  repeated ChainId chain_ids = 1;
}

// Notify that a chain has a new certified block or a new message.
message Notification {
  ChainId chain_id = 1;
  Reason reason = 2;
}

// Reason for the notification.
message Reason {
  oneof inner {
    NewBlock new_block = 1;
    NewMessage new_message = 2;
  }
}

message NewBlock {
  BlockHeight height = 1;
}

message NewMessage {
  ApplicationId application_id = 1;
  Origin origin = 2;
  BlockHeight height = 3;
}

// A wrapper around ChainInfoResponse which contains a serialized error variant
message ChainInfoResult {
  oneof inner {
    ChainInfoResponse chain_info_response = 1;
    // a bcs wrapper around `NodeError`
    bytes error = 2;
  }
}

// An internal message between chains within a validator.
message CrossChainRequest {
  oneof inner {
    UpdateRecipient update_recipient = 1;
    ConfirmUpdatedRecipient confirm_updated_recipient = 2;
  }
}

// Communicate a number of confirmed blocks from the sender to the recipient.
// Blocks must be given by increasing heights.
message UpdateRecipient {
  repeated UpdateRecipientEntry height_map = 1;
  ChainId sender = 2;
  ChainId recipient = 3;
  repeated Certificate certificates = 4;
}

// An entry of UpdateRecipient, specifying which blocks are relevant for which application
// and medium.
message UpdateRecipientEntry {
  ApplicationId application_id = 1;
  Medium medium = 2;
  repeated BlockHeight heights = 3;
}

// Acknowledge the height of the highest confirmed block communicated with `UpdateRecipient`.
message ConfirmUpdatedRecipient {
  ApplicationId application_id = 1;
  Origin origin = 2;
  ChainId recipient = 3;
  BlockHeight height = 4;
}

// Message to obtain information on a chain.
message ChainInfoQuery {
  // The chain id
  ChainId chain_id = 1;

  // Optionally test that the block height is as expected
  optional BlockHeight test_next_block_height = 2;

  // Query the current committees
  bool request_committees = 3;

  // Query the received messages that are waiting be picked in the next block.
  bool request_pending_messages = 4;

  // Query a range of certificates sent from the chain.
  optional BlockHeightRange request_sent_certificates_in_range = 5;

  // Query new certificate removed from the chain.
  optional uint64 request_received_log_excluding_first_nth = 6;

  // Query values from the chain manager, not just votes.
  bool request_manager_values = 7;

  // Query a value that contains a binary blob (e.g. bytecode) required by this chain.
  optional bytes request_blob = 8;
}

// The origin of a message, relative to a particular application. Used to identify each inbox.
message Origin {
  // The chain ID of the sender.
  ChainId sender = 1;

  // The medium
  Medium medium = 2;
}

// The origin of a message coming from a particular chain. Used to identify each inbox.
message Medium {
  optional bytes channel = 1;
}

// An authenticated proposal for a new block.
message BlockProposal {
  // The ID of the chain (used for routing).
  ChainId chain_id = 10;

  // BCS signable
  bytes content = 1;

  // Byte-encoded public key
  Owner owner = 2;

  // Signature value
  Signature signature = 3;

  // Required bytecode
  repeated bytes blobs = 4;
}

// A certified statement from the committee, without the value.
message LiteCertificate {
  // The certified value's hash
  bytes hash = 1;

  // The ID of the chain the value belongs to.
  ChainId chain_id = 2;

  // Signatures on the value
  repeated NameSignaturePair signatures = 3;
}

// A certified statement from the committee.
message Certificate {
  // The ID of the chain (used for routing).
  ChainId chain_id = 10;

  // The certified value (bcs signable)
  bytes value = 1;

  // Signatures on the value
  repeated NameSignaturePair signatures = 2;
}

// A certified statement from the committee, together with other certificates
// required for execution.
message CertificateWithDependencies {
  // The ID of the chain (used for routing).
  ChainId chain_id = 10;

  // The certificate
  Certificate certificate = 1;

  // Other certificates containing bytecode required by the first one
  repeated bytes blobs = 2;
}

// A range of block heights as used in ChainInfoQuery.
message BlockHeightRange {
  // Starting point
  BlockHeight start = 1;

  // Optional limit on the number of elements.
  optional uint64 limit = 2;
}

message NameSignaturePair {
  PublicKey validator_name = 1;
  Signature signature = 2;
}

// A unique identifier for an application.
message ApplicationId {
  oneof inner {
    // The system application.
    google.protobuf.Empty system = 1;
    // A user application.
    UserApplicationId user = 2;
  }
}

// A user application Id.
message UserApplicationId {
  // The bytecode to use for the application.
  BytecodeId bytecode_id = 1;

  // The unique ID of the application's creation.
  EffectId creation = 2;
}

// A unique identifier for an application bytecode.
message BytecodeId {
  EffectId publish_effect = 1;
}

// The index of an effect in a chain.
message EffectId {
  ChainId chain_id = 1;

  BlockHeight height = 2;

  uint64 index = 3;
}

message ChainId {
  bytes bytes = 1;
}

message PublicKey {
  bytes bytes = 1;
}

message Owner {
  PublicKey inner = 1;
}

message Signature {
  bytes bytes = 1;
}

// Response to `ChainInfoQuery`
message ChainInfoResponse {
  // bcs signable
  bytes chain_info = 1;

  // Optional signature for the response.
  optional Signature signature = 2;
}

message BlockHeight {
  uint64 height = 1;
}
