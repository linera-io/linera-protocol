[package]
name = "linera-service"
description = "Executable for clients (aka CLI wallets), proxy (aka validator frontend) and servers of the Linera protocol."
readme = "README.md"
documentation = "https://docs.rs/linera-service/latest/linera_service/"

authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
version.workspace = true

[features]
ethereum = []
default = ["wasmer", "rocksdb"]
test = [
    "linera-base/test",
    "linera-views/test",
    "linera-execution/test",
    "dep:stdext",
]
benchmark = ["linera-base/test", "linera-client/benchmark", "dep:linera-sdk"]
wasmer = ["linera-client/wasmer", "linera-execution/wasmer", "linera-storage/wasmer"]
wasmtime = [
    "linera-client/wasmtime",
    "linera-execution/wasmtime",
    "linera-storage/wasmtime",
]
rocksdb = [
    "linera-client/rocksdb",
    "linera-views/rocksdb",
    "linera-core/rocksdb",
]
dynamodb = [
    "linera-client/dynamodb",
    "linera-views/dynamodb",
    "linera-core/dynamodb",
]
scylladb = [
    "linera-client/scylladb",
    "linera-views/scylladb",
    "linera-core/scylladb",
]
kubernetes = [
    "linera-client/kubernetes",
    "dep:k8s-openapi",
    "dep:kube",
    "dep:pathdiff",
    "dep:fs_extra",
]
remote-net = ["dep:k8s-openapi", "dep:kube"]
metrics = ["prometheus", "linera-base/metrics", "linera-client/metrics"]
storage-service = ["linera-client/storage-service", "linera-storage-service"]

[dependencies]
anyhow.workspace = true
assert_matches.workspace = true
async-graphql.workspace = true
async-graphql-axum.workspace = true
async-lock.workspace = true
async-trait.workspace = true
async-tungstenite.workspace = true
axum = { workspace = true, features = ["ws"] }
bcs.workspace = true
cargo_toml.workspace = true
chrono = { workspace = true, features = ["clock"] }
clap.workspace = true
clap-markdown.workspace = true
colored.workspace = true
comfy-table.workspace = true
convert_case.workspace = true
current_platform = "0.2.0"
fs-err = { workspace = true, features = ["tokio"] }
fs_extra = { workspace = true, optional = true }
futures.workspace = true
hex.workspace = true
http.workspace = true
k8s-openapi = { workspace = true, optional = true }
kube = { workspace = true, optional = true }
linera-base.workspace = true
linera-chain.workspace = true
linera-client = { workspace = true, features = ["fs"] }
linera-core.workspace = true
linera-execution = { workspace = true, features = ["fs"] }
linera-rpc = { workspace = true, features = ["server", "simple-network"] }
linera-sdk = { workspace = true, optional = true }
linera-storage.workspace = true
linera-storage-service = { workspace = true, optional = true }
linera-version.workspace = true
linera-views.workspace = true
pathdiff = { workspace = true, optional = true }
port-selector.workspace = true
prometheus = { workspace = true, optional = true }
rand.workspace = true
rcgen.workspace = true
reqwest = { workspace = true, features = ["json"] }
serde.workspace = true
serde_json.workspace = true
stdext = { workspace = true, optional = true }
tempfile.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["full"] }
tokio-stream.workspace = true
tokio-util.workspace = true
toml.workspace = true
tonic = { workspace = true, features = ["transport", "tls", "tls-roots"] }
tonic-health.workspace = true
tonic-reflection.workspace = true
tonic-web.workspace = true
tower.workspace = true
tower-http = { workspace = true, features = ["cors"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["fmt"] }

[build-dependencies]
cfg_aliases.workspace = true

[dev-dependencies]
amm.workspace = true
base64.workspace = true
counter.workspace = true
criterion = { workspace = true, features = ["async_tokio"] }
crowd-funding.workspace = true
ethereum-tracker.workspace = true
fungible.workspace = true
linera-alloy = { workspace = true, default-features = false, features = [ "rpc-types-eth" ] }
linera-base = { workspace = true, features = ["test"] }
linera-chain = { workspace = true, features = ["test"] }
linera-client = { workspace = true, features = ["test"] }
linera-core = { workspace = true, features = ["test"] }
linera-ethereum.workspace = true
linera-execution = { workspace = true, features = ["test"] }
linera-rpc = { workspace = true, features = ["test"] }
linera-sdk = { workspace = true, features = ["wasmer", "test"] }
linera-service = { path = ".", features = ["test"] }
linera-storage = { workspace = true, features = ["test"] }
linera-views = { workspace = true, features = ["test"] }
matching-engine.workspace = true
native-fungible.workspace = true
non-fungible.workspace = true
prometheus.workspace = true
proptest.workspace = true
reqwest = { workspace = true, features = ["json"] }
social.workspace = true
test-case.workspace = true
test-log = { workspace = true, features = ["trace"] }
test-strategy.workspace = true
tokio = { workspace = true, features = ["full", "test-util"] }

[[bin]]
name = "linera-db"
path = "src/database_tool.rs"

[[bin]]
name = "linera"
path = "src/linera/main.rs"

[[bin]]
name = "linera-server"
path = "src/server.rs"

[[bin]]
name = "linera-proxy"
path = "src/proxy/main.rs"

[[bin]]
name = "linera-schema-export"
path = "src/schema_export.rs"

[[bin]]
name = "linera-benchmark"
path = "src/benchmark.rs"
required-features = ["benchmark"]

[[bench]]
name = "transfers"
harness = false
