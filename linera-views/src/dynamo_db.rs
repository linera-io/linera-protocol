// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0
use crate::{
    common::{Batch, Context, ContextFromDb, KeyValueOperations, WriteOperation},
    localstack,
};
use async_trait::async_trait;
use aws_sdk_dynamodb::{
    model::{
        AttributeDefinition, AttributeValue, DeleteRequest, KeySchemaElement, KeyType,
        ProvisionedThroughput, PutRequest, ScalarAttributeType, WriteRequest,
    },
    output::QueryOutput,
    types::{Blob, SdkError},
    Client,
};
use linera_base::ensure;
use serde::Serialize;
use std::{collections::HashMap, str::FromStr};
use thiserror::Error;

/// The configuration to connect to DynamoDB.
pub use aws_sdk_dynamodb::Config;

#[cfg(test)]
#[path = "unit_tests/dynamo_db_context_tests.rs"]
pub mod dynamo_db_context_tests;

/// The attribute name of the partition key.
const PARTITION_ATTRIBUTE: &str = "item_partition";

/// A dummy value to use as the partition key.
const DUMMY_PARTITION_KEY: &[u8] = &[0];

/// The attribute name of the primary key (used as a sort key).
const KEY_ATTRIBUTE: &str = "item_key";

/// The attribute name of the table value blob.
const VALUE_ATTRIBUTE: &str = "item_value";

/// The attribute name of the primary key (used as a sort key).
const KEY_VALUE_ATTRIBUTE: &str = "item_key,item_value";

#[derive(Debug, Clone)]
pub struct DynamoDbContainer {
    pub client: Client,
    pub table: TableName,
}

/// A implementation of [`Context`] based on DynamoDB.
pub type DynamoDbContext<E> = ContextFromDb<E, DynamoDbContainer>;

impl DynamoDbContainer {
    /// Build the key attributes for a table item.
    ///
    /// The key is composed of two attributes that are both binary blobs. The first attribute is a
    /// partition key and is currently just a dummy value that ensures all items are in the same
    /// partion. This is necessary for range queries to work correctly.
    ///
    /// The second attribute is the actual key value, which is generated by concatenating the
    /// context prefix. The Vec<u8> expression is obtained from self.derive_key
    fn build_key(key: Vec<u8>) -> HashMap<String, AttributeValue> {
        [
            (
                PARTITION_ATTRIBUTE.to_owned(),
                AttributeValue::B(Blob::new(DUMMY_PARTITION_KEY)),
            ),
            (KEY_ATTRIBUTE.to_owned(), AttributeValue::B(Blob::new(key))),
        ]
        .into()
    }

    /// Build the value attribute for storing a table item.
    fn build_key_value(key: Vec<u8>, value: Vec<u8>) -> HashMap<String, AttributeValue> {
        [
            (
                PARTITION_ATTRIBUTE.to_owned(),
                AttributeValue::B(Blob::new(DUMMY_PARTITION_KEY)),
            ),
            (KEY_ATTRIBUTE.to_owned(), AttributeValue::B(Blob::new(key))),
            (
                VALUE_ATTRIBUTE.to_owned(),
                AttributeValue::B(Blob::new(value)),
            ),
        ]
        .into()
    }

    /// Extract the key attribute from an item.
    fn extract_key(
        len_prefix: usize,
        attributes: &mut HashMap<String, AttributeValue>,
    ) -> Result<Vec<u8>, DynamoDbContextError> {
        let key = attributes
            .remove(KEY_ATTRIBUTE)
            .ok_or(DynamoDbContextError::MissingKey)?;
        match key {
            AttributeValue::B(blob) => Ok(blob.into_inner()[len_prefix..].to_vec()),
            key => Err(DynamoDbContextError::wrong_key_type(&key)),
        }
    }

    /// Extract the value attribute from an item.
    fn extract_value(
        attributes: &mut HashMap<String, AttributeValue>,
    ) -> Result<Vec<u8>, DynamoDbContextError> {
        let value = attributes
            .remove(VALUE_ATTRIBUTE)
            .ok_or(DynamoDbContextError::MissingValue)?;
        match value {
            AttributeValue::B(blob) => Ok(blob.into_inner()),
            value => Err(DynamoDbContextError::wrong_value_type(&value)),
        }
    }

    /// Extract the key attribute from an item.
    fn extract_key_value(
        len_prefix: usize,
        mut attributes: HashMap<String, AttributeValue>,
    ) -> Result<(Vec<u8>, Vec<u8>), DynamoDbContextError> {
        let key = Self::extract_key(len_prefix, &mut attributes)?;
        let value = Self::extract_value(&mut attributes)?;
        Ok((key, value))
    }

    async fn get_query_output(
        &self,
        attribute_str: &str,
        key_prefix: &[u8],
    ) -> Result<QueryOutput, DynamoDbContextError> {
        let response = self
            .client
            .query()
            .table_name(self.table.as_ref())
            .projection_expression(attribute_str)
            .key_condition_expression(format!(
                "{PARTITION_ATTRIBUTE} = :partition and begins_with({KEY_ATTRIBUTE}, :prefix)"
            ))
            .expression_attribute_values(
                ":partition",
                AttributeValue::B(Blob::new(DUMMY_PARTITION_KEY)),
            )
            .expression_attribute_values(":prefix", AttributeValue::B(Blob::new(key_prefix)))
            .send()
            .await?;
        Ok(response)
    }
}

// Inspired by https://depth-first.com/articles/2020/06/22/returning-rust-iterators/
pub struct DynamoDbKeyIterator {
    len_prefix: usize,
    iter: std::iter::Flatten<
        std::option::IntoIter<Vec<HashMap<std::string::String, AttributeValue>>>,
    >,
}

impl DynamoDbKeyIterator {
    fn new(len_prefix: usize, response: aws_sdk_dynamodb::output::QueryOutput) -> Self {
        Self {
            len_prefix,
            iter: response.items.into_iter().flatten(),
        }
    }
}

impl Iterator for DynamoDbKeyIterator {
    type Item = Result<Vec<u8>, DynamoDbContextError>;

    fn next(&mut self) -> Option<Self::Item> {
        self.iter
            .next()
            .map(|mut x| DynamoDbContainer::extract_key(self.len_prefix, &mut x))
    }
}

// Inspired by https://depth-first.com/articles/2020/06/22/returning-rust-iterators/
pub struct DynamoDbKeyValueIterator {
    len_prefix: usize,
    iter: std::iter::Flatten<
        std::option::IntoIter<Vec<HashMap<std::string::String, AttributeValue>>>,
    >,
}

impl DynamoDbKeyValueIterator {
    fn new(len_prefix: usize, response: aws_sdk_dynamodb::output::QueryOutput) -> Self {
        Self {
            len_prefix,
            iter: response.items.into_iter().flatten(),
        }
    }
}

impl Iterator for DynamoDbKeyValueIterator {
    type Item = Result<(Vec<u8>, Vec<u8>), DynamoDbContextError>;

    fn next(&mut self) -> Option<Self::Item> {
        self.iter
            .next()
            .map(|x| DynamoDbContainer::extract_key_value(self.len_prefix, x))
    }
}

#[async_trait]
impl KeyValueOperations for DynamoDbContainer {
    type Error = DynamoDbContextError;
    type KeyIterator = DynamoDbKeyIterator;
    type KeyValueIterator = DynamoDbKeyValueIterator;

    async fn read_key_bytes(&self, key: &[u8]) -> Result<Option<Vec<u8>>, DynamoDbContextError> {
        let response = self
            .client
            .get_item()
            .table_name(self.table.as_ref())
            .set_key(Some(Self::build_key(key.to_vec())))
            .send()
            .await?;

        match response.item {
            Some(mut item) => Ok(Some(Self::extract_value(&mut item)?)),
            None => Ok(None),
        }
    }

    async fn find_keys_without_prefix(
        &self,
        key_prefix: &[u8],
    ) -> Result<Self::KeyIterator, DynamoDbContextError> {
        let response = self.get_query_output(KEY_ATTRIBUTE, key_prefix).await?;
        Ok(DynamoDbKeyIterator::new(key_prefix.len(), response))
    }

    async fn find_key_values_without_prefix(
        &self,
        key_prefix: &[u8],
    ) -> Result<Self::KeyValueIterator, DynamoDbContextError> {
        let response = self.get_query_output(KEY_VALUE_ATTRIBUTE, key_prefix).await?;
        Ok(DynamoDbKeyValueIterator::new(key_prefix.len(), response))
    }

    /// We put submit the transaction in blocks (called BatchWriteItem in dynamoDb) of at most 25
    /// so as to decrease the number of needed transactions. That constant 25 comes from
    /// https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html
    async fn write_batch(&self, batch: Batch) -> Result<(), DynamoDbContextError> {
        let max_size_batch_write_item = 25;
        // We put the delete in insert in separate lists since the use of `DeletePrefix` forces us
        // to download the list of prefix and insert them. Having two lists is preferable as
        // having two types forces us to introduce a new data type that encompass just the Put and Delete.
        let mut delete_list = Vec::new();
        let mut insert_list = Vec::new();
        for op in batch.simplify().operations {
            match op {
                WriteOperation::Delete { key } => {
                    delete_list.push(key);
                }
                WriteOperation::Put { key, value } => {
                    insert_list.push((key, value));
                }
                WriteOperation::DeletePrefix { key_prefix } => {
                    for short_key in self.find_keys_without_prefix(&key_prefix).await? {
                        let mut key = key_prefix.clone();
                        key.extend_from_slice(&short_key?);
                        delete_list.push(key);
                    }
                }
            };
        }
        for batch_chunk in delete_list.chunks(max_size_batch_write_item) {
            let requests = batch_chunk
                .iter()
                .map(|key| {
                    let request = DeleteRequest::builder()
                        .set_key(Some(Self::build_key(key.to_vec())))
                        .build();
                    WriteRequest::builder().delete_request(request).build()
                })
                .collect();
            self.client
                .batch_write_item()
                .set_request_items(Some(HashMap::from([(self.table.0.clone(), requests)])))
                .send()
                .await?;
        }
        for batch_chunk in insert_list.chunks(max_size_batch_write_item) {
            let requests = batch_chunk
                .iter()
                .map(|(key, value)| {
                    let request = PutRequest::builder()
                        .set_item(Some(Self::build_key_value(key.to_vec(), value.to_vec())))
                        .build();
                    WriteRequest::builder().put_request(request).build()
                })
                .collect();
            self.client
                .batch_write_item()
                .set_request_items(Some(HashMap::from([(self.table.0.clone(), requests)])))
                .send()
                .await?;
        }
        Ok(())
    }
}

impl DynamoDbContainer {
    /// Create a new [`DynamoDbContainer`] instance.
    pub async fn new(table: TableName) -> Result<(Self, TableStatus), CreateTableError> {
        let config = aws_config::load_from_env().await;

        DynamoDbContainer::from_config(&config, table).await
    }
    /// Create the storage table if it doesn't exist.
    ///
    /// Attempts to create the table and ignores errors that indicate that it already exists.
    async fn create_table_if_needed(&self) -> Result<TableStatus, CreateTableError> {
        let result = self
            .client
            .create_table()
            .table_name(self.table.as_ref())
            .attribute_definitions(
                AttributeDefinition::builder()
                    .attribute_name(PARTITION_ATTRIBUTE)
                    .attribute_type(ScalarAttributeType::B)
                    .build(),
            )
            .attribute_definitions(
                AttributeDefinition::builder()
                    .attribute_name(KEY_ATTRIBUTE)
                    .attribute_type(ScalarAttributeType::B)
                    .build(),
            )
            .key_schema(
                KeySchemaElement::builder()
                    .attribute_name(PARTITION_ATTRIBUTE)
                    .key_type(KeyType::Hash)
                    .build(),
            )
            .key_schema(
                KeySchemaElement::builder()
                    .attribute_name(KEY_ATTRIBUTE)
                    .key_type(KeyType::Range)
                    .build(),
            )
            .provisioned_throughput(
                ProvisionedThroughput::builder()
                    .read_capacity_units(10)
                    .write_capacity_units(10)
                    .build(),
            )
            .send()
            .await;

        match result {
            Ok(_) => Ok(TableStatus::New),
            Err(error) if error.is_resource_in_use_exception() => Ok(TableStatus::Existing),
            Err(error) => Err(error.into()),
        }
    }

    /// Create a new [`DynamoDbContext`] instance using the provided `config` parameters.
    pub async fn from_config(
        config: impl Into<Config>,
        table: TableName,
    ) -> Result<(Self, TableStatus), CreateTableError> {
        let db = DynamoDbContainer {
            client: Client::from_conf(config.into()),
            table,
        };

        let table_status = db.create_table_if_needed().await?;

        Ok((db, table_status))
    }

    /// Create a new [`DynamoDbContext`] instance using a LocalStack endpoint.
    ///
    /// Requires a [`LOCALSTACK_ENDPOINT`] environment variable with the endpoint address to connect
    /// to the LocalStack instance. Creates the table if it doesn't exist yet, reporting a
    /// [`TableStatus`] to indicate if the table was created or if it already exists.
    pub async fn with_localstack(table: TableName) -> Result<(Self, TableStatus), LocalStackError> {
        let base_config = aws_config::load_from_env().await;
        let config = aws_sdk_dynamodb::config::Builder::from(&base_config)
            .endpoint_resolver(localstack::get_endpoint()?)
            .build();

        Ok(DynamoDbContainer::from_config(config, table).await?)
    }
}

impl<E> DynamoDbContext<E>
where
    E: Clone + Sync + Send,
{
    fn create_context(
        db_tablestatus: (DynamoDbContainer, TableStatus),
        base_key: Vec<u8>,
        extra: E,
    ) -> (Self, TableStatus) {
        let storage = DynamoDbContext {
            db: db_tablestatus.0,
            base_key,
            extra,
        };
        (storage, db_tablestatus.1)
    }

    /// Create a new [`DynamoDbContext`] instance.
    pub async fn new(
        table: TableName,
        base_key: Vec<u8>,
        extra: E,
    ) -> Result<(Self, TableStatus), CreateTableError> {
        let db_tablestatus = DynamoDbContainer::new(table).await?;
        Ok(Self::create_context(db_tablestatus, base_key, extra))
    }

    pub async fn from_config(
        config: impl Into<Config>,
        table: TableName,
        base_key: Vec<u8>,
        extra: E,
    ) -> Result<(Self, TableStatus), CreateTableError> {
        let db_tablestatus = DynamoDbContainer::from_config(config, table).await?;
        Ok(Self::create_context(db_tablestatus, base_key, extra))
    }

    /// Create a new [`DynamoDbContext`] instance using a LocalStack endpoint.
    ///
    /// Requires a [`LOCALSTACK_ENDPOINT`] environment variable with the endpoint address to connect
    /// to the LocalStack instance. Creates the table if it doesn't exist yet, reporting a
    /// [`TableStatus`] to indicate if the table was created or if it already exists.
    pub async fn with_localstack(
        table: TableName,
        base_key: Vec<u8>,
        extra: E,
    ) -> Result<(Self, TableStatus), LocalStackError> {
        let db_tablestatus = DynamoDbContainer::with_localstack(table).await?;
        Ok(Self::create_context(db_tablestatus, base_key, extra))
    }

    /// Clone this [`DynamoDbContext`] while entering a sub-scope.
    ///
    /// The return context has its key prefix extended with `scope_prefix` and uses the
    /// `new_extra` instead of cloning the current extra data.
    pub fn clone_with_sub_scope<NewE: Clone + Send + Sync>(
        &self,
        scope_prefix: &impl Serialize,
        new_extra: NewE,
    ) -> Result<DynamoDbContext<NewE>, DynamoDbContextError> {
        Ok(DynamoDbContext {
            db: self.db.clone(),
            base_key: self.derive_key(scope_prefix)?,
            extra: new_extra,
        })
    }
}

/// Status of a table at the creation time of a [`DynamoDbContext`] instance.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum TableStatus {
    /// Table was created during the construction of the [`DynamoDbContext`] instance.
    New,
    /// Table already existed when the [`DynamoDbContext`] instance was created.
    Existing,
}

/// A DynamoDB table name.
///
/// Table names must follow some [naming
/// rules](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.NamingRules),
/// so this type ensures that they are properly validated.
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TableName(String);

impl FromStr for TableName {
    type Err = InvalidTableName;

    fn from_str(string: &str) -> Result<Self, Self::Err> {
        ensure!(string.len() >= 3, InvalidTableName::TooShort);
        ensure!(string.len() <= 255, InvalidTableName::TooLong);
        ensure!(
            string
                .chars()
                .all(|character| character.is_ascii_alphanumeric()
                    || character == '.'
                    || character == '-'
                    || character == '_'),
            InvalidTableName::InvalidCharacter
        );

        Ok(TableName(string.to_owned()))
    }
}

impl AsRef<String> for TableName {
    fn as_ref(&self) -> &String {
        &self.0
    }
}

/// Error when validating a table name.
#[derive(Debug, Error)]
pub enum InvalidTableName {
    #[error("Table name must have at least 3 characters")]
    TooShort,

    #[error("Table name must be at most 63 characters")]
    TooLong,

    #[error("Table name must only contain lowercase letters, numbers, periods and hyphens")]
    InvalidCharacter,
}

/// Errors that occur when using [`DynamoDbContext`].
#[derive(Debug, Error)]
pub enum DynamoDbContextError {
    #[error(transparent)]
    Put(#[from] Box<SdkError<aws_sdk_dynamodb::error::PutItemError>>),

    #[error(transparent)]
    Get(#[from] Box<SdkError<aws_sdk_dynamodb::error::GetItemError>>),

    #[error(transparent)]
    Delete(#[from] Box<SdkError<aws_sdk_dynamodb::error::DeleteItemError>>),

    #[error(transparent)]
    BatchWriteItem(#[from] Box<SdkError<aws_sdk_dynamodb::error::BatchWriteItemError>>),

    #[error(transparent)]
    Query(#[from] Box<SdkError<aws_sdk_dynamodb::error::QueryError>>),

    #[error("The stored key attribute is missing")]
    MissingKey,

    #[error("Key was stored as {0}, but it was expected to be stored as a binary blob")]
    WrongKeyType(String),

    #[error("The stored value attribute is missing")]
    MissingValue,

    #[error("Value was stored as {0}, but it was expected to be stored as a binary blob")]
    WrongValueType(String),

    #[error(transparent)]
    BcsError(#[from] bcs::Error),

    #[error(transparent)]
    CreateTable(#[from] Box<CreateTableError>),

    #[error("Item not found in DynamoDB table: {0}")]
    NotFound(String),
}

impl<InnerError> From<SdkError<InnerError>> for DynamoDbContextError
where
    DynamoDbContextError: From<Box<SdkError<InnerError>>>,
{
    fn from(error: SdkError<InnerError>) -> Self {
        Box::new(error).into()
    }
}

impl From<CreateTableError> for DynamoDbContextError {
    fn from(error: CreateTableError) -> Self {
        Box::new(error).into()
    }
}

impl DynamoDbContextError {
    /// Create a [`DynamoDbContextError::WrongKeyType`] instance based on the returned value type.
    ///
    /// # Panics
    ///
    /// If the value type is in the correct type, a binary blob.
    pub fn wrong_key_type(value: &AttributeValue) -> Self {
        DynamoDbContextError::WrongKeyType(Self::type_description_of(value))
    }

    /// Create a [`DynamoDbContextError::WrongValueType`] instance based on the returned value type.
    ///
    /// # Panics
    ///
    /// If the value type is in the correct type, a binary blob.
    pub fn wrong_value_type(value: &AttributeValue) -> Self {
        DynamoDbContextError::WrongValueType(Self::type_description_of(value))
    }

    fn type_description_of(value: &AttributeValue) -> String {
        match value {
            AttributeValue::B(_) => unreachable!("creating an error type for the correct type"),
            AttributeValue::Bool(_) => "a boolean",
            AttributeValue::Bs(_) => "a list of binary blobs",
            AttributeValue::L(_) => "a list",
            AttributeValue::M(_) => "a map",
            AttributeValue::N(_) => "a number",
            AttributeValue::Ns(_) => "a list of numbers",
            AttributeValue::Null(_) => "a null value",
            AttributeValue::S(_) => "a string",
            AttributeValue::Ss(_) => "a list of strings",
            _ => "an unknown type",
        }
        .to_owned()
    }
}

impl From<DynamoDbContextError> for crate::views::ViewError {
    fn from(error: DynamoDbContextError) -> Self {
        Self::ContextError {
            backend: "DynamoDB".to_string(),
            error: error.to_string(),
        }
    }
}

/// Error when creating a table for a new [`DynamoDbContext`] instance.
#[derive(Debug, Error)]
pub enum CreateTableError {
    #[error(transparent)]
    CreateTable(#[from] SdkError<aws_sdk_dynamodb::error::CreateTableError>),
}

/// Error when creating a [`DynamoDbContext`] instance using a LocalStack instance.
#[derive(Debug, Error)]
pub enum LocalStackError {
    #[error(transparent)]
    Endpoint(#[from] localstack::EndpointError),

    #[error(transparent)]
    CreateTable(#[from] Box<CreateTableError>),
}

impl From<CreateTableError> for LocalStackError {
    fn from(error: CreateTableError) -> Self {
        Box::new(error).into()
    }
}

/// A helper trait to add a `SdkError<CreateTableError>::is_resource_in_use_exception()` method.
trait IsResourceInUseException {
    /// Check if the error is a resource is in use exception.
    fn is_resource_in_use_exception(&self) -> bool;
}

impl IsResourceInUseException for SdkError<aws_sdk_dynamodb::error::CreateTableError> {
    fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            self,
            SdkError::ServiceError {
                err: aws_sdk_dynamodb::error::CreateTableError {
                    kind: aws_sdk_dynamodb::error::CreateTableErrorKind::ResourceInUseException(_),
                    ..
                },
                ..
            }
        )
    }
}
