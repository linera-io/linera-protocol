chain-id: func() -> chain-id
next-block-height: func() -> block-height
application-id: func() -> application-id
application-parameters: func() -> list<u8>
read-chain-balance: func() -> amount
read-owner-balance: func(owner: owner) -> amount
read-owner-balances: func() -> list<tuple<owner, amount>>
read-balance-owners: func() -> list<owner>
read-system-timestamp: func() -> timestamp

log: func(message: string, level: log-level)

enum log-level {
    trace,
    debug,
    info,
    warn,
    error,
}

try-query-application: func(application: application-id, query: list<u8>) -> list<u8>

record application-id {
    bytecode-id: bytecode-id,
    creation: message-id,
}

type bytecode-id = message-id

record message-id {
    chain-id: chain-id,
    height: block-height,
    index: u32,
}

type owner = crypto-hash
type chain-id = crypto-hash
type block-height = u64
type timestamp = u64

record crypto-hash {
    part1: u64,
    part2: u64,
    part3: u64,
    part4: u64,
}

record amount {
    lower-half: u64,
    upper-half: u64,
}
