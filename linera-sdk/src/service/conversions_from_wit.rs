// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types generated by [`wit_bindgen_rust`] to types declared in [`linera_sdk`].
use super::queryable_system::{
    self, PollViewFindKeyValues, PollViewFindKeys, PollSimpleLoad, PollSimpleLock, PollViewLock, PollViewReadKeyBytes,
};
use crate::{
    ApplicationId, BlockHeight, BytecodeId, ChainId, CryptoHash, EffectId, QueryContext,
    SystemBalance,
};
use linera_views::views::ViewError;
use std::task::Poll;

impl From<super::QueryContext> for QueryContext {
    fn from(application_context: super::QueryContext) -> Self {
        QueryContext {
            chain_id: ChainId(application_context.chain_id.into()),
        }
    }
}

impl From<super::CryptoHash> for CryptoHash {
    fn from(hash_value: super::CryptoHash) -> Self {
        CryptoHash::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<queryable_system::CryptoHash> for CryptoHash {
    fn from(hash_value: queryable_system::CryptoHash) -> Self {
        CryptoHash::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<queryable_system::ApplicationId> for ApplicationId {
    fn from(application_id: queryable_system::ApplicationId) -> Self {
        ApplicationId {
            bytecode: BytecodeId(application_id.bytecode_id.into()),
            creation: application_id.creation.into(),
        }
    }
}

impl From<queryable_system::EffectId> for EffectId {
    fn from(effect_id: queryable_system::EffectId) -> Self {
        EffectId {
            chain_id: ChainId(effect_id.chain_id.into()),
            height: BlockHeight(effect_id.height),
            index: effect_id.index,
        }
    }
}

impl From<queryable_system::SystemBalance> for SystemBalance {
    fn from(balance: queryable_system::SystemBalance) -> Self {
        let value = ((balance.upper_half as u128) << 64) | (balance.lower_half as u128);
        SystemBalance(value)
    }
}

impl From<PollViewLock> for Poll<Result<(), ViewError>> {
    fn from(poll_view_lock: PollViewLock) -> Self {
        match poll_view_lock {
            PollViewLock::Ready(Ok(())) => Poll::Ready(Ok(())),
            PollViewLock::Ready(Err(error)) => Poll::Ready(Err(ViewError::WasmHostGuestError(error))),
            PollViewLock::Pending => Poll::Pending,
        }
    }
}

impl From<PollSimpleLoad> for Poll<Result<Vec<u8>, String>> {
    fn from(poll_simple_load: PollSimpleLoad) -> Poll<Result<Vec<u8>, String>> {
        match poll_get {
            PollSimpleLoad::Ready(bytes) => Poll::Ready(bytes),
            PollSimpleLoad::Pending => Poll::Pending,
        }
    }
}

impl From<PollViewReadKeyBytes> for Poll<Result<Option<Vec<u8>>, ViewError>> {
    fn from(poll_view_read_key_bytes: PollViewReadKeyBytes) -> Self {
        match poll_view_read_key_bytes {
            PollViewReadKeyBytes::Ready(Ok(bytes)) => Poll::Ready(Ok(bytes)),
            PollViewReadKeyBytes::Ready(Err(error)) => {
                Poll::Ready(Err(ViewError::WasmHostGuestError(error)))
            }
            PollViewReadKeyBytes::Pending => Poll::Pending,
        }
    }
}

impl From<PollViewFindKeys> for Poll<Result<Vec<Vec<u8>>, ViewError>> {
    fn from(poll_view_find_keys: PollViewFindKeys) -> Self {
        match poll_view_find_keys {
            PollViewFindKeys::Ready(Ok(keys)) => Poll::Ready(Ok(keys)),
            PollViewFindKeys::Ready(Err(error)) => {
                Poll::Ready(Err(ViewError::WasmHostGuestError(error)))
            }
            PollViewFindKeys::Pending => Poll::Pending,
        }
    }
}

impl From<PollViewFindKeyValues> for Poll<Result<Vec<(Vec<u8>, Vec<u8>)>, ViewError>> {
    fn from(poll_view_find_key_values: PollViewFindKeyValues) -> Self {
        match poll_view_find_key_values {
            PollViewFindKeyValues::Ready(Ok(key_values)) => Poll::Ready(Ok(key_values)),
            PollViewFindKeyValues::Ready(Err(error)) => {
                Poll::Ready(Err(ViewError::WasmHostGuestError(error)))
            }
            PollViewFindKeyValues::Pending => Poll::Pending,
        }
    }
}

impl From<PollSimpleLock> for Poll<Result<(), ViewError>> {
    fn from(poll_simple_lock: PollSimpleLock) -> Self {
        match poll_simple_lock {
            PollSimpleLock::Ready(Ok(())) => Poll::Ready(Ok(())),
            PollSimpleLock::Ready(Err(error)) => Poll::Ready(Err(ViewError::WasmHostGuestError(error))),
            PollSimpleLock::Pending => Poll::Pending,
        }
    }
}
