// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Types for the exported futures for the contract endpoints.
//!
//! Each type is called by the code generated by [`wit-bindgen-guest-rust`] when the host calls the guest
//! Wasm module's respective endpoint. This module contains the code to forward the call to the
//! contract type that implements [`Contract`].

use crate::{
    contract::system_api, views::ViewStorageContext, Contract, SimpleStateStorage, ViewStateStorage,
};
use async_trait::async_trait;
use futures::TryFutureExt;
use linera_views::view::RootView;
use serde::{de::DeserializeOwned, Serialize};
use std::{future::Future, mem};

/// The storage APIs used by a contract.
#[async_trait]
pub trait ContractStateStorage<Application> {
    /// Loads the `Application` state and locks it for writing.
    async fn load_and_lock() -> Application;

    /// Stores the `Application` state and unlocks it for reads and writes.
    async fn store_and_unlock(state: Application);

    /// Executes an `operation` with the `Application` state.
    ///
    /// The state is only stored back in storage if the `operation` succeeds. Otherwise, the error
    /// is returned as a [`String`].
    async fn execute_with_state<Operation, AsyncOperation, Success, Error>(
        operation: Operation,
    ) -> Result<Success, String>
    where
        Operation: FnOnce(Application) -> AsyncOperation,
        AsyncOperation: Future<Output = Result<(Application, Success), Error>> + Send,
        Application: Send,
        Operation: Send,
        Success: Send + 'static,
        Error: ToString + 'static,
    {
        let application = Self::load_and_lock().await;

        operation(application)
            .and_then(|(application, result)| async move {
                Self::store_and_unlock(application).await;
                Ok(result)
            })
            .await
            .map_err(|error| error.to_string())
    }

    /// Executes an `operation`, persisting the `Application` `state` before execution and reloading
    /// the `state` afterwards.
    async fn execute_with_released_state<Operation>(
        state: &mut Application,
        operation: impl FnOnce() -> Operation + Send,
    ) -> Operation::Output
    where
        Operation: Future + Send,
        Operation::Output: Send;
}

#[async_trait]
impl<Application> ContractStateStorage<Application> for SimpleStateStorage<Application>
where
    Application: Contract + Default + DeserializeOwned + Serialize + Send + 'static,
{
    async fn load_and_lock() -> Application {
        system_api::load_and_lock().expect("Failed to lock contract state")
    }

    async fn store_and_unlock(state: Application) {
        system_api::store_and_unlock(state).await;
    }

    async fn execute_with_released_state<Operation>(
        state: &mut Application,
        operation: impl FnOnce() -> Operation + Send,
    ) -> Operation::Output
    where
        Operation: Future + Send,
        Operation::Output: Send,
    {
        Self::store_and_unlock(mem::take(state)).await;
        let result = operation().await;
        *state = Self::load_and_lock().await;
        result
    }
}

#[async_trait]
impl<Application> ContractStateStorage<Application> for ViewStateStorage<Application>
where
    Application: Contract + RootView<ViewStorageContext> + Send + 'static,
{
    async fn load_and_lock() -> Application {
        system_api::load_and_lock_view().await
    }

    async fn store_and_unlock(state: Application) {
        system_api::store_and_unlock_view(state).await;
    }

    async fn execute_with_released_state<Operation>(
        state: &mut Application,
        operation: impl FnOnce() -> Operation + Send,
    ) -> Operation::Output
    where
        Operation: Future + Send,
        Operation::Output: Send,
    {
        state.save().await.expect("Failed to save view state");
        let result = operation().await;
        *state = Self::load_and_lock().await;
        result
    }
}
