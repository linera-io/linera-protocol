// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Functions and types that interface with the system API available to application contracts but
//! that shouldn't be used by applications directly.

use super::super::contract_system_api as wit;
use crate::{util::yield_once, views::ViewStorageContext};
use linera_base::identifiers::{ApplicationId, SessionId};
use linera_views::views::{RootView, View};
use serde::{de::DeserializeOwned, Serialize};

/// Retrieves the current application parameters.
pub fn current_application_parameters() -> Vec<u8> {
    wit::application_parameters()
}

/// Deserializes the application state or creates a new one if the `bytes` vector is empty.
fn deserialize_state<State>(bytes: Vec<u8>) -> State
where
    State: Default + DeserializeOwned,
{
    if bytes.is_empty() {
        State::default()
    } else {
        bcs::from_bytes(&bytes).expect("Invalid application state")
    }
}

/// Loads the application state and locks it for writes.
pub fn load_and_lock<State>() -> Option<State>
where
    State: Default + DeserializeOwned,
{
    let state_bytes = wit::load_and_lock()?;
    Some(deserialize_state(state_bytes))
}

/// Saves the application state and unlocks it.
pub async fn store_and_unlock<State>(state: State)
where
    State: Serialize,
{
    wit::store_and_unlock(&bcs::to_bytes(&state).expect("State serialization failed"));
}

/// Loads the application state and locks it for writes.
pub async fn load_and_lock_view<State: View<ViewStorageContext>>() -> State {
    let promise = wit::Lock::new();
    yield_once().await;
    promise.wait();
    load_view_using::<State>().await
}

/// Helper function to load the application state or create a new one if it doesn't exist.
pub async fn load_view_using<State: View<ViewStorageContext>>() -> State {
    let context = ViewStorageContext::default();
    let r = State::load(context).await;
    r.expect("Failed to load application state")
}

/// Saves the application state and unlocks it.
pub async fn store_and_unlock_view<State: RootView<ViewStorageContext>>(mut state: State) {
    state.save().await.expect("save operation failed");
}

/// Calls another application without persisting the current application's state.
///
/// Use the `call_application` method generated by the [`linera-sdk::contract`] macro in order to
/// guarantee the state is up-to-date in reentrant calls.
pub fn call_application_without_persisting_state(
    authenticated: bool,
    application: ApplicationId,
    argument: &[u8],
    forwarded_sessions: Vec<SessionId>,
) -> (Vec<u8>, Vec<SessionId>) {
    let forwarded_sessions = forwarded_sessions
        .into_iter()
        .map(wit::SessionId::from)
        .collect::<Vec<_>>();

    wit::try_call_application(
        authenticated,
        application.into(),
        argument,
        &forwarded_sessions,
    )
    .into()
}

/// Calls another application's session without persisting the current application's state.
///
/// Use the `call_session` method generated by the [`linera-sdk::contract`] macro in order to
/// guarantee the state is up-to-date in reentrant calls.
pub fn call_session_without_persisting_state(
    authenticated: bool,
    session: SessionId,
    argument: &[u8],
    forwarded_sessions: Vec<SessionId>,
) -> (Vec<u8>, Vec<SessionId>) {
    let forwarded_sessions = forwarded_sessions
        .into_iter()
        .map(wit::SessionId::from)
        .collect::<Vec<_>>();

    wit::try_call_session(authenticated, session.into(), argument, &forwarded_sessions).into()
}
