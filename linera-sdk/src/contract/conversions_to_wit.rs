// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types declared in [`linera_sdk`] to types generated by [`wit_bindgen_rust`].

use super::writable_system as system;
use crate::{
    ApplicationCallResult, ApplicationId, ChannelName, CryptoHash, Destination, EffectId,
    ExecutionResult, Session, SessionCallResult, SessionId,
};
use std::task::Poll;

impl From<CryptoHash> for system::CryptoHash {
    fn from(hash_value: CryptoHash) -> Self {
        let parts = <[u64; 8]>::from(hash_value);

        system::CryptoHash {
            part1: parts[0],
            part2: parts[1],
            part3: parts[2],
            part4: parts[3],
            part5: parts[4],
            part6: parts[5],
            part7: parts[6],
            part8: parts[7],
        }
    }
}

impl From<CryptoHash> for super::CryptoHash {
    fn from(crypto_hash: CryptoHash) -> Self {
        let parts = <[u64; 8]>::from(crypto_hash);

        super::CryptoHash {
            part1: parts[0],
            part2: parts[1],
            part3: parts[2],
            part4: parts[3],
            part5: parts[4],
            part6: parts[5],
            part7: parts[6],
            part8: parts[7],
        }
    }
}

impl From<ApplicationId> for system::ApplicationId {
    fn from(application_id: ApplicationId) -> system::ApplicationId {
        system::ApplicationId {
            bytecode_id: application_id.bytecode.0.into(),
            creation: application_id.creation.into(),
        }
    }
}

impl From<SessionId> for system::SessionId {
    fn from(session_id: SessionId) -> Self {
        system::SessionId {
            application_id: session_id.application_id.into(),
            kind: session_id.kind,
            index: session_id.index,
        }
    }
}

impl From<EffectId> for system::EffectId {
    fn from(effect_id: EffectId) -> Self {
        system::EffectId {
            chain_id: effect_id.chain_id.0.into(),
            height: effect_id.height.0,
            index: effect_id.index,
        }
    }
}

impl From<log::Level> for system::LogLevel {
    fn from(level: log::Level) -> Self {
        match level {
            log::Level::Trace => system::LogLevel::Trace,
            log::Level::Debug => system::LogLevel::Debug,
            log::Level::Info => system::LogLevel::Info,
            log::Level::Warn => system::LogLevel::Warn,
            log::Level::Error => system::LogLevel::Error,
        }
    }
}

impl From<ApplicationCallResult> for super::ApplicationCallResult {
    fn from(result: ApplicationCallResult) -> Self {
        let create_sessions = result
            .create_sessions
            .into_iter()
            .map(super::Session::from)
            .collect();

        super::ApplicationCallResult {
            create_sessions,
            execution_result: result.execution_result.into(),
            value: result.value,
        }
    }
}

impl From<Session> for super::Session {
    fn from(new_session: Session) -> Self {
        super::Session {
            kind: new_session.kind,
            data: new_session.data,
        }
    }
}

impl From<SessionCallResult> for super::SessionCallResult {
    fn from(result: SessionCallResult) -> Self {
        super::SessionCallResult {
            inner: result.inner.into(),
            data: result.data,
        }
    }
}

impl From<ExecutionResult> for super::ExecutionResult {
    fn from(result: ExecutionResult) -> Self {
        let effects = result
            .effects
            .into_iter()
            .map(|(destination, effect)| (destination.into(), effect))
            .collect();

        let subscribe = result
            .subscribe
            .into_iter()
            .map(|(channel_id, chain_id)| (channel_id.into(), chain_id.0.into()))
            .collect();

        let unsubscribe = result
            .unsubscribe
            .into_iter()
            .map(|(channel_id, chain_id)| (channel_id.into(), chain_id.0.into()))
            .collect();

        super::ExecutionResult {
            effects,
            subscribe,
            unsubscribe,
        }
    }
}

impl From<Destination> for super::Destination {
    fn from(destination: Destination) -> Self {
        match destination {
            Destination::Recipient(chain_id) => super::Destination::Recipient(chain_id.0.into()),
            Destination::Subscribers(channel_id) => {
                super::Destination::Subscribers(channel_id.into())
            }
        }
    }
}

impl From<ChannelName> for super::ChannelName {
    fn from(name: ChannelName) -> Self {
        super::ChannelName { name: name.0 }
    }
}

impl From<Poll<Result<ExecutionResult, String>>> for super::PollExecutionResult {
    fn from(poll: Poll<Result<ExecutionResult, String>>) -> Self {
        use super::PollExecutionResult;
        match poll {
            Poll::Pending => PollExecutionResult::Pending,
            Poll::Ready(Ok(result)) => PollExecutionResult::Ready(Ok(result.into())),
            Poll::Ready(Err(message)) => PollExecutionResult::Ready(Err(message)),
        }
    }
}

impl From<Poll<Result<ApplicationCallResult, String>>> for super::PollCallApplication {
    fn from(poll: Poll<Result<ApplicationCallResult, String>>) -> Self {
        use super::PollCallApplication;
        match poll {
            Poll::Pending => PollCallApplication::Pending,
            Poll::Ready(Ok(result)) => PollCallApplication::Ready(Ok(result.into())),
            Poll::Ready(Err(message)) => PollCallApplication::Ready(Err(message)),
        }
    }
}

impl From<Poll<Result<SessionCallResult, String>>> for super::PollCallSession {
    fn from(poll: Poll<Result<SessionCallResult, String>>) -> Self {
        use super::PollCallSession;
        match poll {
            Poll::Pending => PollCallSession::Pending,
            Poll::Ready(Ok(result)) => PollCallSession::Ready(Ok(result.into())),
            Poll::Ready(Err(message)) => PollCallSession::Ready(Err(message)),
        }
    }
}
