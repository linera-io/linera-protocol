// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types generated by [`wit-bindgen-guest-rust`] to types declared in [`linera-sdk`].

use linera_base::{
    crypto::{CryptoHash, PublicKey},
    data_types::{Amount, BlockHeight, TimeDelta},
    identifiers::{ApplicationId, BytecodeId, ChainId, MessageId, Owner},
    ownership::{ChainOwnership, TimeoutConfig},
};

use super::wit_system_api;

impl From<wit_system_api::MessageId> for MessageId {
    fn from(message_id: wit_system_api::MessageId) -> Self {
        MessageId {
            chain_id: message_id.chain_id.into(),
            height: BlockHeight(message_id.height),
            index: message_id.index,
        }
    }
}

impl From<wit_system_api::ApplicationId> for ApplicationId {
    fn from(application_id: wit_system_api::ApplicationId) -> Self {
        ApplicationId {
            bytecode_id: BytecodeId::new(application_id.bytecode_id.into()),
            creation: application_id.creation.into(),
        }
    }
}

impl From<wit_system_api::CryptoHash> for Owner {
    fn from(crypto_hash: wit_system_api::CryptoHash) -> Self {
        Owner(crypto_hash.into())
    }
}

impl From<wit_system_api::CryptoHash> for ChainId {
    fn from(hash_value: wit_system_api::CryptoHash) -> Self {
        ChainId(hash_value.into())
    }
}

impl From<wit_system_api::CryptoHash> for CryptoHash {
    fn from(hash_value: wit_system_api::CryptoHash) -> Self {
        CryptoHash::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
        ])
    }
}

impl From<wit_system_api::Amount> for Amount {
    fn from(balance: wit_system_api::Amount) -> Self {
        let value = ((balance.upper_half as u128) << 64) | (balance.lower_half as u128);
        Amount::from_attos(value)
    }
}

impl From<wit_system_api::PublicKey> for PublicKey {
    fn from(guest: wit_system_api::PublicKey) -> PublicKey {
        let wit_system_api::PublicKey {
            part1,
            part2,
            part3,
            part4,
        } = guest;
        [part1, part2, part3, part4].into()
    }
}

impl From<wit_system_api::TimeoutConfig> for TimeoutConfig {
    fn from(guest: wit_system_api::TimeoutConfig) -> TimeoutConfig {
        let wit_system_api::TimeoutConfig {
            fast_round_duration_us,
            base_timeout_us,
            timeout_increment_us,
            fallback_duration_us,
        } = guest;
        TimeoutConfig {
            fast_round_duration: fast_round_duration_us.map(TimeDelta::from_micros),
            base_timeout: TimeDelta::from_micros(base_timeout_us),
            timeout_increment: TimeDelta::from_micros(timeout_increment_us),
            fallback_duration: TimeDelta::from_micros(fallback_duration_us),
        }
    }
}

impl From<wit_system_api::ChainOwnershipResult> for ChainOwnership {
    fn from(guest: wit_system_api::ChainOwnershipResult) -> ChainOwnership {
        let wit_system_api::ChainOwnershipResult {
            super_owners,
            owners,
            multi_leader_rounds,
            timeout_config,
        } = guest;
        ChainOwnership {
            super_owners: super_owners
                .into_iter()
                .map(|pub_key| {
                    let pub_key = PublicKey::from(pub_key);
                    (Owner::from(pub_key), pub_key)
                })
                .collect(),
            owners: owners
                .into_iter()
                .map(|(pub_key, weight)| {
                    let pub_key = PublicKey::from(pub_key);
                    (Owner::from(pub_key), (pub_key, weight))
                })
                .collect(),
            multi_leader_rounds,
            timeout_config: timeout_config.into(),
        }
    }
}
