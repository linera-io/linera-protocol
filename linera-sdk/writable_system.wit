chain-id: func() -> chain-id
application-id: func() -> application-id
read-system-balance: func() -> system-balance
read-system-timestamp: func() -> timestamp

log: func(message: string, level: log-level)

enum log-level {
    trace,
    debug,
    info,
    warn,
    error,
}

resource simple-load {
    static new: func() -> simple-load
    poll: func() -> poll-simple-load
}

resource simple-load-and-lock {
    static new: func() -> simple-load-and-lock
    poll: func() -> poll-simple-load
}

variant poll-simple-load {
    pending,
    ready(result<list<u8>, string>),
}

simple-store-and-unlock: func(value: list<u8>) -> bool

resource view-lock {
    static new: func() -> view-lock
    poll: func() -> poll-view-lock
}

variant poll-view-lock {
    pending,
    ready(result<unit, string>),
}

resource view-read-key-bytes {
    static new: func(key: list<u8>) -> view-read-key-bytes
    poll: func() -> poll-view-read-key-bytes
}

variant poll-view-read-key-bytes {
    pending,
    ready(result<option<list<u8>>, string>),
}

resource view-find-keys {
    static new: func(prefix: list<u8>) -> view-find-keys
    poll: func() -> poll-view-find-keys
}

variant poll-view-find-keys {
    pending,
    ready(result<list<list<u8>>, string>),
}

resource view-find-key-values {
    static new: func(prefix: list<u8>) -> view-find-key-values
    poll: func() -> poll-view-find-key-values
}

variant poll-view-find-key-values {
    pending,
    ready(result<list<tuple<list<u8>,list<u8>>>, string>),
}

variant view-write-operation {
    delete(list<u8>),
    deleteprefix(list<u8>),
    put(tuple<list<u8>,list<u8>>),
}

resource view-write-batch {
    static new: func(key: list<view-write-operation>) -> view-write-batch
    poll: func() -> poll-view-write-batch
}

variant poll-view-write-batch {
    pending,
    ready(result<unit, string>),
}

resource try-call-application {
    static new: func(
        authenticated: bool,
        application: application-id,
        argument: list<u8>,
        forwarded-sessions: list<session-id>,
    ) -> try-call-application

    poll: func() -> poll-call-result
}

resource try-call-session {
    static new: func(
        authenticated: bool,
        session: session-id,
        argument: list<u8>,
        forwarded-sessions: list<session-id>,
    ) -> try-call-application

    poll: func() -> poll-call-result
}

variant poll-call-result {
    pending,
    ready(result<call-result, string>),
}

record call-result {
    value: list<u8>,
    sessions: list<session-id>,
}

record session-id {
    application-id: application-id,
    kind: u64,
    index: u64,
}

record application-id {
    bytecode-id: bytecode-id,
    creation: effect-id,
}

type bytecode-id = effect-id

record effect-id {
    chain-id: chain-id,
    height: block-height,
    index: u64,
}

type chain-id = crypto-hash
type block-height = u64
type timestamp = u64

record crypto-hash {
    part1: u64,
    part2: u64,
    part3: u64,
    part4: u64,
    part5: u64,
    part6: u64,
    part7: u64,
    part8: u64,
}

record system-balance {
    lower-half: u64,
    upper-half: u64,
}
