package linera:app;

interface service-system-api {
    get-chain-id: func() -> chain-id;
    get-next-block-height: func() -> block-height;
    get-application-id: func() -> application-id;
    get-application-creator-chain-id: func() -> chain-id;
    get-application-parameters: func() -> list<u8>;
    read-chain-balance: func() -> amount;
    read-owner-balance: func(owner: account-owner) -> amount;
    read-system-timestamp: func() -> timestamp;
    read-owner-balances: func() -> list<tuple<account-owner, amount>>;
    read-balance-owners: func() -> list<account-owner>;
    try-query-application: func(application: application-id, argument: list<u8>) -> list<u8>;
    fetch-url: func(url: string) -> list<u8>;
    query-service: func(application-id: application-id, query: list<u8>) -> list<u8>;
    http-post: func(query: string, content-type: string, payload: list<u8>) -> list<u8>;
    read-data-blob: func(hash: crypto-hash) -> list<u8>;
    assert-data-blob-exists: func(hash: crypto-hash);
    assert-before: func(timestamp: timestamp);
    log: func(message: string, level: log-level);

    variant account-owner {
        user(owner),
        application(application-id),
    }

    record amount {
        inner0: u128,
    }

    record application-id {
        bytecode-id: bytecode-id,
        creation: message-id,
    }

    record block-height {
        inner0: u64,
    }

    record bytecode-id {
        contract-blob-hash: crypto-hash,
        service-blob-hash: crypto-hash,
    }

    record chain-id {
        inner0: crypto-hash,
    }

    record crypto-hash {
        part1: u64,
        part2: u64,
        part3: u64,
        part4: u64,
    }

    enum log-level {
        error,
        warn,
        info,
        debug,
        trace,
    }

    record message-id {
        chain-id: chain-id,
        height: block-height,
        index: u32,
    }

    record owner {
        inner0: crypto-hash,
    }

    record timestamp {
        inner0: u64,
    }

    type u128 = tuple<u64, u64>;
}
