// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Types for the exported futures for the application endpoints.
//!
//! Each type is called by the code generated by [`wit_bindgen_rust`] when the host calls the guest
//! WASM module's respective endpoint. This module contains the code to forward the call to the
//! application type that implements [`linera_sdk::Application`].

use super::application;
use wit_bindgen_guest_rust::Handle;

/// Asynchronous endpoint to call [`linera_sdk::Application::execute_operation`].
pub struct ExecuteOperation;

impl application::ExecuteOperation for ExecuteOperation {
    fn new(_context: application::OperationContext, _operation: Vec<u8>) -> Handle<Self> {
        Handle::new(ExecuteOperation)
    }

    fn poll(&self) -> application::PollExecutionResult {
        todo!();
    }
}

/// Asynchronous endpoint to call [`linera_sdk::Application::execute_effect`].
pub struct ExecuteEffect;

impl application::ExecuteEffect for ExecuteEffect {
    fn new(_context: application::EffectContext, _effect: Vec<u8>) -> Handle<Self> {
        Handle::new(ExecuteEffect)
    }

    fn poll(&self) -> application::PollExecutionResult {
        todo!();
    }
}

/// Asynchronous endpoint to call [`linera_sdk::Application::call_application`].
pub struct CallApplication;

impl application::CallApplication for CallApplication {
    fn new(
        _context: application::CalleeContext,
        _argument: Vec<u8>,
        _forwarded_sessions: Vec<application::SessionId>,
    ) -> Handle<Self> {
        Handle::new(CallApplication)
    }

    fn poll(&self) -> application::PollCallApplication {
        todo!();
    }
}

/// Asynchronous endpoint to call [`linera_sdk::Application::call_session`].
pub struct CallSession;

impl application::CallSession for CallSession {
    fn new(
        _context: application::CalleeContext,
        _session: application::Session,
        _argument: Vec<u8>,
        _forwarded_sessions: Vec<application::SessionId>,
    ) -> Handle<Self> {
        Handle::new(CallSession)
    }

    fn poll(&self) -> application::PollCallSession {
        todo!();
    }
}

/// Asynchronous endpoint to call [`linera_sdk::Application::query_application`].
pub struct QueryApplication;

impl application::QueryApplication for QueryApplication {
    fn new(_context: application::QueryContext, _argument: Vec<u8>) -> Handle<Self> {
        Handle::new(QueryApplication)
    }

    fn poll(&self) -> application::PollQuery {
        todo!();
    }
}
