// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types generated by [`wit_bindgen_rust`] to types declared in [`linera_sdk`].

use super::{
    queryable_system::{self, PollLoad},
    service,
};
use linera_sdk::{
    ApplicationId, BlockHeight, BytecodeId, ChainId, EffectId, HashValue, QueryContext,
    SystemBalance,
};
use std::task::Poll;

impl From<service::QueryContext> for QueryContext {
    fn from(application_context: service::QueryContext) -> Self {
        QueryContext {
            chain_id: ChainId(application_context.chain_id.into()),
        }
    }
}

impl From<service::HashValue> for HashValue {
    fn from(hash_value: service::HashValue) -> Self {
        HashValue::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<queryable_system::HashValue> for HashValue {
    fn from(hash_value: queryable_system::HashValue) -> Self {
        HashValue::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<queryable_system::ApplicationId> for ApplicationId {
    fn from(application_id: queryable_system::ApplicationId) -> Self {
        ApplicationId {
            bytecode: BytecodeId(application_id.bytecode_id.into()),
            creation: application_id.creation.into(),
        }
    }
}

impl From<queryable_system::EffectId> for EffectId {
    fn from(effect_id: queryable_system::EffectId) -> Self {
        EffectId {
            chain_id: ChainId(effect_id.chain_id.into()),
            height: BlockHeight(effect_id.height),
            index: effect_id.index,
        }
    }
}

impl From<queryable_system::SystemBalance> for SystemBalance {
    fn from(balance: queryable_system::SystemBalance) -> Self {
        let value = ((balance.upper_half as u128) << 64) | (balance.lower_half as u128);
        SystemBalance(value)
    }
}

impl From<PollLoad> for Poll<Result<Vec<u8>, String>> {
    fn from(poll_get: PollLoad) -> Poll<Result<Vec<u8>, String>> {
        match poll_get {
            PollLoad::Ready(bytes) => Poll::Ready(bytes),
            PollLoad::Pending => Poll::Pending,
        }
    }
}
