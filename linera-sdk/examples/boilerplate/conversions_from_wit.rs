// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types generated by [`wit_bindgen_rust`] to types declared in [`linera_sdk`].

use super::{application, system};
use linera_sdk::{
    ApplicationId, BlockHeight, CalleeContext, ChainId, EffectContext, EffectId, HashValue,
    OperationContext, QueryContext, Session, SessionId,
};
use std::task::Poll;

impl From<application::OperationContext> for OperationContext {
    fn from(application_context: application::OperationContext) -> Self {
        OperationContext {
            chain_id: ChainId(application_context.chain_id.into()),
            height: BlockHeight(application_context.height),
            index: application_context.index,
        }
    }
}

impl From<application::EffectContext> for EffectContext {
    fn from(application_context: application::EffectContext) -> Self {
        EffectContext {
            chain_id: ChainId(application_context.chain_id.into()),
            height: BlockHeight(application_context.height),
            effect_id: application_context.effect_id.into(),
        }
    }
}

impl From<application::EffectId> for EffectId {
    fn from(effect_id: application::EffectId) -> Self {
        EffectId {
            chain_id: ChainId(effect_id.chain_id.into()),
            height: BlockHeight(effect_id.height),
            index: effect_id.index,
        }
    }
}

impl From<application::CalleeContext> for CalleeContext {
    fn from(application_context: application::CalleeContext) -> Self {
        CalleeContext {
            chain_id: ChainId(application_context.chain_id.into()),
            authenticated_caller_id: application_context
                .authenticated_caller_id
                .map(ApplicationId),
        }
    }
}

impl From<application::QueryContext> for QueryContext {
    fn from(application_context: application::QueryContext) -> Self {
        QueryContext {
            chain_id: ChainId(application_context.chain_id.into()),
        }
    }
}

impl From<application::SessionId> for SessionId {
    fn from(session_id: application::SessionId) -> Self {
        SessionId {
            application_id: ApplicationId(session_id.application_id),
            kind: session_id.kind,
            index: session_id.index,
        }
    }
}

impl From<application::Session> for Session {
    fn from(session: application::Session) -> Self {
        Session {
            kind: session.kind,
            data: session.data,
        }
    }
}

impl From<application::HashValue> for HashValue {
    fn from(hash_value: application::HashValue) -> Self {
        HashValue::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<system::PollLoad> for Poll<Result<Vec<u8>, String>> {
    fn from(poll_get: system::PollLoad) -> Poll<Result<Vec<u8>, String>> {
        match poll_get {
            system::PollLoad::Ready(bytes) => Poll::Ready(bytes),
            system::PollLoad::Pending => Poll::Pending,
        }
    }
}
