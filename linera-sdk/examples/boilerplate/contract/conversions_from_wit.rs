// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types generated by [`wit_bindgen_rust`] to types declared in [`linera_sdk`].

use super::{
    contract,
    writable_system::{self, PollLoad},
};
use linera_sdk::{
    ApplicationId, BlockHeight, BytecodeId, CalleeContext, ChainId, EffectContext, EffectId,
    HashValue, OperationContext, Session, SessionId, SystemBalance,
};
use std::task::Poll;

impl From<contract::OperationContext> for OperationContext {
    fn from(application_context: contract::OperationContext) -> Self {
        OperationContext {
            chain_id: ChainId(application_context.chain_id.into()),
            height: BlockHeight(application_context.height),
            index: application_context.index,
        }
    }
}

impl From<contract::EffectContext> for EffectContext {
    fn from(application_context: contract::EffectContext) -> Self {
        EffectContext {
            chain_id: ChainId(application_context.chain_id.into()),
            height: BlockHeight(application_context.height),
            effect_id: application_context.effect_id.into(),
        }
    }
}

impl From<contract::EffectId> for EffectId {
    fn from(effect_id: contract::EffectId) -> Self {
        EffectId {
            chain_id: ChainId(effect_id.chain_id.into()),
            height: BlockHeight(effect_id.height),
            index: effect_id.index,
        }
    }
}

impl From<writable_system::EffectId> for EffectId {
    fn from(effect_id: writable_system::EffectId) -> Self {
        EffectId {
            chain_id: ChainId(effect_id.chain_id.into()),
            height: BlockHeight(effect_id.height),
            index: effect_id.index,
        }
    }
}

impl From<contract::CalleeContext> for CalleeContext {
    fn from(application_context: contract::CalleeContext) -> Self {
        CalleeContext {
            chain_id: ChainId(application_context.chain_id.into()),
            authenticated_caller_id: application_context
                .authenticated_caller_id
                .map(ApplicationId::from),
        }
    }
}

impl From<contract::ApplicationId> for ApplicationId {
    fn from(application_id: contract::ApplicationId) -> Self {
        ApplicationId {
            bytecode: BytecodeId(application_id.bytecode_id.into()),
            creation: application_id.creation.into(),
        }
    }
}

impl From<writable_system::ApplicationId> for ApplicationId {
    fn from(application_id: writable_system::ApplicationId) -> Self {
        ApplicationId {
            bytecode: BytecodeId(application_id.bytecode_id.into()),
            creation: application_id.creation.into(),
        }
    }
}

impl From<contract::SessionId> for SessionId {
    fn from(session_id: contract::SessionId) -> Self {
        SessionId {
            application_id: session_id.application_id.into(),
            kind: session_id.kind,
            index: session_id.index,
        }
    }
}

impl From<contract::Session> for Session {
    fn from(session: contract::Session) -> Self {
        Session {
            kind: session.kind,
            data: session.data,
        }
    }
}

impl From<contract::HashValue> for HashValue {
    fn from(hash_value: contract::HashValue) -> Self {
        HashValue::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<writable_system::HashValue> for HashValue {
    fn from(hash_value: writable_system::HashValue) -> Self {
        HashValue::from([
            hash_value.part1,
            hash_value.part2,
            hash_value.part3,
            hash_value.part4,
            hash_value.part5,
            hash_value.part6,
            hash_value.part7,
            hash_value.part8,
        ])
    }
}

impl From<writable_system::SystemBalance> for SystemBalance {
    fn from(balance: writable_system::SystemBalance) -> Self {
        let value = ((balance.upper_half as u128) << 64) | (balance.lower_half as u128);
        SystemBalance(value)
    }
}

impl From<PollLoad> for Poll<Result<Vec<u8>, String>> {
    fn from(poll_get: PollLoad) -> Poll<Result<Vec<u8>, String>> {
        match poll_get {
            PollLoad::Ready(bytes) => Poll::Ready(bytes),
            PollLoad::Pending => Poll::Pending,
        }
    }
}
