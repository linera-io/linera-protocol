// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Types for the exported futures for the service endpoints.
//!
//! Each type is called by the code generated by [`wit_bindgen_rust`] when the host calls the guest
//! WASM module's respective endpoint. This module contains the code to forward the call to the
//! service type that implements [`linera_sdk::Service`].

use super::{super::ApplicationState, service};
use linera_sdk::{ExportedFuture, Service};
use wit_bindgen_guest_rust::Handle;

pub struct QueryApplication {
    future: ExportedFuture<Result<Vec<u8>, String>>,
}

impl service::QueryApplication for QueryApplication {
    fn new(context: service::QueryContext, argument: Vec<u8>) -> Handle<Self> {
        Handle::new(QueryApplication {
            future: ExportedFuture::new(async move {
                let application = ApplicationState::load().await;
                application
                    .query_application(&context.into(), &argument)
                    .await
                    .map_err(|error| error.to_string())
            }),
        })
    }

    fn poll(&self) -> service::PollQuery {
        self.future.poll()
    }
}
